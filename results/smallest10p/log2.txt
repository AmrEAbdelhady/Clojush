Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -12 -12 -78] -78] [[-20 81 -20 -20] -20] [[24 24 -47 24] -47] [[-24 -67 -24 -24] -67] [[-26 34 34 34] -26] [[-28 72 -28 -28] -28] [[55 55 55 -54] -54] [[-76 -76 -6 -76] -76] [[9 64 9 9] 9] [[54 -42 54 54] -42] [(96 96 96 96) 96] [(-77 -77 -77 -77) -77] [(50 50 50 50) 50] [(78 78 78 78) 78] [(68 68 68 68) 68] [(32 34 13 85) 13] [(93 25 3 96) 3] [(75 32 1 3) 1] [(96 58 20 39) 20] [(8 94 4 34) 4] [(78 76 29 19) 19] [(29 56 55 15) 15] [(67 99 63 33) 33] [(41 64 42 30) 30] [(96 25 93 14) 14] [(77 73 49 44) 44] [(12 61 86 21) 12] [(30 12 1 56) 1] [(88 9 15 13) 9] [(41 67 77 66) 41] [(69 36 47 0) 0] [(38 94 41 49) 38] [(52 10 66 13) 10] [(32 88 92 17) 17] [(36 75 48 73) 36] [(15 59 73 27) 15] [(87 -57 -1 -34) -57] [(-24 -95 76 -47) -95] [(-38 -72 -53 -73) -73] [(-66 32 40 56) -66] [(-6 88 -11 43) -11] [(-57 -12 49 4) -57] [(86 48 -95 -38) -95] [(-53 75 28 -31) -53] [(-11 -56 40 -3) -56] [(-79 82 -48 -5) -79] [(92 -6 19 92) -6] [(-65 37 25 82) -65] [(-19 -71 -5 -76) -76] [(25 -73 97 -73) -73] [(-70 -60 -28 -46) -70] [(37 -68 -33 -69) -69] [(-19 82 5 49) -19] [(29 95 25 -98) -98] [(59 1 -48 -62) -62] [(-92 11 85 80) -92] [(72 55 -4 -70) -70] [(8 61 -76 -30) -76] [(-67 31 4 -65) -67] [(4 3 -16 -44) -44] [(-45 49 85 20) -45] [(43 20 89 88) 20] [(-48 -89 -24 -27) -89] [(22 -68 18 44) -68] [(-2 -59 99 31) -59] [(-52 34 -96 -45) -96] [(-47 16 -17 -71) -71] [(-18 84 48 0) -18] [(-72 -43 96 72) -72] [(97 -55 92 63) -55] [(-94 85 -42 39) -94] [(20 -19 41 -77) -77] [(78 -81 -43 79) -81] [(-73 -59 -69 -78) -78] [(77 32 -46 30) -46] [(90 60 56 -25) -25] [(-38 52 69 -35) -38] [(-4 -68 8 -85) -85] [(61 -26 99 -66) -66] [(-78 -7 -28 -39) -78] [(60 -56 -48 -32) -56] [(0 -60 15 84) -60] [(81 -61 -34 25) -61] [(-30 41 99 -49) -49] [(-52 -73 -26 -85) -85] [(-59 32 -83 32) -83] [(-72 73 24 95) -72] [(56 9 -14 1) -14] [(-43 97 73 -73) -73] [(-21 -7 62 93) -21] [(-19 -89 19 13) -89] [(-81 2 -91 -47) -91] [(-59 -55 -88 4) -88] [(37 25 36 40) 25] [(25 33 -55 -97) -97])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-12 -12 -12 -78] -78]
Train Case:   6 | Input/Output: [[-20 81 -20 -20] -20]
Train Case:   7 | Input/Output: [[24 24 -47 24] -47]
Train Case:   8 | Input/Output: [[-24 -67 -24 -24] -67]
Train Case:   9 | Input/Output: [[-26 34 34 34] -26]
Train Case:  10 | Input/Output: [[-28 72 -28 -28] -28]
Train Case:  11 | Input/Output: [[55 55 55 -54] -54]
Train Case:  12 | Input/Output: [[-76 -76 -6 -76] -76]
Train Case:  13 | Input/Output: [[9 64 9 9] 9]
Train Case:  14 | Input/Output: [[54 -42 54 54] -42]
Train Case:  15 | Input/Output: [(96 96 96 96) 96]
Train Case:  16 | Input/Output: [(-77 -77 -77 -77) -77]
Train Case:  17 | Input/Output: [(50 50 50 50) 50]
Train Case:  18 | Input/Output: [(78 78 78 78) 78]
Train Case:  19 | Input/Output: [(68 68 68 68) 68]
Train Case:  20 | Input/Output: [(32 34 13 85) 13]
Train Case:  21 | Input/Output: [(93 25 3 96) 3]
Train Case:  22 | Input/Output: [(75 32 1 3) 1]
Train Case:  23 | Input/Output: [(96 58 20 39) 20]
Train Case:  24 | Input/Output: [(8 94 4 34) 4]
Train Case:  25 | Input/Output: [(78 76 29 19) 19]
Train Case:  26 | Input/Output: [(29 56 55 15) 15]
Train Case:  27 | Input/Output: [(67 99 63 33) 33]
Train Case:  28 | Input/Output: [(41 64 42 30) 30]
Train Case:  29 | Input/Output: [(96 25 93 14) 14]
Train Case:  30 | Input/Output: [(77 73 49 44) 44]
Train Case:  31 | Input/Output: [(12 61 86 21) 12]
Train Case:  32 | Input/Output: [(30 12 1 56) 1]
Train Case:  33 | Input/Output: [(88 9 15 13) 9]
Train Case:  34 | Input/Output: [(41 67 77 66) 41]
Train Case:  35 | Input/Output: [(69 36 47 0) 0]
Train Case:  36 | Input/Output: [(38 94 41 49) 38]
Train Case:  37 | Input/Output: [(52 10 66 13) 10]
Train Case:  38 | Input/Output: [(32 88 92 17) 17]
Train Case:  39 | Input/Output: [(36 75 48 73) 36]
Train Case:  40 | Input/Output: [(15 59 73 27) 15]
Train Case:  41 | Input/Output: [(87 -57 -1 -34) -57]
Train Case:  42 | Input/Output: [(-24 -95 76 -47) -95]
Train Case:  43 | Input/Output: [(-38 -72 -53 -73) -73]
Train Case:  44 | Input/Output: [(-66 32 40 56) -66]
Train Case:  45 | Input/Output: [(-6 88 -11 43) -11]
Train Case:  46 | Input/Output: [(-57 -12 49 4) -57]
Train Case:  47 | Input/Output: [(86 48 -95 -38) -95]
Train Case:  48 | Input/Output: [(-53 75 28 -31) -53]
Train Case:  49 | Input/Output: [(-11 -56 40 -3) -56]
Train Case:  50 | Input/Output: [(-79 82 -48 -5) -79]
Train Case:  51 | Input/Output: [(92 -6 19 92) -6]
Train Case:  52 | Input/Output: [(-65 37 25 82) -65]
Train Case:  53 | Input/Output: [(-19 -71 -5 -76) -76]
Train Case:  54 | Input/Output: [(25 -73 97 -73) -73]
Train Case:  55 | Input/Output: [(-70 -60 -28 -46) -70]
Train Case:  56 | Input/Output: [(37 -68 -33 -69) -69]
Train Case:  57 | Input/Output: [(-19 82 5 49) -19]
Train Case:  58 | Input/Output: [(29 95 25 -98) -98]
Train Case:  59 | Input/Output: [(59 1 -48 -62) -62]
Train Case:  60 | Input/Output: [(-92 11 85 80) -92]
Train Case:  61 | Input/Output: [(72 55 -4 -70) -70]
Train Case:  62 | Input/Output: [(8 61 -76 -30) -76]
Train Case:  63 | Input/Output: [(-67 31 4 -65) -67]
Train Case:  64 | Input/Output: [(4 3 -16 -44) -44]
Train Case:  65 | Input/Output: [(-45 49 85 20) -45]
Train Case:  66 | Input/Output: [(43 20 89 88) 20]
Train Case:  67 | Input/Output: [(-48 -89 -24 -27) -89]
Train Case:  68 | Input/Output: [(22 -68 18 44) -68]
Train Case:  69 | Input/Output: [(-2 -59 99 31) -59]
Train Case:  70 | Input/Output: [(-52 34 -96 -45) -96]
Train Case:  71 | Input/Output: [(-47 16 -17 -71) -71]
Train Case:  72 | Input/Output: [(-18 84 48 0) -18]
Train Case:  73 | Input/Output: [(-72 -43 96 72) -72]
Train Case:  74 | Input/Output: [(97 -55 92 63) -55]
Train Case:  75 | Input/Output: [(-94 85 -42 39) -94]
Train Case:  76 | Input/Output: [(20 -19 41 -77) -77]
Train Case:  77 | Input/Output: [(78 -81 -43 79) -81]
Train Case:  78 | Input/Output: [(-73 -59 -69 -78) -78]
Train Case:  79 | Input/Output: [(77 32 -46 30) -46]
Train Case:  80 | Input/Output: [(90 60 56 -25) -25]
Train Case:  81 | Input/Output: [(-38 52 69 -35) -38]
Train Case:  82 | Input/Output: [(-4 -68 8 -85) -85]
Train Case:  83 | Input/Output: [(61 -26 99 -66) -66]
Train Case:  84 | Input/Output: [(-78 -7 -28 -39) -78]
Train Case:  85 | Input/Output: [(60 -56 -48 -32) -56]
Train Case:  86 | Input/Output: [(0 -60 15 84) -60]
Train Case:  87 | Input/Output: [(81 -61 -34 25) -61]
Train Case:  88 | Input/Output: [(-30 41 99 -49) -49]
Train Case:  89 | Input/Output: [(-52 -73 -26 -85) -85]
Train Case:  90 | Input/Output: [(-59 32 -83 32) -83]
Train Case:  91 | Input/Output: [(-72 73 24 95) -72]
Train Case:  92 | Input/Output: [(56 9 -14 1) -14]
Train Case:  93 | Input/Output: [(-43 97 73 -73) -73]
Train Case:  94 | Input/Output: [(-21 -7 62 93) -21]
Train Case:  95 | Input/Output: [(-19 -89 19 13) -89]
Train Case:  96 | Input/Output: [(-81 2 -91 -47) -91]
Train Case:  97 | Input/Output: [(-59 -55 -88 4) -88]
Train Case:  98 | Input/Output: [(37 25 36 40) 25]
Train Case:  99 | Input/Output: [(25 33 -55 -97) -97]
Test Case:   0 | Input/Output: [[-36 -96 -96 -96] -96]
Test Case:   1 | Input/Output: [[92 92 39 92] 39]
Test Case:   2 | Input/Output: [[41 41 41 -78] -78]
Test Case:   3 | Input/Output: [[52 -34 -34 -34] -34]
Test Case:   4 | Input/Output: [[10 -26 10 10] -26]
Test Case:   5 | Input/Output: [[-26 -95 -26 -26] -95]
Test Case:   6 | Input/Output: [[2 -9 -9 -9] -9]
Test Case:   7 | Input/Output: [[27 54 54 54] 27]
Test Case:   8 | Input/Output: [[67 67 67 -45] -45]
Test Case:   9 | Input/Output: [[70 70 70 -63] -63]
Test Case:  10 | Input/Output: [[-93 -93 32 -93] -93]
Test Case:  11 | Input/Output: [[68 68 -100 68] -100]
Test Case:  12 | Input/Output: [[-31 -90 -31 -31] -90]
Test Case:  13 | Input/Output: [[-54 37 -54 -54] -54]
Test Case:  14 | Input/Output: [[-12 86 86 86] -12]
Test Case:  15 | Input/Output: [[-98 47 47 47] -98]
Test Case:  16 | Input/Output: [[-33 -73 -33 -33] -73]
Test Case:  17 | Input/Output: [[-35 90 -35 -35] -35]
Test Case:  18 | Input/Output: [[-28 71 -28 -28] -28]
Test Case:  19 | Input/Output: [[33 -28 -28 -28] -28]
Test Case:  20 | Input/Output: [[-62 -62 -62 -66] -66]
Test Case:  21 | Input/Output: [[28 28 66 28] 28]
Test Case:  22 | Input/Output: [[48 48 98 48] 48]
Test Case:  23 | Input/Output: [[21 -2 -2 -2] -2]
Test Case:  24 | Input/Output: [[-77 -77 -77 -3] -77]
Test Case:  25 | Input/Output: [[66 66 72 66] 66]
Test Case:  26 | Input/Output: [[-67 -67 -67 -67] -67]
Test Case:  27 | Input/Output: [[-11 16 16 16] -11]
Test Case:  28 | Input/Output: [[34 34 23 34] 23]
Test Case:  29 | Input/Output: [[100 97 97 97] 97]
Test Case:  30 | Input/Output: [[85 79 85 85] 79]
Test Case:  31 | Input/Output: [[-41 -41 43 -41] -41]
Test Case:  32 | Input/Output: [[27 27 56 27] 27]
Test Case:  33 | Input/Output: [[-49 -49 -49 -73] -73]
Test Case:  34 | Input/Output: [[-69 21 21 21] -69]
Test Case:  35 | Input/Output: [[-34 98 98 98] -34]
Test Case:  36 | Input/Output: [[-14 -14 -14 -91] -91]
Test Case:  37 | Input/Output: [[-86 -82 -82 -82] -86]
Test Case:  38 | Input/Output: [[-78 -78 -78 -78] -78]
Test Case:  39 | Input/Output: [[-92 68 68 68] -92]
Test Case:  40 | Input/Output: [[-6 -6 9 -6] -6]
Test Case:  41 | Input/Output: [[-7 -87 -87 -87] -87]
Test Case:  42 | Input/Output: [[-99 -99 -91 -99] -99]
Test Case:  43 | Input/Output: [[-1 61 -1 -1] -1]
Test Case:  44 | Input/Output: [[61 61 -73 61] -73]
Test Case:  45 | Input/Output: [[-67 35 -67 -67] -67]
Test Case:  46 | Input/Output: [[99 -32 99 99] -32]
Test Case:  47 | Input/Output: [[25 85 85 85] 25]
Test Case:  48 | Input/Output: [[-87 -64 -64 -64] -87]
Test Case:  49 | Input/Output: [[-16 97 97 97] -16]
Test Case:  50 | Input/Output: [[65 65 96 65] 65]
Test Case:  51 | Input/Output: [[54 54 54 76] 54]
Test Case:  52 | Input/Output: [[-43 -48 -48 -48] -48]
Test Case:  53 | Input/Output: [[-17 -17 -17 -100] -100]
Test Case:  54 | Input/Output: [[-14 -14 -14 -43] -43]
Test Case:  55 | Input/Output: [[-55 -55 48 -55] -55]
Test Case:  56 | Input/Output: [[-76 -76 -80 -76] -80]
Test Case:  57 | Input/Output: [[-89 -89 -68 -89] -89]
Test Case:  58 | Input/Output: [[-82 -82 -82 -19] -82]
Test Case:  59 | Input/Output: [[51 -84 51 51] -84]
Test Case:  60 | Input/Output: [[38 38 38 13] 13]
Test Case:  61 | Input/Output: [[40 40 40 -16] -16]
Test Case:  62 | Input/Output: [[-92 -92 -92 -97] -97]
Test Case:  63 | Input/Output: [[-12 -12 -12 6] -12]
Test Case:  64 | Input/Output: [[-91 59 59 59] -91]
Test Case:  65 | Input/Output: [[88 88 -60 88] -60]
Test Case:  66 | Input/Output: [[-20 86 -20 -20] -20]
Test Case:  67 | Input/Output: [[-33 -33 56 -33] -33]
Test Case:  68 | Input/Output: [[-77 -10 -10 -10] -77]
Test Case:  69 | Input/Output: [[-49 -95 -95 -95] -95]
Test Case:  70 | Input/Output: [[19 -97 19 19] -97]
Test Case:  71 | Input/Output: [[51 97 97 97] 51]
Test Case:  72 | Input/Output: [[81 81 69 81] 69]
Test Case:  73 | Input/Output: [[73 89 73 73] 73]
Test Case:  74 | Input/Output: [[-2 64 -2 -2] -2]
Test Case:  75 | Input/Output: [[-63 -18 -63 -63] -63]
Test Case:  76 | Input/Output: [[19 19 19 66] 19]
Test Case:  77 | Input/Output: [[-65 -65 -65 -15] -65]
Test Case:  78 | Input/Output: [[79 79 79 -63] -63]
Test Case:  79 | Input/Output: [[-71 -71 -71 20] -71]
Test Case:  80 | Input/Output: [[15 15 31 15] 15]
Test Case:  81 | Input/Output: [[-14 65 65 65] -14]
Test Case:  82 | Input/Output: [[46 -85 -85 -85] -85]
Test Case:  83 | Input/Output: [[79 -33 -33 -33] -33]
Test Case:  84 | Input/Output: [[-88 -88 -88 -88] -88]
Test Case:  85 | Input/Output: [[33 36 36 36] 33]
Test Case:  86 | Input/Output: [[29 29 29 94] 29]
Test Case:  87 | Input/Output: [[-38 -38 -38 72] -38]
Test Case:  88 | Input/Output: [[62 62 62 48] 48]
Test Case:  89 | Input/Output: [[-40 -40 -40 43] -40]
Test Case:  90 | Input/Output: [[30 8 30 30] 8]
Test Case:  91 | Input/Output: [[50 -87 -87 -87] -87]
Test Case:  92 | Input/Output: [[-56 98 98 98] -56]
Test Case:  93 | Input/Output: [[8 8 26 8] 8]
Test Case:  94 | Input/Output: [[89 89 89 -25] -25]
Test Case:  95 | Input/Output: [[29 29 -54 29] -54]
Test Case:  96 | Input/Output: [[-55 -55 -96 -55] -96]
Test Case:  97 | Input/Output: [[14 14 14 52] 14]
Test Case:  98 | Input/Output: [[-68 55 55 55] -68]
Test Case:  99 | Input/Output: [[-74 -74 27 -74] -74]
Test Case: 100 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 101 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 102 | Input/Output: [(58 58 58 58) 58]
Test Case: 103 | Input/Output: [(100 100 100 100) 100]
Test Case: 104 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 105 | Input/Output: [(98 98 98 98) 98]
Test Case: 106 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 107 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 108 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 109 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 110 | Input/Output: [(97 97 97 97) 97]
Test Case: 111 | Input/Output: [(85 85 85 85) 85]
Test Case: 112 | Input/Output: [(61 61 61 61) 61]
Test Case: 113 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 114 | Input/Output: [(0 0 0 0) 0]
Test Case: 115 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 116 | Input/Output: [(61 61 61 61) 61]
Test Case: 117 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 118 | Input/Output: [(44 44 44 44) 44]
Test Case: 119 | Input/Output: [(47 47 47 47) 47]
Test Case: 120 | Input/Output: [(46 46 46 46) 46]
Test Case: 121 | Input/Output: [(71 71 71 71) 71]
Test Case: 122 | Input/Output: [(22 22 22 22) 22]
Test Case: 123 | Input/Output: [(67 67 67 67) 67]
Test Case: 124 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 125 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 126 | Input/Output: [(75 75 75 75) 75]
Test Case: 127 | Input/Output: [(93 93 93 93) 93]
Test Case: 128 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 129 | Input/Output: [(93 93 93 93) 93]
Test Case: 130 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 131 | Input/Output: [(63 63 63 63) 63]
Test Case: 132 | Input/Output: [(39 39 39 39) 39]
Test Case: 133 | Input/Output: [(28 28 28 28) 28]
Test Case: 134 | Input/Output: [(1 1 1 1) 1]
Test Case: 135 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 136 | Input/Output: [(44 44 44 44) 44]
Test Case: 137 | Input/Output: [(48 48 48 48) 48]
Test Case: 138 | Input/Output: [(93 93 93 93) 93]
Test Case: 139 | Input/Output: [(20 20 20 20) 20]
Test Case: 140 | Input/Output: [(75 75 75 75) 75]
Test Case: 141 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 142 | Input/Output: [(42 42 42 42) 42]
Test Case: 143 | Input/Output: [(82 82 82 82) 82]
Test Case: 144 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 145 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 146 | Input/Output: [(55 55 55 55) 55]
Test Case: 147 | Input/Output: [(86 86 86 86) 86]
Test Case: 148 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 149 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 150 | Input/Output: [(38 38 38 38) 38]
Test Case: 151 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 152 | Input/Output: [(17 17 17 17) 17]
Test Case: 153 | Input/Output: [(91 91 91 91) 91]
Test Case: 154 | Input/Output: [(34 34 34 34) 34]
Test Case: 155 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 156 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 157 | Input/Output: [(62 62 62 62) 62]
Test Case: 158 | Input/Output: [(28 28 28 28) 28]
Test Case: 159 | Input/Output: [(22 22 22 22) 22]
Test Case: 160 | Input/Output: [(91 91 91 91) 91]
Test Case: 161 | Input/Output: [(15 15 15 15) 15]
Test Case: 162 | Input/Output: [(60 60 60 60) 60]
Test Case: 163 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 164 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 165 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 166 | Input/Output: [(69 69 69 69) 69]
Test Case: 167 | Input/Output: [(98 98 98 98) 98]
Test Case: 168 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 169 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 170 | Input/Output: [(59 59 59 59) 59]
Test Case: 171 | Input/Output: [(97 97 97 97) 97]
Test Case: 172 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 173 | Input/Output: [(42 42 42 42) 42]
Test Case: 174 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 175 | Input/Output: [(97 97 97 97) 97]
Test Case: 176 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 177 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 178 | Input/Output: [(68 68 68 68) 68]
Test Case: 179 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 180 | Input/Output: [(17 17 17 17) 17]
Test Case: 181 | Input/Output: [(100 100 100 100) 100]
Test Case: 182 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 183 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 184 | Input/Output: [(35 35 35 35) 35]
Test Case: 185 | Input/Output: [(87 87 87 87) 87]
Test Case: 186 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 187 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 188 | Input/Output: [(25 25 25 25) 25]
Test Case: 189 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 190 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 191 | Input/Output: [(65 65 65 65) 65]
Test Case: 192 | Input/Output: [(47 47 47 47) 47]
Test Case: 193 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 194 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 195 | Input/Output: [(76 76 76 76) 76]
Test Case: 196 | Input/Output: [(88 88 88 88) 88]
Test Case: 197 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 198 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 199 | Input/Output: [(73 73 73 73) 73]
Test Case: 200 | Input/Output: [(1 94 0 76) 0]
Test Case: 201 | Input/Output: [(24 52 55 11) 11]
Test Case: 202 | Input/Output: [(83 30 22 35) 22]
Test Case: 203 | Input/Output: [(28 3 2 30) 2]
Test Case: 204 | Input/Output: [(87 64 7 37) 7]
Test Case: 205 | Input/Output: [(9 27 27 40) 9]
Test Case: 206 | Input/Output: [(10 9 17 16) 9]
Test Case: 207 | Input/Output: [(91 60 14 18) 14]
Test Case: 208 | Input/Output: [(56 88 12 74) 12]
Test Case: 209 | Input/Output: [(38 16 61 76) 16]
Test Case: 210 | Input/Output: [(4 54 22 16) 4]
Test Case: 211 | Input/Output: [(15 11 74 30) 11]
Test Case: 212 | Input/Output: [(65 71 89 86) 65]
Test Case: 213 | Input/Output: [(59 13 62 1) 1]
Test Case: 214 | Input/Output: [(66 80 36 50) 36]
Test Case: 215 | Input/Output: [(23 93 30 20) 20]
Test Case: 216 | Input/Output: [(72 3 16 71) 3]
Test Case: 217 | Input/Output: [(99 91 68 96) 68]
Test Case: 218 | Input/Output: [(53 86 7 21) 7]
Test Case: 219 | Input/Output: [(94 37 57 93) 37]
Test Case: 220 | Input/Output: [(4 50 2 32) 2]
Test Case: 221 | Input/Output: [(72 70 3 69) 3]
Test Case: 222 | Input/Output: [(60 80 95 87) 60]
Test Case: 223 | Input/Output: [(0 69 16 16) 0]
Test Case: 224 | Input/Output: [(3 57 57 21) 3]
Test Case: 225 | Input/Output: [(81 86 74 89) 74]
Test Case: 226 | Input/Output: [(89 25 93 96) 25]
Test Case: 227 | Input/Output: [(2 30 5 29) 2]
Test Case: 228 | Input/Output: [(87 86 6 48) 6]
Test Case: 229 | Input/Output: [(94 26 83 98) 26]
Test Case: 230 | Input/Output: [(40 75 53 52) 40]
Test Case: 231 | Input/Output: [(86 70 45 23) 23]
Test Case: 232 | Input/Output: [(22 39 28 40) 22]
Test Case: 233 | Input/Output: [(4 23 88 71) 4]
Test Case: 234 | Input/Output: [(82 50 45 94) 45]
Test Case: 235 | Input/Output: [(0 12 73 81) 0]
Test Case: 236 | Input/Output: [(26 38 84 85) 26]
Test Case: 237 | Input/Output: [(51 86 62 18) 18]
Test Case: 238 | Input/Output: [(97 12 67 38) 12]
Test Case: 239 | Input/Output: [(61 48 35 26) 26]
Test Case: 240 | Input/Output: [(31 18 98 13) 13]
Test Case: 241 | Input/Output: [(81 99 86 50) 50]
Test Case: 242 | Input/Output: [(10 66 27 96) 10]
Test Case: 243 | Input/Output: [(47 74 93 34) 34]
Test Case: 244 | Input/Output: [(66 60 80 72) 60]
Test Case: 245 | Input/Output: [(11 54 92 41) 11]
Test Case: 246 | Input/Output: [(5 56 54 60) 5]
Test Case: 247 | Input/Output: [(77 59 94 92) 59]
Test Case: 248 | Input/Output: [(20 100 87 62) 20]
Test Case: 249 | Input/Output: [(94 29 40 6) 6]
Test Case: 250 | Input/Output: [(74 0 35 69) 0]
Test Case: 251 | Input/Output: [(43 3 99 48) 3]
Test Case: 252 | Input/Output: [(76 82 69 86) 69]
Test Case: 253 | Input/Output: [(99 33 92 18) 18]
Test Case: 254 | Input/Output: [(6 78 83 65) 6]
Test Case: 255 | Input/Output: [(77 43 67 53) 43]
Test Case: 256 | Input/Output: [(28 22 48 85) 22]
Test Case: 257 | Input/Output: [(62 54 37 18) 18]
Test Case: 258 | Input/Output: [(4 1 32 35) 1]
Test Case: 259 | Input/Output: [(8 90 37 29) 8]
Test Case: 260 | Input/Output: [(11 100 28 73) 11]
Test Case: 261 | Input/Output: [(41 65 52 52) 41]
Test Case: 262 | Input/Output: [(79 87 29 64) 29]
Test Case: 263 | Input/Output: [(63 38 87 11) 11]
Test Case: 264 | Input/Output: [(57 11 34 94) 11]
Test Case: 265 | Input/Output: [(22 60 24 74) 22]
Test Case: 266 | Input/Output: [(2 19 20 72) 2]
Test Case: 267 | Input/Output: [(13 84 100 8) 8]
Test Case: 268 | Input/Output: [(96 42 44 21) 21]
Test Case: 269 | Input/Output: [(80 44 26 15) 15]
Test Case: 270 | Input/Output: [(29 83 69 97) 29]
Test Case: 271 | Input/Output: [(41 6 75 28) 6]
Test Case: 272 | Input/Output: [(15 63 23 34) 15]
Test Case: 273 | Input/Output: [(87 20 38 27) 20]
Test Case: 274 | Input/Output: [(3 36 19 51) 3]
Test Case: 275 | Input/Output: [(5 44 91 22) 5]
Test Case: 276 | Input/Output: [(48 12 61 13) 12]
Test Case: 277 | Input/Output: [(24 69 78 44) 24]
Test Case: 278 | Input/Output: [(17 62 43 19) 17]
Test Case: 279 | Input/Output: [(91 26 43 100) 26]
Test Case: 280 | Input/Output: [(37 46 58 27) 27]
Test Case: 281 | Input/Output: [(13 77 94 81) 13]
Test Case: 282 | Input/Output: [(84 71 64 27) 27]
Test Case: 283 | Input/Output: [(58 23 81 84) 23]
Test Case: 284 | Input/Output: [(88 73 99 87) 73]
Test Case: 285 | Input/Output: [(18 75 3 33) 3]
Test Case: 286 | Input/Output: [(9 71 71 69) 9]
Test Case: 287 | Input/Output: [(92 46 91 62) 46]
Test Case: 288 | Input/Output: [(84 87 3 44) 3]
Test Case: 289 | Input/Output: [(15 29 79 26) 15]
Test Case: 290 | Input/Output: [(46 18 39 3) 3]
Test Case: 291 | Input/Output: [(78 17 53 88) 17]
Test Case: 292 | Input/Output: [(47 28 66 15) 15]
Test Case: 293 | Input/Output: [(8 34 3 6) 3]
Test Case: 294 | Input/Output: [(78 61 43 48) 43]
Test Case: 295 | Input/Output: [(3 16 17 11) 3]
Test Case: 296 | Input/Output: [(51 20 55 41) 20]
Test Case: 297 | Input/Output: [(4 4 33 85) 4]
Test Case: 298 | Input/Output: [(29 79 19 35) 19]
Test Case: 299 | Input/Output: [(75 45 46 26) 26]
Test Case: 300 | Input/Output: [(42 75 22 3) 3]
Test Case: 301 | Input/Output: [(45 15 27 31) 15]
Test Case: 302 | Input/Output: [(44 90 25 55) 25]
Test Case: 303 | Input/Output: [(53 90 20 78) 20]
Test Case: 304 | Input/Output: [(89 13 59 94) 13]
Test Case: 305 | Input/Output: [(99 44 73 62) 44]
Test Case: 306 | Input/Output: [(36 8 49 99) 8]
Test Case: 307 | Input/Output: [(13 37 55 31) 13]
Test Case: 308 | Input/Output: [(3 27 79 19) 3]
Test Case: 309 | Input/Output: [(54 31 68 43) 31]
Test Case: 310 | Input/Output: [(42 0 86 31) 0]
Test Case: 311 | Input/Output: [(76 19 88 88) 19]
Test Case: 312 | Input/Output: [(68 97 13 18) 13]
Test Case: 313 | Input/Output: [(45 99 2 33) 2]
Test Case: 314 | Input/Output: [(32 56 17 29) 17]
Test Case: 315 | Input/Output: [(32 0 22 0) 0]
Test Case: 316 | Input/Output: [(17 54 76 59) 17]
Test Case: 317 | Input/Output: [(62 46 12 37) 12]
Test Case: 318 | Input/Output: [(93 90 71 61) 61]
Test Case: 319 | Input/Output: [(14 93 14 84) 14]
Test Case: 320 | Input/Output: [(61 50 33 24) 24]
Test Case: 321 | Input/Output: [(9 93 45 42) 9]
Test Case: 322 | Input/Output: [(59 79 98 32) 32]
Test Case: 323 | Input/Output: [(51 2 28 33) 2]
Test Case: 324 | Input/Output: [(18 66 78 36) 18]
Test Case: 325 | Input/Output: [(16 51 93 54) 16]
Test Case: 326 | Input/Output: [(59 46 73 99) 46]
Test Case: 327 | Input/Output: [(5 19 45 59) 5]
Test Case: 328 | Input/Output: [(22 8 54 36) 8]
Test Case: 329 | Input/Output: [(20 25 26 36) 20]
Test Case: 330 | Input/Output: [(8 2 25 4) 2]
Test Case: 331 | Input/Output: [(96 73 11 7) 7]
Test Case: 332 | Input/Output: [(21 36 0 73) 0]
Test Case: 333 | Input/Output: [(58 32 91 6) 6]
Test Case: 334 | Input/Output: [(19 29 8 85) 8]
Test Case: 335 | Input/Output: [(33 36 79 45) 33]
Test Case: 336 | Input/Output: [(55 43 93 70) 43]
Test Case: 337 | Input/Output: [(52 5 83 50) 5]
Test Case: 338 | Input/Output: [(47 96 88 20) 20]
Test Case: 339 | Input/Output: [(33 62 27 18) 18]
Test Case: 340 | Input/Output: [(2 82 38 28) 2]
Test Case: 341 | Input/Output: [(96 94 100 12) 12]
Test Case: 342 | Input/Output: [(24 5 87 99) 5]
Test Case: 343 | Input/Output: [(27 89 67 28) 27]
Test Case: 344 | Input/Output: [(92 22 54 81) 22]
Test Case: 345 | Input/Output: [(2 26 0 65) 0]
Test Case: 346 | Input/Output: [(99 3 59 6) 3]
Test Case: 347 | Input/Output: [(53 87 19 64) 19]
Test Case: 348 | Input/Output: [(15 77 86 57) 15]
Test Case: 349 | Input/Output: [(86 98 24 56) 24]
Test Case: 350 | Input/Output: [(74 40 11 87) 11]
Test Case: 351 | Input/Output: [(43 79 75 83) 43]
Test Case: 352 | Input/Output: [(82 12 61 65) 12]
Test Case: 353 | Input/Output: [(57 64 82 78) 57]
Test Case: 354 | Input/Output: [(45 72 42 55) 42]
Test Case: 355 | Input/Output: [(97 16 84 37) 16]
Test Case: 356 | Input/Output: [(82 50 31 75) 31]
Test Case: 357 | Input/Output: [(33 9 61 76) 9]
Test Case: 358 | Input/Output: [(87 100 58 18) 18]
Test Case: 359 | Input/Output: [(59 97 49 59) 49]
Test Case: 360 | Input/Output: [(99 41 43 68) 41]
Test Case: 361 | Input/Output: [(80 4 93 27) 4]
Test Case: 362 | Input/Output: [(53 6 30 6) 6]
Test Case: 363 | Input/Output: [(4 19 82 19) 4]
Test Case: 364 | Input/Output: [(62 38 19 51) 19]
Test Case: 365 | Input/Output: [(41 89 18 94) 18]
Test Case: 366 | Input/Output: [(52 23 15 77) 15]
Test Case: 367 | Input/Output: [(18 2 36 2) 2]
Test Case: 368 | Input/Output: [(81 78 68 62) 62]
Test Case: 369 | Input/Output: [(23 45 41 32) 23]
Test Case: 370 | Input/Output: [(96 44 80 55) 44]
Test Case: 371 | Input/Output: [(62 83 100 30) 30]
Test Case: 372 | Input/Output: [(77 12 67 48) 12]
Test Case: 373 | Input/Output: [(84 94 20 12) 12]
Test Case: 374 | Input/Output: [(23 51 0 20) 0]
Test Case: 375 | Input/Output: [(61 100 39 2) 2]
Test Case: 376 | Input/Output: [(36 78 76 69) 36]
Test Case: 377 | Input/Output: [(11 39 32 94) 11]
Test Case: 378 | Input/Output: [(49 15 90 55) 15]
Test Case: 379 | Input/Output: [(51 89 8 20) 8]
Test Case: 380 | Input/Output: [(70 49 41 4) 4]
Test Case: 381 | Input/Output: [(82 45 42 37) 37]
Test Case: 382 | Input/Output: [(32 91 39 19) 19]
Test Case: 383 | Input/Output: [(56 4 12 48) 4]
Test Case: 384 | Input/Output: [(57 96 3 11) 3]
Test Case: 385 | Input/Output: [(86 36 60 17) 17]
Test Case: 386 | Input/Output: [(55 73 87 82) 55]
Test Case: 387 | Input/Output: [(68 44 40 11) 11]
Test Case: 388 | Input/Output: [(39 98 37 23) 23]
Test Case: 389 | Input/Output: [(11 12 7 0) 0]
Test Case: 390 | Input/Output: [(93 99 18 100) 18]
Test Case: 391 | Input/Output: [(100 4 45 54) 4]
Test Case: 392 | Input/Output: [(16 79 32 8) 8]
Test Case: 393 | Input/Output: [(88 8 1 53) 1]
Test Case: 394 | Input/Output: [(89 72 0 64) 0]
Test Case: 395 | Input/Output: [(34 39 48 21) 21]
Test Case: 396 | Input/Output: [(58 86 62 86) 58]
Test Case: 397 | Input/Output: [(46 44 89 97) 44]
Test Case: 398 | Input/Output: [(77 58 35 65) 35]
Test Case: 399 | Input/Output: [(18 66 11 33) 11]
Test Case: 400 | Input/Output: [(9 76 -71 15) -71]
Test Case: 401 | Input/Output: [(-23 51 81 3) -23]
Test Case: 402 | Input/Output: [(-95 19 -60 -45) -95]
Test Case: 403 | Input/Output: [(-56 -3 -79 80) -79]
Test Case: 404 | Input/Output: [(64 84 -16 -79) -79]
Test Case: 405 | Input/Output: [(92 -44 -39 56) -44]
Test Case: 406 | Input/Output: [(-59 -98 -100 86) -100]
Test Case: 407 | Input/Output: [(7 8 -12 -11) -12]
Test Case: 408 | Input/Output: [(20 97 -52 -100) -100]
Test Case: 409 | Input/Output: [(-69 -68 0 -64) -69]
Test Case: 410 | Input/Output: [(61 -76 -3 16) -76]
Test Case: 411 | Input/Output: [(97 10 48 -69) -69]
Test Case: 412 | Input/Output: [(71 0 -58 33) -58]
Test Case: 413 | Input/Output: [(81 34 15 51) 15]
Test Case: 414 | Input/Output: [(-54 -77 27 96) -77]
Test Case: 415 | Input/Output: [(94 47 80 -19) -19]
Test Case: 416 | Input/Output: [(-29 -80 88 16) -80]
Test Case: 417 | Input/Output: [(45 64 79 24) 24]
Test Case: 418 | Input/Output: [(-69 -53 92 -8) -69]
Test Case: 419 | Input/Output: [(-21 82 77 89) -21]
Test Case: 420 | Input/Output: [(10 -79 -26 44) -79]
Test Case: 421 | Input/Output: [(96 10 -63 56) -63]
Test Case: 422 | Input/Output: [(86 61 -90 72) -90]
Test Case: 423 | Input/Output: [(-96 64 -57 42) -96]
Test Case: 424 | Input/Output: [(-96 -29 67 -80) -96]
Test Case: 425 | Input/Output: [(29 0 -62 -15) -62]
Test Case: 426 | Input/Output: [(-37 1 29 -70) -70]
Test Case: 427 | Input/Output: [(95 72 93 66) 66]
Test Case: 428 | Input/Output: [(86 -81 78 -48) -81]
Test Case: 429 | Input/Output: [(-54 63 -41 60) -54]
Test Case: 430 | Input/Output: [(18 -34 -37 89) -37]
Test Case: 431 | Input/Output: [(99 -35 -18 59) -35]
Test Case: 432 | Input/Output: [(34 51 -16 -65) -65]
Test Case: 433 | Input/Output: [(45 -36 19 70) -36]
Test Case: 434 | Input/Output: [(98 27 77 -100) -100]
Test Case: 435 | Input/Output: [(-49 -80 6 90) -80]
Test Case: 436 | Input/Output: [(8 53 11 100) 8]
Test Case: 437 | Input/Output: [(-17 -61 23 38) -61]
Test Case: 438 | Input/Output: [(80 3 -15 -21) -21]
Test Case: 439 | Input/Output: [(34 98 8 -15) -15]
Test Case: 440 | Input/Output: [(-70 -52 -1 89) -70]
Test Case: 441 | Input/Output: [(-7 52 1 90) -7]
Test Case: 442 | Input/Output: [(2 -12 53 86) -12]
Test Case: 443 | Input/Output: [(31 -16 46 -36) -36]
Test Case: 444 | Input/Output: [(78 71 70 -95) -95]
Test Case: 445 | Input/Output: [(100 -52 -23 52) -52]
Test Case: 446 | Input/Output: [(-100 -94 56 -35) -100]
Test Case: 447 | Input/Output: [(28 79 9 38) 9]
Test Case: 448 | Input/Output: [(-49 -56 27 72) -56]
Test Case: 449 | Input/Output: [(82 44 12 39) 12]
Test Case: 450 | Input/Output: [(-38 89 -24 23) -38]
Test Case: 451 | Input/Output: [(-39 87 -73 38) -73]
Test Case: 452 | Input/Output: [(19 -27 -7 10) -27]
Test Case: 453 | Input/Output: [(-32 -86 -97 4) -97]
Test Case: 454 | Input/Output: [(88 -80 -80 85) -80]
Test Case: 455 | Input/Output: [(-88 -19 -99 -64) -99]
Test Case: 456 | Input/Output: [(61 -23 18 44) -23]
Test Case: 457 | Input/Output: [(-51 19 -39 59) -51]
Test Case: 458 | Input/Output: [(21 34 -90 79) -90]
Test Case: 459 | Input/Output: [(69 25 -77 23) -77]
Test Case: 460 | Input/Output: [(-22 24 25 -97) -97]
Test Case: 461 | Input/Output: [(11 -96 -1 -24) -96]
Test Case: 462 | Input/Output: [(-6 71 -93 66) -93]
Test Case: 463 | Input/Output: [(-29 26 -2 77) -29]
Test Case: 464 | Input/Output: [(-84 26 4 -99) -99]
Test Case: 465 | Input/Output: [(2 -54 -7 -60) -60]
Test Case: 466 | Input/Output: [(63 -85 -39 -86) -86]
Test Case: 467 | Input/Output: [(81 -44 -45 -69) -69]
Test Case: 468 | Input/Output: [(-14 -61 -100 -5) -100]
Test Case: 469 | Input/Output: [(-78 -12 68 47) -78]
Test Case: 470 | Input/Output: [(-69 89 -5 -99) -99]
Test Case: 471 | Input/Output: [(-46 -95 90 95) -95]
Test Case: 472 | Input/Output: [(-3 58 42 -10) -10]
Test Case: 473 | Input/Output: [(-93 51 31 -90) -93]
Test Case: 474 | Input/Output: [(-75 -65 -95 8) -95]
Test Case: 475 | Input/Output: [(-37 -12 16 98) -37]
Test Case: 476 | Input/Output: [(-44 -83 50 98) -83]
Test Case: 477 | Input/Output: [(-45 87 -44 34) -45]
Test Case: 478 | Input/Output: [(14 -9 -8 -59) -59]
Test Case: 479 | Input/Output: [(80 48 -20 39) -20]
Test Case: 480 | Input/Output: [(11 6 28 -28) -28]
Test Case: 481 | Input/Output: [(-33 5 44 51) -33]
Test Case: 482 | Input/Output: [(75 72 -1 3) -1]
Test Case: 483 | Input/Output: [(-18 37 40 -87) -87]
Test Case: 484 | Input/Output: [(61 -86 28 72) -86]
Test Case: 485 | Input/Output: [(25 30 -25 98) -25]
Test Case: 486 | Input/Output: [(59 -87 56 83) -87]
Test Case: 487 | Input/Output: [(42 50 -55 5) -55]
Test Case: 488 | Input/Output: [(-38 -60 -36 12) -60]
Test Case: 489 | Input/Output: [(-93 84 86 57) -93]
Test Case: 490 | Input/Output: [(19 -76 77 88) -76]
Test Case: 491 | Input/Output: [(-34 36 -2 81) -34]
Test Case: 492 | Input/Output: [(-71 -59 73 -94) -94]
Test Case: 493 | Input/Output: [(-34 -58 100 -21) -58]
Test Case: 494 | Input/Output: [(-92 34 -38 74) -92]
Test Case: 495 | Input/Output: [(-12 -85 -88 -44) -88]
Test Case: 496 | Input/Output: [(0 -84 -63 81) -84]
Test Case: 497 | Input/Output: [(88 64 94 81) 64]
Test Case: 498 | Input/Output: [(-48 -70 -28 40) -70]
Test Case: 499 | Input/Output: [(-17 -30 86 -50) -50]
Test Case: 500 | Input/Output: [(12 -36 1 20) -36]
Test Case: 501 | Input/Output: [(52 -31 1 -58) -58]
Test Case: 502 | Input/Output: [(-87 -75 -72 57) -87]
Test Case: 503 | Input/Output: [(0 -49 -50 -1) -50]
Test Case: 504 | Input/Output: [(-48 22 29 93) -48]
Test Case: 505 | Input/Output: [(-58 88 90 -81) -81]
Test Case: 506 | Input/Output: [(36 37 -32 22) -32]
Test Case: 507 | Input/Output: [(29 -40 -92 16) -92]
Test Case: 508 | Input/Output: [(74 -78 -63 35) -78]
Test Case: 509 | Input/Output: [(34 52 81 93) 34]
Test Case: 510 | Input/Output: [(79 31 20 5) 5]
Test Case: 511 | Input/Output: [(24 -17 -21 -60) -60]
Test Case: 512 | Input/Output: [(7 41 69 -31) -31]
Test Case: 513 | Input/Output: [(49 91 -57 46) -57]
Test Case: 514 | Input/Output: [(-43 59 75 -81) -81]
Test Case: 515 | Input/Output: [(-11 -76 -27 -6) -76]
Test Case: 516 | Input/Output: [(55 -56 -100 -67) -100]
Test Case: 517 | Input/Output: [(59 19 -24 80) -24]
Test Case: 518 | Input/Output: [(40 -18 34 93) -18]
Test Case: 519 | Input/Output: [(68 -21 -51 -63) -63]
Test Case: 520 | Input/Output: [(-96 8 55 38) -96]
Test Case: 521 | Input/Output: [(76 -7 97 71) -7]
Test Case: 522 | Input/Output: [(-100 44 21 -62) -100]
Test Case: 523 | Input/Output: [(-61 -16 -32 24) -61]
Test Case: 524 | Input/Output: [(82 62 -44 -71) -71]
Test Case: 525 | Input/Output: [(-78 51 -100 -41) -100]
Test Case: 526 | Input/Output: [(-78 -47 10 21) -78]
Test Case: 527 | Input/Output: [(56 3 38 -93) -93]
Test Case: 528 | Input/Output: [(19 74 31 58) 19]
Test Case: 529 | Input/Output: [(72 -62 47 -25) -62]
Test Case: 530 | Input/Output: [(37 -86 12 -78) -86]
Test Case: 531 | Input/Output: [(40 64 66 -39) -39]
Test Case: 532 | Input/Output: [(-83 1 97 -38) -83]
Test Case: 533 | Input/Output: [(-61 41 10 84) -61]
Test Case: 534 | Input/Output: [(-65 45 55 12) -65]
Test Case: 535 | Input/Output: [(9 0 9 -7) -7]
Test Case: 536 | Input/Output: [(-45 32 -13 24) -45]
Test Case: 537 | Input/Output: [(-93 69 -75 -22) -93]
Test Case: 538 | Input/Output: [(71 -29 26 -61) -61]
Test Case: 539 | Input/Output: [(75 78 92 78) 75]
Test Case: 540 | Input/Output: [(-94 -8 -27 -9) -94]
Test Case: 541 | Input/Output: [(-23 39 15 -4) -23]
Test Case: 542 | Input/Output: [(-19 88 42 -79) -79]
Test Case: 543 | Input/Output: [(-60 -65 41 92) -65]
Test Case: 544 | Input/Output: [(93 -60 -70 -23) -70]
Test Case: 545 | Input/Output: [(-22 -57 -38 75) -57]
Test Case: 546 | Input/Output: [(70 70 -32 -9) -32]
Test Case: 547 | Input/Output: [(-12 -84 69 -93) -93]
Test Case: 548 | Input/Output: [(89 32 -74 -73) -74]
Test Case: 549 | Input/Output: [(-93 -29 46 95) -93]
Test Case: 550 | Input/Output: [(43 -57 20 -26) -57]
Test Case: 551 | Input/Output: [(-70 -61 85 -94) -94]
Test Case: 552 | Input/Output: [(-29 -23 -81 11) -81]
Test Case: 553 | Input/Output: [(-99 41 41 -67) -99]
Test Case: 554 | Input/Output: [(29 29 22 72) 22]
Test Case: 555 | Input/Output: [(-67 17 35 94) -67]
Test Case: 556 | Input/Output: [(92 64 -28 64) -28]
Test Case: 557 | Input/Output: [(73 71 47 -60) -60]
Test Case: 558 | Input/Output: [(-64 85 30 -77) -77]
Test Case: 559 | Input/Output: [(13 71 -56 15) -56]
Test Case: 560 | Input/Output: [(8 -29 31 100) -29]
Test Case: 561 | Input/Output: [(-67 -68 -8 66) -68]
Test Case: 562 | Input/Output: [(-84 -75 53 49) -84]
Test Case: 563 | Input/Output: [(63 49 75 86) 49]
Test Case: 564 | Input/Output: [(44 79 -59 -42) -59]
Test Case: 565 | Input/Output: [(69 -100 -94 38) -100]
Test Case: 566 | Input/Output: [(2 91 -6 71) -6]
Test Case: 567 | Input/Output: [(40 -16 -10 -56) -56]
Test Case: 568 | Input/Output: [(-91 -69 -77 39) -91]
Test Case: 569 | Input/Output: [(68 -71 0 -66) -71]
Test Case: 570 | Input/Output: [(70 -76 5 -25) -76]
Test Case: 571 | Input/Output: [(71 58 55 -51) -51]
Test Case: 572 | Input/Output: [(-48 90 51 45) -48]
Test Case: 573 | Input/Output: [(83 -34 -92 -69) -92]
Test Case: 574 | Input/Output: [(54 79 -71 6) -71]
Test Case: 575 | Input/Output: [(-56 -16 -78 74) -78]
Test Case: 576 | Input/Output: [(16 37 9 93) 9]
Test Case: 577 | Input/Output: [(-20 27 83 74) -20]
Test Case: 578 | Input/Output: [(45 67 47 -80) -80]
Test Case: 579 | Input/Output: [(-36 -82 80 -31) -82]
Test Case: 580 | Input/Output: [(-69 19 -18 25) -69]
Test Case: 581 | Input/Output: [(-96 -23 -75 30) -96]
Test Case: 582 | Input/Output: [(-44 32 35 30) -44]
Test Case: 583 | Input/Output: [(78 -96 -26 -47) -96]
Test Case: 584 | Input/Output: [(64 40 94 -92) -92]
Test Case: 585 | Input/Output: [(87 2 30 96) 2]
Test Case: 586 | Input/Output: [(73 14 -44 -80) -80]
Test Case: 587 | Input/Output: [(99 81 53 58) 53]
Test Case: 588 | Input/Output: [(32 -93 77 29) -93]
Test Case: 589 | Input/Output: [(-60 -74 -16 -72) -74]
Test Case: 590 | Input/Output: [(64 -14 19 89) -14]
Test Case: 591 | Input/Output: [(97 13 19 12) 12]
Test Case: 592 | Input/Output: [(12 -41 98 -64) -64]
Test Case: 593 | Input/Output: [(2 -61 -63 5) -63]
Test Case: 594 | Input/Output: [(22 -7 -56 83) -56]
Test Case: 595 | Input/Output: [(90 -75 -33 -87) -87]
Test Case: 596 | Input/Output: [(50 -3 39 41) -3]
Test Case: 597 | Input/Output: [(-2 -73 -49 -78) -78]
Test Case: 598 | Input/Output: [(-37 89 -15 24) -37]
Test Case: 599 | Input/Output: [(-96 51 -4 28) -96]
Test Case: 600 | Input/Output: [(47 56 -87 -53) -87]
Test Case: 601 | Input/Output: [(-80 48 94 83) -80]
Test Case: 602 | Input/Output: [(-47 -72 -64 49) -72]
Test Case: 603 | Input/Output: [(-98 -50 55 -18) -98]
Test Case: 604 | Input/Output: [(-17 48 55 -74) -74]
Test Case: 605 | Input/Output: [(-74 86 -78 -11) -78]
Test Case: 606 | Input/Output: [(-47 -75 11 1) -75]
Test Case: 607 | Input/Output: [(98 -83 -38 -71) -83]
Test Case: 608 | Input/Output: [(73 -25 -46 9) -46]
Test Case: 609 | Input/Output: [(-73 -34 -38 -100) -100]
Test Case: 610 | Input/Output: [(11 88 63 -99) -99]
Test Case: 611 | Input/Output: [(-16 35 -43 41) -43]
Test Case: 612 | Input/Output: [(28 37 64 -85) -85]
Test Case: 613 | Input/Output: [(87 -39 21 5) -39]
Test Case: 614 | Input/Output: [(70 41 71 45) 41]
Test Case: 615 | Input/Output: [(77 40 22 2) 2]
Test Case: 616 | Input/Output: [(24 35 -55 77) -55]
Test Case: 617 | Input/Output: [(66 19 1 31) 1]
Test Case: 618 | Input/Output: [(97 -24 84 -48) -48]
Test Case: 619 | Input/Output: [(43 77 -72 68) -72]
Test Case: 620 | Input/Output: [(95 8 -30 -53) -53]
Test Case: 621 | Input/Output: [(-9 6 35 -33) -33]
Test Case: 622 | Input/Output: [(80 14 83 35) 14]
Test Case: 623 | Input/Output: [(24 70 49 -67) -67]
Test Case: 624 | Input/Output: [(27 -28 -76 -45) -76]
Test Case: 625 | Input/Output: [(80 -56 56 57) -56]
Test Case: 626 | Input/Output: [(-60 93 38 9) -60]
Test Case: 627 | Input/Output: [(48 46 -33 -96) -96]
Test Case: 628 | Input/Output: [(24 -37 36 86) -37]
Test Case: 629 | Input/Output: [(85 -53 -93 -51) -93]
Test Case: 630 | Input/Output: [(-97 74 39 9) -97]
Test Case: 631 | Input/Output: [(0 35 51 44) 0]
Test Case: 632 | Input/Output: [(2 -60 3 1) -60]
Test Case: 633 | Input/Output: [(-23 -31 82 34) -31]
Test Case: 634 | Input/Output: [(98 -28 -41 -55) -55]
Test Case: 635 | Input/Output: [(59 75 -16 21) -16]
Test Case: 636 | Input/Output: [(-20 23 20 31) -20]
Test Case: 637 | Input/Output: [(-48 10 -67 -92) -92]
Test Case: 638 | Input/Output: [(-86 -3 -60 -90) -90]
Test Case: 639 | Input/Output: [(52 -90 19 -22) -90]
Test Case: 640 | Input/Output: [(45 -92 48 -88) -92]
Test Case: 641 | Input/Output: [(16 -85 -43 -31) -85]
Test Case: 642 | Input/Output: [(-85 -48 30 -54) -85]
Test Case: 643 | Input/Output: [(4 20 57 30) 4]
Test Case: 644 | Input/Output: [(-43 80 23 1) -43]
Test Case: 645 | Input/Output: [(18 -85 87 -29) -85]
Test Case: 646 | Input/Output: [(25 55 78 -55) -55]
Test Case: 647 | Input/Output: [(45 52 -29 -45) -45]
Test Case: 648 | Input/Output: [(-68 -26 -81 81) -81]
Test Case: 649 | Input/Output: [(-88 -83 38 78) -88]
Test Case: 650 | Input/Output: [(5 -67 35 32) -67]
Test Case: 651 | Input/Output: [(73 -51 63 45) -51]
Test Case: 652 | Input/Output: [(-91 -48 91 -41) -91]
Test Case: 653 | Input/Output: [(34 74 -61 88) -61]
Test Case: 654 | Input/Output: [(-86 12 25 -14) -86]
Test Case: 655 | Input/Output: [(37 -17 -57 34) -57]
Test Case: 656 | Input/Output: [(63 92 -46 -92) -92]
Test Case: 657 | Input/Output: [(69 -18 -57 -72) -72]
Test Case: 658 | Input/Output: [(-14 58 -89 -7) -89]
Test Case: 659 | Input/Output: [(-2 -43 74 100) -43]
Test Case: 660 | Input/Output: [(64 -36 -56 0) -56]
Test Case: 661 | Input/Output: [(56 79 37 22) 22]
Test Case: 662 | Input/Output: [(60 79 -54 56) -54]
Test Case: 663 | Input/Output: [(-65 -68 87 11) -68]
Test Case: 664 | Input/Output: [(-42 98 78 34) -42]
Test Case: 665 | Input/Output: [(-84 -26 -3 7) -84]
Test Case: 666 | Input/Output: [(-23 -8 6 72) -23]
Test Case: 667 | Input/Output: [(89 58 -98 19) -98]
Test Case: 668 | Input/Output: [(-22 66 55 4) -22]
Test Case: 669 | Input/Output: [(40 57 23 89) 23]
Test Case: 670 | Input/Output: [(-60 6 -38 51) -60]
Test Case: 671 | Input/Output: [(-61 37 -46 65) -61]
Test Case: 672 | Input/Output: [(-76 -45 -10 -40) -76]
Test Case: 673 | Input/Output: [(-67 82 -4 81) -67]
Test Case: 674 | Input/Output: [(-32 -41 28 -32) -41]
Test Case: 675 | Input/Output: [(-31 33 64 -23) -31]
Test Case: 676 | Input/Output: [(-25 -1 -57 -16) -57]
Test Case: 677 | Input/Output: [(56 83 -5 -40) -40]
Test Case: 678 | Input/Output: [(71 37 -17 6) -17]
Test Case: 679 | Input/Output: [(32 3 12 34) 3]
Test Case: 680 | Input/Output: [(-33 69 75 -39) -39]
Test Case: 681 | Input/Output: [(-4 7 -82 29) -82]
Test Case: 682 | Input/Output: [(62 79 71 -53) -53]
Test Case: 683 | Input/Output: [(-95 -54 87 -62) -95]
Test Case: 684 | Input/Output: [(91 100 -38 90) -38]
Test Case: 685 | Input/Output: [(32 28 -30 -90) -90]
Test Case: 686 | Input/Output: [(-79 -4 -86 -12) -86]
Test Case: 687 | Input/Output: [(-79 -97 34 -46) -97]
Test Case: 688 | Input/Output: [(-78 -22 32 54) -78]
Test Case: 689 | Input/Output: [(71 -83 66 60) -83]
Test Case: 690 | Input/Output: [(-8 -61 81 -9) -61]
Test Case: 691 | Input/Output: [(93 -86 -5 83) -86]
Test Case: 692 | Input/Output: [(-15 -53 17 14) -53]
Test Case: 693 | Input/Output: [(-100 -94 -89 50) -100]
Test Case: 694 | Input/Output: [(-51 12 32 37) -51]
Test Case: 695 | Input/Output: [(-24 21 95 13) -24]
Test Case: 696 | Input/Output: [(1 -86 -71 -34) -86]
Test Case: 697 | Input/Output: [(-97 63 8 -60) -97]
Test Case: 698 | Input/Output: [(37 -8 -21 71) -21]
Test Case: 699 | Input/Output: [(-93 41 -49 79) -93]
Test Case: 700 | Input/Output: [(-48 36 -91 70) -91]
Test Case: 701 | Input/Output: [(54 21 9 -100) -100]
Test Case: 702 | Input/Output: [(-31 -16 -12 -14) -31]
Test Case: 703 | Input/Output: [(-67 -1 -39 86) -67]
Test Case: 704 | Input/Output: [(-10 24 44 74) -10]
Test Case: 705 | Input/Output: [(48 -52 -17 -99) -99]
Test Case: 706 | Input/Output: [(-57 46 59 -81) -81]
Test Case: 707 | Input/Output: [(-19 -34 -66 10) -66]
Test Case: 708 | Input/Output: [(16 -99 -92 94) -99]
Test Case: 709 | Input/Output: [(60 89 26 28) 26]
Test Case: 710 | Input/Output: [(4 -38 -23 -59) -59]
Test Case: 711 | Input/Output: [(-9 -32 -68 35) -68]
Test Case: 712 | Input/Output: [(-49 -8 -77 -68) -77]
Test Case: 713 | Input/Output: [(94 44 89 11) 11]
Test Case: 714 | Input/Output: [(-32 87 92 36) -32]
Test Case: 715 | Input/Output: [(61 -38 -21 -70) -70]
Test Case: 716 | Input/Output: [(-8 -86 84 -27) -86]
Test Case: 717 | Input/Output: [(-9 -47 37 -37) -47]
Test Case: 718 | Input/Output: [(-52 61 11 -44) -52]
Test Case: 719 | Input/Output: [(-3 55 -50 3) -50]
Test Case: 720 | Input/Output: [(-3 -70 -86 28) -86]
Test Case: 721 | Input/Output: [(-20 58 -37 -40) -40]
Test Case: 722 | Input/Output: [(-54 45 -50 -98) -98]
Test Case: 723 | Input/Output: [(-56 27 72 -62) -62]
Test Case: 724 | Input/Output: [(77 -59 0 -45) -59]
Test Case: 725 | Input/Output: [(4 -27 -95 -26) -95]
Test Case: 726 | Input/Output: [(-26 83 80 32) -26]
Test Case: 727 | Input/Output: [(22 80 -35 77) -35]
Test Case: 728 | Input/Output: [(57 -36 6 20) -36]
Test Case: 729 | Input/Output: [(-10 86 85 -26) -26]
Test Case: 730 | Input/Output: [(-84 -13 5 8) -84]
Test Case: 731 | Input/Output: [(-22 -94 88 -98) -98]
Test Case: 732 | Input/Output: [(87 58 80 23) 23]
Test Case: 733 | Input/Output: [(-99 -49 -74 -70) -99]
Test Case: 734 | Input/Output: [(-90 -35 -49 -52) -90]
Test Case: 735 | Input/Output: [(-31 73 72 -83) -83]
Test Case: 736 | Input/Output: [(-57 -93 -34 -62) -93]
Test Case: 737 | Input/Output: [(65 63 -99 78) -99]
Test Case: 738 | Input/Output: [(-50 11 -92 49) -92]
Test Case: 739 | Input/Output: [(88 15 43 57) 15]
Test Case: 740 | Input/Output: [(94 -74 -81 42) -81]
Test Case: 741 | Input/Output: [(11 -88 -49 32) -88]
Test Case: 742 | Input/Output: [(-23 14 20 6) -23]
Test Case: 743 | Input/Output: [(-89 -93 -72 -70) -93]
Test Case: 744 | Input/Output: [(75 -98 -39 75) -98]
Test Case: 745 | Input/Output: [(98 -37 -11 92) -37]
Test Case: 746 | Input/Output: [(18 73 -69 14) -69]
Test Case: 747 | Input/Output: [(-98 64 74 40) -98]
Test Case: 748 | Input/Output: [(-74 -39 -80 59) -80]
Test Case: 749 | Input/Output: [(7 -24 -52 93) -52]
Test Case: 750 | Input/Output: [(-90 5 81 45) -90]
Test Case: 751 | Input/Output: [(-63 -34 -76 68) -76]
Test Case: 752 | Input/Output: [(-67 -62 10 99) -67]
Test Case: 753 | Input/Output: [(-73 38 21 49) -73]
Test Case: 754 | Input/Output: [(-91 99 77 -61) -91]
Test Case: 755 | Input/Output: [(39 -48 19 33) -48]
Test Case: 756 | Input/Output: [(-84 21 -99 -96) -99]
Test Case: 757 | Input/Output: [(91 -73 -37 65) -73]
Test Case: 758 | Input/Output: [(-79 51 64 84) -79]
Test Case: 759 | Input/Output: [(-39 7 34 51) -39]
Test Case: 760 | Input/Output: [(-32 44 41 6) -32]
Test Case: 761 | Input/Output: [(-79 78 57 98) -79]
Test Case: 762 | Input/Output: [(18 35 26 15) 15]
Test Case: 763 | Input/Output: [(29 -63 15 -20) -63]
Test Case: 764 | Input/Output: [(3 -31 12 58) -31]
Test Case: 765 | Input/Output: [(-66 77 -85 -7) -85]
Test Case: 766 | Input/Output: [(62 -74 -40 -48) -74]
Test Case: 767 | Input/Output: [(63 -50 5 19) -50]
Test Case: 768 | Input/Output: [(-16 -69 90 32) -69]
Test Case: 769 | Input/Output: [(-62 -75 51 -7) -75]
Test Case: 770 | Input/Output: [(31 -20 71 0) -20]
Test Case: 771 | Input/Output: [(-17 -28 -48 24) -48]
Test Case: 772 | Input/Output: [(-64 -31 79 -100) -100]
Test Case: 773 | Input/Output: [(-79 -5 58 78) -79]
Test Case: 774 | Input/Output: [(-45 97 -61 23) -61]
Test Case: 775 | Input/Output: [(-90 -33 -25 19) -90]
Test Case: 776 | Input/Output: [(12 -19 -58 -31) -58]
Test Case: 777 | Input/Output: [(-72 25 -6 85) -72]
Test Case: 778 | Input/Output: [(-62 -81 -47 -11) -81]
Test Case: 779 | Input/Output: [(-20 25 -28 50) -28]
Test Case: 780 | Input/Output: [(-57 36 -81 44) -81]
Test Case: 781 | Input/Output: [(-63 85 17 29) -63]
Test Case: 782 | Input/Output: [(-20 52 56 -42) -42]
Test Case: 783 | Input/Output: [(-77 20 43 30) -77]
Test Case: 784 | Input/Output: [(86 76 13 65) 13]
Test Case: 785 | Input/Output: [(42 -53 -9 35) -53]
Test Case: 786 | Input/Output: [(-80 -36 80 19) -80]
Test Case: 787 | Input/Output: [(-30 -4 -98 17) -98]
Test Case: 788 | Input/Output: [(92 -1 7 -19) -19]
Test Case: 789 | Input/Output: [(-73 31 12 -64) -73]
Test Case: 790 | Input/Output: [(91 44 12 -31) -31]
Test Case: 791 | Input/Output: [(53 -86 80 -22) -86]
Test Case: 792 | Input/Output: [(-5 58 89 -48) -48]
Test Case: 793 | Input/Output: [(-10 -6 -2 79) -10]
Test Case: 794 | Input/Output: [(64 33 0 71) 0]
Test Case: 795 | Input/Output: [(40 51 -10 -81) -81]
Test Case: 796 | Input/Output: [(-5 -4 -58 12) -58]
Test Case: 797 | Input/Output: [(-57 -74 94 69) -74]
Test Case: 798 | Input/Output: [(-2 74 -76 -87) -87]
Test Case: 799 | Input/Output: [(-23 -71 49 -38) -71]
Test Case: 800 | Input/Output: [(-7 99 -46 22) -46]
Test Case: 801 | Input/Output: [(-96 90 -13 -23) -96]
Test Case: 802 | Input/Output: [(11 -54 57 47) -54]
Test Case: 803 | Input/Output: [(-79 87 -78 -32) -79]
Test Case: 804 | Input/Output: [(-17 -24 -72 87) -72]
Test Case: 805 | Input/Output: [(13 72 33 10) 10]
Test Case: 806 | Input/Output: [(45 61 40 -50) -50]
Test Case: 807 | Input/Output: [(-15 -49 98 91) -49]
Test Case: 808 | Input/Output: [(75 22 89 -70) -70]
Test Case: 809 | Input/Output: [(-35 71 -94 87) -94]
Test Case: 810 | Input/Output: [(-18 -63 94 27) -63]
Test Case: 811 | Input/Output: [(96 22 35 15) 15]
Test Case: 812 | Input/Output: [(-30 -30 49 -2) -30]
Test Case: 813 | Input/Output: [(-17 95 3 -30) -30]
Test Case: 814 | Input/Output: [(18 77 59 -66) -66]
Test Case: 815 | Input/Output: [(-11 51 -86 -37) -86]
Test Case: 816 | Input/Output: [(-72 88 62 65) -72]
Test Case: 817 | Input/Output: [(-90 -29 78 -13) -90]
Test Case: 818 | Input/Output: [(94 -54 -26 97) -54]
Test Case: 819 | Input/Output: [(-68 86 88 96) -68]
Test Case: 820 | Input/Output: [(71 -71 -50 58) -71]
Test Case: 821 | Input/Output: [(27 19 -23 -77) -77]
Test Case: 822 | Input/Output: [(-48 16 34 -17) -48]
Test Case: 823 | Input/Output: [(49 6 35 94) 6]
Test Case: 824 | Input/Output: [(-24 -5 -23 73) -24]
Test Case: 825 | Input/Output: [(52 -63 -26 -37) -63]
Test Case: 826 | Input/Output: [(-5 37 -69 53) -69]
Test Case: 827 | Input/Output: [(-9 70 47 29) -9]
Test Case: 828 | Input/Output: [(-77 45 -98 89) -98]
Test Case: 829 | Input/Output: [(-89 90 12 -96) -96]
Test Case: 830 | Input/Output: [(-7 -18 -79 -82) -82]
Test Case: 831 | Input/Output: [(48 27 -63 -60) -63]
Test Case: 832 | Input/Output: [(-83 -52 63 25) -83]
Test Case: 833 | Input/Output: [(-95 58 84 14) -95]
Test Case: 834 | Input/Output: [(-55 77 73 98) -55]
Test Case: 835 | Input/Output: [(-25 -14 36 -47) -47]
Test Case: 836 | Input/Output: [(18 -14 -71 49) -71]
Test Case: 837 | Input/Output: [(-7 -16 8 -25) -25]
Test Case: 838 | Input/Output: [(98 -5 -60 80) -60]
Test Case: 839 | Input/Output: [(-98 72 77 -94) -98]
Test Case: 840 | Input/Output: [(-38 36 -62 99) -62]
Test Case: 841 | Input/Output: [(0 -54 -6 67) -54]
Test Case: 842 | Input/Output: [(-24 41 91 -38) -38]
Test Case: 843 | Input/Output: [(97 -8 29 27) -8]
Test Case: 844 | Input/Output: [(-46 -56 11 43) -56]
Test Case: 845 | Input/Output: [(-7 -88 69 16) -88]
Test Case: 846 | Input/Output: [(-45 -96 -89 -14) -96]
Test Case: 847 | Input/Output: [(-13 -36 93 -49) -49]
Test Case: 848 | Input/Output: [(-1 -91 -40 29) -91]
Test Case: 849 | Input/Output: [(-65 45 0 -79) -79]
Test Case: 850 | Input/Output: [(-89 49 -9 -61) -89]
Test Case: 851 | Input/Output: [(42 -51 9 -3) -51]
Test Case: 852 | Input/Output: [(-45 -75 -61 -99) -99]
Test Case: 853 | Input/Output: [(64 12 88 98) 12]
Test Case: 854 | Input/Output: [(90 72 24 -29) -29]
Test Case: 855 | Input/Output: [(-95 1 39 67) -95]
Test Case: 856 | Input/Output: [(88 -74 -8 44) -74]
Test Case: 857 | Input/Output: [(68 79 -50 -88) -88]
Test Case: 858 | Input/Output: [(58 -73 32 85) -73]
Test Case: 859 | Input/Output: [(-29 -22 -15 60) -29]
Test Case: 860 | Input/Output: [(-46 -58 -27 34) -58]
Test Case: 861 | Input/Output: [(90 -76 -34 -26) -76]
Test Case: 862 | Input/Output: [(-43 54 68 -34) -43]
Test Case: 863 | Input/Output: [(-34 6 17 -31) -34]
Test Case: 864 | Input/Output: [(37 56 4 -14) -14]
Test Case: 865 | Input/Output: [(12 80 89 -23) -23]
Test Case: 866 | Input/Output: [(29 -53 -16 67) -53]
Test Case: 867 | Input/Output: [(13 -8 -56 100) -56]
Test Case: 868 | Input/Output: [(-71 57 -29 2) -71]
Test Case: 869 | Input/Output: [(-1 -62 -90 52) -90]
Test Case: 870 | Input/Output: [(-79 48 -32 30) -79]
Test Case: 871 | Input/Output: [(62 -72 83 100) -72]
Test Case: 872 | Input/Output: [(-16 -5 -29 -18) -29]
Test Case: 873 | Input/Output: [(-38 -97 -17 5) -97]
Test Case: 874 | Input/Output: [(86 -85 39 34) -85]
Test Case: 875 | Input/Output: [(-67 -48 7 41) -67]
Test Case: 876 | Input/Output: [(43 27 38 -77) -77]
Test Case: 877 | Input/Output: [(60 26 67 35) 26]
Test Case: 878 | Input/Output: [(-1 10 57 58) -1]
Test Case: 879 | Input/Output: [(-64 -13 35 -46) -64]
Test Case: 880 | Input/Output: [(59 -79 22 63) -79]
Test Case: 881 | Input/Output: [(-99 -9 -52 20) -99]
Test Case: 882 | Input/Output: [(-48 -39 99 48) -48]
Test Case: 883 | Input/Output: [(-7 32 -48 -60) -60]
Test Case: 884 | Input/Output: [(-5 -69 58 73) -69]
Test Case: 885 | Input/Output: [(32 -61 -32 -18) -61]
Test Case: 886 | Input/Output: [(50 -89 72 -90) -90]
Test Case: 887 | Input/Output: [(-34 -36 97 54) -36]
Test Case: 888 | Input/Output: [(4 -80 -84 -89) -89]
Test Case: 889 | Input/Output: [(-54 4 24 -23) -54]
Test Case: 890 | Input/Output: [(-92 57 -79 9) -92]
Test Case: 891 | Input/Output: [(15 17 -43 -1) -43]
Test Case: 892 | Input/Output: [(90 78 -67 92) -67]
Test Case: 893 | Input/Output: [(67 -73 28 -8) -73]
Test Case: 894 | Input/Output: [(-23 34 13 -22) -23]
Test Case: 895 | Input/Output: [(86 -90 -51 -22) -90]
Test Case: 896 | Input/Output: [(-59 77 -21 85) -59]
Test Case: 897 | Input/Output: [(-99 -73 29 -31) -99]
Test Case: 898 | Input/Output: [(44 -27 -53 -34) -53]
Test Case: 899 | Input/Output: [(-83 -12 30 90) -83]
Test Case: 900 | Input/Output: [(68 -54 -74 23) -74]
Test Case: 901 | Input/Output: [(1 85 -60 19) -60]
Test Case: 902 | Input/Output: [(-66 4 86 -80) -80]
Test Case: 903 | Input/Output: [(70 -67 50 64) -67]
Test Case: 904 | Input/Output: [(83 18 28 76) 18]
Test Case: 905 | Input/Output: [(67 -63 -93 -42) -93]
Test Case: 906 | Input/Output: [(76 -42 -99 25) -99]
Test Case: 907 | Input/Output: [(-36 -14 -56 -9) -56]
Test Case: 908 | Input/Output: [(-82 26 69 -20) -82]
Test Case: 909 | Input/Output: [(91 -62 42 -60) -62]
Test Case: 910 | Input/Output: [(77 -22 46 -54) -54]
Test Case: 911 | Input/Output: [(-93 5 72 -54) -93]
Test Case: 912 | Input/Output: [(-11 15 -5 50) -11]
Test Case: 913 | Input/Output: [(-38 88 -21 86) -38]
Test Case: 914 | Input/Output: [(43 24 32 15) 15]
Test Case: 915 | Input/Output: [(35 72 -42 -29) -42]
Test Case: 916 | Input/Output: [(7 37 -58 -94) -94]
Test Case: 917 | Input/Output: [(-7 -49 34 90) -49]
Test Case: 918 | Input/Output: [(15 -67 -28 66) -67]
Test Case: 919 | Input/Output: [(-79 -19 67 63) -79]
Test Case: 920 | Input/Output: [(-77 -22 -2 -2) -77]
Test Case: 921 | Input/Output: [(-86 78 -97 -65) -97]
Test Case: 922 | Input/Output: [(98 67 35 50) 35]
Test Case: 923 | Input/Output: [(55 -100 -94 -75) -100]
Test Case: 924 | Input/Output: [(-91 73 2 52) -91]
Test Case: 925 | Input/Output: [(-57 -1 -98 14) -98]
Test Case: 926 | Input/Output: [(24 14 50 33) 14]
Test Case: 927 | Input/Output: [(53 26 -80 70) -80]
Test Case: 928 | Input/Output: [(88 68 -33 80) -33]
Test Case: 929 | Input/Output: [(17 -99 50 39) -99]
Test Case: 930 | Input/Output: [(-89 -37 6 49) -89]
Test Case: 931 | Input/Output: [(-21 83 9 -1) -21]
Test Case: 932 | Input/Output: [(90 -75 -66 -1) -75]
Test Case: 933 | Input/Output: [(-9 -52 -68 -53) -68]
Test Case: 934 | Input/Output: [(71 9 82 88) 9]
Test Case: 935 | Input/Output: [(21 77 -25 28) -25]
Test Case: 936 | Input/Output: [(13 -67 18 -34) -67]
Test Case: 937 | Input/Output: [(87 -46 23 15) -46]
Test Case: 938 | Input/Output: [(-28 8 -94 22) -94]
Test Case: 939 | Input/Output: [(-82 -10 -2 97) -82]
Test Case: 940 | Input/Output: [(-49 -44 23 86) -49]
Test Case: 941 | Input/Output: [(-36 -81 83 -91) -91]
Test Case: 942 | Input/Output: [(51 -54 -85 -36) -85]
Test Case: 943 | Input/Output: [(14 37 19 5) 5]
Test Case: 944 | Input/Output: [(53 -44 96 2) -44]
Test Case: 945 | Input/Output: [(-19 -37 39 -82) -82]
Test Case: 946 | Input/Output: [(97 77 -69 -98) -98]
Test Case: 947 | Input/Output: [(70 -48 -64 -86) -86]
Test Case: 948 | Input/Output: [(59 -41 83 61) -41]
Test Case: 949 | Input/Output: [(73 77 24 -34) -34]
Test Case: 950 | Input/Output: [(-21 -96 6 -10) -96]
Test Case: 951 | Input/Output: [(-30 78 1 34) -30]
Test Case: 952 | Input/Output: [(99 12 -71 -32) -71]
Test Case: 953 | Input/Output: [(87 61 88 -3) -3]
Test Case: 954 | Input/Output: [(-79 -45 -59 67) -79]
Test Case: 955 | Input/Output: [(37 -74 -23 2) -74]
Test Case: 956 | Input/Output: [(30 -49 0 20) -49]
Test Case: 957 | Input/Output: [(-66 4 -37 77) -66]
Test Case: 958 | Input/Output: [(-12 -29 25 -21) -29]
Test Case: 959 | Input/Output: [(74 -68 -60 -38) -68]
Test Case: 960 | Input/Output: [(79 44 -30 71) -30]
Test Case: 961 | Input/Output: [(56 76 8 43) 8]
Test Case: 962 | Input/Output: [(67 58 52 -72) -72]
Test Case: 963 | Input/Output: [(-73 -69 -71 49) -73]
Test Case: 964 | Input/Output: [(-31 -93 76 -67) -93]
Test Case: 965 | Input/Output: [(39 21 -51 56) -51]
Test Case: 966 | Input/Output: [(-30 96 78 -83) -83]
Test Case: 967 | Input/Output: [(-58 -7 0 -84) -84]
Test Case: 968 | Input/Output: [(-43 -2 9 -43) -43]
Test Case: 969 | Input/Output: [(6 48 42 9) 6]
Test Case: 970 | Input/Output: [(-56 -72 -65 95) -72]
Test Case: 971 | Input/Output: [(93 -74 80 96) -74]
Test Case: 972 | Input/Output: [(-43 53 60 -59) -59]
Test Case: 973 | Input/Output: [(40 -45 -67 44) -67]
Test Case: 974 | Input/Output: [(-90 -46 -100 -81) -100]
Test Case: 975 | Input/Output: [(56 -47 81 73) -47]
Test Case: 976 | Input/Output: [(92 -12 -46 -39) -46]
Test Case: 977 | Input/Output: [(-93 -56 -88 -10) -93]
Test Case: 978 | Input/Output: [(78 10 84 -38) -38]
Test Case: 979 | Input/Output: [(14 24 -77 -72) -77]
Test Case: 980 | Input/Output: [(-34 83 -83 -36) -83]
Test Case: 981 | Input/Output: [(72 -85 1 -74) -85]
Test Case: 982 | Input/Output: [(-6 36 -88 54) -88]
Test Case: 983 | Input/Output: [(-73 13 -44 91) -73]
Test Case: 984 | Input/Output: [(7 57 31 15) 7]
Test Case: 985 | Input/Output: [(-7 77 65 -34) -34]
Test Case: 986 | Input/Output: [(94 -41 53 93) -41]
Test Case: 987 | Input/Output: [(-20 -5 -51 92) -51]
Test Case: 988 | Input/Output: [(-36 -48 -96 55) -96]
Test Case: 989 | Input/Output: [(-80 40 14 45) -80]
Test Case: 990 | Input/Output: [(96 35 47 -39) -39]
Test Case: 991 | Input/Output: [(51 -65 37 -39) -65]
Test Case: 992 | Input/Output: [(-49 -5 55 -98) -98]
Test Case: 993 | Input/Output: [(-12 -20 11 -31) -31]
Test Case: 994 | Input/Output: [(9 34 53 -94) -94]
Test Case: 995 | Input/Output: [(46 -36 19 -54) -54]
Test Case: 996 | Input/Output: [(95 -65 -95 95) -95]
Test Case: 997 | Input/Output: [(-90 85 -46 24) -90]
Test Case: 998 | Input/Output: [(54 81 88 73) 54]
Test Case: 999 | Input/Output: [(-50 -92 80 -46) -92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 65 74 96 46 -35 -41 99 -120 124 72 -110 -63 -103 11 -16 -19
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -12 -12 -78] -78] [[-20 81 -20 -20] -20] [[24 24 -47 24] -47] [[-24 -67 -24 -24] -67] [[-26 34 34 34] -26] [[-28 72 -28 -28] -28] [[55 55 55 -54] -54] [[-76 -76 -6 -76] -76] [[9 64 9 9] 9] [[54 -42 54 54] -42] [(96 96 96 96) 96] [(-77 -77 -77 -77) -77] [(50 50 50 50) 50] [(78 78 78 78) 78] [(68 68 68 68) 68] [(32 34 13 85) 13] [(93 25 3 96) 3] [(75 32 1 3) 1] [(96 58 20 39) 20] [(8 94 4 34) 4] [(78 76 29 19) 19] [(29 56 55 15) 15] [(67 99 63 33) 33] [(41 64 42 30) 30] [(96 25 93 14) 14] [(77 73 49 44) 44] [(12 61 86 21) 12] [(30 12 1 56) 1] [(88 9 15 13) 9] [(41 67 77 66) 41] [(69 36 47 0) 0] [(38 94 41 49) 38] [(52 10 66 13) 10] [(32 88 92 17) 17] [(36 75 48 73) 36] [(15 59 73 27) 15] [(87 -57 -1 -34) -57] [(-24 -95 76 -47) -95] [(-38 -72 -53 -73) -73] [(-66 32 40 56) -66] [(-6 88 -11 43) -11] [(-57 -12 49 4) -57] [(86 48 -95 -38) -95] [(-53 75 28 -31) -53] [(-11 -56 40 -3) -56] [(-79 82 -48 -5) -79] [(92 -6 19 92) -6] [(-65 37 25 82) -65] [(-19 -71 -5 -76) -76] [(25 -73 97 -73) -73] [(-70 -60 -28 -46) -70] [(37 -68 -33 -69) -69] [(-19 82 5 49) -19] [(29 95 25 -98) -98] [(59 1 -48 -62) -62] [(-92 11 85 80) -92] [(72 55 -4 -70) -70] [(8 61 -76 -30) -76] [(-67 31 4 -65) -67] [(4 3 -16 -44) -44] [(-45 49 85 20) -45] [(43 20 89 88) 20] [(-48 -89 -24 -27) -89] [(22 -68 18 44) -68] [(-2 -59 99 31) -59] [(-52 34 -96 -45) -96] [(-47 16 -17 -71) -71] [(-18 84 48 0) -18] [(-72 -43 96 72) -72] [(97 -55 92 63) -55] [(-94 85 -42 39) -94] [(20 -19 41 -77) -77] [(78 -81 -43 79) -81] [(-73 -59 -69 -78) -78] [(77 32 -46 30) -46] [(90 60 56 -25) -25] [(-38 52 69 -35) -38] [(-4 -68 8 -85) -85] [(61 -26 99 -66) -66] [(-78 -7 -28 -39) -78] [(60 -56 -48 -32) -56] [(0 -60 15 84) -60] [(81 -61 -34 25) -61] [(-30 41 99 -49) -49] [(-52 -73 -26 -85) -85] [(-59 32 -83 32) -83] [(-72 73 24 95) -72] [(56 9 -14 1) -14] [(-43 97 73 -73) -73] [(-21 -7 62 93) -21] [(-19 -89 19 13) -89] [(-81 2 -91 -47) -91] [(-59 -55 -88 4) -88] [(37 25 36 40) 25] [(25 33 -55 -97) -97])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3})
Lexicase best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline print_newline exec_do*count (exec_eq) integer_rot exec_noop boolean_rot exec_pop () integer_lte integer_empty) boolean_not boolean_invert_first_then_and print_integer integer_mult boolean_invert_first_then_and in3)
Lexicase best errors: [0 0 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3})
Zero cases best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline print_newline exec_do*count (exec_eq) integer_rot exec_noop boolean_rot exec_pop () integer_lte integer_empty) boolean_not boolean_invert_first_then_and print_integer integer_mult boolean_invert_first_then_and in3)
Zero cases best errors: [0 0 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 5 1000 3 1000 6 6 1000 4 1000)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (5 5 0 3 0 6 6 0 4 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -22} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_boolean_841} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth})
Best program: (exec_do*count (exec_empty boolean_frominteger in4) integer_yank exec_pop (integer_div exec_empty boolean_yankdup boolean_yankdup exec_shove (exec_yankdup -22 boolean_yankdup integer_stackdepth) boolean_dup_items integer_dup_times tag_boolean_841 exec_empty) print_integer boolean_flush integer_div boolean_or integer_gt exec_do*while (integer_sub in2 boolean_shove integer_gte exec_while (exec_k (exec_dup_items) (integer_stackdepth exec_do*range (exec_noop exec_y () boolean_frominteger print_newline boolean_dup integer_min) exec_do*range (integer_lt exec_s_when_autoconstructing () (in4 boolean_shove) (integer_pop integer_fromboolean)) integer_max integer_mult exec_k_when_autoconstructing (exec_if () (boolean_yankdup boolean_not exec_do*count (boolean_and exec_when () exec_rot () (exec_if (integer_eq boolean_and) (integer_shove) boolean_flush) (exec_dup_items integer_sub exec_y_when_autoconstructing (in3 exec_stackdepth))))) ()))))
Errors: [0 0 1 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 67
Size: 93
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 9.971
Median total errors in population: 10
Error averages by case: (0.995 0.995 1.0 0.997 1.0 0.994 0.994 1.0 0.996 1.0)
Error minima by case: (0 0 1 0 1 0 0 1 0 1)
Average genome size in population (length): 51.476
Average program size in population (points): 70.965
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 477860
--- Timings ---
Current time: 1559314308277 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.8 seconds, 31.7%
Fitness Testing:      1.5 seconds, 64.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: 76                 
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 28                 
Correct output: -56                 | Program output: 40                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 4                  
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 48                 
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 41                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: 69                 
Correct output: -85                 | Program output: 8                  
Correct output: -66                 | Program output: 99                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 99                 
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 73                 
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_noop} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_dup in3 boolean_or print_integer boolean_dup_times exec_eq boolean_xor boolean_swap in4 integer_lt exec_if (boolean_frominteger exec_while () exec_noop integer_dec exec_noop) () exec_flush integer_yank)
Lexicase best errors: [0 1 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_noop} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_dup in3 boolean_or print_integer boolean_dup_times exec_eq boolean_xor boolean_swap in4 integer_lt exec_if (boolean_frominteger exec_while () exec_noop integer_dec exec_noop) () exec_flush integer_yank)
Zero cases best errors: [0 1 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (149 571 6 573 146 841 6 572 150 149)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (149 571 6 573 146 841 6 572 150 149)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction -93} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction -60} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 2, :instruction print_newline} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_981} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction in4})
Best program: (in3 in1 integer_div integer_lte integer_lte exec_while (integer_sub) -93 in1 in3 print_integer in2 boolean_yankdup exec_when (-60 boolean_pop) exec_do*while () integer_div integer_shove integer_dup_times boolean_frominteger integer_min integer_yank integer_yankdup exec_if (exec_rot () () (integer_dup_items exec_do*count (exec_yankdup exec_yank exec_when (boolean_dup_items in1 exec_y (exec_shove (exec_do*times () exec_dup_items exec_flush exec_yank integer_add print_newline integer_shove exec_empty exec_y (integer_eq boolean_invert_second_then_and boolean_frominteger) exec_shove () in4 integer_add print_newline) boolean_empty exec_y_when_autoconstructing (integer_max) integer_min) boolean_empty integer_stackdepth boolean_rot exec_shove (integer_flush boolean_empty exec_k_when_autoconstructing (integer_div) (exec_s_when_autoconstructing (integer_dup_times print_newline) () (exec_yank exec_flush exec_while (exec_rot (print_boolean exec_y (tagged_981 exec_dup_times (exec_yankdup integer_eq exec_y_when_autoconstructing (integer_eq exec_k_when_autoconstructing (integer_shove) (integer_yank integer_max integer_rot boolean_eq) exec_eq boolean_frominteger boolean_empty print_exec (integer_flush) in4 in4)))) () ())))))))) ())
Errors: [0 1 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 91
Size: 124
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 6.837
Median total errors in population: 6
Error averages by case: (0.851 0.429 0.994 0.427 0.854 0.159 0.994 0.428 0.85 0.851)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.802
Average program size in population (points): 65.098
Average percent parens in population: 0.244
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.518
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.506
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 773760
--- Timings ---
Current time: 1559314310745 milliseconds
Total Time:           4.7 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.3 seconds, 49.4%
Fitness Testing:      2.0 seconds, 41.9%
Report:               0.3 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction tag_exec_566} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte})
Lexicase best program: (in3 in1 print_integer in2 tag_exec_566 (boolean_yankdup integer_dup_items exec_if (exec_do*times (exec_y (integer_max integer_lte))) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction tag_exec_566} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte})
Zero cases best program: (in3 in1 print_integer in2 tag_exec_566 (boolean_yankdup integer_dup_items exec_if (exec_do*times (exec_y (integer_max integer_lte))) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 1000 850 825 202 825 850 170 1000 436)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (170 0 850 825 202 825 850 170 0 436)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction in3})
Best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline print_newline exec_do*count (exec_eq) integer_rot) exec_noop boolean_rot exec_pop () integer_lte integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_dup (in3))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 5.672
Median total errors in population: 6
Error averages by case: (0.83 1.0 0.15 0.175 0.798 0.175 0.15 0.83 1.0 0.564)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 42.506
Average program size in population (points): 56.455
Average percent parens in population: 0.227
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0375
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.521
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1075749
--- Timings ---
Current time: 1559314313616 milliseconds
Total Time:           7.8 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.6 seconds, 58.7%
Fitness Testing:      2.4 seconds, 30.4%
Report:               0.7 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 688
Test mean error for best: 0.68800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output:                    
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output:                    
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output:                    
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output:                    
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output:                    
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output:                    
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -88-87             
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_pop exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap boolean_stackdepth integer_mult exec_do*count (in3 exec_if (boolean_eq exec_dup_items exec_pop ()) ()))
Lexicase best errors: [1 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_pop exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap boolean_stackdepth integer_mult exec_do*count (in3 exec_if (boolean_eq exec_dup_items exec_pop ()) ()))
Zero cases best errors: [1 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 11 848 16 852 11 11 868 8 1000)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (0 11 848 16 852 11 11 868 8 0)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_pop exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap boolean_stackdepth integer_dup_times exec_do*count (in3 exec_if (boolean_eq exec_dup_items exec_pop ()) ()))
Errors: [1 0 1 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 70
Size: 93
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 7.375
Median total errors in population: 7
Error averages by case: (1.0 0.989 0.152 0.984 0.148 0.989 0.989 0.132 0.992 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 31.981
Average program size in population (points): 41.293
Average percent parens in population: 0.228
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4165
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1310188
--- Timings ---
Current time: 1559314316794 milliseconds
Total Time:          10.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.9 seconds, 64.8%
Fitness Testing:      2.7 seconds, 25.1%
Report:               1.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output:                    
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output:                    
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 189                
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output:                    
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output:                    
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output:                    
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output:                    
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output:                    
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output:                    
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output:                    
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output:                    
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output:                    
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output:                    
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output:                    
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88-87             
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap boolean_stackdepth integer_dup_times exec_do*count (in3 exec_if (boolean_eq exec_dup_items exec_pop ()) ()))
Lexicase best errors: [0 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 93
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap boolean_stackdepth integer_dup_times exec_do*count (in3 exec_if (boolean_eq exec_dup_items exec_pop ()) ()))
Zero cases best errors: [0 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 93
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 181 489 501 869 147 147 838 1000 838)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (182 181 489 501 869 147 147 838 0 838)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap boolean_stackdepth integer_dup_times exec_do*count (in3 exec_if (boolean_eq exec_dup_items exec_pop ()) ()))
Errors: [0 0 0 0 0 1 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 70
Size: 93
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 5.808
Median total errors in population: 5
Error averages by case: (0.818 0.819 0.511 0.499 0.131 0.853 0.853 0.162 1.0 0.162)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 44.655
Average program size in population (points): 58.182
Average percent parens in population: 0.224
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 6.088625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1860893
--- Timings ---
Current time: 1559314319465 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.4 seconds, 63.3%
Fitness Testing:      3.2 seconds, 24.1%
Report:               1.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 189                
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88-87             
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult exec_y () exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap) boolean_stackdepth integer_dup_times exec_noop in3 exec_if (boolean_eq exec_dup_items exec_pop ()) ())
Lexicase best errors: [0 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 93
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult exec_y () exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap) boolean_stackdepth integer_dup_times exec_noop in3 exec_if (boolean_eq exec_dup_items exec_pop ()) ())
Zero cases best errors: [0 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 93
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (565 47 565 56 248 260 244 4 560 558)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (565 47 565 56 248 260 244 4 560 558)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not})
Best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not))
Errors: [0 0 0 0 1 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 67
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 6.893
Median total errors in population: 6
Error averages by case: (0.435 0.953 0.435 0.944 0.752 0.74 0.756 0.996 0.44 0.442)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.615
Average program size in population (points): 74.539
Average percent parens in population: 0.232
Minimum age in population: 5.0
Maximum age in population: 8.875
Average age in population: 7.1306875
Median age in population: 7.34375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2636735
--- Timings ---
Current time: 1559314322411 milliseconds
Total Time:          16.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.3 seconds, 62.7%
Fitness Testing:      3.9 seconds, 23.5%
Report:               2.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove boolean_invert_first_then_and exec_pop () exec_do*times (exec_dup_times (in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap) boolean_stackdepth integer_dup_times)
Lexicase best errors: [0 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove boolean_invert_first_then_and exec_pop () exec_do*times (exec_dup_times (in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap) boolean_stackdepth integer_dup_times)
Zero cases best errors: [0 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (733 1000 892 290 1000 552 810 330 251 733)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (733 0 892 290 0 552 810 330 251 733)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction 53} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times})
Best program: (exec_do*count (integer_dup boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 integer_stackdepth exec_eq integer_shove) (print_newline in3) exec_yankdup integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove boolean_invert_first_then_and exec_pop () exec_do*times (integer_eq in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2 integer_empty integer_gte) 53) integer_lt integer_shove integer_dup integer_swap boolean_stackdepth integer_dup_times)
Errors: [0 1 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 64
Size: 83
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 5.409
Median total errors in population: 4
Error averages by case: (0.267 1.0 0.108 0.71 1.0 0.448 0.19 0.67 0.749 0.267)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 51.966
Average program size in population (points): 69.907
Average percent parens in population: 0.258
Minimum age in population: 6.875
Maximum age in population: 9.84375
Average age in population: 8.72071875
Median age in population: 8.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3282929
--- Timings ---
Current time: 1559314325308 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.2 seconds, 63.2%
Fitness Testing:      4.5 seconds, 23.1%
Report:               2.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 218
Test mean error for best: 0.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Lexicase best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 86
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Zero cases best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 86
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (707 432 338 11 355 800 10 872 342 381)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (707 432 338 11 355 800 10 872 342 381)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 86
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 5.752
Median total errors in population: 5
Error averages by case: (0.293 0.568 0.662 0.989 0.645 0.2 0.99 0.128 0.658 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.342
Average program size in population (points): 64.996
Average percent parens in population: 0.257
Minimum age in population: 7.875
Maximum age in population: 11.6875
Average age in population: 10.201953125
Median age in population: 10.234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.009
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3908988
--- Timings ---
Current time: 1559314328126 milliseconds
Total Time:          22.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.0 seconds, 63.4%
Fitness Testing:      5.0 seconds, 22.6%
Report:               3.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 296
Test mean error for best: 0.29600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output:                    
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 1317               
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output:                    
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 48                 
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 15                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31-34             
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 
51                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 1822               
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Lexicase best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 86
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Zero cases best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 86
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (303 471 454 460 302 302 455 315 767 455)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (303 471 454 460 302 302 455 315 767 455)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count})
Best program: (exec_do*count (integer_dup in3 in4 exec_eq integer_shove) print_newline in3 exec_yankdup integer_rot in3 integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_stackdepth integer_dup_times exec_do*count ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 56
Size: 71
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.716
Median total errors in population: 7
Error averages by case: (0.697 0.529 0.546 0.54 0.698 0.698 0.545 0.685 0.233 0.545)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.602
Average program size in population (points): 77.623
Average percent parens in population: 0.234
Minimum age in population: 10.5625
Maximum age in population: 13.59375
Average age in population: 12.3461484375
Median age in population: 12.21875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.009
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4625460
--- Timings ---
Current time: 1559314331077 milliseconds
Total Time:          25.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.9 seconds, 63.6%
Fitness Testing:      5.6 seconds, 22.5%
Report:               3.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 218
Test mean error for best: 0.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Lexicase best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 86
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Zero cases best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 86
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (609 644 648 667 608 611 211 121 609 587)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (609 644 648 667 608 611 211 121 609 587)
Population mean number of perfect (error zero) cases: 5.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 86
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 4.685
Median total errors in population: 2
Error averages by case: (0.391 0.356 0.352 0.333 0.392 0.389 0.789 0.879 0.391 0.413)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.27
Average program size in population (points): 80.382
Average percent parens in population: 0.226
Minimum age in population: 12.359375
Maximum age in population: 15.28125
Average age in population: 14.01705859375
Median age in population: 14.15625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5262386
--- Timings ---
Current time: 1559314333962 milliseconds
Total Time:          27.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.8 seconds, 63.6%
Fitness Testing:      6.2 seconds, 22.2%
Report:               3.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 218
Test mean error for best: 0.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Lexicase best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min) exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty integer_eq integer_empty) (integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 86
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Zero cases best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min) exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty integer_eq integer_empty) (integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 86
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (633 637 794 448 447 678 801 801 404 316)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (633 637 794 448 447 678 801 801 404 316)
Population mean number of perfect (error zero) cases: 5.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult})
Best program: (exec_do*count (integer_dup_times integer_inc) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and boolean_flush integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult)
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 48
Size: 62
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 4.041
Median total errors in population: 3
Error averages by case: (0.367 0.363 0.206 0.552 0.553 0.322 0.199 0.199 0.596 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.579
Average program size in population (points): 68.874
Average percent parens in population: 0.239
Minimum age in population: 13.390625
Maximum age in population: 17.14453125
Average age in population: 15.36138671875
Median age in population: 15.421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.01
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5832851
--- Timings ---
Current time: 1559314336653 milliseconds
Total Time:          30.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 63.8%
Fitness Testing:      6.7 seconds, 21.9%
Report:               4.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 3494               
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -6531              
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -24                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_do*count (integer_dup in2 in4 exec_eq integer_shove) print_newline in3 exec_yankdup integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop ())
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_do*count (integer_dup in2 in4 exec_eq integer_shove) print_newline in3 exec_yankdup integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) boolean_yankdup integer_rot integer_add exec_pop ())
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (807 561 229 575 209 635 448 231 589 576)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (807 561 229 575 209 635 448 231 589 576)
Population mean number of perfect (error zero) cases: 4.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop})
Best program: (exec_do*count (integer_dup in2 in4 exec_eq integer_shove) print_newline in3 exec_yankdup integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub exec_pop () exec_do*times (exec_stackdepth in3 in1 boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop ())
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.14
Median total errors in population: 3
Error averages by case: (0.193 0.439 0.771 0.425 0.791 0.365 0.552 0.769 0.411 0.424)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.899
Average program size in population (points): 77.04
Average percent parens in population: 0.236
Minimum age in population: 14.5
Maximum age in population: 18.4951171875
Average age in population: 16.7995068359375
Median age in population: 16.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.009
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6525931
--- Timings ---
Current time: 1559314339466 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.4 seconds, 63.9%
Fitness Testing:      7.4 seconds, 22.0%
Report:               4.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49-19              
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop})
Lexicase best program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) integer_min integer_rot integer_add exec_pop ())
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 51
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop})
Zero cases best program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) integer_min integer_rot integer_add exec_pop ())
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 51
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 213 235 218 235 505 674 505 445 849)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (238 213 235 218 235 505 674 505 445 849)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop})
Best program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove) integer_min integer_rot integer_add exec_pop ())
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 5.883
Median total errors in population: 5
Error averages by case: (0.762 0.787 0.765 0.782 0.765 0.495 0.326 0.495 0.555 0.151)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.423
Average program size in population (points): 68.044
Average percent parens in population: 0.244
Minimum age in population: 15.8046875
Maximum age in population: 20.17236328125
Average age in population: 18.20044677734375
Median age in population: 18.243408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7141571
--- Timings ---
Current time: 1559314342397 milliseconds
Total Time:          36.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.2 seconds, 64.1%
Fitness Testing:      8.0 seconds, 21.9%
Report:               5.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 218
Test mean error for best: 0.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Lexicase best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s_when_autoconstructing () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop exec_do*count (exec_pop () tag_integer_66 exec_k_when_autoconstructing () (boolean_not boolean_invert_first_then_and print_integer) integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Zero cases best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s_when_autoconstructing () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop exec_do*count (exec_pop () tag_integer_66 exec_k_when_autoconstructing () (boolean_not boolean_invert_first_then_and print_integer) integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup) exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (519 381 250 259 654 237 650 519 763 374)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (519 381 250 259 654 237 650 519 763 374)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in2})
Best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_dup exec_s_when_autoconstructing (print_integer) (integer_mult exec_swap (integer_empty) (integer_eq boolean_invert_first_then_and) integer_mult integer_flush) (exec_do*times (exec_dup () integer_empty) integer_mult integer_flush) exec_do*times (exec_dup () in4 in4 boolean_yankdup integer_rot integer_add exec_pop (integer_rot exec_do*count (exec_y_when_autoconstructing (integer_lte in2)))))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 57
Size: 79
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 5.394
Median total errors in population: 5
Error averages by case: (0.481 0.619 0.75 0.741 0.346 0.763 0.35 0.481 0.237 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.986
Average program size in population (points): 59.595
Average percent parens in population: 0.228
Minimum age in population: 17.09375
Maximum age in population: 21.302734375
Average age in population: 19.82562182617188
Median age in population: 19.9443359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 258
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.009
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7903502
--- Timings ---
Current time: 1559314345264 milliseconds
Total Time:          39.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.1 seconds, 63.7%
Fitness Testing:      8.7 seconds, 22.0%
Report:               5.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 218
Test mean error for best: 0.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4})
Lexicase best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop (tag_integer_66 integer_empty) boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4})
Zero cases best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3) integer_min integer_rot integer_min exec_s () (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop (tag_integer_66 integer_empty) boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (479 424 630 402 621 612 414 402 484 426)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (479 424 630 402 621 612 414 402 484 426)
Population mean number of perfect (error zero) cases: 4.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup})
Best program: (exec_do*count (integer_dup_times boolean_invert_first_then_and) integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) (print_newline in3 integer_mult exec_k_when_autoconstructing (integer_eq in1 in3 in4 exec_eq integer_shove) () print_newline in3) integer_min integer_rot integer_min exec_s (tag_exec_637 (integer_add integer_flush) exec_do*range () print_integer) (boolean_or) (integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty) boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush exec_do*times (exec_dup () in4 in4 integer_gte) boolean_stackdepth boolean_shove boolean_yankdup integer_rot integer_add exec_pop (integer_rot boolean_not exec_yankdup))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 63
Size: 80
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.106
Median total errors in population: 5
Error averages by case: (0.521 0.576 0.37 0.598 0.379 0.388 0.586 0.598 0.516 0.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.9
Average program size in population (points): 64.775
Average percent parens in population: 0.230
Minimum age in population: 18.69921875
Maximum age in population: 23.0361328125
Average age in population: 21.36090588378906
Median age in population: 21.4354248046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.009
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8532718
--- Timings ---
Current time: 1559314348062 milliseconds
Total Time:          42.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 63.9%
Fitness Testing:      9.2 seconds, 21.9%
Report:               5.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 445
Test mean error for best: 0.44500
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49-19              
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup})
Lexicase best program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 87
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup})
Zero cases best program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () print_integer) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 87
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (602 633 615 333 408 843 368 830 337 846)
Population mean number of elite cases: 5.82
Count of perfect (error zero) individuals by case: (602 633 615 333 408 843 368 830 337 846)
Population mean number of perfect (error zero) cases: 5.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction tag_exec_637} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_66} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup})
Best program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 68
Size: 87
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 4.185
Median total errors in population: 4
Error averages by case: (0.398 0.367 0.385 0.667 0.592 0.157 0.632 0.17 0.663 0.154)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.293
Average program size in population (points): 69.607
Average percent parens in population: 0.235
Minimum age in population: 19.69921875
Maximum age in population: 24.427734375
Average age in population: 22.90457684326172
Median age in population: 23.1031494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.01
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 9147528
--- Timings ---
Current time: 1559314351018 milliseconds
Total Time:          44.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.7 seconds, 64.1%
Fitness Testing:      9.8 seconds, 21.9%
Report:               6.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 15
Successful program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 87


Auto-simplifying with starting size: 87
step: 0
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 500
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 1000
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 1500
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 2000
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 2500
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 3000
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 3500
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 4000
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 4500
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

step: 5000
program: (in1 integer_dup in2 in4 exec_eq integer_shove print_newline in3 exec_yankdup integer_rot integer_rot integer_min exec_s () (print_integer) (boolean_or) integer_shove integer_sub integer_mod exec_do*times (exec_stackdepth in3 exec_y_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_empty) (integer_eq integer_empty) integer_mult integer_flush) exec_do*times (integer_rot integer_min) exec_s () (tag_exec_637 (integer_add boolean_stackdepth) exec_do*range () exec_empty) (boolean_or) integer_shove exec_noop boolean_rot exec_pop () boolean_or) integer_shove exec_noop boolean_rot exec_pop () tag_integer_66 integer_empty boolean_not boolean_invert_first_then_and print_integer integer_mult exec_swap (integer_empty) (integer_eq integer_empty) in4 in4 integer_gte boolean_stackdepth boolean_shove boolean_not integer_rot integer_add exec_pop (integer_dup))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 87

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 445
Test mean error for best: 0.44500
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49-19              
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
