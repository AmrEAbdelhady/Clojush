Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[58 -21 58 58] -21] [[-53 3 3 3] -53] [[1 1 71 1] 1] [[77 77 4 77] 4] [[13 13 13 -94] -94] [[-39 -39 -39 -68] -68] [[69 69 81 69] 69] [[-3 -43 -43 -43] -43] [[66 -47 -47 -47] -47] [[-50 -50 2 -50] -50] [(22 22 22 22) 22] [(-73 -73 -73 -73) -73] [(85 85 85 85) 85] [(-57 -57 -57 -57) -57] [(32 32 32 32) 32] [(41 67 17 47) 17] [(0 80 16 51) 0] [(4 77 85 50) 4] [(15 24 64 77) 15] [(33 44 100 20) 20] [(66 61 65 13) 13] [(49 63 66 36) 36] [(85 62 13 91) 13] [(65 55 50 97) 50] [(84 13 1 84) 1] [(15 67 86 7) 7] [(2 1 26 42) 1] [(8 34 45 58) 8] [(32 95 0 94) 0] [(14 37 55 80) 14] [(82 76 96 70) 70] [(83 25 51 77) 25] [(56 32 33 83) 32] [(59 36 54 85) 36] [(22 57 90 22) 22] [(65 -32 -57 70) -57] [(-79 87 80 29) -79] [(-27 -19 14 98) -27] [(-25 15 9 26) -25] [(48 84 -35 16) -35] [(5 45 37 -58) -58] [(91 69 59 100) 59] [(43 -34 -80 -69) -80] [(20 -81 -27 -60) -81] [(-92 -68 8 4) -92] [(-53 68 84 -100) -100] [(23 51 81 -62) -62] [(-97 11 8 -55) -97] [(-7 66 6 -97) -97] [(-73 -100 34 -85) -100] [(-91 -5 -78 -8) -91] [(-28 96 -91 4) -91] [(-50 18 88 85) -50] [(12 68 -94 1) -94] [(-21 93 72 -4) -21] [(59 26 -70 92) -70] [(-78 68 -96 95) -96] [(-54 -15 -23 -90) -90] [(-94 -10 43 -13) -94] [(8 7 94 98) 7] [(36 -98 -99 48) -99] [(-54 21 -45 0) -54] [(-41 28 -48 -28) -48] [(-75 62 -37 -70) -75] [(-8 33 -82 46) -82] [(-64 -21 -81 0) -81] [(-45 -51 13 -26) -51] [(39 -15 -42 -80) -80] [(-35 -4 46 -40) -40] [(-80 56 -18 7) -80] [(100 63 -39 -74) -74] [(71 51 -45 37) -45] [(75 -59 -46 98) -59] [(1 74 22 -58) -58] [(57 95 52 -95) -95] [(49 74 17 32) 17] [(-13 -57 73 -42) -57] [(-82 22 -98 -93) -98] [(-3 -100 99 88) -100] [(-26 4 -14 -74) -74] [(-98 51 32 1) -98] [(11 68 -67 -49) -67] [(-52 -2 67 53) -52] [(16 -67 -52 -69) -69] [(-84 -31 -8 39) -84] [(81 -55 31 -45) -55] [(-73 -96 -13 -80) -96] [(13 73 75 0) 0] [(-82 -18 65 -83) -83] [(-52 -93 2 85) -93] [(-8 -33 -10 -24) -33] [(-25 91 -63 -68) -68] [(48 -51 75 -92) -92] [(-46 76 -70 86) -70] [(19 20 -9 74) -9])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[58 -21 58 58] -21]
Train Case:   6 | Input/Output: [[-53 3 3 3] -53]
Train Case:   7 | Input/Output: [[1 1 71 1] 1]
Train Case:   8 | Input/Output: [[77 77 4 77] 4]
Train Case:   9 | Input/Output: [[13 13 13 -94] -94]
Train Case:  10 | Input/Output: [[-39 -39 -39 -68] -68]
Train Case:  11 | Input/Output: [[69 69 81 69] 69]
Train Case:  12 | Input/Output: [[-3 -43 -43 -43] -43]
Train Case:  13 | Input/Output: [[66 -47 -47 -47] -47]
Train Case:  14 | Input/Output: [[-50 -50 2 -50] -50]
Train Case:  15 | Input/Output: [(22 22 22 22) 22]
Train Case:  16 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  17 | Input/Output: [(85 85 85 85) 85]
Train Case:  18 | Input/Output: [(-57 -57 -57 -57) -57]
Train Case:  19 | Input/Output: [(32 32 32 32) 32]
Train Case:  20 | Input/Output: [(41 67 17 47) 17]
Train Case:  21 | Input/Output: [(0 80 16 51) 0]
Train Case:  22 | Input/Output: [(4 77 85 50) 4]
Train Case:  23 | Input/Output: [(15 24 64 77) 15]
Train Case:  24 | Input/Output: [(33 44 100 20) 20]
Train Case:  25 | Input/Output: [(66 61 65 13) 13]
Train Case:  26 | Input/Output: [(49 63 66 36) 36]
Train Case:  27 | Input/Output: [(85 62 13 91) 13]
Train Case:  28 | Input/Output: [(65 55 50 97) 50]
Train Case:  29 | Input/Output: [(84 13 1 84) 1]
Train Case:  30 | Input/Output: [(15 67 86 7) 7]
Train Case:  31 | Input/Output: [(2 1 26 42) 1]
Train Case:  32 | Input/Output: [(8 34 45 58) 8]
Train Case:  33 | Input/Output: [(32 95 0 94) 0]
Train Case:  34 | Input/Output: [(14 37 55 80) 14]
Train Case:  35 | Input/Output: [(82 76 96 70) 70]
Train Case:  36 | Input/Output: [(83 25 51 77) 25]
Train Case:  37 | Input/Output: [(56 32 33 83) 32]
Train Case:  38 | Input/Output: [(59 36 54 85) 36]
Train Case:  39 | Input/Output: [(22 57 90 22) 22]
Train Case:  40 | Input/Output: [(65 -32 -57 70) -57]
Train Case:  41 | Input/Output: [(-79 87 80 29) -79]
Train Case:  42 | Input/Output: [(-27 -19 14 98) -27]
Train Case:  43 | Input/Output: [(-25 15 9 26) -25]
Train Case:  44 | Input/Output: [(48 84 -35 16) -35]
Train Case:  45 | Input/Output: [(5 45 37 -58) -58]
Train Case:  46 | Input/Output: [(91 69 59 100) 59]
Train Case:  47 | Input/Output: [(43 -34 -80 -69) -80]
Train Case:  48 | Input/Output: [(20 -81 -27 -60) -81]
Train Case:  49 | Input/Output: [(-92 -68 8 4) -92]
Train Case:  50 | Input/Output: [(-53 68 84 -100) -100]
Train Case:  51 | Input/Output: [(23 51 81 -62) -62]
Train Case:  52 | Input/Output: [(-97 11 8 -55) -97]
Train Case:  53 | Input/Output: [(-7 66 6 -97) -97]
Train Case:  54 | Input/Output: [(-73 -100 34 -85) -100]
Train Case:  55 | Input/Output: [(-91 -5 -78 -8) -91]
Train Case:  56 | Input/Output: [(-28 96 -91 4) -91]
Train Case:  57 | Input/Output: [(-50 18 88 85) -50]
Train Case:  58 | Input/Output: [(12 68 -94 1) -94]
Train Case:  59 | Input/Output: [(-21 93 72 -4) -21]
Train Case:  60 | Input/Output: [(59 26 -70 92) -70]
Train Case:  61 | Input/Output: [(-78 68 -96 95) -96]
Train Case:  62 | Input/Output: [(-54 -15 -23 -90) -90]
Train Case:  63 | Input/Output: [(-94 -10 43 -13) -94]
Train Case:  64 | Input/Output: [(8 7 94 98) 7]
Train Case:  65 | Input/Output: [(36 -98 -99 48) -99]
Train Case:  66 | Input/Output: [(-54 21 -45 0) -54]
Train Case:  67 | Input/Output: [(-41 28 -48 -28) -48]
Train Case:  68 | Input/Output: [(-75 62 -37 -70) -75]
Train Case:  69 | Input/Output: [(-8 33 -82 46) -82]
Train Case:  70 | Input/Output: [(-64 -21 -81 0) -81]
Train Case:  71 | Input/Output: [(-45 -51 13 -26) -51]
Train Case:  72 | Input/Output: [(39 -15 -42 -80) -80]
Train Case:  73 | Input/Output: [(-35 -4 46 -40) -40]
Train Case:  74 | Input/Output: [(-80 56 -18 7) -80]
Train Case:  75 | Input/Output: [(100 63 -39 -74) -74]
Train Case:  76 | Input/Output: [(71 51 -45 37) -45]
Train Case:  77 | Input/Output: [(75 -59 -46 98) -59]
Train Case:  78 | Input/Output: [(1 74 22 -58) -58]
Train Case:  79 | Input/Output: [(57 95 52 -95) -95]
Train Case:  80 | Input/Output: [(49 74 17 32) 17]
Train Case:  81 | Input/Output: [(-13 -57 73 -42) -57]
Train Case:  82 | Input/Output: [(-82 22 -98 -93) -98]
Train Case:  83 | Input/Output: [(-3 -100 99 88) -100]
Train Case:  84 | Input/Output: [(-26 4 -14 -74) -74]
Train Case:  85 | Input/Output: [(-98 51 32 1) -98]
Train Case:  86 | Input/Output: [(11 68 -67 -49) -67]
Train Case:  87 | Input/Output: [(-52 -2 67 53) -52]
Train Case:  88 | Input/Output: [(16 -67 -52 -69) -69]
Train Case:  89 | Input/Output: [(-84 -31 -8 39) -84]
Train Case:  90 | Input/Output: [(81 -55 31 -45) -55]
Train Case:  91 | Input/Output: [(-73 -96 -13 -80) -96]
Train Case:  92 | Input/Output: [(13 73 75 0) 0]
Train Case:  93 | Input/Output: [(-82 -18 65 -83) -83]
Train Case:  94 | Input/Output: [(-52 -93 2 85) -93]
Train Case:  95 | Input/Output: [(-8 -33 -10 -24) -33]
Train Case:  96 | Input/Output: [(-25 91 -63 -68) -68]
Train Case:  97 | Input/Output: [(48 -51 75 -92) -92]
Train Case:  98 | Input/Output: [(-46 76 -70 86) -70]
Train Case:  99 | Input/Output: [(19 20 -9 74) -9]
Test Case:   0 | Input/Output: [[63 39 39 39] 39]
Test Case:   1 | Input/Output: [[32 32 94 32] 32]
Test Case:   2 | Input/Output: [[-49 27 27 27] -49]
Test Case:   3 | Input/Output: [[35 96 35 35] 35]
Test Case:   4 | Input/Output: [[-11 -11 -11 -42] -42]
Test Case:   5 | Input/Output: [[-69 -69 -69 84] -69]
Test Case:   6 | Input/Output: [[58 58 58 -57] -57]
Test Case:   7 | Input/Output: [[-75 -44 -44 -44] -75]
Test Case:   8 | Input/Output: [[9 9 -24 9] -24]
Test Case:   9 | Input/Output: [[75 -28 75 75] -28]
Test Case:  10 | Input/Output: [[-7 -7 -7 -7] -7]
Test Case:  11 | Input/Output: [[58 58 -15 58] -15]
Test Case:  12 | Input/Output: [[-78 -78 -78 83] -78]
Test Case:  13 | Input/Output: [[10 -92 -92 -92] -92]
Test Case:  14 | Input/Output: [[-100 8 8 8] -100]
Test Case:  15 | Input/Output: [[10 95 10 10] 10]
Test Case:  16 | Input/Output: [[84 86 84 84] 84]
Test Case:  17 | Input/Output: [[90 16 16 16] 16]
Test Case:  18 | Input/Output: [[54 54 54 82] 54]
Test Case:  19 | Input/Output: [[10 -54 10 10] -54]
Test Case:  20 | Input/Output: [[21 21 21 19] 19]
Test Case:  21 | Input/Output: [[-49 -49 -66 -49] -66]
Test Case:  22 | Input/Output: [[-22 -22 45 -22] -22]
Test Case:  23 | Input/Output: [[12 12 63 12] 12]
Test Case:  24 | Input/Output: [[14 14 14 14] 14]
Test Case:  25 | Input/Output: [[-94 -53 -94 -94] -94]
Test Case:  26 | Input/Output: [[-63 -11 -11 -11] -63]
Test Case:  27 | Input/Output: [[25 25 25 29] 25]
Test Case:  28 | Input/Output: [[97 97 97 -39] -39]
Test Case:  29 | Input/Output: [[44 44 26 44] 26]
Test Case:  30 | Input/Output: [[-14 -10 -10 -10] -14]
Test Case:  31 | Input/Output: [[-43 61 -43 -43] -43]
Test Case:  32 | Input/Output: [[77 7 7 7] 7]
Test Case:  33 | Input/Output: [[17 17 17 -25] -25]
Test Case:  34 | Input/Output: [[83 83 83 -87] -87]
Test Case:  35 | Input/Output: [[99 33 33 33] 33]
Test Case:  36 | Input/Output: [[-12 -62 -62 -62] -62]
Test Case:  37 | Input/Output: [[58 -81 58 58] -81]
Test Case:  38 | Input/Output: [[-34 -66 -34 -34] -66]
Test Case:  39 | Input/Output: [[-61 -61 -20 -61] -61]
Test Case:  40 | Input/Output: [[10 10 10 29] 10]
Test Case:  41 | Input/Output: [[33 -14 33 33] -14]
Test Case:  42 | Input/Output: [[-37 -14 -37 -37] -37]
Test Case:  43 | Input/Output: [[-12 63 63 63] -12]
Test Case:  44 | Input/Output: [[7 7 7 -50] -50]
Test Case:  45 | Input/Output: [[-81 42 -81 -81] -81]
Test Case:  46 | Input/Output: [[51 51 51 19] 19]
Test Case:  47 | Input/Output: [[-56 -56 47 -56] -56]
Test Case:  48 | Input/Output: [[-6 51 51 51] -6]
Test Case:  49 | Input/Output: [[-62 -62 -60 -62] -62]
Test Case:  50 | Input/Output: [[74 -60 74 74] -60]
Test Case:  51 | Input/Output: [[23 23 49 23] 23]
Test Case:  52 | Input/Output: [[71 -2 -2 -2] -2]
Test Case:  53 | Input/Output: [[-94 -69 -69 -69] -94]
Test Case:  54 | Input/Output: [[-24 -24 73 -24] -24]
Test Case:  55 | Input/Output: [[-16 -16 -16 -82] -82]
Test Case:  56 | Input/Output: [[54 54 -70 54] -70]
Test Case:  57 | Input/Output: [[-57 -57 -57 36] -57]
Test Case:  58 | Input/Output: [[-8 51 -8 -8] -8]
Test Case:  59 | Input/Output: [[2 2 99 2] 2]
Test Case:  60 | Input/Output: [[-12 -12 -12 -5] -12]
Test Case:  61 | Input/Output: [[-92 -92 -42 -92] -92]
Test Case:  62 | Input/Output: [[88 16 16 16] 16]
Test Case:  63 | Input/Output: [[-6 -6 90 -6] -6]
Test Case:  64 | Input/Output: [[52 96 96 96] 52]
Test Case:  65 | Input/Output: [[91 91 91 -27] -27]
Test Case:  66 | Input/Output: [[-43 -43 -43 34] -43]
Test Case:  67 | Input/Output: [[-98 -98 56 -98] -98]
Test Case:  68 | Input/Output: [[36 -71 36 36] -71]
Test Case:  69 | Input/Output: [[-41 -41 48 -41] -41]
Test Case:  70 | Input/Output: [[61 32 32 32] 32]
Test Case:  71 | Input/Output: [[-82 67 67 67] -82]
Test Case:  72 | Input/Output: [[38 -52 38 38] -52]
Test Case:  73 | Input/Output: [[-21 -38 -21 -21] -38]
Test Case:  74 | Input/Output: [[41 41 -54 41] -54]
Test Case:  75 | Input/Output: [[-12 -12 96 -12] -12]
Test Case:  76 | Input/Output: [[-23 -23 19 -23] -23]
Test Case:  77 | Input/Output: [[7 25 7 7] 7]
Test Case:  78 | Input/Output: [[71 -91 71 71] -91]
Test Case:  79 | Input/Output: [[-65 -65 -65 62] -65]
Test Case:  80 | Input/Output: [[-44 -54 -44 -44] -54]
Test Case:  81 | Input/Output: [[88 58 58 58] 58]
Test Case:  82 | Input/Output: [[-12 -12 33 -12] -12]
Test Case:  83 | Input/Output: [[-45 19 -45 -45] -45]
Test Case:  84 | Input/Output: [[13 13 0 13] 0]
Test Case:  85 | Input/Output: [[0 72 72 72] 0]
Test Case:  86 | Input/Output: [[-72 -72 -60 -72] -72]
Test Case:  87 | Input/Output: [[93 -30 -30 -30] -30]
Test Case:  88 | Input/Output: [[51 51 -39 51] -39]
Test Case:  89 | Input/Output: [[-76 -76 -94 -76] -94]
Test Case:  90 | Input/Output: [[-32 90 -32 -32] -32]
Test Case:  91 | Input/Output: [[-85 64 -85 -85] -85]
Test Case:  92 | Input/Output: [[-40 -63 -63 -63] -63]
Test Case:  93 | Input/Output: [[-6 -6 -6 -5] -6]
Test Case:  94 | Input/Output: [[30 16 30 30] 16]
Test Case:  95 | Input/Output: [[32 53 32 32] 32]
Test Case:  96 | Input/Output: [[75 75 75 -30] -30]
Test Case:  97 | Input/Output: [[94 94 -94 94] -94]
Test Case:  98 | Input/Output: [[14 2 2 2] 2]
Test Case:  99 | Input/Output: [[41 -38 -38 -38] -38]
Test Case: 100 | Input/Output: [(16 16 16 16) 16]
Test Case: 101 | Input/Output: [(45 45 45 45) 45]
Test Case: 102 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 103 | Input/Output: [(75 75 75 75) 75]
Test Case: 104 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 105 | Input/Output: [(77 77 77 77) 77]
Test Case: 106 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 107 | Input/Output: [(64 64 64 64) 64]
Test Case: 108 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 109 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 110 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 111 | Input/Output: [(95 95 95 95) 95]
Test Case: 112 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 113 | Input/Output: [(39 39 39 39) 39]
Test Case: 114 | Input/Output: [(41 41 41 41) 41]
Test Case: 115 | Input/Output: [(8 8 8 8) 8]
Test Case: 116 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 117 | Input/Output: [(16 16 16 16) 16]
Test Case: 118 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 119 | Input/Output: [(20 20 20 20) 20]
Test Case: 120 | Input/Output: [(11 11 11 11) 11]
Test Case: 121 | Input/Output: [(3 3 3 3) 3]
Test Case: 122 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 123 | Input/Output: [(87 87 87 87) 87]
Test Case: 124 | Input/Output: [(79 79 79 79) 79]
Test Case: 125 | Input/Output: [(73 73 73 73) 73]
Test Case: 126 | Input/Output: [(24 24 24 24) 24]
Test Case: 127 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 128 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 129 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 130 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 131 | Input/Output: [(2 2 2 2) 2]
Test Case: 132 | Input/Output: [(88 88 88 88) 88]
Test Case: 133 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 134 | Input/Output: [(99 99 99 99) 99]
Test Case: 135 | Input/Output: [(25 25 25 25) 25]
Test Case: 136 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 137 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 138 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 139 | Input/Output: [(65 65 65 65) 65]
Test Case: 140 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 141 | Input/Output: [(29 29 29 29) 29]
Test Case: 142 | Input/Output: [(54 54 54 54) 54]
Test Case: 143 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 144 | Input/Output: [(55 55 55 55) 55]
Test Case: 145 | Input/Output: [(76 76 76 76) 76]
Test Case: 146 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 147 | Input/Output: [(25 25 25 25) 25]
Test Case: 148 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 149 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 150 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 151 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 152 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 153 | Input/Output: [(0 0 0 0) 0]
Test Case: 154 | Input/Output: [(99 99 99 99) 99]
Test Case: 155 | Input/Output: [(89 89 89 89) 89]
Test Case: 156 | Input/Output: [(83 83 83 83) 83]
Test Case: 157 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 158 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 159 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 160 | Input/Output: [(84 84 84 84) 84]
Test Case: 161 | Input/Output: [(48 48 48 48) 48]
Test Case: 162 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 163 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 164 | Input/Output: [(37 37 37 37) 37]
Test Case: 165 | Input/Output: [(24 24 24 24) 24]
Test Case: 166 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 167 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 168 | Input/Output: [(9 9 9 9) 9]
Test Case: 169 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 170 | Input/Output: [(84 84 84 84) 84]
Test Case: 171 | Input/Output: [(48 48 48 48) 48]
Test Case: 172 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 173 | Input/Output: [(69 69 69 69) 69]
Test Case: 174 | Input/Output: [(97 97 97 97) 97]
Test Case: 175 | Input/Output: [(90 90 90 90) 90]
Test Case: 176 | Input/Output: [(57 57 57 57) 57]
Test Case: 177 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 178 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 179 | Input/Output: [(81 81 81 81) 81]
Test Case: 180 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 181 | Input/Output: [(35 35 35 35) 35]
Test Case: 182 | Input/Output: [(44 44 44 44) 44]
Test Case: 183 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 184 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 185 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 186 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 187 | Input/Output: [(54 54 54 54) 54]
Test Case: 188 | Input/Output: [(71 71 71 71) 71]
Test Case: 189 | Input/Output: [(87 87 87 87) 87]
Test Case: 190 | Input/Output: [(88 88 88 88) 88]
Test Case: 191 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 192 | Input/Output: [(84 84 84 84) 84]
Test Case: 193 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 194 | Input/Output: [(46 46 46 46) 46]
Test Case: 195 | Input/Output: [(4 4 4 4) 4]
Test Case: 196 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 197 | Input/Output: [(95 95 95 95) 95]
Test Case: 198 | Input/Output: [(78 78 78 78) 78]
Test Case: 199 | Input/Output: [(52 52 52 52) 52]
Test Case: 200 | Input/Output: [(80 13 56 56) 13]
Test Case: 201 | Input/Output: [(14 59 32 25) 14]
Test Case: 202 | Input/Output: [(27 96 37 98) 27]
Test Case: 203 | Input/Output: [(32 67 26 22) 22]
Test Case: 204 | Input/Output: [(68 45 86 66) 45]
Test Case: 205 | Input/Output: [(79 9 96 51) 9]
Test Case: 206 | Input/Output: [(97 68 25 20) 20]
Test Case: 207 | Input/Output: [(21 85 21 90) 21]
Test Case: 208 | Input/Output: [(55 87 23 6) 6]
Test Case: 209 | Input/Output: [(27 41 75 20) 20]
Test Case: 210 | Input/Output: [(100 67 19 87) 19]
Test Case: 211 | Input/Output: [(10 35 37 92) 10]
Test Case: 212 | Input/Output: [(34 95 51 45) 34]
Test Case: 213 | Input/Output: [(67 18 53 26) 18]
Test Case: 214 | Input/Output: [(63 64 77 5) 5]
Test Case: 215 | Input/Output: [(77 39 58 85) 39]
Test Case: 216 | Input/Output: [(76 89 47 24) 24]
Test Case: 217 | Input/Output: [(87 50 77 51) 50]
Test Case: 218 | Input/Output: [(5 33 87 54) 5]
Test Case: 219 | Input/Output: [(20 25 11 100) 11]
Test Case: 220 | Input/Output: [(90 34 16 34) 16]
Test Case: 221 | Input/Output: [(68 61 38 65) 38]
Test Case: 222 | Input/Output: [(73 99 54 73) 54]
Test Case: 223 | Input/Output: [(62 33 62 94) 33]
Test Case: 224 | Input/Output: [(86 54 11 46) 11]
Test Case: 225 | Input/Output: [(42 81 74 9) 9]
Test Case: 226 | Input/Output: [(70 6 45 95) 6]
Test Case: 227 | Input/Output: [(80 94 25 34) 25]
Test Case: 228 | Input/Output: [(90 3 75 50) 3]
Test Case: 229 | Input/Output: [(67 36 80 8) 8]
Test Case: 230 | Input/Output: [(96 64 57 73) 57]
Test Case: 231 | Input/Output: [(16 40 78 42) 16]
Test Case: 232 | Input/Output: [(81 89 36 29) 29]
Test Case: 233 | Input/Output: [(8 37 5 33) 5]
Test Case: 234 | Input/Output: [(54 67 27 22) 22]
Test Case: 235 | Input/Output: [(88 83 6 6) 6]
Test Case: 236 | Input/Output: [(2 76 40 88) 2]
Test Case: 237 | Input/Output: [(55 24 91 34) 24]
Test Case: 238 | Input/Output: [(56 7 24 43) 7]
Test Case: 239 | Input/Output: [(41 68 54 70) 41]
Test Case: 240 | Input/Output: [(82 46 55 37) 37]
Test Case: 241 | Input/Output: [(27 82 83 44) 27]
Test Case: 242 | Input/Output: [(44 7 33 44) 7]
Test Case: 243 | Input/Output: [(32 88 63 77) 32]
Test Case: 244 | Input/Output: [(63 19 65 42) 19]
Test Case: 245 | Input/Output: [(4 32 95 27) 4]
Test Case: 246 | Input/Output: [(36 90 25 96) 25]
Test Case: 247 | Input/Output: [(29 85 38 49) 29]
Test Case: 248 | Input/Output: [(37 38 67 43) 37]
Test Case: 249 | Input/Output: [(69 81 41 36) 36]
Test Case: 250 | Input/Output: [(10 19 60 96) 10]
Test Case: 251 | Input/Output: [(31 95 67 61) 31]
Test Case: 252 | Input/Output: [(44 96 100 91) 44]
Test Case: 253 | Input/Output: [(27 72 100 26) 26]
Test Case: 254 | Input/Output: [(40 62 69 99) 40]
Test Case: 255 | Input/Output: [(88 92 45 94) 45]
Test Case: 256 | Input/Output: [(36 57 71 99) 36]
Test Case: 257 | Input/Output: [(15 32 78 16) 15]
Test Case: 258 | Input/Output: [(89 59 18 95) 18]
Test Case: 259 | Input/Output: [(27 48 55 94) 27]
Test Case: 260 | Input/Output: [(96 33 62 64) 33]
Test Case: 261 | Input/Output: [(15 33 63 33) 15]
Test Case: 262 | Input/Output: [(52 78 59 68) 52]
Test Case: 263 | Input/Output: [(22 90 99 88) 22]
Test Case: 264 | Input/Output: [(83 86 59 47) 47]
Test Case: 265 | Input/Output: [(100 60 8 61) 8]
Test Case: 266 | Input/Output: [(66 23 77 32) 23]
Test Case: 267 | Input/Output: [(7 30 32 23) 7]
Test Case: 268 | Input/Output: [(45 86 4 91) 4]
Test Case: 269 | Input/Output: [(27 80 29 53) 27]
Test Case: 270 | Input/Output: [(89 86 41 93) 41]
Test Case: 271 | Input/Output: [(67 82 43 48) 43]
Test Case: 272 | Input/Output: [(10 27 9 50) 9]
Test Case: 273 | Input/Output: [(4 2 90 74) 2]
Test Case: 274 | Input/Output: [(39 72 24 9) 9]
Test Case: 275 | Input/Output: [(9 84 92 21) 9]
Test Case: 276 | Input/Output: [(33 35 58 54) 33]
Test Case: 277 | Input/Output: [(83 35 41 29) 29]
Test Case: 278 | Input/Output: [(45 83 100 6) 6]
Test Case: 279 | Input/Output: [(23 98 27 51) 23]
Test Case: 280 | Input/Output: [(42 3 74 3) 3]
Test Case: 281 | Input/Output: [(79 99 94 69) 69]
Test Case: 282 | Input/Output: [(63 22 53 8) 8]
Test Case: 283 | Input/Output: [(12 16 8 97) 8]
Test Case: 284 | Input/Output: [(25 92 22 70) 22]
Test Case: 285 | Input/Output: [(13 48 28 33) 13]
Test Case: 286 | Input/Output: [(57 49 67 27) 27]
Test Case: 287 | Input/Output: [(59 85 19 77) 19]
Test Case: 288 | Input/Output: [(43 4 60 55) 4]
Test Case: 289 | Input/Output: [(56 60 63 75) 56]
Test Case: 290 | Input/Output: [(15 76 91 32) 15]
Test Case: 291 | Input/Output: [(60 41 39 63) 39]
Test Case: 292 | Input/Output: [(20 77 73 14) 14]
Test Case: 293 | Input/Output: [(5 99 49 60) 5]
Test Case: 294 | Input/Output: [(71 39 82 13) 13]
Test Case: 295 | Input/Output: [(11 1 46 83) 1]
Test Case: 296 | Input/Output: [(48 71 71 30) 30]
Test Case: 297 | Input/Output: [(45 28 81 30) 28]
Test Case: 298 | Input/Output: [(52 16 78 17) 16]
Test Case: 299 | Input/Output: [(27 71 63 47) 27]
Test Case: 300 | Input/Output: [(51 66 29 77) 29]
Test Case: 301 | Input/Output: [(30 40 34 24) 24]
Test Case: 302 | Input/Output: [(97 79 20 80) 20]
Test Case: 303 | Input/Output: [(98 23 57 25) 23]
Test Case: 304 | Input/Output: [(46 7 86 40) 7]
Test Case: 305 | Input/Output: [(76 11 40 64) 11]
Test Case: 306 | Input/Output: [(84 20 71 68) 20]
Test Case: 307 | Input/Output: [(46 31 7 2) 2]
Test Case: 308 | Input/Output: [(49 47 50 35) 35]
Test Case: 309 | Input/Output: [(59 60 0 44) 0]
Test Case: 310 | Input/Output: [(7 22 14 94) 7]
Test Case: 311 | Input/Output: [(48 42 52 9) 9]
Test Case: 312 | Input/Output: [(22 100 67 18) 18]
Test Case: 313 | Input/Output: [(29 77 3 55) 3]
Test Case: 314 | Input/Output: [(96 43 50 24) 24]
Test Case: 315 | Input/Output: [(7 61 61 73) 7]
Test Case: 316 | Input/Output: [(11 42 40 90) 11]
Test Case: 317 | Input/Output: [(18 6 44 30) 6]
Test Case: 318 | Input/Output: [(63 1 29 93) 1]
Test Case: 319 | Input/Output: [(32 24 98 53) 24]
Test Case: 320 | Input/Output: [(18 78 60 75) 18]
Test Case: 321 | Input/Output: [(8 83 13 33) 8]
Test Case: 322 | Input/Output: [(59 91 49 96) 49]
Test Case: 323 | Input/Output: [(49 27 3 97) 3]
Test Case: 324 | Input/Output: [(19 94 71 97) 19]
Test Case: 325 | Input/Output: [(28 45 99 97) 28]
Test Case: 326 | Input/Output: [(87 0 56 59) 0]
Test Case: 327 | Input/Output: [(92 64 82 73) 64]
Test Case: 328 | Input/Output: [(22 21 51 29) 21]
Test Case: 329 | Input/Output: [(71 59 83 77) 59]
Test Case: 330 | Input/Output: [(34 14 24 39) 14]
Test Case: 331 | Input/Output: [(57 79 22 26) 22]
Test Case: 332 | Input/Output: [(8 65 58 45) 8]
Test Case: 333 | Input/Output: [(16 18 95 95) 16]
Test Case: 334 | Input/Output: [(2 75 2 27) 2]
Test Case: 335 | Input/Output: [(77 100 50 29) 29]
Test Case: 336 | Input/Output: [(70 4 78 40) 4]
Test Case: 337 | Input/Output: [(33 41 11 89) 11]
Test Case: 338 | Input/Output: [(6 28 16 52) 6]
Test Case: 339 | Input/Output: [(17 64 5 16) 5]
Test Case: 340 | Input/Output: [(92 16 68 59) 16]
Test Case: 341 | Input/Output: [(97 71 31 66) 31]
Test Case: 342 | Input/Output: [(33 1 52 55) 1]
Test Case: 343 | Input/Output: [(8 42 49 51) 8]
Test Case: 344 | Input/Output: [(46 63 78 90) 46]
Test Case: 345 | Input/Output: [(85 68 71 21) 21]
Test Case: 346 | Input/Output: [(22 56 85 44) 22]
Test Case: 347 | Input/Output: [(34 7 88 27) 7]
Test Case: 348 | Input/Output: [(45 63 5 11) 5]
Test Case: 349 | Input/Output: [(23 60 66 31) 23]
Test Case: 350 | Input/Output: [(27 56 65 10) 10]
Test Case: 351 | Input/Output: [(18 24 90 66) 18]
Test Case: 352 | Input/Output: [(34 40 13 89) 13]
Test Case: 353 | Input/Output: [(79 57 2 64) 2]
Test Case: 354 | Input/Output: [(96 13 38 93) 13]
Test Case: 355 | Input/Output: [(98 81 10 82) 10]
Test Case: 356 | Input/Output: [(19 97 45 7) 7]
Test Case: 357 | Input/Output: [(97 61 37 44) 37]
Test Case: 358 | Input/Output: [(80 44 8 87) 8]
Test Case: 359 | Input/Output: [(83 67 80 18) 18]
Test Case: 360 | Input/Output: [(67 21 41 56) 21]
Test Case: 361 | Input/Output: [(85 96 14 35) 14]
Test Case: 362 | Input/Output: [(53 89 3 63) 3]
Test Case: 363 | Input/Output: [(52 83 94 34) 34]
Test Case: 364 | Input/Output: [(30 53 35 94) 30]
Test Case: 365 | Input/Output: [(45 88 33 8) 8]
Test Case: 366 | Input/Output: [(86 29 57 24) 24]
Test Case: 367 | Input/Output: [(80 91 84 46) 46]
Test Case: 368 | Input/Output: [(52 39 99 56) 39]
Test Case: 369 | Input/Output: [(0 89 28 97) 0]
Test Case: 370 | Input/Output: [(86 64 13 49) 13]
Test Case: 371 | Input/Output: [(68 13 49 51) 13]
Test Case: 372 | Input/Output: [(100 57 46 19) 19]
Test Case: 373 | Input/Output: [(55 57 37 71) 37]
Test Case: 374 | Input/Output: [(44 26 66 11) 11]
Test Case: 375 | Input/Output: [(9 51 12 58) 9]
Test Case: 376 | Input/Output: [(1 97 23 51) 1]
Test Case: 377 | Input/Output: [(10 82 47 79) 10]
Test Case: 378 | Input/Output: [(97 14 10 66) 10]
Test Case: 379 | Input/Output: [(78 40 96 1) 1]
Test Case: 380 | Input/Output: [(66 42 41 56) 41]
Test Case: 381 | Input/Output: [(10 94 39 38) 10]
Test Case: 382 | Input/Output: [(52 54 24 3) 3]
Test Case: 383 | Input/Output: [(40 91 11 60) 11]
Test Case: 384 | Input/Output: [(96 11 15 25) 11]
Test Case: 385 | Input/Output: [(51 25 30 45) 25]
Test Case: 386 | Input/Output: [(41 14 41 55) 14]
Test Case: 387 | Input/Output: [(25 7 37 0) 0]
Test Case: 388 | Input/Output: [(63 78 58 22) 22]
Test Case: 389 | Input/Output: [(83 13 87 83) 13]
Test Case: 390 | Input/Output: [(92 8 2 63) 2]
Test Case: 391 | Input/Output: [(75 43 87 92) 43]
Test Case: 392 | Input/Output: [(61 89 10 0) 0]
Test Case: 393 | Input/Output: [(63 84 64 97) 63]
Test Case: 394 | Input/Output: [(65 81 47 3) 3]
Test Case: 395 | Input/Output: [(85 80 31 3) 3]
Test Case: 396 | Input/Output: [(11 45 80 14) 11]
Test Case: 397 | Input/Output: [(34 7 5 30) 5]
Test Case: 398 | Input/Output: [(40 27 73 33) 27]
Test Case: 399 | Input/Output: [(32 70 30 56) 30]
Test Case: 400 | Input/Output: [(35 9 -59 -25) -59]
Test Case: 401 | Input/Output: [(-10 -53 -29 -72) -72]
Test Case: 402 | Input/Output: [(-42 28 -15 99) -42]
Test Case: 403 | Input/Output: [(-86 50 12 85) -86]
Test Case: 404 | Input/Output: [(43 28 50 -75) -75]
Test Case: 405 | Input/Output: [(-71 -75 -8 -41) -75]
Test Case: 406 | Input/Output: [(65 64 -38 99) -38]
Test Case: 407 | Input/Output: [(-82 -84 -59 -90) -90]
Test Case: 408 | Input/Output: [(-26 72 53 -2) -26]
Test Case: 409 | Input/Output: [(-33 71 26 94) -33]
Test Case: 410 | Input/Output: [(62 23 -24 79) -24]
Test Case: 411 | Input/Output: [(-14 41 -16 -31) -31]
Test Case: 412 | Input/Output: [(-69 59 58 -75) -75]
Test Case: 413 | Input/Output: [(50 20 -66 38) -66]
Test Case: 414 | Input/Output: [(-93 -94 -75 -56) -94]
Test Case: 415 | Input/Output: [(-99 -37 53 55) -99]
Test Case: 416 | Input/Output: [(-97 -7 17 40) -97]
Test Case: 417 | Input/Output: [(-78 100 -10 82) -78]
Test Case: 418 | Input/Output: [(21 61 -13 -25) -25]
Test Case: 419 | Input/Output: [(73 92 -37 -34) -37]
Test Case: 420 | Input/Output: [(-99 23 -71 77) -99]
Test Case: 421 | Input/Output: [(-68 -19 -34 15) -68]
Test Case: 422 | Input/Output: [(-88 23 -50 -37) -88]
Test Case: 423 | Input/Output: [(80 50 14 49) 14]
Test Case: 424 | Input/Output: [(84 -41 98 -74) -74]
Test Case: 425 | Input/Output: [(4 -99 31 31) -99]
Test Case: 426 | Input/Output: [(70 -10 42 -71) -71]
Test Case: 427 | Input/Output: [(-41 70 -57 36) -57]
Test Case: 428 | Input/Output: [(-26 -7 49 42) -26]
Test Case: 429 | Input/Output: [(49 -6 -41 -46) -46]
Test Case: 430 | Input/Output: [(45 77 -92 -34) -92]
Test Case: 431 | Input/Output: [(58 45 -82 52) -82]
Test Case: 432 | Input/Output: [(-8 -72 -85 3) -85]
Test Case: 433 | Input/Output: [(71 55 -70 -92) -92]
Test Case: 434 | Input/Output: [(0 44 -45 57) -45]
Test Case: 435 | Input/Output: [(60 48 20 -62) -62]
Test Case: 436 | Input/Output: [(-75 16 41 -6) -75]
Test Case: 437 | Input/Output: [(31 46 48 -46) -46]
Test Case: 438 | Input/Output: [(82 71 48 -82) -82]
Test Case: 439 | Input/Output: [(15 85 -6 95) -6]
Test Case: 440 | Input/Output: [(-20 -96 -85 -55) -96]
Test Case: 441 | Input/Output: [(-49 79 -22 23) -49]
Test Case: 442 | Input/Output: [(-75 -69 -67 49) -75]
Test Case: 443 | Input/Output: [(18 -18 54 94) -18]
Test Case: 444 | Input/Output: [(-21 -93 28 -17) -93]
Test Case: 445 | Input/Output: [(-4 99 -20 -62) -62]
Test Case: 446 | Input/Output: [(-42 76 -20 75) -42]
Test Case: 447 | Input/Output: [(52 77 -20 18) -20]
Test Case: 448 | Input/Output: [(47 69 -76 -72) -76]
Test Case: 449 | Input/Output: [(-82 -53 95 68) -82]
Test Case: 450 | Input/Output: [(33 81 -33 -44) -44]
Test Case: 451 | Input/Output: [(93 -1 -38 83) -38]
Test Case: 452 | Input/Output: [(-37 37 38 22) -37]
Test Case: 453 | Input/Output: [(-5 97 48 2) -5]
Test Case: 454 | Input/Output: [(-24 22 83 -87) -87]
Test Case: 455 | Input/Output: [(-74 44 -29 -98) -98]
Test Case: 456 | Input/Output: [(-67 -40 -100 -69) -100]
Test Case: 457 | Input/Output: [(84 -12 11 56) -12]
Test Case: 458 | Input/Output: [(-25 50 15 51) -25]
Test Case: 459 | Input/Output: [(-44 -40 -8 51) -44]
Test Case: 460 | Input/Output: [(-38 -54 84 -55) -55]
Test Case: 461 | Input/Output: [(-68 -69 91 10) -69]
Test Case: 462 | Input/Output: [(41 -5 -18 -64) -64]
Test Case: 463 | Input/Output: [(-69 41 -50 -4) -69]
Test Case: 464 | Input/Output: [(73 -100 71 91) -100]
Test Case: 465 | Input/Output: [(-37 94 -73 -94) -94]
Test Case: 466 | Input/Output: [(-49 74 45 -88) -88]
Test Case: 467 | Input/Output: [(15 47 66 27) 15]
Test Case: 468 | Input/Output: [(-82 -25 -5 -58) -82]
Test Case: 469 | Input/Output: [(-28 17 -75 -46) -75]
Test Case: 470 | Input/Output: [(-67 -25 -80 66) -80]
Test Case: 471 | Input/Output: [(-35 -25 24 64) -35]
Test Case: 472 | Input/Output: [(-53 66 63 -56) -56]
Test Case: 473 | Input/Output: [(-2 58 -13 -93) -93]
Test Case: 474 | Input/Output: [(-34 36 -70 50) -70]
Test Case: 475 | Input/Output: [(-84 25 -97 -70) -97]
Test Case: 476 | Input/Output: [(-78 -74 -6 -50) -78]
Test Case: 477 | Input/Output: [(15 -10 63 -23) -23]
Test Case: 478 | Input/Output: [(-99 94 -2 -38) -99]
Test Case: 479 | Input/Output: [(-24 -99 41 82) -99]
Test Case: 480 | Input/Output: [(73 -58 73 -3) -58]
Test Case: 481 | Input/Output: [(57 -90 4 70) -90]
Test Case: 482 | Input/Output: [(-5 61 3 10) -5]
Test Case: 483 | Input/Output: [(-30 -33 95 -61) -61]
Test Case: 484 | Input/Output: [(-87 21 -72 81) -87]
Test Case: 485 | Input/Output: [(-87 20 56 -44) -87]
Test Case: 486 | Input/Output: [(38 -1 93 85) -1]
Test Case: 487 | Input/Output: [(-94 46 91 98) -94]
Test Case: 488 | Input/Output: [(-71 70 99 43) -71]
Test Case: 489 | Input/Output: [(-5 14 73 56) -5]
Test Case: 490 | Input/Output: [(-16 95 -27 29) -27]
Test Case: 491 | Input/Output: [(-28 -13 -70 12) -70]
Test Case: 492 | Input/Output: [(-72 12 -7 -41) -72]
Test Case: 493 | Input/Output: [(38 -96 -85 -35) -96]
Test Case: 494 | Input/Output: [(-48 0 89 60) -48]
Test Case: 495 | Input/Output: [(-14 -94 67 -79) -94]
Test Case: 496 | Input/Output: [(86 43 92 -57) -57]
Test Case: 497 | Input/Output: [(36 -57 -32 -92) -92]
Test Case: 498 | Input/Output: [(-50 48 -45 76) -50]
Test Case: 499 | Input/Output: [(-51 -37 -72 88) -72]
Test Case: 500 | Input/Output: [(-78 -62 88 24) -78]
Test Case: 501 | Input/Output: [(-54 13 -31 -78) -78]
Test Case: 502 | Input/Output: [(40 67 -30 -14) -30]
Test Case: 503 | Input/Output: [(61 -59 -43 -85) -85]
Test Case: 504 | Input/Output: [(93 -53 11 63) -53]
Test Case: 505 | Input/Output: [(89 -88 83 71) -88]
Test Case: 506 | Input/Output: [(98 -87 -87 -35) -87]
Test Case: 507 | Input/Output: [(96 -62 -59 2) -62]
Test Case: 508 | Input/Output: [(-53 -21 -78 -56) -78]
Test Case: 509 | Input/Output: [(71 28 -27 -74) -74]
Test Case: 510 | Input/Output: [(-44 -77 -57 -23) -77]
Test Case: 511 | Input/Output: [(-36 3 -13 -8) -36]
Test Case: 512 | Input/Output: [(4 65 35 87) 4]
Test Case: 513 | Input/Output: [(78 -29 -56 -15) -56]
Test Case: 514 | Input/Output: [(-28 54 45 21) -28]
Test Case: 515 | Input/Output: [(45 -4 -45 -38) -45]
Test Case: 516 | Input/Output: [(-64 43 -44 -3) -64]
Test Case: 517 | Input/Output: [(65 -18 74 40) -18]
Test Case: 518 | Input/Output: [(-55 56 -83 -78) -83]
Test Case: 519 | Input/Output: [(-86 2 -87 30) -87]
Test Case: 520 | Input/Output: [(-38 -36 -89 -75) -89]
Test Case: 521 | Input/Output: [(-85 98 78 -66) -85]
Test Case: 522 | Input/Output: [(-4 -39 45 -33) -39]
Test Case: 523 | Input/Output: [(-88 83 5 -22) -88]
Test Case: 524 | Input/Output: [(28 93 82 23) 23]
Test Case: 525 | Input/Output: [(58 -92 -48 -90) -92]
Test Case: 526 | Input/Output: [(56 79 41 66) 41]
Test Case: 527 | Input/Output: [(-62 19 47 -53) -62]
Test Case: 528 | Input/Output: [(42 -68 -94 -70) -94]
Test Case: 529 | Input/Output: [(60 -40 28 92) -40]
Test Case: 530 | Input/Output: [(-76 -78 -4 -35) -78]
Test Case: 531 | Input/Output: [(-48 82 -85 15) -85]
Test Case: 532 | Input/Output: [(-57 30 -47 -77) -77]
Test Case: 533 | Input/Output: [(4 85 67 9) 4]
Test Case: 534 | Input/Output: [(-90 52 -25 60) -90]
Test Case: 535 | Input/Output: [(64 29 29 -47) -47]
Test Case: 536 | Input/Output: [(-42 86 -40 78) -42]
Test Case: 537 | Input/Output: [(31 -96 -6 95) -96]
Test Case: 538 | Input/Output: [(-78 -54 -17 -90) -90]
Test Case: 539 | Input/Output: [(-67 19 -24 65) -67]
Test Case: 540 | Input/Output: [(-1 47 9 -49) -49]
Test Case: 541 | Input/Output: [(-22 -13 -69 12) -69]
Test Case: 542 | Input/Output: [(-87 52 63 11) -87]
Test Case: 543 | Input/Output: [(66 -58 17 5) -58]
Test Case: 544 | Input/Output: [(-33 93 17 20) -33]
Test Case: 545 | Input/Output: [(20 -82 54 -83) -83]
Test Case: 546 | Input/Output: [(0 72 -95 -90) -95]
Test Case: 547 | Input/Output: [(-90 -12 -67 60) -90]
Test Case: 548 | Input/Output: [(-91 83 90 -86) -91]
Test Case: 549 | Input/Output: [(92 76 -99 -62) -99]
Test Case: 550 | Input/Output: [(-7 -30 -95 62) -95]
Test Case: 551 | Input/Output: [(50 -41 45 13) -41]
Test Case: 552 | Input/Output: [(44 23 -28 85) -28]
Test Case: 553 | Input/Output: [(64 39 37 16) 16]
Test Case: 554 | Input/Output: [(-91 73 -76 92) -91]
Test Case: 555 | Input/Output: [(-98 89 93 -48) -98]
Test Case: 556 | Input/Output: [(-92 -19 -94 15) -94]
Test Case: 557 | Input/Output: [(-17 -67 -74 54) -74]
Test Case: 558 | Input/Output: [(10 -95 -23 -26) -95]
Test Case: 559 | Input/Output: [(13 37 -62 -76) -76]
Test Case: 560 | Input/Output: [(-9 30 87 89) -9]
Test Case: 561 | Input/Output: [(4 80 60 7) 4]
Test Case: 562 | Input/Output: [(27 -74 -98 -41) -98]
Test Case: 563 | Input/Output: [(9 8 32 33) 8]
Test Case: 564 | Input/Output: [(4 -22 -92 100) -92]
Test Case: 565 | Input/Output: [(6 -86 67 -71) -86]
Test Case: 566 | Input/Output: [(-25 26 58 67) -25]
Test Case: 567 | Input/Output: [(-67 32 -18 -67) -67]
Test Case: 568 | Input/Output: [(27 91 -37 33) -37]
Test Case: 569 | Input/Output: [(-78 -29 -12 -73) -78]
Test Case: 570 | Input/Output: [(81 -1 -83 9) -83]
Test Case: 571 | Input/Output: [(-27 -84 95 -65) -84]
Test Case: 572 | Input/Output: [(-35 -44 34 -10) -44]
Test Case: 573 | Input/Output: [(60 -74 84 83) -74]
Test Case: 574 | Input/Output: [(-28 73 -83 -53) -83]
Test Case: 575 | Input/Output: [(68 -86 12 20) -86]
Test Case: 576 | Input/Output: [(39 -30 -99 5) -99]
Test Case: 577 | Input/Output: [(-62 72 -48 76) -62]
Test Case: 578 | Input/Output: [(3 57 67 -1) -1]
Test Case: 579 | Input/Output: [(3 15 70 82) 3]
Test Case: 580 | Input/Output: [(1 -32 99 6) -32]
Test Case: 581 | Input/Output: [(-8 -85 -82 19) -85]
Test Case: 582 | Input/Output: [(-42 -87 23 47) -87]
Test Case: 583 | Input/Output: [(4 30 9 84) 4]
Test Case: 584 | Input/Output: [(21 -45 31 -16) -45]
Test Case: 585 | Input/Output: [(68 -4 47 14) -4]
Test Case: 586 | Input/Output: [(-36 67 48 -78) -78]
Test Case: 587 | Input/Output: [(-5 82 67 -13) -13]
Test Case: 588 | Input/Output: [(44 9 -8 7) -8]
Test Case: 589 | Input/Output: [(23 44 35 28) 23]
Test Case: 590 | Input/Output: [(83 -98 -65 76) -98]
Test Case: 591 | Input/Output: [(-50 52 -8 59) -50]
Test Case: 592 | Input/Output: [(40 77 73 -96) -96]
Test Case: 593 | Input/Output: [(84 -5 -4 -26) -26]
Test Case: 594 | Input/Output: [(-98 59 -83 -88) -98]
Test Case: 595 | Input/Output: [(77 27 38 17) 17]
Test Case: 596 | Input/Output: [(30 15 -15 -28) -28]
Test Case: 597 | Input/Output: [(37 -7 13 49) -7]
Test Case: 598 | Input/Output: [(-44 99 -68 93) -68]
Test Case: 599 | Input/Output: [(-47 73 57 -16) -47]
Test Case: 600 | Input/Output: [(23 -29 -72 21) -72]
Test Case: 601 | Input/Output: [(-48 -60 68 79) -60]
Test Case: 602 | Input/Output: [(39 88 24 -84) -84]
Test Case: 603 | Input/Output: [(-18 41 64 -47) -47]
Test Case: 604 | Input/Output: [(31 -80 -26 26) -80]
Test Case: 605 | Input/Output: [(85 -79 50 2) -79]
Test Case: 606 | Input/Output: [(90 -94 -79 -5) -94]
Test Case: 607 | Input/Output: [(11 -42 -2 -37) -42]
Test Case: 608 | Input/Output: [(-41 -1 38 -35) -41]
Test Case: 609 | Input/Output: [(31 -50 26 -43) -50]
Test Case: 610 | Input/Output: [(-30 -9 32 64) -30]
Test Case: 611 | Input/Output: [(78 -23 88 -46) -46]
Test Case: 612 | Input/Output: [(-40 74 66 -61) -61]
Test Case: 613 | Input/Output: [(34 26 -25 -69) -69]
Test Case: 614 | Input/Output: [(21 78 -64 49) -64]
Test Case: 615 | Input/Output: [(-76 37 -96 -47) -96]
Test Case: 616 | Input/Output: [(-59 -35 58 81) -59]
Test Case: 617 | Input/Output: [(-97 10 -86 96) -97]
Test Case: 618 | Input/Output: [(80 -39 10 -50) -50]
Test Case: 619 | Input/Output: [(-3 -49 79 69) -49]
Test Case: 620 | Input/Output: [(-85 -31 22 85) -85]
Test Case: 621 | Input/Output: [(100 7 -69 13) -69]
Test Case: 622 | Input/Output: [(78 59 -10 24) -10]
Test Case: 623 | Input/Output: [(-28 -35 -14 53) -35]
Test Case: 624 | Input/Output: [(27 -95 11 -51) -95]
Test Case: 625 | Input/Output: [(100 -57 -54 -85) -85]
Test Case: 626 | Input/Output: [(-57 5 77 -51) -57]
Test Case: 627 | Input/Output: [(2 0 30 61) 0]
Test Case: 628 | Input/Output: [(-23 81 86 6) -23]
Test Case: 629 | Input/Output: [(44 -35 31 52) -35]
Test Case: 630 | Input/Output: [(-7 91 0 -63) -63]
Test Case: 631 | Input/Output: [(-60 -32 50 18) -60]
Test Case: 632 | Input/Output: [(-77 -81 -82 70) -82]
Test Case: 633 | Input/Output: [(-72 50 57 -99) -99]
Test Case: 634 | Input/Output: [(81 -30 -43 -29) -43]
Test Case: 635 | Input/Output: [(18 3 16 67) 3]
Test Case: 636 | Input/Output: [(7 37 -11 49) -11]
Test Case: 637 | Input/Output: [(97 60 -88 -85) -88]
Test Case: 638 | Input/Output: [(-30 -1 91 40) -30]
Test Case: 639 | Input/Output: [(14 -70 -86 -93) -93]
Test Case: 640 | Input/Output: [(-77 -1 -56 -23) -77]
Test Case: 641 | Input/Output: [(-67 61 -83 83) -83]
Test Case: 642 | Input/Output: [(20 -28 43 13) -28]
Test Case: 643 | Input/Output: [(-88 4 -68 72) -88]
Test Case: 644 | Input/Output: [(36 54 -23 -86) -86]
Test Case: 645 | Input/Output: [(-98 57 -19 -17) -98]
Test Case: 646 | Input/Output: [(-53 12 1 -16) -53]
Test Case: 647 | Input/Output: [(19 -35 77 -88) -88]
Test Case: 648 | Input/Output: [(74 -43 -14 38) -43]
Test Case: 649 | Input/Output: [(-53 61 97 -43) -53]
Test Case: 650 | Input/Output: [(-57 -50 -38 -86) -86]
Test Case: 651 | Input/Output: [(-53 -28 30 -70) -70]
Test Case: 652 | Input/Output: [(-21 15 -92 50) -92]
Test Case: 653 | Input/Output: [(-81 48 -55 -49) -81]
Test Case: 654 | Input/Output: [(-35 -91 -36 47) -91]
Test Case: 655 | Input/Output: [(-18 -53 30 19) -53]
Test Case: 656 | Input/Output: [(-38 -27 -63 -22) -63]
Test Case: 657 | Input/Output: [(-50 84 -79 71) -79]
Test Case: 658 | Input/Output: [(98 24 -97 22) -97]
Test Case: 659 | Input/Output: [(57 70 11 -50) -50]
Test Case: 660 | Input/Output: [(-98 36 -23 -83) -98]
Test Case: 661 | Input/Output: [(48 -89 -73 -28) -89]
Test Case: 662 | Input/Output: [(90 63 -99 -50) -99]
Test Case: 663 | Input/Output: [(-18 99 -2 5) -18]
Test Case: 664 | Input/Output: [(-73 -17 26 -56) -73]
Test Case: 665 | Input/Output: [(-23 76 97 -74) -74]
Test Case: 666 | Input/Output: [(-39 10 -73 99) -73]
Test Case: 667 | Input/Output: [(-93 58 -81 87) -93]
Test Case: 668 | Input/Output: [(94 -77 78 -2) -77]
Test Case: 669 | Input/Output: [(-28 -12 -62 10) -62]
Test Case: 670 | Input/Output: [(74 -60 27 82) -60]
Test Case: 671 | Input/Output: [(15 -74 -67 -66) -74]
Test Case: 672 | Input/Output: [(23 66 70 -51) -51]
Test Case: 673 | Input/Output: [(-68 -30 -43 -72) -72]
Test Case: 674 | Input/Output: [(-98 12 84 27) -98]
Test Case: 675 | Input/Output: [(49 -68 58 -60) -68]
Test Case: 676 | Input/Output: [(50 49 95 -61) -61]
Test Case: 677 | Input/Output: [(-79 -55 -85 8) -85]
Test Case: 678 | Input/Output: [(-69 53 82 6) -69]
Test Case: 679 | Input/Output: [(-3 21 -28 -39) -39]
Test Case: 680 | Input/Output: [(14 -98 -24 -71) -98]
Test Case: 681 | Input/Output: [(80 -31 83 -100) -100]
Test Case: 682 | Input/Output: [(-27 -82 76 97) -82]
Test Case: 683 | Input/Output: [(-41 35 -34 -98) -98]
Test Case: 684 | Input/Output: [(60 47 -61 40) -61]
Test Case: 685 | Input/Output: [(38 -100 95 -31) -100]
Test Case: 686 | Input/Output: [(74 -38 47 48) -38]
Test Case: 687 | Input/Output: [(40 -45 59 93) -45]
Test Case: 688 | Input/Output: [(-21 -46 -37 65) -46]
Test Case: 689 | Input/Output: [(-41 -11 -81 -46) -81]
Test Case: 690 | Input/Output: [(-27 50 -76 -91) -91]
Test Case: 691 | Input/Output: [(15 -40 -43 -77) -77]
Test Case: 692 | Input/Output: [(-12 -74 -64 -73) -74]
Test Case: 693 | Input/Output: [(-82 -30 -95 -78) -95]
Test Case: 694 | Input/Output: [(-43 -41 -42 -82) -82]
Test Case: 695 | Input/Output: [(6 2 37 10) 2]
Test Case: 696 | Input/Output: [(-82 71 18 34) -82]
Test Case: 697 | Input/Output: [(17 70 -88 5) -88]
Test Case: 698 | Input/Output: [(2 -84 -8 -1) -84]
Test Case: 699 | Input/Output: [(55 4 24 79) 4]
Test Case: 700 | Input/Output: [(56 41 -45 1) -45]
Test Case: 701 | Input/Output: [(71 15 -40 47) -40]
Test Case: 702 | Input/Output: [(-71 -37 -60 69) -71]
Test Case: 703 | Input/Output: [(9 -97 -100 35) -100]
Test Case: 704 | Input/Output: [(50 54 71 -35) -35]
Test Case: 705 | Input/Output: [(-81 69 -62 -41) -81]
Test Case: 706 | Input/Output: [(19 -95 -70 -55) -95]
Test Case: 707 | Input/Output: [(93 39 -79 -20) -79]
Test Case: 708 | Input/Output: [(33 -19 -66 -89) -89]
Test Case: 709 | Input/Output: [(97 -47 73 79) -47]
Test Case: 710 | Input/Output: [(79 -20 55 -83) -83]
Test Case: 711 | Input/Output: [(-8 46 -63 99) -63]
Test Case: 712 | Input/Output: [(-85 67 25 66) -85]
Test Case: 713 | Input/Output: [(-28 95 -52 -81) -81]
Test Case: 714 | Input/Output: [(-17 55 76 -41) -41]
Test Case: 715 | Input/Output: [(-43 -17 -75 -49) -75]
Test Case: 716 | Input/Output: [(-28 -85 32 15) -85]
Test Case: 717 | Input/Output: [(14 48 -88 -20) -88]
Test Case: 718 | Input/Output: [(89 57 -35 -68) -68]
Test Case: 719 | Input/Output: [(1 83 13 80) 1]
Test Case: 720 | Input/Output: [(-38 19 32 17) -38]
Test Case: 721 | Input/Output: [(-37 -46 87 -80) -80]
Test Case: 722 | Input/Output: [(-26 -85 64 -44) -85]
Test Case: 723 | Input/Output: [(-91 99 -7 66) -91]
Test Case: 724 | Input/Output: [(-81 80 -40 -17) -81]
Test Case: 725 | Input/Output: [(-53 64 8 63) -53]
Test Case: 726 | Input/Output: [(17 70 -89 -85) -89]
Test Case: 727 | Input/Output: [(-82 -8 -73 -61) -82]
Test Case: 728 | Input/Output: [(-55 -96 52 82) -96]
Test Case: 729 | Input/Output: [(-78 10 55 20) -78]
Test Case: 730 | Input/Output: [(5 14 6 -43) -43]
Test Case: 731 | Input/Output: [(35 23 30 85) 23]
Test Case: 732 | Input/Output: [(-1 22 -63 -14) -63]
Test Case: 733 | Input/Output: [(92 8 -82 74) -82]
Test Case: 734 | Input/Output: [(3 -26 -6 53) -26]
Test Case: 735 | Input/Output: [(-70 -98 -59 43) -98]
Test Case: 736 | Input/Output: [(-86 28 7 43) -86]
Test Case: 737 | Input/Output: [(-88 -47 86 33) -88]
Test Case: 738 | Input/Output: [(-27 29 22 63) -27]
Test Case: 739 | Input/Output: [(21 -95 -34 -67) -95]
Test Case: 740 | Input/Output: [(-96 66 58 -55) -96]
Test Case: 741 | Input/Output: [(89 -83 -32 -48) -83]
Test Case: 742 | Input/Output: [(72 -92 -41 3) -92]
Test Case: 743 | Input/Output: [(-21 -59 -32 -1) -59]
Test Case: 744 | Input/Output: [(-95 -64 12 -19) -95]
Test Case: 745 | Input/Output: [(85 7 -25 64) -25]
Test Case: 746 | Input/Output: [(-99 -85 69 95) -99]
Test Case: 747 | Input/Output: [(82 52 -95 46) -95]
Test Case: 748 | Input/Output: [(-10 -97 -20 -72) -97]
Test Case: 749 | Input/Output: [(-4 -58 -19 -84) -84]
Test Case: 750 | Input/Output: [(84 47 -43 32) -43]
Test Case: 751 | Input/Output: [(79 -95 -26 -15) -95]
Test Case: 752 | Input/Output: [(-37 21 -60 -63) -63]
Test Case: 753 | Input/Output: [(-58 36 -83 100) -83]
Test Case: 754 | Input/Output: [(-1 -8 5 19) -8]
Test Case: 755 | Input/Output: [(95 64 66 -50) -50]
Test Case: 756 | Input/Output: [(19 -11 -61 -42) -61]
Test Case: 757 | Input/Output: [(60 34 15 98) 15]
Test Case: 758 | Input/Output: [(81 -1 -49 99) -49]
Test Case: 759 | Input/Output: [(-72 74 31 -74) -74]
Test Case: 760 | Input/Output: [(-48 90 66 67) -48]
Test Case: 761 | Input/Output: [(59 -91 -61 -94) -94]
Test Case: 762 | Input/Output: [(-97 -50 58 5) -97]
Test Case: 763 | Input/Output: [(97 -61 -18 -94) -94]
Test Case: 764 | Input/Output: [(73 -15 -50 -32) -50]
Test Case: 765 | Input/Output: [(53 50 96 -51) -51]
Test Case: 766 | Input/Output: [(-88 84 -82 98) -88]
Test Case: 767 | Input/Output: [(-84 -75 74 -37) -84]
Test Case: 768 | Input/Output: [(60 51 -44 11) -44]
Test Case: 769 | Input/Output: [(-65 -82 -42 27) -82]
Test Case: 770 | Input/Output: [(82 -62 15 50) -62]
Test Case: 771 | Input/Output: [(-11 67 -2 59) -11]
Test Case: 772 | Input/Output: [(70 1 -79 69) -79]
Test Case: 773 | Input/Output: [(-29 58 68 -39) -39]
Test Case: 774 | Input/Output: [(-86 -12 -70 -21) -86]
Test Case: 775 | Input/Output: [(-26 -91 -93 -33) -93]
Test Case: 776 | Input/Output: [(-13 43 87 24) -13]
Test Case: 777 | Input/Output: [(-40 71 -9 -20) -40]
Test Case: 778 | Input/Output: [(-76 -19 -66 85) -76]
Test Case: 779 | Input/Output: [(-33 -97 3 -62) -97]
Test Case: 780 | Input/Output: [(44 61 77 -62) -62]
Test Case: 781 | Input/Output: [(-21 -65 1 19) -65]
Test Case: 782 | Input/Output: [(-87 5 48 8) -87]
Test Case: 783 | Input/Output: [(49 9 47 -39) -39]
Test Case: 784 | Input/Output: [(53 99 -82 -89) -89]
Test Case: 785 | Input/Output: [(81 -7 77 -7) -7]
Test Case: 786 | Input/Output: [(-1 -12 -15 -25) -25]
Test Case: 787 | Input/Output: [(100 -27 81 16) -27]
Test Case: 788 | Input/Output: [(59 -60 93 -28) -60]
Test Case: 789 | Input/Output: [(50 12 48 -95) -95]
Test Case: 790 | Input/Output: [(68 92 -57 -16) -57]
Test Case: 791 | Input/Output: [(69 -53 97 2) -53]
Test Case: 792 | Input/Output: [(8 -3 58 -30) -30]
Test Case: 793 | Input/Output: [(-63 94 -29 -47) -63]
Test Case: 794 | Input/Output: [(21 -45 -87 -31) -87]
Test Case: 795 | Input/Output: [(73 -44 92 64) -44]
Test Case: 796 | Input/Output: [(-90 -8 -68 -74) -90]
Test Case: 797 | Input/Output: [(-97 -87 -27 57) -97]
Test Case: 798 | Input/Output: [(95 -40 -92 38) -92]
Test Case: 799 | Input/Output: [(-10 27 44 9) -10]
Test Case: 800 | Input/Output: [(39 -41 71 -2) -41]
Test Case: 801 | Input/Output: [(-22 82 -57 13) -57]
Test Case: 802 | Input/Output: [(-8 -7 -94 67) -94]
Test Case: 803 | Input/Output: [(-94 -73 27 94) -94]
Test Case: 804 | Input/Output: [(-75 53 -4 29) -75]
Test Case: 805 | Input/Output: [(-28 -55 9 -61) -61]
Test Case: 806 | Input/Output: [(-89 -32 49 -12) -89]
Test Case: 807 | Input/Output: [(-7 -16 85 -48) -48]
Test Case: 808 | Input/Output: [(-96 50 -97 73) -97]
Test Case: 809 | Input/Output: [(73 -70 -75 -22) -75]
Test Case: 810 | Input/Output: [(40 7 -69 2) -69]
Test Case: 811 | Input/Output: [(-87 -80 -48 -90) -90]
Test Case: 812 | Input/Output: [(8 75 -87 41) -87]
Test Case: 813 | Input/Output: [(92 -11 35 -94) -94]
Test Case: 814 | Input/Output: [(-32 15 57 41) -32]
Test Case: 815 | Input/Output: [(-41 64 56 -92) -92]
Test Case: 816 | Input/Output: [(89 -47 -12 29) -47]
Test Case: 817 | Input/Output: [(-89 34 38 -60) -89]
Test Case: 818 | Input/Output: [(85 -41 -30 31) -41]
Test Case: 819 | Input/Output: [(67 -48 -69 28) -69]
Test Case: 820 | Input/Output: [(-81 58 -42 0) -81]
Test Case: 821 | Input/Output: [(-52 23 64 28) -52]
Test Case: 822 | Input/Output: [(-52 21 5 56) -52]
Test Case: 823 | Input/Output: [(36 18 62 97) 18]
Test Case: 824 | Input/Output: [(46 38 69 20) 20]
Test Case: 825 | Input/Output: [(-9 -85 -18 58) -85]
Test Case: 826 | Input/Output: [(-90 36 37 85) -90]
Test Case: 827 | Input/Output: [(-13 31 -8 -9) -13]
Test Case: 828 | Input/Output: [(-48 -71 86 58) -71]
Test Case: 829 | Input/Output: [(95 45 79 -13) -13]
Test Case: 830 | Input/Output: [(-80 -23 -58 -66) -80]
Test Case: 831 | Input/Output: [(-68 -65 -99 47) -99]
Test Case: 832 | Input/Output: [(-91 29 23 -12) -91]
Test Case: 833 | Input/Output: [(-5 -92 59 -90) -92]
Test Case: 834 | Input/Output: [(97 -17 31 -76) -76]
Test Case: 835 | Input/Output: [(-91 -69 57 -18) -91]
Test Case: 836 | Input/Output: [(-84 40 -76 24) -84]
Test Case: 837 | Input/Output: [(-21 49 -7 -73) -73]
Test Case: 838 | Input/Output: [(-12 10 -50 -82) -82]
Test Case: 839 | Input/Output: [(44 -98 -36 -31) -98]
Test Case: 840 | Input/Output: [(-79 17 89 -53) -79]
Test Case: 841 | Input/Output: [(0 50 31 -42) -42]
Test Case: 842 | Input/Output: [(-33 -59 -61 -59) -61]
Test Case: 843 | Input/Output: [(-26 90 -65 46) -65]
Test Case: 844 | Input/Output: [(10 10 79 72) 10]
Test Case: 845 | Input/Output: [(-24 77 -28 22) -28]
Test Case: 846 | Input/Output: [(-44 43 -52 -8) -52]
Test Case: 847 | Input/Output: [(9 -32 7 50) -32]
Test Case: 848 | Input/Output: [(-43 -90 17 55) -90]
Test Case: 849 | Input/Output: [(-15 10 87 14) -15]
Test Case: 850 | Input/Output: [(-40 48 -32 -22) -40]
Test Case: 851 | Input/Output: [(12 -42 -27 74) -42]
Test Case: 852 | Input/Output: [(58 0 -48 -78) -78]
Test Case: 853 | Input/Output: [(30 66 -42 -20) -42]
Test Case: 854 | Input/Output: [(47 73 60 -48) -48]
Test Case: 855 | Input/Output: [(-31 -71 -21 20) -71]
Test Case: 856 | Input/Output: [(100 4 -82 -72) -82]
Test Case: 857 | Input/Output: [(20 -94 24 -78) -94]
Test Case: 858 | Input/Output: [(73 39 -3 17) -3]
Test Case: 859 | Input/Output: [(0 83 -31 -91) -91]
Test Case: 860 | Input/Output: [(36 -76 38 50) -76]
Test Case: 861 | Input/Output: [(-74 57 5 -59) -74]
Test Case: 862 | Input/Output: [(-99 45 -10 59) -99]
Test Case: 863 | Input/Output: [(-69 -35 -87 -35) -87]
Test Case: 864 | Input/Output: [(-34 44 -84 14) -84]
Test Case: 865 | Input/Output: [(94 -36 20 67) -36]
Test Case: 866 | Input/Output: [(28 -9 26 89) -9]
Test Case: 867 | Input/Output: [(-23 19 -29 45) -29]
Test Case: 868 | Input/Output: [(52 -62 3 99) -62]
Test Case: 869 | Input/Output: [(82 28 0 94) 0]
Test Case: 870 | Input/Output: [(-91 -25 -50 -22) -91]
Test Case: 871 | Input/Output: [(39 27 -9 -59) -59]
Test Case: 872 | Input/Output: [(14 46 -43 -27) -43]
Test Case: 873 | Input/Output: [(65 -20 0 -83) -83]
Test Case: 874 | Input/Output: [(-36 -62 6 90) -62]
Test Case: 875 | Input/Output: [(-33 -54 46 -18) -54]
Test Case: 876 | Input/Output: [(-78 34 38 91) -78]
Test Case: 877 | Input/Output: [(82 -36 93 30) -36]
Test Case: 878 | Input/Output: [(97 7 37 -60) -60]
Test Case: 879 | Input/Output: [(90 88 -25 -22) -25]
Test Case: 880 | Input/Output: [(52 -69 -97 -36) -97]
Test Case: 881 | Input/Output: [(-84 -26 28 -34) -84]
Test Case: 882 | Input/Output: [(-37 0 35 48) -37]
Test Case: 883 | Input/Output: [(-2 1 -45 -95) -95]
Test Case: 884 | Input/Output: [(77 -70 21 65) -70]
Test Case: 885 | Input/Output: [(72 79 23 -84) -84]
Test Case: 886 | Input/Output: [(57 82 52 64) 52]
Test Case: 887 | Input/Output: [(-66 37 24 20) -66]
Test Case: 888 | Input/Output: [(10 -73 -23 -79) -79]
Test Case: 889 | Input/Output: [(-53 13 -57 22) -57]
Test Case: 890 | Input/Output: [(-8 90 76 -28) -28]
Test Case: 891 | Input/Output: [(-77 -16 15 5) -77]
Test Case: 892 | Input/Output: [(-91 65 81 1) -91]
Test Case: 893 | Input/Output: [(25 -15 84 7) -15]
Test Case: 894 | Input/Output: [(88 -86 -100 49) -100]
Test Case: 895 | Input/Output: [(21 5 44 2) 2]
Test Case: 896 | Input/Output: [(59 -28 15 59) -28]
Test Case: 897 | Input/Output: [(8 -53 10 -89) -89]
Test Case: 898 | Input/Output: [(66 93 -34 -20) -34]
Test Case: 899 | Input/Output: [(-16 -23 36 57) -23]
Test Case: 900 | Input/Output: [(53 -83 60 -51) -83]
Test Case: 901 | Input/Output: [(-61 71 52 12) -61]
Test Case: 902 | Input/Output: [(92 -33 -66 -26) -66]
Test Case: 903 | Input/Output: [(19 -97 8 -18) -97]
Test Case: 904 | Input/Output: [(68 -69 13 61) -69]
Test Case: 905 | Input/Output: [(3 74 -93 -24) -93]
Test Case: 906 | Input/Output: [(29 -88 97 -19) -88]
Test Case: 907 | Input/Output: [(80 -97 0 -99) -99]
Test Case: 908 | Input/Output: [(43 84 -86 45) -86]
Test Case: 909 | Input/Output: [(-31 6 -65 -90) -90]
Test Case: 910 | Input/Output: [(-10 1 -65 90) -65]
Test Case: 911 | Input/Output: [(-67 -68 2 -18) -68]
Test Case: 912 | Input/Output: [(-59 -31 85 21) -59]
Test Case: 913 | Input/Output: [(51 55 -29 8) -29]
Test Case: 914 | Input/Output: [(60 30 -76 -25) -76]
Test Case: 915 | Input/Output: [(-53 16 -33 -81) -81]
Test Case: 916 | Input/Output: [(10 -27 -72 20) -72]
Test Case: 917 | Input/Output: [(-53 -46 13 -50) -53]
Test Case: 918 | Input/Output: [(54 23 2 91) 2]
Test Case: 919 | Input/Output: [(-94 13 60 72) -94]
Test Case: 920 | Input/Output: [(48 86 95 -47) -47]
Test Case: 921 | Input/Output: [(88 -10 60 -13) -13]
Test Case: 922 | Input/Output: [(96 -19 66 62) -19]
Test Case: 923 | Input/Output: [(-98 68 72 16) -98]
Test Case: 924 | Input/Output: [(-60 -45 42 56) -60]
Test Case: 925 | Input/Output: [(90 -55 38 -73) -73]
Test Case: 926 | Input/Output: [(30 61 -65 58) -65]
Test Case: 927 | Input/Output: [(72 97 83 -72) -72]
Test Case: 928 | Input/Output: [(89 -94 46 -80) -94]
Test Case: 929 | Input/Output: [(53 7 65 50) 7]
Test Case: 930 | Input/Output: [(34 -60 -12 -83) -83]
Test Case: 931 | Input/Output: [(-67 -66 39 6) -67]
Test Case: 932 | Input/Output: [(-44 -14 -34 -80) -80]
Test Case: 933 | Input/Output: [(-21 -19 -4 91) -21]
Test Case: 934 | Input/Output: [(-3 59 18 -57) -57]
Test Case: 935 | Input/Output: [(-89 -79 44 -15) -89]
Test Case: 936 | Input/Output: [(92 -64 18 5) -64]
Test Case: 937 | Input/Output: [(-6 -76 74 48) -76]
Test Case: 938 | Input/Output: [(-14 29 -19 44) -19]
Test Case: 939 | Input/Output: [(57 -5 44 -76) -76]
Test Case: 940 | Input/Output: [(0 87 -67 -99) -99]
Test Case: 941 | Input/Output: [(88 81 -99 -52) -99]
Test Case: 942 | Input/Output: [(46 98 100 100) 46]
Test Case: 943 | Input/Output: [(-99 15 13 4) -99]
Test Case: 944 | Input/Output: [(20 30 -87 -12) -87]
Test Case: 945 | Input/Output: [(11 62 98 72) 11]
Test Case: 946 | Input/Output: [(4 72 -8 92) -8]
Test Case: 947 | Input/Output: [(-43 71 29 -41) -43]
Test Case: 948 | Input/Output: [(75 -90 52 32) -90]
Test Case: 949 | Input/Output: [(-81 99 81 -71) -81]
Test Case: 950 | Input/Output: [(34 -91 -23 -62) -91]
Test Case: 951 | Input/Output: [(73 65 -45 -27) -45]
Test Case: 952 | Input/Output: [(-9 -49 85 25) -49]
Test Case: 953 | Input/Output: [(55 6 99 -8) -8]
Test Case: 954 | Input/Output: [(47 73 87 -99) -99]
Test Case: 955 | Input/Output: [(37 19 67 48) 19]
Test Case: 956 | Input/Output: [(-50 17 -50 20) -50]
Test Case: 957 | Input/Output: [(29 -45 38 -64) -64]
Test Case: 958 | Input/Output: [(97 -49 -14 -77) -77]
Test Case: 959 | Input/Output: [(58 -41 -62 -70) -70]
Test Case: 960 | Input/Output: [(-47 -49 -61 -3) -61]
Test Case: 961 | Input/Output: [(-65 -20 -4 -52) -65]
Test Case: 962 | Input/Output: [(-33 -65 -94 41) -94]
Test Case: 963 | Input/Output: [(4 43 -42 -29) -42]
Test Case: 964 | Input/Output: [(-56 -54 -17 -74) -74]
Test Case: 965 | Input/Output: [(-37 -2 2 -42) -42]
Test Case: 966 | Input/Output: [(29 80 -23 -30) -30]
Test Case: 967 | Input/Output: [(-51 -72 83 66) -72]
Test Case: 968 | Input/Output: [(98 -100 -49 39) -100]
Test Case: 969 | Input/Output: [(55 21 -72 -58) -72]
Test Case: 970 | Input/Output: [(94 -14 38 11) -14]
Test Case: 971 | Input/Output: [(-13 -63 73 51) -63]
Test Case: 972 | Input/Output: [(62 -11 -39 98) -39]
Test Case: 973 | Input/Output: [(-29 -89 -41 -11) -89]
Test Case: 974 | Input/Output: [(95 59 15 -71) -71]
Test Case: 975 | Input/Output: [(50 -24 60 -7) -24]
Test Case: 976 | Input/Output: [(-10 -45 77 9) -45]
Test Case: 977 | Input/Output: [(39 15 96 36) 15]
Test Case: 978 | Input/Output: [(69 -61 -77 39) -77]
Test Case: 979 | Input/Output: [(5 -6 86 48) -6]
Test Case: 980 | Input/Output: [(71 -89 -5 -21) -89]
Test Case: 981 | Input/Output: [(45 79 82 -96) -96]
Test Case: 982 | Input/Output: [(-61 94 -6 -56) -61]
Test Case: 983 | Input/Output: [(-39 10 80 -42) -42]
Test Case: 984 | Input/Output: [(-93 -29 64 -9) -93]
Test Case: 985 | Input/Output: [(-44 -22 -84 -86) -86]
Test Case: 986 | Input/Output: [(-27 -28 -65 -35) -65]
Test Case: 987 | Input/Output: [(93 -56 8 -53) -56]
Test Case: 988 | Input/Output: [(-17 -1 -100 43) -100]
Test Case: 989 | Input/Output: [(48 -64 -93 -28) -93]
Test Case: 990 | Input/Output: [(94 31 -14 -97) -97]
Test Case: 991 | Input/Output: [(43 -47 99 -98) -98]
Test Case: 992 | Input/Output: [(69 17 -84 -63) -84]
Test Case: 993 | Input/Output: [(-37 -100 88 17) -100]
Test Case: 994 | Input/Output: [(10 8 -96 29) -96]
Test Case: 995 | Input/Output: [(39 -9 74 -26) -26]
Test Case: 996 | Input/Output: [(-98 88 79 39) -98]
Test Case: 997 | Input/Output: [(-61 -37 30 11) -61]
Test Case: 998 | Input/Output: [(-25 94 81 7) -25]
Test Case: 999 | Input/Output: [(23 72 -31 -82) -82]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -98 -35 -42 -7 -108 3 -16 -10 -10 12 80 -60 -116 105 60 -18
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[58 -21 58 58] -21] [[-53 3 3 3] -53] [[1 1 71 1] 1] [[77 77 4 77] 4] [[13 13 13 -94] -94] [[-39 -39 -39 -68] -68] [[69 69 81 69] 69] [[-3 -43 -43 -43] -43] [[66 -47 -47 -47] -47] [[-50 -50 2 -50] -50] [(22 22 22 22) 22] [(-73 -73 -73 -73) -73] [(85 85 85 85) 85] [(-57 -57 -57 -57) -57] [(32 32 32 32) 32] [(41 67 17 47) 17] [(0 80 16 51) 0] [(4 77 85 50) 4] [(15 24 64 77) 15] [(33 44 100 20) 20] [(66 61 65 13) 13] [(49 63 66 36) 36] [(85 62 13 91) 13] [(65 55 50 97) 50] [(84 13 1 84) 1] [(15 67 86 7) 7] [(2 1 26 42) 1] [(8 34 45 58) 8] [(32 95 0 94) 0] [(14 37 55 80) 14] [(82 76 96 70) 70] [(83 25 51 77) 25] [(56 32 33 83) 32] [(59 36 54 85) 36] [(22 57 90 22) 22] [(65 -32 -57 70) -57] [(-79 87 80 29) -79] [(-27 -19 14 98) -27] [(-25 15 9 26) -25] [(48 84 -35 16) -35] [(5 45 37 -58) -58] [(91 69 59 100) 59] [(43 -34 -80 -69) -80] [(20 -81 -27 -60) -81] [(-92 -68 8 4) -92] [(-53 68 84 -100) -100] [(23 51 81 -62) -62] [(-97 11 8 -55) -97] [(-7 66 6 -97) -97] [(-73 -100 34 -85) -100] [(-91 -5 -78 -8) -91] [(-28 96 -91 4) -91] [(-50 18 88 85) -50] [(12 68 -94 1) -94] [(-21 93 72 -4) -21] [(59 26 -70 92) -70] [(-78 68 -96 95) -96] [(-54 -15 -23 -90) -90] [(-94 -10 43 -13) -94] [(8 7 94 98) 7] [(36 -98 -99 48) -99] [(-54 21 -45 0) -54] [(-41 28 -48 -28) -48] [(-75 62 -37 -70) -75] [(-8 33 -82 46) -82] [(-64 -21 -81 0) -81] [(-45 -51 13 -26) -51] [(39 -15 -42 -80) -80] [(-35 -4 46 -40) -40] [(-80 56 -18 7) -80] [(100 63 -39 -74) -74] [(71 51 -45 37) -45] [(75 -59 -46 98) -59] [(1 74 22 -58) -58] [(57 95 52 -95) -95] [(49 74 17 32) 17] [(-13 -57 73 -42) -57] [(-82 22 -98 -93) -98] [(-3 -100 99 88) -100] [(-26 4 -14 -74) -74] [(-98 51 32 1) -98] [(11 68 -67 -49) -67] [(-52 -2 67 53) -52] [(16 -67 -52 -69) -69] [(-84 -31 -8 39) -84] [(81 -55 31 -45) -55] [(-73 -96 -13 -80) -96] [(13 73 75 0) 0] [(-82 -18 65 -83) -83] [(-52 -93 2 85) -93] [(-8 -33 -10 -24) -33] [(-25 91 -63 -68) -68] [(48 -51 75 -92) -92] [(-46 76 -70 86) -70] [(19 20 -9 74) -9])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Lexicase best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 () boolean_pop) integer_sub boolean_yank) exec_y (exec_dup_items) boolean_dup_items exec_flush exec_eq exec_flush in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ())))))) ())
Lexicase best errors: [1 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 77
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Zero cases best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 () boolean_pop) integer_sub boolean_yank) exec_y (exec_dup_items) boolean_dup_items exec_flush exec_eq exec_flush in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ())))))) ())
Zero cases best errors: [1 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 77
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 6 2 2 2 2 2 2 2 2)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (6 6 2 2 2 2 2 2 2 2)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and integer_mult print_integer exec_noop integer_dup_items boolean_swap exec_when (integer_yankdup) integer_yank integer_inc print_integer integer_empty) (integer_dup) (integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq boolean_shove in1 exec_stackdepth boolean_flush exec_k (exec_dup_times () integer_min) (integer_empty in4 integer_gt integer_div integer_min integer_dup_times exec_noop) integer_swap exec_noop integer_pop boolean_yank exec_k_when_autoconstructing (exec_noop exec_do*count ()) ())
Errors: [1 0 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 53
Size: 68
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 9.972
Median total errors in population: 10
Error averages by case: (0.994 0.994 0.998 0.998 0.998 0.998 0.998 0.998 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.259
Average program size in population (points): 70.485
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 480499
--- Timings ---
Current time: 1559314319428 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 31.0%
Fitness Testing:      1.7 seconds, 65.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 67                 
Correct output: 0                   | Program output: 80                 
Correct output: 4                   | Program output: 77                 
Correct output: 15                  | Program output: 24                 
Correct output: 20                  | Program output: 44                 
Correct output: 13                  | Program output: 61                 
Correct output: 36                  | Program output: 63                 
Correct output: 13                  | Program output: 62                 
Correct output: 50                  | Program output: 55                 
Correct output: 1                   | Program output: 13                 
Correct output: 7                   | Program output: 67                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 34                 
Correct output: 0                   | Program output: 95                 
Correct output: 14                  | Program output: 37                 
Correct output: 70                  | Program output: 76                 
Correct output: 25                  | Program output: 25                 
Correct output: 32                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 22                  | Program output: 57                 
Correct output: -57                 | Program output: -32                
Correct output: -79                 | Program output: 87                 
Correct output: -27                 | Program output: -19                
Correct output: -25                 | Program output: 15                 
Correct output: -35                 | Program output: 84                 
Correct output: -58                 | Program output: 45                 
Correct output: 59                  | Program output: 69                 
Correct output: -80                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -68                
Correct output: -100                | Program output: 68                 
Correct output: -62                 | Program output: 51                 
Correct output: -97                 | Program output: 11                 
Correct output: -97                 | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -5                 
Correct output: -91                 | Program output: 96                 
Correct output: -50                 | Program output: 18                 
Correct output: -94                 | Program output: 68                 
Correct output: -21                 | Program output: 93                 
Correct output: -70                 | Program output: 26                 
Correct output: -96                 | Program output: 68                 
Correct output: -90                 | Program output: -15                
Correct output: -94                 | Program output: -10                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -98                
Correct output: -54                 | Program output: 21                 
Correct output: -48                 | Program output: 28                 
Correct output: -75                 | Program output: 62                 
Correct output: -82                 | Program output: 33                 
Correct output: -81                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -15                
Correct output: -40                 | Program output: -4                 
Correct output: -80                 | Program output: 56                 
Correct output: -74                 | Program output: 63                 
Correct output: -45                 | Program output: 51                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 74                 
Correct output: -95                 | Program output: 95                 
Correct output: 17                  | Program output: 74                 
Correct output: -57                 | Program output: -57                
Correct output: -98                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: 4                  
Correct output: -98                 | Program output: 51                 
Correct output: -67                 | Program output: 68                 
Correct output: -52                 | Program output: -2                 
Correct output: -69                 | Program output: -67                
Correct output: -84                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: 0                   | Program output: 73                 
Correct output: -83                 | Program output: -18                
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: 91                 
Correct output: -92                 | Program output: -51                
Correct output: -70                 | Program output: 76                 
Correct output: -9                  | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot})
Lexicase best program: (in2 integer_gte print_integer exec_swap (exec_k (exec_rot () () ()) ()) ())
Lexicase best errors: [1 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.571
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot})
Zero cases best program: (in2 integer_gte print_integer exec_swap (exec_k (exec_rot () () ()) ()) ())
Zero cases best errors: [1 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.571
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 114 262 327 78 779 800 287 79 327)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (233 114 262 327 78 779 800 287 79 327)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_pop})
Best program: (exec_do*while (integer_dec exec_dup_items exec_swap (integer_lte integer_eq exec_k_when_autoconstructing () (exec_rot (boolean_flush) (exec_dup (integer_mult) exec_empty integer_yank exec_y (in1) in3 boolean_dup_times integer_sub) (boolean_stackdepth exec_if () (boolean_dup integer_yankdup integer_dup integer_eq exec_do*while (exec_while (exec_dup_items)) integer_rot) boolean_invert_second_then_and exec_do*count () exec_dup (integer_eq integer_dup_times integer_eq print_boolean) exec_yank) integer_add) exec_stackdepth print_integer integer_lt in2) (in2 integer_sub print_integer in3 in2) integer_gte print_boolean exec_pop (integer_stackdepth boolean_yankdup boolean_xor exec_yank) exec_do*while (boolean_stackdepth exec_empty boolean_rot boolean_empty integer_dec boolean_or exec_if (exec_when () integer_mod) (boolean_yank integer_min integer_pop) integer_yankdup boolean_pop)))
Errors: [1 1 1 1 0 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 68
Size: 90
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 6.714
Median total errors in population: 6
Error averages by case: (0.767 0.886 0.738 0.673 0.922 0.221 0.2 0.713 0.921 0.673)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.549
Average program size in population (points): 79.724
Average percent parens in population: 0.273
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.494
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1016651
--- Timings ---
Current time: 1559314322692 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.5 seconds, 44.5%
Fitness Testing:      2.5 seconds, 44.3%
Report:               0.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Lexicase best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 () boolean_pop) integer_sub boolean_yank) exec_y (exec_dup_items) boolean_dup_items boolean_eq exec_eq exec_flush in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ())))))) ())
Lexicase best errors: [1 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Zero cases best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 () boolean_pop) integer_sub boolean_yank) exec_y (exec_dup_items) boolean_dup_items boolean_eq exec_eq exec_flush in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ())))))) ())
Zero cases best errors: [1 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 570 237 271 198 198 198 204 119 828)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (238 570 237 271 198 198 198 204 119 828)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 () boolean_pop) integer_sub boolean_yank) exec_y (exec_dup_items) boolean_dup_items exec_flush exec_eq exec_flush) in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ()))))) ())
Errors: [1 1 1 1 0 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 77
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.939
Median total errors in population: 7
Error averages by case: (0.762 0.43 0.763 0.729 0.802 0.802 0.802 0.796 0.881 0.172)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.801
Average program size in population (points): 55.917
Average percent parens in population: 0.310
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.975
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1447448
--- Timings ---
Current time: 1559314325534 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.5 seconds, 49.9%
Fitness Testing:      3.0 seconds, 33.9%
Report:               1.4 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean integer_sub exec_s (integer_inc boolean_dup_items boolean_dup_times) (boolean_dup_items exec_k_when_autoconstructing (-39 boolean_rot) (boolean_dup_times boolean_dup_times integer_pop integer_yank)) (boolean_not))
Lexicase best errors: [1 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean integer_sub exec_s (integer_inc boolean_dup_items boolean_dup_times) (boolean_dup_items exec_k_when_autoconstructing (-39 boolean_rot) (boolean_dup_times boolean_dup_times integer_pop integer_yank)) (boolean_not))
Zero cases best errors: [1 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (107 364 364 125 130 476 363 125 125 107)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (107 364 364 125 130 476 363 125 125 107)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction in4})
Best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean integer_sub exec_s (integer_inc boolean_dup_items boolean_dup_times) (boolean_dup_items exec_k_when_autoconstructing (-39 boolean_rot) (boolean_dup_times boolean_dup_times integer_pop integer_yank)) (in4))
Errors: [1 1 1 0 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 7.714
Median total errors in population: 7
Error averages by case: (0.893 0.636 0.636 0.875 0.87 0.524 0.637 0.875 0.875 0.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.075
Average program size in population (points): 58.149
Average percent parens in population: 0.318
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.474
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1858475
--- Timings ---
Current time: 1559314328385 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.6 seconds, 55.4%
Fitness Testing:      3.6 seconds, 30.1%
Report:               1.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 0, :instruction tag_exec_341} {:close 1, :instruction boolean_pop})
Lexicase best program: (boolean_and in4 boolean_dup print_integer integer_mult exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean integer_dec integer_add exec_do*count (integer_shove boolean_dup exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 (boolean_pop))))))) ())
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 0, :instruction tag_exec_341} {:close 1, :instruction boolean_pop})
Zero cases best program: (boolean_and in4 boolean_dup print_integer integer_mult exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean integer_dec integer_add exec_do*count (integer_shove boolean_dup exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 (boolean_pop))))))) ())
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (421 691 169 168 425 860 169 1000 269 421)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (421 691 169 168 425 860 169 0 269 421)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Best program: (boolean_and in4 boolean_dup print_integer exec_y_when_autoconstructing () print_boolean integer_sub exec_s (integer_inc boolean_dup_items boolean_dup_times) (boolean_dup_items exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_rot) boolean_dup_times boolean_dup_times boolean_rot integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_if (boolean_eq exec_yank) () tag_exec_341 () boolean_pop) integer_sub boolean_yank) exec_y (exec_dup_items) boolean_dup_items exec_flush exec_eq exec_flush in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ())))) ()) ())
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 53
Size: 76
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.407
Median total errors in population: 6
Error averages by case: (0.579 0.309 0.831 0.832 0.575 0.14 0.831 1.0 0.731 0.579)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 42.633
Average program size in population (points): 58.31
Average percent parens in population: 0.262
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.989
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2246642
--- Timings ---
Current time: 1559314331733 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.2 seconds, 60.8%
Fitness Testing:      4.0 seconds, 26.3%
Report:               1.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Lexicase best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 () boolean_pop) integer_sub boolean_yank) exec_y (exec_dup_items) boolean_dup_items exec_flush exec_eq exec_flush in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ())))))) ())
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Zero cases best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 () boolean_pop) integer_sub boolean_yank) exec_y (exec_dup_items) boolean_dup_items exec_flush exec_eq exec_flush in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ())))))) ())
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (570 1000 263 452 1000 118 840 842 265 118)
Population mean number of elite cases: 5.47
Count of perfect (error zero) individuals by case: (570 0 263 452 0 118 840 842 265 118)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 0, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Best program: (in3 boolean_swap print_integer exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean integer_dec exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 (boolean_pop) integer_sub boolean_yank) exec_y (exec_dup_items) boolean_dup_items exec_flush exec_dup_times (exec_flush in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ()))))))) ())
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 73
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 6.532
Median total errors in population: 6
Error averages by case: (0.43 1.0 0.737 0.548 1.0 0.882 0.16 0.158 0.735 0.882)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 44.044
Average program size in population (points): 60.755
Average percent parens in population: 0.269
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.4870625
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2654844
--- Timings ---
Current time: 1559314334953 milliseconds
Total Time:          18.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.3 seconds, 63.1%
Fitness Testing:      4.4 seconds, 24.6%
Report:               2.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Lexicase best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times exec_dup_times (exec_when (integer_mult)) exec_while () integer_gte integer_pop integer_yank boolean_not)
Lexicase best errors: [0 1 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Zero cases best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times exec_dup_times (exec_when (integer_mult)) exec_while () integer_gte integer_pop integer_yank boolean_not)
Zero cases best errors: [0 1 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (844 1000 412 412 1000 412 412 412 201 413)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (844 0 412 412 0 412 412 412 201 413)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times boolean_dup_times integer_pop integer_yank boolean_not)
Errors: [0 1 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 6.482
Median total errors in population: 8
Error averages by case: (0.156 1.0 0.588 0.588 1.0 0.588 0.588 0.588 0.799 0.587)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 46.837
Average program size in population (points): 64.203
Average percent parens in population: 0.261
Minimum age in population: 6.0
Maximum age in population: 10.75
Average age in population: 8.9718125
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3073214
--- Timings ---
Current time: 1559314337961 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.7 seconds, 63.9%
Fitness Testing:      4.9 seconds, 22.7%
Report:               2.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (in1 boolean_swap print_integer boolean_stackdepth boolean_swap exec_noop boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean print_boolean integer_max exec_do*count (integer_shove))) ())
Lexicase best errors: [0 0 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (in1 boolean_swap print_integer boolean_stackdepth boolean_swap exec_noop boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean print_boolean integer_max exec_do*count (integer_shove))) ())
Zero cases best errors: [0 0 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1000 140 781 781 1000 1 781 1)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (1 1 0 140 781 781 0 1 781 1)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (in1 boolean_swap print_integer boolean_stackdepth boolean_swap exec_noop boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean print_boolean integer_max exec_do*count (integer_shove))) ())
Errors: [0 0 1 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 7.513
Median total errors in population: 7
Error averages by case: (0.999 0.999 1.0 0.86 0.219 0.219 1.0 0.999 0.219 0.999)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 37.641
Average program size in population (points): 50.851
Average percent parens in population: 0.249
Minimum age in population: 8.0
Maximum age in population: 12.359375
Average age in population: 10.436078125
Median age in population: 10.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3410381
--- Timings ---
Current time: 1559314340734 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 65.5%
Fitness Testing:      5.3 seconds, 21.8%
Report:               3.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop})
Lexicase best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and exec_do*range () integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean integer_shove exec_do*while (exec_do*count (integer_shove integer_mod boolean_invert_second_then_and integer_dup boolean_not boolean_invert_second_then_and integer_pop)))) ())
Lexicase best errors: [0 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop})
Zero cases best program: (in3 boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and exec_do*range () integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean integer_shove exec_do*while (exec_do*count (integer_shove integer_mod boolean_invert_second_then_and integer_dup boolean_not boolean_invert_second_then_and integer_pop)))) ())
Zero cases best errors: [0 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (343 928 1000 115 343 343 115 115 343 343)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (343 928 0 115 343 343 115 115 343 343)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer})
Best program: (in3 boolean_swap print_integer boolean_invert_second_then_and in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_invert_first_then_and boolean_dup_times integer_fromboolean boolean_pop exec_swap (exec_dup (integer_add integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod exec_shove (integer_dup_items boolean_not boolean_invert_second_then_and integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 () boolean_pop) integer_sub boolean_yank exec_y (exec_dup_items) boolean_dup_items exec_flush exec_eq exec_flush in1 exec_do*while () exec_s (integer_empty exec_do*count (exec_yank boolean_empty integer_min) print_integer) () ()))))))) ())
Errors: [0 0 1 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 77
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.012
Median total errors in population: 9
Error averages by case: (0.657 0.072 1.0 0.885 0.657 0.657 0.885 0.885 0.657 0.657)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 30.206
Average program size in population (points): 39.931
Average percent parens in population: 0.235
Minimum age in population: 9.5
Maximum age in population: 13.5078125
Average age in population: 11.7327265625
Median age in population: 11.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 330
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 351
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3732332
--- Timings ---
Current time: 1559314343009 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.5 seconds, 66.2%
Fitness Testing:      5.6 seconds, 21.2%
Report:               3.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean integer_sub exec_s (integer_inc boolean_dup_items boolean_dup_times) (boolean_dup_items exec_k_when_autoconstructing (boolean_empty boolean_rot) (boolean_flush boolean_dup_times integer_pop integer_yank)) (boolean_not))
Lexicase best errors: [1 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean integer_sub exec_s (integer_inc boolean_dup_items boolean_dup_times) (boolean_dup_items exec_k_when_autoconstructing (boolean_empty boolean_rot) (boolean_flush boolean_dup_times integer_pop integer_yank)) (boolean_not))
Zero cases best errors: [1 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 338 932 338 338 338 1 933 338)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (1 1 338 932 338 338 338 1 933 338)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup})
Best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean integer_sub exec_s (integer_inc boolean_dup_items exec_dup ()) () ())
Errors: [1 1 0 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 11
Size: 17
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.442
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.662 0.068 0.662 0.662 0.662 0.999 0.067 0.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.348
Average program size in population (points): 43.439
Average percent parens in population: 0.249
Minimum age in population: 10.625
Maximum age in population: 15.125
Average age in population: 13.310734375
Median age in population: 13.41796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4053582
--- Timings ---
Current time: 1559314345433 milliseconds
Total Time:          28.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.4 seconds, 67.2%
Fitness Testing:      6.0 seconds, 20.6%
Report:               3.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_and in4 in2 print_integer exec_dup_times () print_boolean integer_sub exec_s (integer_inc boolean_dup_items boolean_dup_times) (boolean_dup_items exec_k_when_autoconstructing (-39 boolean_rot) (boolean_dup_times boolean_dup_times integer_pop integer_yank)) (boolean_not))
Lexicase best errors: [1 0 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_and in4 in2 print_integer exec_dup_times () print_boolean integer_sub exec_s (integer_inc boolean_dup_items boolean_dup_times) (boolean_dup_items exec_k_when_autoconstructing (-39 boolean_rot) (boolean_dup_times boolean_dup_times integer_pop integer_yank)) (boolean_not))
Zero cases best errors: [1 0 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 847 14 97 619 619 82 214 929 214)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (82 847 14 97 619 619 82 214 929 214)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 2, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_exec_341} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 90} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_215} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction -59} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove})
Best program: (boolean_and in4 boolean_dup print_integer boolean_swap print_integer boolean_stackdepth in1 boolean_dup_times boolean_shove exec_when (integer_mult) exec_while () integer_gte boolean_invert_first_then_and integer_dec boolean_dup_times integer_fromboolean boolean_pop boolean_pop exec_dup (integer_add integer_fromboolean exec_pop (exec_do*while (exec_do*count (integer_shove integer_mod boolean_dup_items integer_inc boolean_and exec_k_when_autoconstructing () (exec_rot (boolean_eq exec_yank) () (tag_exec_341 () in3 in2) integer_gte print_boolean exec_pop (integer_stackdepth boolean_yankdup boolean_xor exec_yank) exec_do*while (integer_empty integer_gte boolean_rot boolean_empty integer_dec boolean_or exec_if (exec_when () integer_mod) (boolean_dup integer_min integer_pop) exec_y (boolean_pop integer_fromboolean print_exec (in2 integer_dup_times 90) in4 print_boolean exec_s (tag_integer_215 boolean_pop in1 boolean_dup_times boolean_and) (-59 exec_yankdup) (integer_yank exec_while (boolean_flush exec_shove ()))))))))))
Errors: [1 0 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 79
Size: 104
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 6.283
Median total errors in population: 6
Error averages by case: (0.918 0.153 0.986 0.903 0.381 0.381 0.918 0.786 0.071 0.786)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.929
Average program size in population (points): 32.687
Average percent parens in population: 0.266
Minimum age in population: 12.203125
Maximum age in population: 16.701171875
Average age in population: 14.85426953125
Median age in population: 14.99609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.418
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4324657
--- Timings ---
Current time: 1559314347829 milliseconds
Total Time:          31.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.3 seconds, 68.1%
Fitness Testing:      6.3 seconds, 20.0%
Report:               3.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean exec_when (exec_s (integer_inc boolean_dup_items boolean_dup_times boolean_dup_items exec_k_when_autoconstructing (-39 integer_fromboolean) ()) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 23
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean exec_when (exec_s (integer_inc boolean_dup_items boolean_dup_times boolean_dup_items exec_k_when_autoconstructing (-39 integer_fromboolean) ()) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 23
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 246 422 201 246 246 218 201 218 217)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (246 246 422 201 246 246 218 201 218 217)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_boolean_659} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_not})
Best program: (tag_boolean_659 in4 exec_s (print_integer exec_dup_times () print_boolean integer_sub exec_s (integer_inc integer_sub exec_s (integer_inc boolean_dup_items boolean_dup_times boolean_dup_items exec_k_when_autoconstructing (-39 boolean_rot) (boolean_dup_times boolean_dup_times integer_pop exec_rot () () (boolean_not))) () ()) () ()) () ())
Errors: [0 0 1 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 39
Percent parens: 0.410
--- Population Statistics ---
Average total errors in population: 7.539
Median total errors in population: 7
Error averages by case: (0.754 0.754 0.578 0.799 0.754 0.754 0.782 0.799 0.782 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.444
Average program size in population (points): 39.237
Average percent parens in population: 0.271
Minimum age in population: 13.203125
Maximum age in population: 18.1923828125
Average age in population: 15.8773193359375
Median age in population: 15.9599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4623919
--- Timings ---
Current time: 1559314350509 milliseconds
Total Time:          33.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.4 seconds, 68.9%
Fitness Testing:      6.6 seconds, 19.5%
Report:               3.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Lexicase best errors: [1 0 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Zero cases best errors: [1 0 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 201 226 202 1000 384 287 584 289 202)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (290 201 226 202 0 384 287 584 289 202)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_79} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth tagged_79) exec_k (exec_dup_times ()) ())
Errors: [1 0 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.335
Median total errors in population: 8
Error averages by case: (0.71 0.799 0.774 0.798 1.0 0.616 0.713 0.416 0.711 0.798)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 29.826
Average program size in population (points): 41.275
Average percent parens in population: 0.274
Minimum age in population: 14.203125
Maximum age in population: 19.56005859375
Average age in population: 17.15236279296875
Median age in population: 17.23974609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4937183
--- Timings ---
Current time: 1559314353827 milliseconds
Total Time:          37.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.1 seconds, 70.0%
Fitness Testing:      7.0 seconds, 18.8%
Report:               4.1 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_pop exec_empty integer_dup_times boolean_pop boolean_eq integer_flush exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (print_integer) integer_yank integer_inc print_integer integer_empty) integer_dup) (integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (integer_eq) boolean_shove)
Lexicase best errors: [1 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_pop exec_empty integer_dup_times boolean_pop boolean_eq integer_flush exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (print_integer) integer_yank integer_inc print_integer integer_empty) integer_dup) (integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (integer_eq) boolean_shove)
Zero cases best errors: [1 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 1000 358 363 358 125 364 125 361 719)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (125 0 358 363 358 125 364 125 361 719)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k})
Best program: (integer_pop exec_empty integer_div exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc exec_y_when_autoconstructing (integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq)) (boolean_shove in1 exec_stackdepth boolean_flush) (exec_k () ()))
Errors: [1 1 1 0 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.102
Median total errors in population: 7
Error averages by case: (0.875 1.0 0.642 0.637 0.642 0.875 0.636 0.875 0.639 0.281)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.985
Average program size in population (points): 47.176
Average percent parens in population: 0.277
Minimum age in population: 15.203125
Maximum age in population: 20.841064453125
Average age in population: 18.43162548828125
Median age in population: 18.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5278238
--- Timings ---
Current time: 1559314356561 milliseconds
Total Time:          40.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.1 seconds, 70.4%
Fitness Testing:      7.4 seconds, 18.4%
Report:               4.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items boolean_yankdup exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items integer_div exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Lexicase best errors: [0 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items boolean_yankdup exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items integer_div exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Zero cases best errors: [0 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 488 1000 1000 389 190 190 298 392 190)
Population mean number of elite cases: 4.32
Count of perfect (error zero) individuals by case: (187 488 0 0 389 190 190 298 392 190)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Errors: [0 0 1 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.676
Median total errors in population: 8
Error averages by case: (0.813 0.512 1.0 1.0 0.611 0.81 0.81 0.702 0.608 0.81)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 30.351
Average program size in population (points): 41.871
Average percent parens in population: 0.272
Minimum age in population: 16.203125
Maximum age in population: 22.2979736328125
Average age in population: 19.97139990234375
Median age in population: 20.05316162109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5590785
--- Timings ---
Current time: 1559314359391 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.3 seconds, 70.9%
Fitness Testing:      7.7 seconds, 18.0%
Report:               4.6 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty boolean_pop exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty boolean_pop exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (431 888 288 146 865 431 288 431 146 431)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (431 888 288 146 865 431 288 431 146 431)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_pop) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth tagged_379) integer_eq boolean_shove in1 exec_stackdepth boolean_flush exec_k () ())
Errors: [0 0 1 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 56
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.655
Median total errors in population: 6
Error averages by case: (0.569 0.112 0.712 0.854 0.135 0.569 0.712 0.569 0.854 0.569)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.058
Average program size in population (points): 47.117
Average percent parens in population: 0.275
Minimum age in population: 17.8916015625
Maximum age in population: 23.50244140625
Average age in population: 21.33015350341797
Median age in population: 21.38558959960938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5930488
--- Timings ---
Current time: 1559314362426 milliseconds
Total Time:          45.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.7 seconds, 71.4%
Fitness Testing:      8.1 seconds, 17.7%
Report:               4.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean exec_when (exec_s (integer_inc boolean_dup_items boolean_dup_times boolean_dup_items exec_k_when_autoconstructing (-39 integer_fromboolean) ()) () ()))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 23
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () print_boolean exec_when (exec_s (integer_inc boolean_dup_items boolean_dup_times boolean_dup_items exec_k_when_autoconstructing (-39 integer_fromboolean) ()) () ()))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 23
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (267 850 356 589 853 582 226 226 226 1000)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (267 850 356 589 853 582 226 226 226 0)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Best program: (boolean_and in4 boolean_dup print_integer exec_dup_times () exec_swap (integer_sub exec_s (boolean_yankdup boolean_dup_items integer_add) (boolean_dup_items exec_k_when_autoconstructing (-39 boolean_rot) (boolean_dup_times boolean_dup_times integer_pop integer_yank)) (boolean_not)) ())
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 20
Size: 29
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 5.825
Median total errors in population: 5
Error averages by case: (0.733 0.15 0.644 0.411 0.147 0.418 0.774 0.774 0.774 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 32.571
Average program size in population (points): 44.999
Average percent parens in population: 0.274
Minimum age in population: 18.8916015625
Maximum age in population: 24.78915405273438
Average age in population: 22.81776174926758
Median age in population: 22.88359069824219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6259101
--- Timings ---
Current time: 1559314365030 milliseconds
Total Time:          48.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 71.5%
Fitness Testing:      8.5 seconds, 17.5%
Report:               5.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction -39} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq) integer_flush exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod print_boolean boolean_swap -39 boolean_rot) in1 boolean_dup_times integer_pop integer_yank) () (boolean_not))
Lexicase best errors: [1 1 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction -39} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq) integer_flush exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod print_boolean boolean_swap -39 boolean_rot) in1 boolean_dup_times integer_pop integer_yank) () (boolean_not))
Zero cases best errors: [1 1 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 607 158 607 145 145 145 145 157 157)
Population mean number of elite cases: 2.42
Count of perfect (error zero) individuals by case: (157 607 158 607 145 145 145 145 157 157)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (integer_sub integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub integer_yankdup exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items integer_div exec_when (exec_if () (integer_yank integer_inc print_integer exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () integer_dup_times tagged_379)) integer_eq)) boolean_shove in1 exec_stackdepth boolean_flush) (exec_k (exec_dup_times ()) ()) ())
Errors: [1 1 1 1 0 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 43
Size: 61
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 7.577
Median total errors in population: 8
Error averages by case: (0.843 0.393 0.842 0.393 0.855 0.855 0.855 0.855 0.843 0.843)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.45
Average program size in population (points): 36.232
Average percent parens in population: 0.266
Minimum age in population: 20.5628662109375
Maximum age in population: 26.42112731933594
Average age in population: 24.47102659606934
Median age in population: 24.58061981201172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6543314
--- Timings ---
Current time: 1559314367858 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.9 seconds, 72.0%
Fitness Testing:      8.8 seconds, 17.2%
Report:               5.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup))) () ())
Lexicase best errors: [0 0 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup))) () ())
Zero cases best errors: [0 0 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (381 385 179 380 179 179 294 179 381 381)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (381 385 179 380 179 179 294 179 381 381)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while () boolean_eq integer_flush boolean_yankdup exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub in3 exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap)) () ())
Errors: [0 0 1 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 25
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 7.082
Median total errors in population: 6
Error averages by case: (0.619 0.615 0.821 0.62 0.821 0.821 0.706 0.821 0.619 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.693
Average program size in population (points): 45.187
Average percent parens in population: 0.274
Minimum age in population: 22.10205078125
Maximum age in population: 27.81056976318359
Average age in population: 25.82164311981201
Median age in population: 25.9096565246582
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6877047
--- Timings ---
Current time: 1559314370333 milliseconds
Total Time:          53.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.8 seconds, 72.1%
Fitness Testing:      9.2 seconds, 17.1%
Report:               5.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and boolean_pop print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (integer_eq) () boolean_shove in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Lexicase best errors: [1 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and boolean_pop print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (integer_eq) () boolean_shove in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Zero cases best errors: [1 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (60 1000 447 881 448 443 874 59 449 60)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (60 0 447 881 448 443 874 59 449 60)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_boolean_772} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_178} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (tag_boolean_772 exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items) boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_178 (exec_shove () boolean_pop tagged_379)) (integer_eq) () boolean_shove in1 exec_stackdepth boolean_flush integer_rot exec_dup_times ())
Errors: [1 1 0 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 48
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 6.279
Median total errors in population: 5
Error averages by case: (0.94 1.0 0.553 0.119 0.552 0.557 0.126 0.941 0.551 0.94)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.811
Average program size in population (points): 39.499
Average percent parens in population: 0.267
Minimum age in population: 23.95182800292969
Maximum age in population: 29.52565002441406
Average age in population: 27.30323984146118
Median age in population: 27.36456108093262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7176331
--- Timings ---
Current time: 1559314373138 milliseconds
Total Time:          56.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.0 seconds, 72.5%
Fitness Testing:      9.5 seconds, 16.8%
Report:               5.9 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup))) () ())
Lexicase best errors: [0 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup))) () ())
Zero cases best errors: [0 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (563 560 1 1000 276 276 563 564 278 563)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (563 560 1 0 276 276 563 564 278 563)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc})
Best program: (integer_pop exec_empty exec_stackdepth integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc)))) () ())
Errors: [0 0 1 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 36
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.356
Median total errors in population: 5
Error averages by case: (0.437 0.44 0.999 1.0 0.724 0.724 0.437 0.436 0.722 0.437)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 34.247
Average program size in population (points): 47.395
Average percent parens in population: 0.276
Minimum age in population: 24.95182800292969
Maximum age in population: 30.59149551391602
Average age in population: 28.85659295654297
Median age in population: 28.9281005859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7523282
--- Timings ---
Current time: 1559314375927 milliseconds
Total Time:          59.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.1 seconds, 72.7%
Fitness Testing:      9.9 seconds, 16.7%
Report:               6.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_107} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup) integer_sub tag_exec_107 (exec_shove () boolean_pop tagged_379)) (integer_eq) (boolean_shove in1 exec_stackdepth))
Lexicase best errors: [0 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_107} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup) integer_sub tag_exec_107 (exec_shove () boolean_pop tagged_379)) (integer_eq) (boolean_shove in1 exec_stackdepth))
Zero cases best errors: [0 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 494 493 1000 1000 123 343 239 239 835)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (239 494 493 0 0 123 343 239 239 835)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty boolean_eq integer_flush exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items integer_lt exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ()) () ())
Errors: [0 1 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 66
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 7
Error averages by case: (0.761 0.506 0.507 1.0 1.0 0.877 0.657 0.761 0.761 0.165)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 34.873
Average program size in population (points): 48.127
Average percent parens in population: 0.274
Minimum age in population: 27.18817520141602
Maximum age in population: 32.28701210021973
Average age in population: 30.47902504253387
Median age in population: 30.56272125244141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7873109
--- Timings ---
Current time: 1559314378492 milliseconds
Total Time:          61.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.0 seconds, 72.7%
Fitness Testing:     10.3 seconds, 16.7%
Report:               6.5 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_dup) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap integer_mod exec_if () (integer_yank integer_inc print_integer) integer_empty) integer_dup) (boolean_invert_second_then_and tag_exec_89 (exec_shove () boolean_pop tagged_379)) (integer_eq) boolean_shove in1 exec_stackdepth boolean_flush exec_k (integer_rot) ())
Lexicase best errors: [0 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_dup) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap integer_mod exec_if () (integer_yank integer_inc print_integer) integer_empty) integer_dup) (boolean_invert_second_then_and tag_exec_89 (exec_shove () boolean_pop tagged_379)) (integer_eq) boolean_shove in1 exec_stackdepth boolean_flush exec_k (integer_rot) ())
Zero cases best errors: [0 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 343 126 311 312 312 394 394 1000 14)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (312 343 126 311 312 312 394 394 0 14)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 2, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot () (integer_swap boolean_stackdepth integer_sub exec_empty exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) integer_eq) boolean_shove in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ()) ())
Errors: [0 0 1 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.482
Median total errors in population: 8
Error averages by case: (0.688 0.657 0.874 0.689 0.688 0.688 0.606 0.606 1.0 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 36.145
Average program size in population (points): 49.966
Average percent parens in population: 0.276
Minimum age in population: 28.64351272583008
Maximum age in population: 34.02352666854858
Average age in population: 31.98702870941162
Median age in population: 32.00177431106567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8236756
--- Timings ---
Current time: 1559314381177 milliseconds
Total Time:          64.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.0 seconds, 72.7%
Fitness Testing:     10.7 seconds, 16.6%
Report:               6.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_yank print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Lexicase best errors: [1 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_yank print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Zero cases best errors: [1 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 165 494 165 750 165 495 165 491 97)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (97 165 494 165 750 165 495 165 491 97)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty boolean_eq integer_flush exec_pop () exec_dup_items integer_div exec_rot (integer_swap boolean_stackdepth exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items integer_lt exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ()) () ())
Errors: [1 0 1 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 47
Size: 66
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.916
Median total errors in population: 6
Error averages by case: (0.903 0.835 0.506 0.835 0.25 0.835 0.505 0.835 0.509 0.903)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.813
Average program size in population (points): 48.081
Average percent parens in population: 0.275
Minimum age in population: 30.11267471313477
Maximum age in population: 35.3217351436615
Average age in population: 33.43399124240875
Median age in population: 33.48496496677399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8589781
--- Timings ---
Current time: 1559314384134 milliseconds
Total Time:          67.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.2 seconds, 72.9%
Fitness Testing:     11.1 seconds, 16.4%
Report:               7.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379))) () ())
Lexicase best errors: [1 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379))) () ())
Zero cases best errors: [1 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 208 636 310 208 326 843 326 1 310)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (206 208 636 310 208 326 843 326 1 310)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq) integer_flush exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup integer_sub tag_exec_89 ()))) () ())
Errors: [1 1 0 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.626
Median total errors in population: 6
Error averages by case: (0.794 0.792 0.364 0.69 0.792 0.674 0.157 0.674 0.999 0.69)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.956
Average program size in population (points): 49.715
Average percent parens in population: 0.276
Minimum age in population: 31.11267471313477
Maximum age in population: 37.04830133914948
Average age in population: 34.85854232227802
Median age in population: 34.92605245113373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8947234
--- Timings ---
Current time: 1559314386861 milliseconds
Total Time:          70.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 73.0%
Fitness Testing:     11.5 seconds, 16.3%
Report:               7.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_79} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and integer_min print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (integer_eq) () boolean_shove in1 exec_stackdepth tagged_79 exec_k (exec_dup_times ()) ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_79} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and integer_min print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (integer_eq) () boolean_shove in1 exec_stackdepth tagged_79 exec_k (exec_dup_times ()) ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 197 257 288 831 256 280 645 258 256)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (257 197 257 288 831 256 280 645 258 256)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub print_integer integer_yankdup) boolean_pop tagged_379) () (exec_noop) boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_dup_times ()))
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 6.475
Median total errors in population: 6
Error averages by case: (0.743 0.803 0.743 0.712 0.169 0.744 0.72 0.355 0.742 0.744)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.753
Average program size in population (points): 47.822
Average percent parens in population: 0.273
Minimum age in population: 32.11267471313477
Maximum age in population: 38.33246600627899
Average age in population: 36.38547124922276
Median age in population: 36.43566715717316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9305342
--- Timings ---
Current time: 1559314389920 milliseconds
Total Time:          73.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.7 seconds, 73.2%
Fitness Testing:     11.9 seconds, 16.2%
Report:               7.7 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (boolean_and in4 boolean_dup integer_pop print_integer integer_dup_times exec_do*while (integer_sub integer_flush) exec_pop () exec_dup_items in3 exec_rot (boolean_and in4 print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (exec_noop) () boolean_shove in1 exec_if (boolean_flush exec_k () (exec_dup_times ())) ())
Lexicase best errors: [1 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (boolean_and in4 boolean_dup integer_pop print_integer integer_dup_times exec_do*while (integer_sub integer_flush) exec_pop () exec_dup_items in3 exec_rot (boolean_and in4 print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (exec_noop) () boolean_shove in1 exec_if (boolean_flush exec_k () (exec_dup_times ())) ())
Zero cases best errors: [1 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 229 550 92 866 226 227 229 226 93)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (0 229 550 92 866 226 227 229 226 93)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub})
Best program: (integer_pop exec_empty integer_dup_times in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and in4 print_integer boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub) () ())
Errors: [1 0 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 7.262
Median total errors in population: 8
Error averages by case: (1.0 0.771 0.45 0.908 0.134 0.774 0.773 0.771 0.774 0.907)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.743
Average program size in population (points): 47.671
Average percent parens in population: 0.270
Minimum age in population: 34.55298328399658
Maximum age in population: 39.81385064125061
Average age in population: 37.85197581765056
Median age in population: 37.92593242228031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9667567
--- Timings ---
Current time: 1559314392612 milliseconds
Total Time:          76.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 73.3%
Fitness Testing:     12.3 seconds, 16.1%
Report:               8.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop integer_max integer_dup_times exec_do*while (boolean_eq) integer_flush exec_pop () exec_dup_items exec_y_when_autoconstructing () exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer boolean_invert_first_then_and integer_dup_items integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) boolean_swap) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Lexicase best errors: [0 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop integer_max integer_dup_times exec_do*while (boolean_eq) integer_flush exec_pop () exec_dup_items exec_y_when_autoconstructing () exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer boolean_invert_first_then_and integer_dup_items integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) boolean_swap) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Zero cases best errors: [0 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (739 1000 1000 212 212 212 876 869 1000 524)
Population mean number of elite cases: 6.64
Count of perfect (error zero) individuals by case: (739 0 0 212 212 212 876 869 0 524)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items boolean_rot exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (integer_stackdepth in1 exec_stackdepth) boolean_flush exec_k (exec_dup_times ()) ())
Errors: [0 1 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.356
Median total errors in population: 6
Error averages by case: (0.261 1.0 1.0 0.788 0.788 0.788 0.124 0.131 1.0 0.476)
Error minima by case: (0 1 1 0 0 0 0 0 1 0)
Average genome size in population (length): 36.557
Average program size in population (points): 50.086
Average percent parens in population: 0.269
Minimum age in population: 35.55298328399658
Maximum age in population: 41.25832697749138
Average age in population: 39.36786040756106
Median age in population: 39.46231868863106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10041970
--- Timings ---
Current time: 1559314395318 milliseconds
Total Time:          78.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 73.4%
Fitness Testing:     12.7 seconds, 16.1%
Report:               8.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 07                 
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -337               
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 517                
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (integer_sub integer_flush) exec_pop () exec_dup_items in3 exec_rot (boolean_and in4 print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (exec_noop) () boolean_shove in1 exec_if (boolean_flush) (exec_k () ()))
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (integer_sub integer_flush) exec_pop () exec_dup_items in3 exec_rot (boolean_and in4 print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (exec_noop) () boolean_shove in1 exec_if (boolean_flush) (exec_k () ()))
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 214 835 255 215 214 1000 9 216 549)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (72 214 835 255 215 214 0 9 216 549)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (boolean_frominteger exec_empty integer_dup_times exec_do*while (boolean_and integer_flush) exec_pop () exec_dup_items print_boolean exec_rot (integer_swap boolean_stackdepth integer_sub in4 exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_gt) integer_dup) integer_sub tag_exec_89 (exec_shove () print_boolean tagged_379)) exec_noop) () (boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_dup_times ())))
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.421
Median total errors in population: 8
Error averages by case: (0.928 0.786 0.165 0.745 0.785 0.786 1.0 0.991 0.784 0.451)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 36.586
Average program size in population (points): 50.697
Average percent parens in population: 0.278
Minimum age in population: 36.55298328399658
Maximum age in population: 42.64347377419472
Average age in population: 40.76288827066869
Median age in population: 40.84059962630272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10422778
--- Timings ---
Current time: 1559314398058 milliseconds
Total Time:          81.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 73.4%
Fitness Testing:     13.1 seconds, 16.1%
Report:               8.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq exec_s () (exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_swap boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap boolean_rot exec_if () (integer_yankdup integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (integer_pop boolean_pop tagged_379)) (boolean_yank) () boolean_shove in1 exec_stackdepth) (exec_noop) boolean_shove in1 exec_stackdepth boolean_flush exec_k () ()))
Lexicase best errors: [0 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq exec_s () (exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_swap boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap boolean_rot exec_if () (integer_yankdup integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (integer_pop boolean_pop tagged_379)) (boolean_yank) () boolean_shove in1 exec_stackdepth) (exec_noop) boolean_shove in1 exec_stackdepth boolean_flush exec_k () ()))
Zero cases best errors: [0 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 1000 113 83 113 113 1000 544 741 542)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (18 0 113 83 113 113 0 544 741 542)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_pop exec_pop ()) integer_mod in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap integer_dup_items exec_if () (integer_yank integer_inc print_integer integer_empty integer_dup) integer_sub tag_exec_89 (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop exec_stackdepth)) () ())
Errors: [0 1 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 7.733
Median total errors in population: 7
Error averages by case: (0.982 1.0 0.887 0.917 0.887 0.887 1.0 0.456 0.259 0.458)
Error minima by case: (0 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 37.493
Average program size in population (points): 51.199
Average percent parens in population: 0.267
Minimum age in population: 39.28340899944305
Maximum age in population: 44.40184473246336
Average age in population: 42.33958824478462
Median age in population: 42.39993499219418
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10840012
--- Timings ---
Current time: 1559314400817 milliseconds
Total Time:          84.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.8 seconds, 73.4%
Fitness Testing:     13.6 seconds, 16.1%
Report:               8.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_shove exec_empty boolean_eq integer_flush exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth exec_empty integer_dup_times exec_do*while (integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) integer_sub tag_exec_89 (exec_shove (boolean_pop) tagged_379)) exec_noop)) (boolean_shove print_integer integer_empty) (integer_dup) integer_sub tag_exec_89 (exec_shove (boolean_pop tagged_379)) integer_eq boolean_shove in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Lexicase best errors: [1 1 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 60
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_shove exec_empty boolean_eq integer_flush exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth exec_empty integer_dup_times exec_do*while (integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) integer_sub tag_exec_89 (exec_shove (boolean_pop) tagged_379)) exec_noop)) (boolean_shove print_integer integer_empty) (integer_dup) integer_sub tag_exec_89 (exec_shove (boolean_pop tagged_379)) integer_eq boolean_shove in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Zero cases best errors: [1 1 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 264 486 265 487 272 2 2 120 486)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (11 264 486 265 487 272 2 2 120 486)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush})
Best program: (boolean_frominteger exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_eq exec_dup_items exec_empty integer_lte exec_do*while (boolean_shove exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and in4 print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_shove) print_integer integer_empty) integer_dup) (integer_sub tag_exec_89 (exec_shove ()) boolean_pop tagged_379) (integer_eq)) boolean_shove in1 exec_stackdepth boolean_flush)
Errors: [1 0 1 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 42
Size: 54
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.605
Median total errors in population: 7
Error averages by case: (0.989 0.736 0.514 0.735 0.513 0.728 0.998 0.998 0.88 0.514)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.586
Average program size in population (points): 47.569
Average percent parens in population: 0.271
Minimum age in population: 40.28340899944305
Maximum age in population: 45.82536038011312
Average age in population: 43.73576570250466
Median age in population: 43.84597110562027
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 11211842
--- Timings ---
Current time: 1559314403481 milliseconds
Total Time:          86.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.7 seconds, 73.4%
Fitness Testing:     14.0 seconds, 16.1%
Report:               9.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop integer_max integer_dup_times exec_do*while (boolean_eq) integer_flush exec_pop () exec_dup_items exec_y_when_autoconstructing () exec_rot (integer_swap boolean_stackdepth integer_sub) (boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items integer_sub tag_exec_89 (exec_shove (boolean_pop exec_y_when_autoconstructing (print_integer integer_mod integer_yankdup) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) exec_noop)) (boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_dup_times ())))
Lexicase best errors: [1 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop integer_max integer_dup_times exec_do*while (boolean_eq) integer_flush exec_pop () exec_dup_items exec_y_when_autoconstructing () exec_rot (integer_swap boolean_stackdepth integer_sub) (boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items integer_sub tag_exec_89 (exec_shove (boolean_pop exec_y_when_autoconstructing (print_integer integer_mod integer_yankdup) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) exec_noop)) (boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_dup_times ())))
Zero cases best errors: [1 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 273 241 241 288 61 61 72 873 61)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (290 273 241 241 288 61 61 72 873 61)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (boolean_rot exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty)) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) integer_eq) () (integer_dec in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Errors: [1 1 1 1 1 0 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.539
Median total errors in population: 7
Error averages by case: (0.71 0.727 0.759 0.759 0.712 0.939 0.939 0.928 0.127 0.939)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.919
Average program size in population (points): 45.091
Average percent parens in population: 0.268
Minimum age in population: 42.3720506504178
Maximum age in population: 47.46813803352416
Average age in population: 45.29199183047097
Median age in population: 45.30768332630396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11561889
--- Timings ---
Current time: 1559314406639 milliseconds
Total Time:          90.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 73.6%
Fitness Testing:     14.4 seconds, 15.9%
Report:               9.3 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3) (exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc exec_noop integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth)) ())
Lexicase best errors: [0 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3) (exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc exec_noop integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth)) ())
Zero cases best errors: [0 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (303 598 98 308 540 880 105 849 199 302)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (303 598 98 308 540 880 105 849 199 302)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (boolean_rot exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty)) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) integer_eq) () (integer_dec in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Errors: [0 0 1 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 5.818
Median total errors in population: 5
Error averages by case: (0.697 0.402 0.902 0.692 0.46 0.12 0.895 0.151 0.801 0.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.48
Average program size in population (points): 47.431
Average percent parens in population: 0.272
Minimum age in population: 43.86956849694252
Maximum age in population: 48.96813803352416
Average age in population: 46.72792882043123
Median age in population: 46.79525731294416
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11932000
--- Timings ---
Current time: 1559314409492 milliseconds
Total Time:          92.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.4 seconds, 73.6%
Fitness Testing:     14.8 seconds, 15.9%
Report:               9.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 2, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_pop exec_pop ()) integer_mod in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap integer_dup_items exec_if () (integer_yank integer_inc print_integer integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) exec_noop) () (boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_dup_times ())))
Lexicase best errors: [1 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 2, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_pop exec_pop ()) integer_mod in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap integer_dup_items exec_if () (integer_yank integer_inc print_integer integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) exec_noop) () (boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_dup_times ())))
Zero cases best errors: [1 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (50 187 187 49 342 884 307 307 187 307)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (50 187 187 49 342 884 307 307 187 307)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction 2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_89} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k})
Best program: (integer_pop exec_empty boolean_pop exec_do*while (2 exec_pop () exec_dup_items in3) exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and in4 print_integer integer_mod exec_while (boolean_swap exec_when (exec_if () (integer_yank integer_max integer_dup_items) boolean_swap exec_when (exec_if () (integer_yank integer_inc integer_gt integer_empty integer_dup boolean_invert_second_then_and tag_exec_89 (integer_yankdup integer_dup tagged_379)) integer_eq)) boolean_shove in1 exec_stackdepth boolean_flush) exec_k () ()) () ())
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 58
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 7.193
Median total errors in population: 7
Error averages by case: (0.95 0.813 0.813 0.951 0.658 0.116 0.693 0.693 0.813 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.493
Average program size in population (points): 45.909
Average percent parens in population: 0.270
Minimum age in population: 45.02428656816483
Maximum age in population: 50.46944486605935
Average age in population: 48.25415811852459
Median age in population: 48.35617984738201
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 12274801
--- Timings ---
Current time: 1559314412130 milliseconds
Total Time:          95.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.4 seconds, 73.6%
Fitness Testing:     15.2 seconds, 15.9%
Report:               9.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 3, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) tag_exec_89 (exec_shove () boolean_pop tagged_379)) () (integer_eq) boolean_shove in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Lexicase best errors: [1 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 3, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) tag_exec_89 (exec_shove () boolean_pop tagged_379)) () (integer_eq) boolean_shove in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Zero cases best errors: [1 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (321 223 223 222 224 330 330 334 229 91)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (321 223 223 222 224 330 330 334 229 91)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -39} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_dup integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items) boolean_swap exec_k_when_autoconstructing (-39 exec_dup_items print_integer integer_yankdup integer_dup exec_y_when_autoconstructing (print_integer integer_mod exec_dup_items boolean_swap print_integer exec_if () (integer_yank integer_inc print_integer integer_empty) exec_do*while ()) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (integer_eq) boolean_shove in1 exec_stackdepth boolean_flush) (exec_k (exec_dup_times ()) ()) ())
Errors: [1 0 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 50
Size: 68
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.473
Median total errors in population: 7
Error averages by case: (0.679 0.777 0.777 0.778 0.776 0.67 0.67 0.666 0.771 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.604
Average program size in population (points): 47.335
Average percent parens in population: 0.268
Minimum age in population: 46.28602482378483
Maximum age in population: 51.72247904760297
Average age in population: 49.73819265986129
Median age in population: 49.81584212882444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 12642221
--- Timings ---
Current time: 1559314415498 milliseconds
Total Time:          98.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.0 seconds, 73.9%
Fitness Testing:     15.6 seconds, 15.8%
Report:              10.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_do*count (in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_gt) integer_dup) integer_sub tag_exec_89 (exec_shove () exec_eq tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ()))
Lexicase best errors: [1 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_do*count (in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_gt) integer_dup) integer_sub tag_exec_89 (exec_shove () exec_eq tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ()))
Zero cases best errors: [1 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (335 280 157 282 282 120 120 120 886 120)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (335 280 157 282 282 120 120 120 886 120)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop integer_pop exec_empty integer_dup_times in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items tag_exec_89 (exec_shove () boolean_pop tagged_379)) exec_noop) () (boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_dup_times ())))
Errors: [1 1 1 1 1 0 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.298
Median total errors in population: 8
Error averages by case: (0.665 0.72 0.843 0.718 0.718 0.88 0.88 0.88 0.114 0.88)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.862
Average program size in population (points): 46.338
Average percent parens in population: 0.268
Minimum age in population: 48.51188660366461
Maximum age in population: 53.44828662794316
Average age in population: 51.23627943979425
Median age in population: 51.3251701973204
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 12993693
--- Timings ---
Current time: 1559314418213 milliseconds
Total Time:         101.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.1 seconds, 73.9%
Fitness Testing:     16.0 seconds, 15.7%
Report:              10.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_dup_times})
Lexicase best program: (in1 exec_empty integer_dup_times exec_do*while (integer_pop exec_empty integer_dup_times exec_do*while (in4 print_integer integer_mod boolean_frominteger boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub exec_noop)) boolean_shove in1 exec_stackdepth boolean_flush integer_empty exec_dup_times ())
Lexicase best errors: [0 1 0 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 35
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_dup_times})
Zero cases best program: (in1 exec_empty integer_dup_times exec_do*while (integer_pop exec_empty integer_dup_times exec_do*while (in4 print_integer integer_mod boolean_frominteger boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) integer_dup) integer_sub exec_noop)) boolean_shove in1 exec_stackdepth boolean_flush integer_empty exec_dup_times ())
Zero cases best errors: [0 1 0 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 35
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 137 263 370 138 265 112 447 331 114)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (266 137 263 370 138 265 112 447 331 114)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_dec exec_empty integer_dup_times exec_do*while (boolean_eq exec_do*while (integer_sub)) integer_flush integer_add exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer exec_when (exec_shove () integer_sub integer_yank integer_inc integer_dup_items integer_empty) integer_empty) exec_when (tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Errors: [1 1 1 0 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.557
Median total errors in population: 7
Error averages by case: (0.734 0.863 0.737 0.63 0.862 0.735 0.888 0.553 0.669 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.849
Average program size in population (points): 46.383
Average percent parens in population: 0.269
Minimum age in population: 49.51188660366461
Maximum age in population: 54.88196226552827
Average age in population: 52.76597106936492
Median age in population: 52.85737539594993
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.004
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 13340939
--- Timings ---
Current time: 1559314421241 milliseconds
Total Time:         104.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.5 seconds, 74.0%
Fitness Testing:     16.4 seconds, 15.6%
Report:              10.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () integer_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub integer_empty exec_y_when_autoconstructing (print_integer integer_mod integer_yankdup) integer_dup) (integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (exec_noop) boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_dup_times ()))
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () integer_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub integer_empty exec_y_when_autoconstructing (print_integer integer_mod integer_yankdup) integer_dup) (integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) (exec_noop) boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_dup_times ()))
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (705 404 402 281 209 212 210 213 192 213)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (705 404 402 281 209 212 210 213 192 213)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction 2} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty exec_empty integer_pop exec_empty integer_dup_times exec_yank boolean_eq 2 integer_stackdepth exec_dup_items in3 boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (boolean_pop tagged_379)) integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty)) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) integer_eq) integer_dec in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 46
Size: 60
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.959
Median total errors in population: 7
Error averages by case: (0.295 0.596 0.598 0.719 0.791 0.788 0.79 0.787 0.808 0.787)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.448
Average program size in population (points): 45.755
Average percent parens in population: 0.268
Minimum age in population: 50.51188660366461
Maximum age in population: 56.34393121146422
Average age in population: 54.22029536683965
Median age in population: 54.25069781058119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 13687172
--- Timings ---
Current time: 1559314424015 milliseconds
Total Time:         107.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.5 seconds, 74.1%
Fitness Testing:     16.7 seconds, 15.6%
Report:              11.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_311} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_while})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub integer_mult exec_shove () boolean_pop tagged_379) () (integer_empty integer_empty) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_311) boolean_pop tagged_379 exec_noop boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_while ()))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_311} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_while})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty) integer_dup) integer_sub integer_mult exec_shove () boolean_pop tagged_379) () (integer_empty integer_empty) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_311) boolean_pop tagged_379 exec_noop boolean_shove in1 exec_stackdepth boolean_flush exec_k () (exec_while ()))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (376 105 399 375 106 876 138 377 260 376)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (376 105 399 375 106 876 138 377 260 376)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_411} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction in1})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and print_boolean print_integer integer_flush integer_dup) (integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_411)) (integer_eq) boolean_invert_second_then_and in1 in1)
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.612
Median total errors in population: 7
Error averages by case: (0.624 0.895 0.601 0.625 0.894 0.124 0.862 0.623 0.74 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.103
Average program size in population (points): 45.538
Average percent parens in population: 0.272
Minimum age in population: 52.59231858095154
Maximum age in population: 57.65884319109318
Average age in population: 55.68990516912006
Median age in population: 55.77290944010747
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 14035189
--- Timings ---
Current time: 1559314426963 milliseconds
Total Time:         110.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.9 seconds, 74.1%
Fitness Testing:     17.1 seconds, 15.5%
Report:              11.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (boolean_rot exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty)) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) integer_eq) () (integer_dec in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Lexicase best errors: [0 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (boolean_rot exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty)) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) integer_eq) () (integer_dec in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Zero cases best errors: [0 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 199 407 201 133 133 133 473 201 902)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (133 199 407 201 133 133 133 473 201 902)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (boolean_and in4 boolean_dup integer_pop exec_empty integer_dup_times integer_flush exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty)) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop boolean_pop) integer_eq) () (integer_dec in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ())
Errors: [0 1 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 53
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 7.085
Median total errors in population: 8
Error averages by case: (0.867 0.801 0.593 0.799 0.867 0.867 0.867 0.527 0.799 0.098)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.432
Average program size in population (points): 45.963
Average percent parens in population: 0.271
Minimum age in population: 53.94295567518566
Maximum age in population: 59.04580191053901
Average age in population: 57.20345143813605
Median age in population: 57.31233906201487
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 14391770
--- Timings ---
Current time: 1559314430177 milliseconds
Total Time:         113.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.4 seconds, 74.3%
Fitness Testing:     17.5 seconds, 15.4%
Report:              11.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_145} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush exec_pop () exec_empty in4 print_integer boolean_invert_second_then_and) integer_dup_items integer_dup integer_sub tag_exec_145 (exec_shove () boolean_pop tagged_379) integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_flush integer_inc print_integer integer_empty)) integer_dup integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) integer_eq integer_dec in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Lexicase best errors: [1 1 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 53
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_145} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush exec_pop () exec_empty in4 print_integer boolean_invert_second_then_and) integer_dup_items integer_dup integer_sub tag_exec_145 (exec_shove () boolean_pop tagged_379) integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_flush integer_inc print_integer integer_empty)) integer_dup integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) integer_eq integer_dec in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Zero cases best errors: [1 1 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 53
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (377 377 472 2 378 335 2 340 13 335)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (377 377 472 2 378 335 2 340 13 335)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 0, :instruction -26} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_145} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq) -26 boolean_xor exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and in4 print_integer integer_mod) (integer_dup_items integer_dup integer_gt tag_exec_145 (exec_shove () boolean_pop tagged_379)) (integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank integer_inc print_integer integer_empty)) integer_dup) integer_sub tag_exec_89 (exec_shove (boolean_pop) tagged_379) integer_eq integer_dec in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Errors: [1 1 0 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 46
Size: 61
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.369
Median total errors in population: 7
Error averages by case: (0.623 0.623 0.528 0.998 0.622 0.665 0.998 0.66 0.987 0.665)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.75
Average program size in population (points): 46.067
Average percent parens in population: 0.266
Minimum age in population: 54.94295567518566
Maximum age in population: 60.56913056572557
Average age in population: 58.70912941885883
Median age in population: 58.81355289564272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 14752116
--- Timings ---
Current time: 1559314432959 milliseconds
Total Time:         116.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.4 seconds, 74.3%
Fitness Testing:     17.9 seconds, 15.4%
Report:              11.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_192} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (exec_yank integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_shove exec_k_when_autoconstructing (integer_sub tag_exec_192 (in4) print_integer integer_mod integer_dup_items) (exec_do*range (integer_mod integer_dup_items integer_sub tag_exec_89 (exec_shove () exec_y (tagged_379)) boolean_swap)) boolean_shove in1 exec_stackdepth) () ())
Lexicase best errors: [1 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_192} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (exec_yank integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_shove exec_k_when_autoconstructing (integer_sub tag_exec_192 (in4) print_integer integer_mod integer_dup_items) (exec_do*range (integer_mod integer_dup_items integer_sub tag_exec_89 (exec_shove () exec_y (tagged_379)) boolean_swap)) boolean_shove in1 exec_stackdepth) () ())
Zero cases best errors: [1 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 329 40 40 864 330 284 40 40 897)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (246 329 40 40 864 330 284 40 40 897)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_stackdepth exec_empty integer_dup_times exec_do*while (boolean_eq) integer_flush boolean_rot exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank) integer_inc print_integer integer_empty)) integer_dup) (integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379) integer_eq) () integer_dec in1 exec_stackdepth boolean_flush exec_k (exec_dup_times ()) ())
Errors: [1 1 0 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 60
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.89
Median total errors in population: 7
Error averages by case: (0.754 0.671 0.96 0.96 0.136 0.67 0.716 0.96 0.96 0.103)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.991
Average program size in population (points): 43.984
Average percent parens in population: 0.273
Minimum age in population: 56.96556026462349
Maximum age in population: 61.97003287427833
Average age in population: 60.06604661993148
Median age in population: 60.14775118950274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 15090425
--- Timings ---
Current time: 1559314435977 milliseconds
Total Time:         119.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.7 seconds, 74.3%
Fitness Testing:     18.3 seconds, 15.4%
Report:              12.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1})
Lexicase best program: (in3 exec_rot (boolean_dup exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () integer_min in3 exec_rot (integer_swap boolean_stackdepth boolean_frominteger boolean_and exec_y_when_autoconstructing (in4) print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup)) integer_dup integer_sub tag_exec_89 (boolean_pop tagged_379)) exec_noop) () (boolean_shove in1)) () ())
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1})
Zero cases best program: (in3 exec_rot (boolean_dup exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () integer_min in3 exec_rot (integer_swap boolean_stackdepth boolean_frominteger boolean_and exec_y_when_autoconstructing (in4) print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup)) integer_dup integer_sub tag_exec_89 (boolean_pop tagged_379)) exec_noop) () (boolean_shove in1)) () ())
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 418 123 775 255 255 477 101 434 100)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (272 418 123 775 255 255 477 101 434 100)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth})
Best program: (integer_pop integer_pop exec_empty integer_dup_times integer_min integer_sub integer_flush exec_pop () exec_dup_items print_integer exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and in4 print_integer exec_stackdepth) () ())
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 23
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.79
Median total errors in population: 7
Error averages by case: (0.728 0.582 0.877 0.225 0.745 0.745 0.523 0.899 0.566 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.185
Average program size in population (points): 44.064
Average percent parens in population: 0.269
Minimum age in population: 57.96556026462349
Maximum age in population: 63.53995633528302
Average age in population: 61.46922264979053
Median age in population: 61.57363428041322
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 15470258
--- Timings ---
Current time: 1559314438724 milliseconds
Total Time:         122.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.9 seconds, 74.4%
Fitness Testing:     18.8 seconds, 15.3%
Report:              12.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_9948})
Lexicase best program: (integer_pop exec_empty integer_dup_times integer_min boolean_eq integer_sub integer_max in4 print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_do*while (boolean_eq exec_do*while () boolean_and in4) print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup integer_sub tag_exec_9948 ()))))))
Lexicase best errors: [1 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_9948})
Zero cases best program: (integer_pop exec_empty integer_dup_times integer_min boolean_eq integer_sub integer_max in4 print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_do*while (boolean_eq exec_do*while () boolean_and in4) print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup integer_sub tag_exec_9948 ()))))))
Zero cases best errors: [1 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 346 344 100 346 344 239 239 171 347)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (239 346 344 100 346 344 239 239 171 347)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 2, :instruction tagged_379} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_34} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth boolean_dup_items boolean_and in4 print_integer integer_mod boolean_empty boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) tagged_379)) (integer_eq boolean_shove) (in1 integer_sub tag_exec_34 (exec_shove () boolean_pop tagged_379)) exec_noop exec_k (exec_k (exec_dup_times ()) ()) ())
Errors: [1 0 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 54
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.285
Median total errors in population: 7
Error averages by case: (0.761 0.654 0.656 0.9 0.654 0.656 0.761 0.761 0.829 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.518
Average program size in population (points): 43.299
Average percent parens in population: 0.271
Minimum age in population: 58.96556026462349
Maximum age in population: 65.24162911116014
Average age in population: 62.94885613202461
Median age in population: 63.04390474607249
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 15819039
--- Timings ---
Current time: 1559314442164 milliseconds
Total Time:         125.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.1 seconds, 74.5%
Fitness Testing:     19.2 seconds, 15.3%
Report:              12.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_79} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (boolean_invert_second_then_and exec_empty integer_dup_times exec_empty integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_dup_times) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (exec_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth tagged_79) exec_k (exec_dup_times ()) ())
Lexicase best errors: [1 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 57
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_79} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (boolean_invert_second_then_and exec_empty integer_dup_times exec_empty integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_dup_times) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items boolean_swap exec_when (exec_if () (exec_yank integer_inc print_integer integer_empty) integer_dup) integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) integer_eq) () (boolean_shove in1 exec_stackdepth tagged_79) exec_k (exec_dup_times ()) ())
Zero cases best errors: [1 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 57
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 84 82 82 109 788 253 252 110 452)
Population mean number of elite cases: 2.32
Count of perfect (error zero) individuals by case: (110 84 82 82 109 788 253 252 110 452)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_191} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (tagged_191 integer_flush) exec_pop () exec_dup_items boolean_eq in3 exec_rot (integer_swap boolean_stackdepth in2 in3 exec_rot (integer_swap boolean_stackdepth integer_sub exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items integer_sub tag_exec_89 (boolean_pop tagged_379)) boolean_swap) () (boolean_shove in1 exec_stackdepth boolean_flush) exec_k (exec_dup_times ()) ()) () ())
Errors: [1 0 0 0 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.678
Median total errors in population: 8
Error averages by case: (0.89 0.916 0.918 0.918 0.891 0.212 0.747 0.748 0.89 0.548)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.656
Average program size in population (points): 43.511
Average percent parens in population: 0.271
Minimum age in population: 60.08090836805059
Maximum age in population: 66.32124894271988
Average age in population: 64.4827404706434
Median age in population: 64.55082321322084
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 16171379
--- Timings ---
Current time: 1559314445499 milliseconds
Total Time:         128.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.7 seconds, 74.3%
Fitness Testing:     19.6 seconds, 15.2%
Report:              13.5 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 626
Test mean error for best: 0.62600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction 2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 65} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction tag_exec_89} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_pop exec_empty exec_s () (exec_do*while (boolean_eq 2 exec_pop () exec_dup_items in3) exec_rot (integer_swap boolean_stackdepth integer_sub) (boolean_and boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_mod integer_dup_items 65 tag_exec_89 (exec_shove (boolean_pop tagged_379)) boolean_swap)) (boolean_shove in1 exec_stackdepth boolean_flush) tag_exec_89 (boolean_dup_items) exec_rot (tagged_379) () (integer_eq) boolean_invert_second_then_and in1 integer_gte) ())
Lexicase best errors: [0 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction 2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 65} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction tag_exec_89} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction tagged_379} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_pop exec_empty exec_s () (exec_do*while (boolean_eq 2 exec_pop () exec_dup_items in3) exec_rot (integer_swap boolean_stackdepth integer_sub) (boolean_and boolean_and exec_y_when_autoconstructing (print_integer integer_mod integer_mod integer_dup_items 65 tag_exec_89 (exec_shove (boolean_pop tagged_379)) boolean_swap)) (boolean_shove in1 exec_stackdepth boolean_flush) tag_exec_89 (boolean_dup_items) exec_rot (tagged_379) () (integer_eq) boolean_invert_second_then_and in1 integer_gte) ())
Zero cases best errors: [0 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 303 270 304 128 270 267 188 304 188)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (884 303 270 304 128 270 267 188 304 188)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 2, :instruction tagged_379} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_34} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth in2 integer_mod boolean_empty boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) tagged_379)) (integer_eq boolean_shove) (in1 boolean_xor tag_exec_34 (exec_shove () boolean_pop tagged_379)) exec_noop boolean_flush exec_k (exec_dup_times ()) ())
Errors: [0 1 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 49
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.894
Median total errors in population: 6
Error averages by case: (0.116 0.697 0.73 0.696 0.872 0.73 0.733 0.812 0.696 0.812)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.605
Average program size in population (points): 43.497
Average percent parens in population: 0.272
Minimum age in population: 61.08090836805059
Maximum age in population: 67.78277242006033
Average age in population: 65.93136974134924
Median age in population: 66.02445509436058
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 16537323
--- Timings ---
Current time: 1559314448836 milliseconds
Total Time:         131.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.8 seconds, 74.3%
Fitness Testing:     20.0 seconds, 15.2%
Report:              13.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth in2 in3 exec_rot (integer_swap boolean_stackdepth integer_sub exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items integer_sub tag_exec_89 (exec_shove ()) exec_y (tagged_379)) boolean_swap) () (boolean_shove in1 exec_stackdepth)) () ())
Lexicase best errors: [0 1 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth in2 in3 exec_rot (integer_swap boolean_stackdepth integer_sub exec_y_when_autoconstructing (print_integer integer_mod integer_dup_items integer_sub tag_exec_89 (exec_shove ()) exec_y (tagged_379)) boolean_swap) () (boolean_shove in1 exec_stackdepth)) () ())
Zero cases best errors: [0 1 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 93 332 94 199 257 198 257 332 198)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (256 93 332 94 199 257 198 257 332 198)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop integer_max integer_dup_times exec_do*while (boolean_eq) integer_flush exec_pop () exec_dup_items exec_y_when_autoconstructing () exec_rot (integer_swap boolean_stackdepth integer_sub boolean_and exec_y_when_autoconstructing (print_integer boolean_invert_first_then_and integer_dup_items integer_sub tag_exec_89 (exec_shove () boolean_pop tagged_379)) boolean_swap) () (boolean_shove in1 boolean_dup boolean_flush) exec_k (exec_dup_times ()) ())
Errors: [0 1 1 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 30
Size: 43
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.784
Median total errors in population: 8
Error averages by case: (0.744 0.907 0.668 0.906 0.801 0.743 0.802 0.743 0.668 0.802)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.557
Average program size in population (points): 43.418
Average percent parens in population: 0.272
Minimum age in population: 64.23244722292566
Maximum age in population: 69.21363262449955
Average age in population: 67.44059993303377
Median age in population: 67.58037735693281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 16903521
--- Timings ---
Current time: 1559314451875 milliseconds
Total Time:         135.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.1 seconds, 74.0%
Fitness Testing:     20.4 seconds, 15.1%
Report:              14.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 776
Test mean error for best: 0.77600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -21                 | Program output:                    
Correct output: -53                 | Program output: 0                  
Correct output: 1                   | Program output:                    
Correct output: 4                   | Program output: 1                  
Correct output: -94                 | Program output: 10                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output:                    
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output:                    
Correct output: 17                  | Program output: 14                 
Correct output: 0                   | Program output: 13                 
Correct output: 4                   | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: 20                  | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 36                  | Program output:                    
Correct output: 13                  | Program output: 10                 
Correct output: 50                  | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output:                    
Correct output: 1                   | Program output: 23                 
Correct output: 8                   | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output:                    
Correct output: 70                  | Program output:                    
Correct output: 25                  | Program output:                    
Correct output: 32                  | Program output:                    
Correct output: 36                  | Program output:                    
Correct output: 22                  | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output:                    
Correct output: -27                 | Program output: 11                 
Correct output: -25                 | Program output: 6                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output:                    
Correct output: 59                  | Program output:                    
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 5                  
Correct output: -100                | Program output:                    
Correct output: -62                 | Program output:                    
Correct output: -97                 | Program output: 5                  
Correct output: -97                 | Program output: 3                  
Correct output: -100                | Program output:                    
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output:                    
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 10                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output:                    
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 19                 
Correct output: -95                 | Program output:                    
Correct output: 17                  | Program output: 14                 
Correct output: -57                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output:                    
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output:                    
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output:                    
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output:                    
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output:                    
Correct output: -83                 | Program output:                    
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap exec_do*while (in2 in3 exec_rot (integer_swap boolean_stackdepth integer_sub exec_y_when_autoconstructing () print_integer integer_mod integer_dup_items integer_sub tag_exec_89 (exec_shove () exec_y (tagged_379)) boolean_swap) () (exec_do*count () exec_k (exec_dup_times ()) ()))) () ())
Lexicase best errors: [1 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap exec_do*while (in2 in3 exec_rot (integer_swap boolean_stackdepth integer_sub exec_y_when_autoconstructing () print_integer integer_mod integer_dup_items integer_sub tag_exec_89 (exec_shove () exec_y (tagged_379)) boolean_swap) () (exec_do*count () exec_k (exec_dup_times ()) ()))) () ())
Zero cases best errors: [1 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 250 258 213 509 227 175 250 213 683)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (211 250 258 213 509 227 175 250 213 683)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 2, :instruction tagged_379} {:close 2, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) exec_pop () exec_dup_items in3 exec_rot (integer_swap exec_do*while (in2 in3 exec_rot (integer_swap boolean_stackdepth integer_sub exec_y_when_autoconstructing () print_integer integer_mod integer_dup_items integer_sub tag_exec_89 (exec_shove () exec_y (tagged_379)) boolean_swap) () (exec_do*count () exec_k (exec_dup_times ()) ()))) () ())
Errors: [1 1 0 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 49
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 7.011
Median total errors in population: 7
Error averages by case: (0.789 0.75 0.742 0.787 0.491 0.773 0.825 0.75 0.787 0.317)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.469
Average program size in population (points): 43.389
Average percent parens in population: 0.273
Minimum age in population: 65.23244722292566
Maximum age in population: 70.98725202079369
Average age in population: 68.91005821235056
Median age in population: 68.97445029784235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 17271116
--- Timings ---
Current time: 1559314454813 milliseconds
Total Time:         138.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.2 seconds, 74.0%
Fitness Testing:     20.8 seconds, 15.1%
Report:              14.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) in1 integer_min in3 exec_s (in3 exec_rot (integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 50
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) in1 integer_min in3 exec_s (in3 exec_rot (integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 50
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (895 428 468 449 449 655 895 105 915 94)
Population mean number of elite cases: 5.35
Count of perfect (error zero) individuals by case: (895 428 468 449 449 655 895 105 915 94)
Population mean number of perfect (error zero) cases: 5.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq integer_flush) in1 integer_min in3 exec_s (in3 exec_rot (integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 33
Size: 50
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 4.647
Median total errors in population: 4
Error averages by case: (0.105 0.572 0.532 0.551 0.551 0.345 0.105 0.895 0.085 0.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.688
Average program size in population (points): 45.351
Average percent parens in population: 0.297
Minimum age in population: 66.23244722292566
Maximum age in population: 72.3691111021403
Average age in population: 70.29737752869961
Median age in population: 70.40572508807146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 180
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 17707619
--- Timings ---
Current time: 1559314457648 milliseconds
Total Time:         141.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.3 seconds, 74.0%
Fitness Testing:     21.3 seconds, 15.1%
Report:              15.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_145})
Lexicase best program: (integer_pop integer_gte integer_dup_times exec_do*while (boolean_eq integer_lt boolean_xor) exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_frominteger in4 print_integer integer_mod) (integer_dup_items integer_dup integer_sub tag_exec_145 ()) ())
Lexicase best errors: [1 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_145})
Zero cases best program: (integer_pop integer_gte integer_dup_times exec_do*while (boolean_eq integer_lt boolean_xor) exec_dup_items in3 exec_rot (integer_swap boolean_stackdepth integer_sub boolean_frominteger in4 print_integer integer_mod) (integer_dup_items integer_dup integer_sub tag_exec_145 ()) ())
Zero cases best errors: [1 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 166 17 165 167 877 27 166 922 548)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (538 166 17 165 167 877 27 166 922 548)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_89} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when})
Best program: (integer_pop boolean_eq integer_pop exec_empty integer_dup_times exec_do*while (integer_sub exec_rot (integer_swap boolean_stackdepth in2) (integer_pop) (boolean_eq integer_dup_times exec_do*while (integer_sub integer_flush) integer_dup_times) exec_dup_items print_integer exec_rot (print_boolean boolean_stackdepth integer_sub boolean_and in4 print_integer integer_dup_items boolean_swap exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup) integer_add) integer_sub tag_exec_89 (exec_shove () boolean_pop integer_max)) (exec_noop) () boolean_shove in1 exec_stackdepth exec_when ()))
Errors: [1 0 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 61
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.407
Median total errors in population: 6
Error averages by case: (0.462 0.834 0.983 0.835 0.833 0.123 0.973 0.834 0.078 0.452)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.097
Average program size in population (points): 47.236
Average percent parens in population: 0.317
Minimum age in population: 67.23244722292566
Maximum age in population: 73.63225815972812
Average age in population: 72.18514198870827
Median age in population: 72.0931489601553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 354
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 358
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 18043612
--- Timings ---
Current time: 1559314460339 milliseconds
Total Time:         143.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.3 seconds, 74.0%
Fitness Testing:     21.7 seconds, 15.1%
Report:              15.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Lexicase best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq integer_flush) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Zero cases best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq integer_flush) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (459 461 459 471 1000 908 459 460 1000 899)
Population mean number of elite cases: 6.58
Count of perfect (error zero) individuals by case: (459 461 459 471 0 908 459 460 0 899)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq integer_flush) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 51
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.424
Median total errors in population: 8
Error averages by case: (0.541 0.539 0.541 0.529 1.0 0.092 0.541 0.54 1.0 0.101)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 32.335
Average program size in population (points): 46.513
Average percent parens in population: 0.300
Minimum age in population: 70.5639262201208
Maximum age in population: 75.39620151456532
Average age in population: 73.73512939161645
Median age in population: 73.63559567590087
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 293
Genome diversity (% unique genomes):	 0.506
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 299
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 18387653
--- Timings ---
Current time: 1559314462939 milliseconds
Total Time:         146.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.2 seconds, 73.9%
Fitness Testing:     22.1 seconds, 15.1%
Report:              15.9 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Lexicase best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Zero cases best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (911 1000 1000 911 18 926 912 909 1 909)
Population mean number of elite cases: 7.50
Count of perfect (error zero) individuals by case: (911 0 0 911 18 926 912 909 1 909)
Population mean number of perfect (error zero) cases: 5.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 54
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 4.503
Median total errors in population: 4
Error averages by case: (0.089 1.0 1.0 0.089 0.982 0.074 0.088 0.091 0.999 0.091)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 33.98
Average program size in population (points): 50.958
Average percent parens in population: 0.333
Minimum age in population: 73.64757205958561
Maximum age in population: 76.74348877951815
Average age in population: 75.34390561197885
Median age in population: 75.51541035125209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 351
Genome diversity (% unique genomes):	 0.506
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 368
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 18720872
--- Timings ---
Current time: 1559314465525 milliseconds
Total Time:         148.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.1 seconds, 73.9%
Fitness Testing:     22.5 seconds, 15.1%
Report:              16.2 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Lexicase best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove integer_yank integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Zero cases best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove integer_yank integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (754 754 756 764 780 755 766 766 1000 1000)
Population mean number of elite cases: 8.10
Count of perfect (error zero) individuals by case: (754 754 756 764 780 755 766 766 0 0)
Population mean number of perfect (error zero) cases: 6.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and boolean_eq) (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_rot (boolean_pop tagged_379) () ()))))) ()) () ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 37
Size: 54
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 3.905
Median total errors in population: 2
Error averages by case: (0.246 0.246 0.244 0.236 0.22 0.245 0.234 0.234 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 36.254
Average program size in population (points): 52.953
Average percent parens in population: 0.315
Minimum age in population: 75.21066757657
Maximum age in population: 78.5046577376574
Average age in population: 77.48995720856229
Median age in population: 77.52241806997353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 499
Genome diversity (% unique genomes):	 0.397
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 506
Syntactic diversity (% unique Push programs):	 0.382
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 19060622
--- Timings ---
Current time: 1559314467903 milliseconds
Total Time:         151.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.8 seconds, 73.9%
Fitness Testing:     22.9 seconds, 15.1%
Report:              16.5 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup))))) () ()) () ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_pop exec_empty integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup))))) () ()) () ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 900 885 871 876 902 1000 906 886 876)
Population mean number of elite cases: 9.10
Count of perfect (error zero) individuals by case: (0 900 885 871 876 902 0 906 886 876)
Population mean number of perfect (error zero) cases: 7.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 43
Size: 61
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 2.898
Median total errors in population: 2
Error averages by case: (1.0 0.1 0.115 0.129 0.124 0.098 1.0 0.094 0.114 0.124)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 36.873
Average program size in population (points): 53.813
Average percent parens in population: 0.315
Minimum age in population: 77.52241806997353
Maximum age in population: 80.1974299583186
Average age in population: 79.00787789102017
Median age in population: 79.01541035125209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 371
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 383
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 19416712
--- Timings ---
Current time: 1559314470416 milliseconds
Total Time:         153.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.5 seconds, 73.8%
Fitness Testing:     23.3 seconds, 15.1%
Report:              16.8 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Lexicase best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 54
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Zero cases best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 54
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (863 899 899 896 2 899 874 896 899 892)
Population mean number of elite cases: 8.02
Count of perfect (error zero) individuals by case: (863 899 899 896 2 899 874 896 899 892)
Population mean number of perfect (error zero) cases: 8.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (integer_dup_times exec_do*while (boolean_eq in4) in1) integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 1.981
Median total errors in population: 1
Error averages by case: (0.137 0.101 0.101 0.104 0.998 0.101 0.126 0.104 0.101 0.108)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.856
Average program size in population (points): 53.788
Average percent parens in population: 0.314
Minimum age in population: 78.52241806997353
Maximum age in population: 82.01977502193984
Average age in population: 80.47650158254308
Median age in population: 80.51541035125209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 241
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 19774101
--- Timings ---
Current time: 1559314472965 milliseconds
Total Time:         156.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.4 seconds, 73.8%
Fitness Testing:     23.7 seconds, 15.2%
Report:              17.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 203
Test mean error for best: 0.20300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Lexicase best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379)))))) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 52
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Zero cases best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_stackdepth integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379)))))) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 52
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (800 781 780 809 781 780 779 800 800 771)
Population mean number of elite cases: 7.88
Count of perfect (error zero) individuals by case: (800 781 780 809 781 780 779 800 800 771)
Population mean number of perfect (error zero) cases: 7.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_89} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_379})
Best program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 37
Size: 54
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 2.119
Median total errors in population: 0
Error averages by case: (0.2 0.219 0.22 0.191 0.219 0.22 0.221 0.2 0.2 0.229)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.975
Average program size in population (points): 53.913
Average percent parens in population: 0.314
Minimum age in population: 79.52241806997353
Maximum age in population: 83.89477502193984
Average age in population: 82.04310921534577
Median age in population: 82.06228535125209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.01
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 20131480
--- Timings ---
Current time: 1559314475522 milliseconds
Total Time:         158.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.2 seconds, 73.8%
Fitness Testing:     24.1 seconds, 15.2%
Report:              17.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 55
Successful program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 54


Auto-simplifying with starting size: 54
step: 0
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 500
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 1000
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 1500
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 2000
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 2500
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 3000
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 3500
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 4000
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 4500
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 5000
program: (integer_pop exec_empty integer_dup_times integer_dup_times exec_do*while (boolean_eq in4) in1 integer_min in3 exec_s (integer_min exec_rot (integer_shove boolean_stackdepth integer_sub integer_shove boolean_empty integer_sub boolean_and exec_k_when_autoconstructing () (print_integer integer_mod integer_dup_items exec_do*range (exec_when (exec_if () (integer_yank exec_dup_items print_integer integer_yankdup integer_dup) exec_do*range (tag_exec_89 (exec_shove (boolean_pop tagged_379))))))) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 203
Test mean error for best: 0.20300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
