Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[3 3 3 -20] -20] [[-37 -37 -37 37] -37] [[-97 -74 -74 -74] -97] [[-45 -38 -38 -38] -45] [[72 55 72 72] 55] [[-79 84 -79 -79] -79] [[53 53 53 85] 53] [[99 99 99 38] 38] [[-45 61 -45 -45] -45] [[-55 -8 -8 -8] -55] [(37 37 37 37) 37] [(43 43 43 43) 43] [(5 5 5 5) 5] [(-27 -27 -27 -27) -27] [(-57 -57 -57 -57) -57] [(15 69 65 3) 3] [(11 93 65 17) 11] [(99 42 64 91) 42] [(80 60 2 86) 2] [(78 48 7 54) 7] [(97 62 66 14) 14] [(29 27 7 27) 7] [(34 53 64 5) 5] [(59 74 11 41) 11] [(56 6 74 68) 6] [(8 69 98 81) 8] [(12 29 97 15) 12] [(75 13 39 85) 13] [(84 38 26 100) 26] [(41 48 78 8) 8] [(2 86 38 0) 0] [(16 81 39 81) 16] [(39 61 41 57) 39] [(47 24 19 11) 11] [(97 100 5 93) 5] [(-67 78 57 -87) -87] [(72 -54 -11 12) -54] [(84 71 -61 83) -61] [(-24 -80 -58 45) -80] [(-36 -89 33 22) -89] [(-79 36 49 54) -79] [(-99 -36 -59 -41) -99] [(23 -42 73 21) -42] [(34 20 -93 -18) -93] [(-21 66 13 11) -21] [(-2 -88 64 9) -88] [(-98 -11 -53 37) -98] [(80 45 -14 72) -14] [(72 -16 -5 54) -16] [(-80 -47 69 -69) -80] [(-100 3 5 -27) -100] [(-21 62 98 42) -21] [(-7 42 -47 -25) -47] [(95 58 -20 95) -20] [(-100 -3 -59 98) -100] [(64 69 -89 33) -89] [(61 -55 0 -24) -55] [(-58 -1 20 97) -58] [(73 1 -65 -31) -65] [(-61 44 -5 48) -61] [(-17 -17 -82 -44) -82] [(-33 37 11 81) -33] [(62 52 58 26) 26] [(-18 33 60 -55) -55] [(-47 58 63 52) -47] [(-27 -24 -9 -78) -78] [(-88 -25 18 1) -88] [(57 -33 31 -89) -89] [(47 92 -11 -3) -11] [(60 -80 -60 18) -80] [(-53 74 65 9) -53] [(83 -23 -33 -50) -50] [(51 -22 8 94) -22] [(6 -58 -51 49) -58] [(63 87 -38 -27) -38] [(35 -49 88 -34) -49] [(36 -25 73 -25) -25] [(50 6 -65 -80) -80] [(65 -28 -83 13) -83] [(64 -32 50 9) -32] [(-79 62 -61 -71) -79] [(79 2 23 -55) -55] [(-40 -44 -73 83) -73] [(11 -29 72 -64) -64] [(72 -41 70 -62) -62] [(58 53 77 25) 25] [(24 77 -3 -91) -91] [(-74 -54 -27 28) -74] [(-60 46 3 31) -60] [(99 -87 -44 83) -87] [(-50 -58 40 -52) -58] [(77 2 30 -65) -65] [(-66 96 32 -21) -66] [(79 -79 29 -16) -79] [(36 -33 73 -87) -87])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[3 3 3 -20] -20]
Train Case:   6 | Input/Output: [[-37 -37 -37 37] -37]
Train Case:   7 | Input/Output: [[-97 -74 -74 -74] -97]
Train Case:   8 | Input/Output: [[-45 -38 -38 -38] -45]
Train Case:   9 | Input/Output: [[72 55 72 72] 55]
Train Case:  10 | Input/Output: [[-79 84 -79 -79] -79]
Train Case:  11 | Input/Output: [[53 53 53 85] 53]
Train Case:  12 | Input/Output: [[99 99 99 38] 38]
Train Case:  13 | Input/Output: [[-45 61 -45 -45] -45]
Train Case:  14 | Input/Output: [[-55 -8 -8 -8] -55]
Train Case:  15 | Input/Output: [(37 37 37 37) 37]
Train Case:  16 | Input/Output: [(43 43 43 43) 43]
Train Case:  17 | Input/Output: [(5 5 5 5) 5]
Train Case:  18 | Input/Output: [(-27 -27 -27 -27) -27]
Train Case:  19 | Input/Output: [(-57 -57 -57 -57) -57]
Train Case:  20 | Input/Output: [(15 69 65 3) 3]
Train Case:  21 | Input/Output: [(11 93 65 17) 11]
Train Case:  22 | Input/Output: [(99 42 64 91) 42]
Train Case:  23 | Input/Output: [(80 60 2 86) 2]
Train Case:  24 | Input/Output: [(78 48 7 54) 7]
Train Case:  25 | Input/Output: [(97 62 66 14) 14]
Train Case:  26 | Input/Output: [(29 27 7 27) 7]
Train Case:  27 | Input/Output: [(34 53 64 5) 5]
Train Case:  28 | Input/Output: [(59 74 11 41) 11]
Train Case:  29 | Input/Output: [(56 6 74 68) 6]
Train Case:  30 | Input/Output: [(8 69 98 81) 8]
Train Case:  31 | Input/Output: [(12 29 97 15) 12]
Train Case:  32 | Input/Output: [(75 13 39 85) 13]
Train Case:  33 | Input/Output: [(84 38 26 100) 26]
Train Case:  34 | Input/Output: [(41 48 78 8) 8]
Train Case:  35 | Input/Output: [(2 86 38 0) 0]
Train Case:  36 | Input/Output: [(16 81 39 81) 16]
Train Case:  37 | Input/Output: [(39 61 41 57) 39]
Train Case:  38 | Input/Output: [(47 24 19 11) 11]
Train Case:  39 | Input/Output: [(97 100 5 93) 5]
Train Case:  40 | Input/Output: [(-67 78 57 -87) -87]
Train Case:  41 | Input/Output: [(72 -54 -11 12) -54]
Train Case:  42 | Input/Output: [(84 71 -61 83) -61]
Train Case:  43 | Input/Output: [(-24 -80 -58 45) -80]
Train Case:  44 | Input/Output: [(-36 -89 33 22) -89]
Train Case:  45 | Input/Output: [(-79 36 49 54) -79]
Train Case:  46 | Input/Output: [(-99 -36 -59 -41) -99]
Train Case:  47 | Input/Output: [(23 -42 73 21) -42]
Train Case:  48 | Input/Output: [(34 20 -93 -18) -93]
Train Case:  49 | Input/Output: [(-21 66 13 11) -21]
Train Case:  50 | Input/Output: [(-2 -88 64 9) -88]
Train Case:  51 | Input/Output: [(-98 -11 -53 37) -98]
Train Case:  52 | Input/Output: [(80 45 -14 72) -14]
Train Case:  53 | Input/Output: [(72 -16 -5 54) -16]
Train Case:  54 | Input/Output: [(-80 -47 69 -69) -80]
Train Case:  55 | Input/Output: [(-100 3 5 -27) -100]
Train Case:  56 | Input/Output: [(-21 62 98 42) -21]
Train Case:  57 | Input/Output: [(-7 42 -47 -25) -47]
Train Case:  58 | Input/Output: [(95 58 -20 95) -20]
Train Case:  59 | Input/Output: [(-100 -3 -59 98) -100]
Train Case:  60 | Input/Output: [(64 69 -89 33) -89]
Train Case:  61 | Input/Output: [(61 -55 0 -24) -55]
Train Case:  62 | Input/Output: [(-58 -1 20 97) -58]
Train Case:  63 | Input/Output: [(73 1 -65 -31) -65]
Train Case:  64 | Input/Output: [(-61 44 -5 48) -61]
Train Case:  65 | Input/Output: [(-17 -17 -82 -44) -82]
Train Case:  66 | Input/Output: [(-33 37 11 81) -33]
Train Case:  67 | Input/Output: [(62 52 58 26) 26]
Train Case:  68 | Input/Output: [(-18 33 60 -55) -55]
Train Case:  69 | Input/Output: [(-47 58 63 52) -47]
Train Case:  70 | Input/Output: [(-27 -24 -9 -78) -78]
Train Case:  71 | Input/Output: [(-88 -25 18 1) -88]
Train Case:  72 | Input/Output: [(57 -33 31 -89) -89]
Train Case:  73 | Input/Output: [(47 92 -11 -3) -11]
Train Case:  74 | Input/Output: [(60 -80 -60 18) -80]
Train Case:  75 | Input/Output: [(-53 74 65 9) -53]
Train Case:  76 | Input/Output: [(83 -23 -33 -50) -50]
Train Case:  77 | Input/Output: [(51 -22 8 94) -22]
Train Case:  78 | Input/Output: [(6 -58 -51 49) -58]
Train Case:  79 | Input/Output: [(63 87 -38 -27) -38]
Train Case:  80 | Input/Output: [(35 -49 88 -34) -49]
Train Case:  81 | Input/Output: [(36 -25 73 -25) -25]
Train Case:  82 | Input/Output: [(50 6 -65 -80) -80]
Train Case:  83 | Input/Output: [(65 -28 -83 13) -83]
Train Case:  84 | Input/Output: [(64 -32 50 9) -32]
Train Case:  85 | Input/Output: [(-79 62 -61 -71) -79]
Train Case:  86 | Input/Output: [(79 2 23 -55) -55]
Train Case:  87 | Input/Output: [(-40 -44 -73 83) -73]
Train Case:  88 | Input/Output: [(11 -29 72 -64) -64]
Train Case:  89 | Input/Output: [(72 -41 70 -62) -62]
Train Case:  90 | Input/Output: [(58 53 77 25) 25]
Train Case:  91 | Input/Output: [(24 77 -3 -91) -91]
Train Case:  92 | Input/Output: [(-74 -54 -27 28) -74]
Train Case:  93 | Input/Output: [(-60 46 3 31) -60]
Train Case:  94 | Input/Output: [(99 -87 -44 83) -87]
Train Case:  95 | Input/Output: [(-50 -58 40 -52) -58]
Train Case:  96 | Input/Output: [(77 2 30 -65) -65]
Train Case:  97 | Input/Output: [(-66 96 32 -21) -66]
Train Case:  98 | Input/Output: [(79 -79 29 -16) -79]
Train Case:  99 | Input/Output: [(36 -33 73 -87) -87]
Test Case:   0 | Input/Output: [[-18 24 -18 -18] -18]
Test Case:   1 | Input/Output: [[-34 -34 -33 -34] -34]
Test Case:   2 | Input/Output: [[-62 24 24 24] -62]
Test Case:   3 | Input/Output: [[64 76 64 64] 64]
Test Case:   4 | Input/Output: [[41 41 41 -68] -68]
Test Case:   5 | Input/Output: [[50 31 31 31] 31]
Test Case:   6 | Input/Output: [[-45 -45 -45 4] -45]
Test Case:   7 | Input/Output: [[22 22 22 -1] -1]
Test Case:   8 | Input/Output: [[17 17 17 94] 17]
Test Case:   9 | Input/Output: [[-53 -3 -53 -53] -53]
Test Case:  10 | Input/Output: [[-20 66 66 66] -20]
Test Case:  11 | Input/Output: [[-58 -58 -58 -89] -89]
Test Case:  12 | Input/Output: [[-43 -32 -32 -32] -43]
Test Case:  13 | Input/Output: [[-69 82 82 82] -69]
Test Case:  14 | Input/Output: [[-81 -81 -81 -74] -81]
Test Case:  15 | Input/Output: [[-14 64 -14 -14] -14]
Test Case:  16 | Input/Output: [[63 29 63 63] 29]
Test Case:  17 | Input/Output: [[45 -15 -15 -15] -15]
Test Case:  18 | Input/Output: [[-100 40 40 40] -100]
Test Case:  19 | Input/Output: [[-35 -35 -35 -21] -35]
Test Case:  20 | Input/Output: [[-38 -38 -38 70] -38]
Test Case:  21 | Input/Output: [[-50 -50 -50 71] -50]
Test Case:  22 | Input/Output: [[87 87 87 -83] -83]
Test Case:  23 | Input/Output: [[10 16 10 10] 10]
Test Case:  24 | Input/Output: [[-27 -26 -26 -26] -27]
Test Case:  25 | Input/Output: [[54 54 54 73] 54]
Test Case:  26 | Input/Output: [[-91 -70 -70 -70] -91]
Test Case:  27 | Input/Output: [[-87 -87 26 -87] -87]
Test Case:  28 | Input/Output: [[32 32 32 28] 28]
Test Case:  29 | Input/Output: [[29 29 74 29] 29]
Test Case:  30 | Input/Output: [[59 59 26 59] 26]
Test Case:  31 | Input/Output: [[-34 -34 -34 -75] -75]
Test Case:  32 | Input/Output: [[79 79 79 -4] -4]
Test Case:  33 | Input/Output: [[-53 90 -53 -53] -53]
Test Case:  34 | Input/Output: [[-55 -55 -55 -49] -55]
Test Case:  35 | Input/Output: [[-38 -72 -72 -72] -72]
Test Case:  36 | Input/Output: [[-40 -90 -90 -90] -90]
Test Case:  37 | Input/Output: [[35 35 -88 35] -88]
Test Case:  38 | Input/Output: [[0 -86 -86 -86] -86]
Test Case:  39 | Input/Output: [[-2 -2 -33 -2] -33]
Test Case:  40 | Input/Output: [[-42 -42 16 -42] -42]
Test Case:  41 | Input/Output: [[-49 -49 -49 -27] -49]
Test Case:  42 | Input/Output: [[35 55 35 35] 35]
Test Case:  43 | Input/Output: [[0 73 0 0] 0]
Test Case:  44 | Input/Output: [[-76 4 4 4] -76]
Test Case:  45 | Input/Output: [[-37 -37 -61 -37] -61]
Test Case:  46 | Input/Output: [[-27 -57 -57 -57] -57]
Test Case:  47 | Input/Output: [[-24 -17 -17 -17] -24]
Test Case:  48 | Input/Output: [[-91 46 46 46] -91]
Test Case:  49 | Input/Output: [[-49 -49 -49 -32] -49]
Test Case:  50 | Input/Output: [[-16 -16 -16 81] -16]
Test Case:  51 | Input/Output: [[51 51 13 51] 13]
Test Case:  52 | Input/Output: [[-48 -48 54 -48] -48]
Test Case:  53 | Input/Output: [[85 -45 -45 -45] -45]
Test Case:  54 | Input/Output: [[-72 73 -72 -72] -72]
Test Case:  55 | Input/Output: [[79 -27 79 79] -27]
Test Case:  56 | Input/Output: [[-100 66 -100 -100] -100]
Test Case:  57 | Input/Output: [[7 7 45 7] 7]
Test Case:  58 | Input/Output: [[59 59 77 59] 59]
Test Case:  59 | Input/Output: [[4 4 4 38] 4]
Test Case:  60 | Input/Output: [[82 52 52 52] 52]
Test Case:  61 | Input/Output: [[86 78 78 78] 78]
Test Case:  62 | Input/Output: [[10 -98 10 10] -98]
Test Case:  63 | Input/Output: [[54 64 54 54] 54]
Test Case:  64 | Input/Output: [[61 61 -75 61] -75]
Test Case:  65 | Input/Output: [[-83 -49 -83 -83] -83]
Test Case:  66 | Input/Output: [[33 -8 33 33] -8]
Test Case:  67 | Input/Output: [[67 -39 67 67] -39]
Test Case:  68 | Input/Output: [[66 66 66 -96] -96]
Test Case:  69 | Input/Output: [[87 87 -52 87] -52]
Test Case:  70 | Input/Output: [[17 17 17 0] 0]
Test Case:  71 | Input/Output: [[79 79 79 41] 41]
Test Case:  72 | Input/Output: [[-77 -98 -77 -77] -98]
Test Case:  73 | Input/Output: [[-88 -88 -88 -51] -88]
Test Case:  74 | Input/Output: [[66 66 -16 66] -16]
Test Case:  75 | Input/Output: [[62 4 4 4] 4]
Test Case:  76 | Input/Output: [[85 85 85 -90] -90]
Test Case:  77 | Input/Output: [[-74 -74 -55 -74] -74]
Test Case:  78 | Input/Output: [[-75 -95 -95 -95] -95]
Test Case:  79 | Input/Output: [[-25 -25 -25 -55] -55]
Test Case:  80 | Input/Output: [[-90 -60 -90 -90] -90]
Test Case:  81 | Input/Output: [[56 56 36 56] 36]
Test Case:  82 | Input/Output: [[59 0 0 0] 0]
Test Case:  83 | Input/Output: [[18 18 -84 18] -84]
Test Case:  84 | Input/Output: [[4 24 24 24] 4]
Test Case:  85 | Input/Output: [[31 31 -20 31] -20]
Test Case:  86 | Input/Output: [[36 26 26 26] 26]
Test Case:  87 | Input/Output: [[-3 -9 -3 -3] -9]
Test Case:  88 | Input/Output: [[38 38 38 14] 14]
Test Case:  89 | Input/Output: [[52 3 3 3] 3]
Test Case:  90 | Input/Output: [[47 56 47 47] 47]
Test Case:  91 | Input/Output: [[-21 83 -21 -21] -21]
Test Case:  92 | Input/Output: [[82 82 80 82] 80]
Test Case:  93 | Input/Output: [[-5 -30 -30 -30] -30]
Test Case:  94 | Input/Output: [[1 1 15 1] 1]
Test Case:  95 | Input/Output: [[92 92 42 92] 42]
Test Case:  96 | Input/Output: [[2 2 68 2] 2]
Test Case:  97 | Input/Output: [[-18 -18 -8 -18] -18]
Test Case:  98 | Input/Output: [[-81 78 -81 -81] -81]
Test Case:  99 | Input/Output: [[77 77 77 52] 52]
Test Case: 100 | Input/Output: [(67 67 67 67) 67]
Test Case: 101 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 102 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 103 | Input/Output: [(25 25 25 25) 25]
Test Case: 104 | Input/Output: [(29 29 29 29) 29]
Test Case: 105 | Input/Output: [(76 76 76 76) 76]
Test Case: 106 | Input/Output: [(62 62 62 62) 62]
Test Case: 107 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 108 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 109 | Input/Output: [(6 6 6 6) 6]
Test Case: 110 | Input/Output: [(71 71 71 71) 71]
Test Case: 111 | Input/Output: [(35 35 35 35) 35]
Test Case: 112 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 113 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 114 | Input/Output: [(9 9 9 9) 9]
Test Case: 115 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 116 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 117 | Input/Output: [(48 48 48 48) 48]
Test Case: 118 | Input/Output: [(81 81 81 81) 81]
Test Case: 119 | Input/Output: [(19 19 19 19) 19]
Test Case: 120 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 121 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 122 | Input/Output: [(48 48 48 48) 48]
Test Case: 123 | Input/Output: [(86 86 86 86) 86]
Test Case: 124 | Input/Output: [(15 15 15 15) 15]
Test Case: 125 | Input/Output: [(26 26 26 26) 26]
Test Case: 126 | Input/Output: [(67 67 67 67) 67]
Test Case: 127 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 128 | Input/Output: [(60 60 60 60) 60]
Test Case: 129 | Input/Output: [(52 52 52 52) 52]
Test Case: 130 | Input/Output: [(62 62 62 62) 62]
Test Case: 131 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 132 | Input/Output: [(15 15 15 15) 15]
Test Case: 133 | Input/Output: [(30 30 30 30) 30]
Test Case: 134 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 135 | Input/Output: [(28 28 28 28) 28]
Test Case: 136 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 137 | Input/Output: [(89 89 89 89) 89]
Test Case: 138 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 139 | Input/Output: [(8 8 8 8) 8]
Test Case: 140 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 141 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 142 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 143 | Input/Output: [(11 11 11 11) 11]
Test Case: 144 | Input/Output: [(4 4 4 4) 4]
Test Case: 145 | Input/Output: [(40 40 40 40) 40]
Test Case: 146 | Input/Output: [(59 59 59 59) 59]
Test Case: 147 | Input/Output: [(55 55 55 55) 55]
Test Case: 148 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 149 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 150 | Input/Output: [(52 52 52 52) 52]
Test Case: 151 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 152 | Input/Output: [(34 34 34 34) 34]
Test Case: 153 | Input/Output: [(12 12 12 12) 12]
Test Case: 154 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 155 | Input/Output: [(48 48 48 48) 48]
Test Case: 156 | Input/Output: [(44 44 44 44) 44]
Test Case: 157 | Input/Output: [(84 84 84 84) 84]
Test Case: 158 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 159 | Input/Output: [(58 58 58 58) 58]
Test Case: 160 | Input/Output: [(49 49 49 49) 49]
Test Case: 161 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 162 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 163 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 164 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 165 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 166 | Input/Output: [(0 0 0 0) 0]
Test Case: 167 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 168 | Input/Output: [(87 87 87 87) 87]
Test Case: 169 | Input/Output: [(74 74 74 74) 74]
Test Case: 170 | Input/Output: [(88 88 88 88) 88]
Test Case: 171 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 172 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 173 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 174 | Input/Output: [(66 66 66 66) 66]
Test Case: 175 | Input/Output: [(88 88 88 88) 88]
Test Case: 176 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 177 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 178 | Input/Output: [(29 29 29 29) 29]
Test Case: 179 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 180 | Input/Output: [(37 37 37 37) 37]
Test Case: 181 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 182 | Input/Output: [(52 52 52 52) 52]
Test Case: 183 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 184 | Input/Output: [(23 23 23 23) 23]
Test Case: 185 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 186 | Input/Output: [(69 69 69 69) 69]
Test Case: 187 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 188 | Input/Output: [(73 73 73 73) 73]
Test Case: 189 | Input/Output: [(40 40 40 40) 40]
Test Case: 190 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 191 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 192 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 193 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 194 | Input/Output: [(21 21 21 21) 21]
Test Case: 195 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 196 | Input/Output: [(24 24 24 24) 24]
Test Case: 197 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 198 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 199 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 200 | Input/Output: [(25 91 28 50) 25]
Test Case: 201 | Input/Output: [(3 3 67 72) 3]
Test Case: 202 | Input/Output: [(26 60 74 37) 26]
Test Case: 203 | Input/Output: [(64 42 64 28) 28]
Test Case: 204 | Input/Output: [(11 72 44 82) 11]
Test Case: 205 | Input/Output: [(51 75 3 74) 3]
Test Case: 206 | Input/Output: [(4 77 37 96) 4]
Test Case: 207 | Input/Output: [(95 92 62 60) 60]
Test Case: 208 | Input/Output: [(84 62 67 63) 62]
Test Case: 209 | Input/Output: [(95 43 85 37) 37]
Test Case: 210 | Input/Output: [(29 28 7 88) 7]
Test Case: 211 | Input/Output: [(33 25 36 89) 25]
Test Case: 212 | Input/Output: [(86 35 95 17) 17]
Test Case: 213 | Input/Output: [(7 67 14 22) 7]
Test Case: 214 | Input/Output: [(41 15 4 43) 4]
Test Case: 215 | Input/Output: [(2 4 97 12) 2]
Test Case: 216 | Input/Output: [(24 21 53 42) 21]
Test Case: 217 | Input/Output: [(30 6 8 77) 6]
Test Case: 218 | Input/Output: [(100 75 46 90) 46]
Test Case: 219 | Input/Output: [(65 36 91 7) 7]
Test Case: 220 | Input/Output: [(35 18 3 90) 3]
Test Case: 221 | Input/Output: [(39 81 80 12) 12]
Test Case: 222 | Input/Output: [(22 100 16 100) 16]
Test Case: 223 | Input/Output: [(32 54 55 83) 32]
Test Case: 224 | Input/Output: [(24 62 99 69) 24]
Test Case: 225 | Input/Output: [(51 12 26 64) 12]
Test Case: 226 | Input/Output: [(27 66 86 94) 27]
Test Case: 227 | Input/Output: [(14 28 100 35) 14]
Test Case: 228 | Input/Output: [(65 93 46 25) 25]
Test Case: 229 | Input/Output: [(20 15 32 52) 15]
Test Case: 230 | Input/Output: [(15 90 49 13) 13]
Test Case: 231 | Input/Output: [(49 29 9 41) 9]
Test Case: 232 | Input/Output: [(69 5 25 94) 5]
Test Case: 233 | Input/Output: [(32 97 9 20) 9]
Test Case: 234 | Input/Output: [(87 14 95 32) 14]
Test Case: 235 | Input/Output: [(22 66 44 82) 22]
Test Case: 236 | Input/Output: [(1 87 20 96) 1]
Test Case: 237 | Input/Output: [(53 60 93 68) 53]
Test Case: 238 | Input/Output: [(63 87 62 82) 62]
Test Case: 239 | Input/Output: [(82 28 33 55) 28]
Test Case: 240 | Input/Output: [(69 62 23 46) 23]
Test Case: 241 | Input/Output: [(6 20 31 22) 6]
Test Case: 242 | Input/Output: [(77 69 28 70) 28]
Test Case: 243 | Input/Output: [(57 28 42 62) 28]
Test Case: 244 | Input/Output: [(40 74 11 92) 11]
Test Case: 245 | Input/Output: [(92 64 11 28) 11]
Test Case: 246 | Input/Output: [(18 34 60 92) 18]
Test Case: 247 | Input/Output: [(97 91 91 67) 67]
Test Case: 248 | Input/Output: [(89 90 62 73) 62]
Test Case: 249 | Input/Output: [(81 61 60 83) 60]
Test Case: 250 | Input/Output: [(92 1 85 71) 1]
Test Case: 251 | Input/Output: [(10 33 93 54) 10]
Test Case: 252 | Input/Output: [(51 91 66 81) 51]
Test Case: 253 | Input/Output: [(0 78 39 91) 0]
Test Case: 254 | Input/Output: [(87 12 85 49) 12]
Test Case: 255 | Input/Output: [(21 37 47 17) 17]
Test Case: 256 | Input/Output: [(94 24 64 62) 24]
Test Case: 257 | Input/Output: [(4 95 46 59) 4]
Test Case: 258 | Input/Output: [(84 31 87 43) 31]
Test Case: 259 | Input/Output: [(45 42 97 27) 27]
Test Case: 260 | Input/Output: [(35 99 64 81) 35]
Test Case: 261 | Input/Output: [(39 67 66 76) 39]
Test Case: 262 | Input/Output: [(56 83 25 69) 25]
Test Case: 263 | Input/Output: [(47 0 99 17) 0]
Test Case: 264 | Input/Output: [(56 96 69 89) 56]
Test Case: 265 | Input/Output: [(81 24 81 78) 24]
Test Case: 266 | Input/Output: [(93 64 94 27) 27]
Test Case: 267 | Input/Output: [(60 23 48 36) 23]
Test Case: 268 | Input/Output: [(44 13 42 22) 13]
Test Case: 269 | Input/Output: [(82 94 65 85) 65]
Test Case: 270 | Input/Output: [(86 47 80 12) 12]
Test Case: 271 | Input/Output: [(37 9 25 55) 9]
Test Case: 272 | Input/Output: [(15 24 79 70) 15]
Test Case: 273 | Input/Output: [(80 20 85 26) 20]
Test Case: 274 | Input/Output: [(46 45 39 15) 15]
Test Case: 275 | Input/Output: [(61 28 33 0) 0]
Test Case: 276 | Input/Output: [(75 67 44 54) 44]
Test Case: 277 | Input/Output: [(60 53 89 37) 37]
Test Case: 278 | Input/Output: [(71 29 73 60) 29]
Test Case: 279 | Input/Output: [(33 93 71 64) 33]
Test Case: 280 | Input/Output: [(99 16 7 94) 7]
Test Case: 281 | Input/Output: [(46 68 90 61) 46]
Test Case: 282 | Input/Output: [(1 75 87 52) 1]
Test Case: 283 | Input/Output: [(17 40 56 19) 17]
Test Case: 284 | Input/Output: [(95 11 43 93) 11]
Test Case: 285 | Input/Output: [(95 97 92 14) 14]
Test Case: 286 | Input/Output: [(54 98 70 84) 54]
Test Case: 287 | Input/Output: [(12 26 35 79) 12]
Test Case: 288 | Input/Output: [(48 0 58 84) 0]
Test Case: 289 | Input/Output: [(52 40 72 28) 28]
Test Case: 290 | Input/Output: [(73 69 22 6) 6]
Test Case: 291 | Input/Output: [(12 8 83 31) 8]
Test Case: 292 | Input/Output: [(96 62 77 34) 34]
Test Case: 293 | Input/Output: [(76 38 78 41) 38]
Test Case: 294 | Input/Output: [(48 43 97 54) 43]
Test Case: 295 | Input/Output: [(18 60 49 40) 18]
Test Case: 296 | Input/Output: [(76 76 5 20) 5]
Test Case: 297 | Input/Output: [(54 26 98 27) 26]
Test Case: 298 | Input/Output: [(51 67 73 35) 35]
Test Case: 299 | Input/Output: [(46 98 62 58) 46]
Test Case: 300 | Input/Output: [(19 17 0 24) 0]
Test Case: 301 | Input/Output: [(76 29 90 52) 29]
Test Case: 302 | Input/Output: [(30 12 96 42) 12]
Test Case: 303 | Input/Output: [(91 42 94 27) 27]
Test Case: 304 | Input/Output: [(25 67 81 15) 15]
Test Case: 305 | Input/Output: [(3 27 61 47) 3]
Test Case: 306 | Input/Output: [(14 38 66 94) 14]
Test Case: 307 | Input/Output: [(16 21 40 62) 16]
Test Case: 308 | Input/Output: [(25 37 92 96) 25]
Test Case: 309 | Input/Output: [(9 29 94 66) 9]
Test Case: 310 | Input/Output: [(81 97 65 98) 65]
Test Case: 311 | Input/Output: [(36 75 93 14) 14]
Test Case: 312 | Input/Output: [(81 79 40 90) 40]
Test Case: 313 | Input/Output: [(46 0 15 28) 0]
Test Case: 314 | Input/Output: [(40 65 27 46) 27]
Test Case: 315 | Input/Output: [(63 86 26 68) 26]
Test Case: 316 | Input/Output: [(80 70 38 83) 38]
Test Case: 317 | Input/Output: [(16 61 62 4) 4]
Test Case: 318 | Input/Output: [(99 26 66 28) 26]
Test Case: 319 | Input/Output: [(94 24 41 20) 20]
Test Case: 320 | Input/Output: [(53 57 90 33) 33]
Test Case: 321 | Input/Output: [(88 17 75 66) 17]
Test Case: 322 | Input/Output: [(31 42 61 90) 31]
Test Case: 323 | Input/Output: [(6 63 3 40) 3]
Test Case: 324 | Input/Output: [(57 40 25 17) 17]
Test Case: 325 | Input/Output: [(5 80 9 0) 0]
Test Case: 326 | Input/Output: [(59 54 40 72) 40]
Test Case: 327 | Input/Output: [(49 48 0 35) 0]
Test Case: 328 | Input/Output: [(60 80 42 44) 42]
Test Case: 329 | Input/Output: [(4 100 20 64) 4]
Test Case: 330 | Input/Output: [(1 15 76 87) 1]
Test Case: 331 | Input/Output: [(70 50 62 60) 50]
Test Case: 332 | Input/Output: [(6 8 6 47) 6]
Test Case: 333 | Input/Output: [(28 48 5 53) 5]
Test Case: 334 | Input/Output: [(66 79 88 62) 62]
Test Case: 335 | Input/Output: [(37 65 33 0) 0]
Test Case: 336 | Input/Output: [(4 35 83 7) 4]
Test Case: 337 | Input/Output: [(55 26 92 57) 26]
Test Case: 338 | Input/Output: [(2 27 87 44) 2]
Test Case: 339 | Input/Output: [(35 19 73 100) 19]
Test Case: 340 | Input/Output: [(81 87 26 51) 26]
Test Case: 341 | Input/Output: [(56 69 96 93) 56]
Test Case: 342 | Input/Output: [(47 65 2 16) 2]
Test Case: 343 | Input/Output: [(16 91 27 65) 16]
Test Case: 344 | Input/Output: [(9 92 38 94) 9]
Test Case: 345 | Input/Output: [(64 65 20 20) 20]
Test Case: 346 | Input/Output: [(30 0 62 39) 0]
Test Case: 347 | Input/Output: [(13 67 2 40) 2]
Test Case: 348 | Input/Output: [(76 11 69 100) 11]
Test Case: 349 | Input/Output: [(48 38 75 3) 3]
Test Case: 350 | Input/Output: [(51 57 92 78) 51]
Test Case: 351 | Input/Output: [(16 81 40 18) 16]
Test Case: 352 | Input/Output: [(37 84 37 63) 37]
Test Case: 353 | Input/Output: [(80 2 16 59) 2]
Test Case: 354 | Input/Output: [(79 95 52 96) 52]
Test Case: 355 | Input/Output: [(64 81 100 10) 10]
Test Case: 356 | Input/Output: [(20 86 81 90) 20]
Test Case: 357 | Input/Output: [(66 56 57 96) 56]
Test Case: 358 | Input/Output: [(57 18 40 54) 18]
Test Case: 359 | Input/Output: [(52 95 87 30) 30]
Test Case: 360 | Input/Output: [(69 69 46 7) 7]
Test Case: 361 | Input/Output: [(2 73 22 94) 2]
Test Case: 362 | Input/Output: [(66 79 44 83) 44]
Test Case: 363 | Input/Output: [(74 90 2 67) 2]
Test Case: 364 | Input/Output: [(18 100 26 37) 18]
Test Case: 365 | Input/Output: [(99 22 12 4) 4]
Test Case: 366 | Input/Output: [(80 6 94 72) 6]
Test Case: 367 | Input/Output: [(83 59 75 24) 24]
Test Case: 368 | Input/Output: [(94 45 58 34) 34]
Test Case: 369 | Input/Output: [(35 35 43 89) 35]
Test Case: 370 | Input/Output: [(0 13 70 47) 0]
Test Case: 371 | Input/Output: [(45 35 9 36) 9]
Test Case: 372 | Input/Output: [(81 19 0 71) 0]
Test Case: 373 | Input/Output: [(72 72 63 2) 2]
Test Case: 374 | Input/Output: [(4 50 97 62) 4]
Test Case: 375 | Input/Output: [(77 59 9 80) 9]
Test Case: 376 | Input/Output: [(9 32 46 52) 9]
Test Case: 377 | Input/Output: [(71 44 31 62) 31]
Test Case: 378 | Input/Output: [(5 72 30 28) 5]
Test Case: 379 | Input/Output: [(47 69 27 98) 27]
Test Case: 380 | Input/Output: [(23 47 74 52) 23]
Test Case: 381 | Input/Output: [(26 90 63 20) 20]
Test Case: 382 | Input/Output: [(31 71 54 34) 31]
Test Case: 383 | Input/Output: [(18 14 56 27) 14]
Test Case: 384 | Input/Output: [(71 33 68 35) 33]
Test Case: 385 | Input/Output: [(39 67 42 19) 19]
Test Case: 386 | Input/Output: [(15 37 93 77) 15]
Test Case: 387 | Input/Output: [(54 25 80 5) 5]
Test Case: 388 | Input/Output: [(95 34 58 42) 34]
Test Case: 389 | Input/Output: [(34 14 9 56) 9]
Test Case: 390 | Input/Output: [(24 26 78 63) 24]
Test Case: 391 | Input/Output: [(80 55 98 85) 55]
Test Case: 392 | Input/Output: [(54 32 98 17) 17]
Test Case: 393 | Input/Output: [(35 75 44 86) 35]
Test Case: 394 | Input/Output: [(12 79 83 92) 12]
Test Case: 395 | Input/Output: [(91 77 13 9) 9]
Test Case: 396 | Input/Output: [(97 30 74 58) 30]
Test Case: 397 | Input/Output: [(84 63 38 69) 38]
Test Case: 398 | Input/Output: [(55 93 47 99) 47]
Test Case: 399 | Input/Output: [(73 97 34 79) 34]
Test Case: 400 | Input/Output: [(1 8 64 35) 1]
Test Case: 401 | Input/Output: [(18 -78 1 91) -78]
Test Case: 402 | Input/Output: [(-32 -17 -4 -51) -51]
Test Case: 403 | Input/Output: [(-6 -57 -12 4) -57]
Test Case: 404 | Input/Output: [(-90 54 39 12) -90]
Test Case: 405 | Input/Output: [(-77 -38 -72 -49) -77]
Test Case: 406 | Input/Output: [(-99 48 -82 -89) -99]
Test Case: 407 | Input/Output: [(79 -28 -7 98) -28]
Test Case: 408 | Input/Output: [(8 -62 97 36) -62]
Test Case: 409 | Input/Output: [(71 -67 26 -3) -67]
Test Case: 410 | Input/Output: [(54 6 6 14) 6]
Test Case: 411 | Input/Output: [(-62 89 65 48) -62]
Test Case: 412 | Input/Output: [(-55 41 -92 -11) -92]
Test Case: 413 | Input/Output: [(59 98 78 79) 59]
Test Case: 414 | Input/Output: [(-60 32 9 -53) -60]
Test Case: 415 | Input/Output: [(-63 47 -10 -85) -85]
Test Case: 416 | Input/Output: [(83 59 -64 -54) -64]
Test Case: 417 | Input/Output: [(-16 15 -89 47) -89]
Test Case: 418 | Input/Output: [(-4 30 -50 -95) -95]
Test Case: 419 | Input/Output: [(-32 65 -96 59) -96]
Test Case: 420 | Input/Output: [(-68 -79 91 79) -79]
Test Case: 421 | Input/Output: [(-28 83 65 65) -28]
Test Case: 422 | Input/Output: [(-39 -8 -12 18) -39]
Test Case: 423 | Input/Output: [(55 -78 38 -95) -95]
Test Case: 424 | Input/Output: [(-22 91 -75 31) -75]
Test Case: 425 | Input/Output: [(-81 -34 21 74) -81]
Test Case: 426 | Input/Output: [(19 26 20 -75) -75]
Test Case: 427 | Input/Output: [(40 -63 29 76) -63]
Test Case: 428 | Input/Output: [(97 -59 52 65) -59]
Test Case: 429 | Input/Output: [(76 -25 69 50) -25]
Test Case: 430 | Input/Output: [(86 30 -85 -67) -85]
Test Case: 431 | Input/Output: [(47 4 3 96) 3]
Test Case: 432 | Input/Output: [(-63 86 -49 55) -63]
Test Case: 433 | Input/Output: [(-10 -73 -34 82) -73]
Test Case: 434 | Input/Output: [(-61 89 -36 -47) -61]
Test Case: 435 | Input/Output: [(98 -100 13 -89) -100]
Test Case: 436 | Input/Output: [(-46 -75 -87 73) -87]
Test Case: 437 | Input/Output: [(-86 8 29 31) -86]
Test Case: 438 | Input/Output: [(96 -19 31 -50) -50]
Test Case: 439 | Input/Output: [(-19 -84 -4 -47) -84]
Test Case: 440 | Input/Output: [(-60 47 -83 64) -83]
Test Case: 441 | Input/Output: [(3 -37 -17 35) -37]
Test Case: 442 | Input/Output: [(41 -79 -94 -15) -94]
Test Case: 443 | Input/Output: [(-59 -62 52 -38) -62]
Test Case: 444 | Input/Output: [(88 81 -50 -62) -62]
Test Case: 445 | Input/Output: [(58 -99 42 -71) -99]
Test Case: 446 | Input/Output: [(-8 -23 -39 37) -39]
Test Case: 447 | Input/Output: [(72 -47 70 77) -47]
Test Case: 448 | Input/Output: [(17 9 28 46) 9]
Test Case: 449 | Input/Output: [(71 -55 -2 65) -55]
Test Case: 450 | Input/Output: [(-31 -36 -38 81) -38]
Test Case: 451 | Input/Output: [(67 -52 0 0) -52]
Test Case: 452 | Input/Output: [(7 81 74 -70) -70]
Test Case: 453 | Input/Output: [(90 15 -72 22) -72]
Test Case: 454 | Input/Output: [(88 -94 50 -45) -94]
Test Case: 455 | Input/Output: [(14 70 79 -24) -24]
Test Case: 456 | Input/Output: [(41 -9 63 86) -9]
Test Case: 457 | Input/Output: [(-71 100 79 35) -71]
Test Case: 458 | Input/Output: [(-100 -12 79 99) -100]
Test Case: 459 | Input/Output: [(-10 17 52 -37) -37]
Test Case: 460 | Input/Output: [(56 86 -36 -46) -46]
Test Case: 461 | Input/Output: [(51 -30 -62 -79) -79]
Test Case: 462 | Input/Output: [(-22 90 -86 61) -86]
Test Case: 463 | Input/Output: [(61 -47 31 60) -47]
Test Case: 464 | Input/Output: [(-18 -10 -73 -2) -73]
Test Case: 465 | Input/Output: [(-14 59 -26 66) -26]
Test Case: 466 | Input/Output: [(-83 43 -49 42) -83]
Test Case: 467 | Input/Output: [(-82 -53 35 78) -82]
Test Case: 468 | Input/Output: [(85 -35 28 72) -35]
Test Case: 469 | Input/Output: [(-71 -78 -21 -18) -78]
Test Case: 470 | Input/Output: [(40 61 -94 73) -94]
Test Case: 471 | Input/Output: [(67 -22 40 72) -22]
Test Case: 472 | Input/Output: [(-69 -38 25 18) -69]
Test Case: 473 | Input/Output: [(53 -89 64 -24) -89]
Test Case: 474 | Input/Output: [(-91 -31 -1 76) -91]
Test Case: 475 | Input/Output: [(29 53 -71 -62) -71]
Test Case: 476 | Input/Output: [(2 -60 19 16) -60]
Test Case: 477 | Input/Output: [(-97 22 -54 44) -97]
Test Case: 478 | Input/Output: [(-29 6 99 46) -29]
Test Case: 479 | Input/Output: [(12 -56 45 -15) -56]
Test Case: 480 | Input/Output: [(62 75 29 -79) -79]
Test Case: 481 | Input/Output: [(86 6 55 -59) -59]
Test Case: 482 | Input/Output: [(-11 -45 26 -66) -66]
Test Case: 483 | Input/Output: [(-61 -48 43 85) -61]
Test Case: 484 | Input/Output: [(-20 38 -29 80) -29]
Test Case: 485 | Input/Output: [(29 37 52 -76) -76]
Test Case: 486 | Input/Output: [(24 -87 80 -38) -87]
Test Case: 487 | Input/Output: [(18 72 -19 17) -19]
Test Case: 488 | Input/Output: [(75 -1 -37 82) -37]
Test Case: 489 | Input/Output: [(59 39 54 -57) -57]
Test Case: 490 | Input/Output: [(-28 -98 85 -43) -98]
Test Case: 491 | Input/Output: [(67 -17 12 83) -17]
Test Case: 492 | Input/Output: [(96 -36 12 97) -36]
Test Case: 493 | Input/Output: [(-10 24 -4 -36) -36]
Test Case: 494 | Input/Output: [(-89 16 -55 -3) -89]
Test Case: 495 | Input/Output: [(81 53 -47 -24) -47]
Test Case: 496 | Input/Output: [(-76 43 -21 29) -76]
Test Case: 497 | Input/Output: [(-38 -48 -44 31) -48]
Test Case: 498 | Input/Output: [(-98 77 90 -82) -98]
Test Case: 499 | Input/Output: [(-88 40 -90 58) -90]
Test Case: 500 | Input/Output: [(-39 -8 9 89) -39]
Test Case: 501 | Input/Output: [(-59 68 -67 45) -67]
Test Case: 502 | Input/Output: [(11 -31 71 37) -31]
Test Case: 503 | Input/Output: [(-2 -47 39 30) -47]
Test Case: 504 | Input/Output: [(-13 -12 75 -23) -23]
Test Case: 505 | Input/Output: [(93 -31 1 34) -31]
Test Case: 506 | Input/Output: [(44 -3 37 -70) -70]
Test Case: 507 | Input/Output: [(-88 -31 -24 33) -88]
Test Case: 508 | Input/Output: [(38 13 -81 35) -81]
Test Case: 509 | Input/Output: [(84 66 86 -13) -13]
Test Case: 510 | Input/Output: [(-45 82 -60 -38) -60]
Test Case: 511 | Input/Output: [(98 -20 40 71) -20]
Test Case: 512 | Input/Output: [(47 31 62 -40) -40]
Test Case: 513 | Input/Output: [(-8 85 89 -70) -70]
Test Case: 514 | Input/Output: [(-90 43 -54 20) -90]
Test Case: 515 | Input/Output: [(9 75 -64 -34) -64]
Test Case: 516 | Input/Output: [(9 -42 -82 -15) -82]
Test Case: 517 | Input/Output: [(-95 2 -46 -57) -95]
Test Case: 518 | Input/Output: [(-5 -10 44 -16) -16]
Test Case: 519 | Input/Output: [(-6 97 4 -94) -94]
Test Case: 520 | Input/Output: [(-8 -100 24 -83) -100]
Test Case: 521 | Input/Output: [(-83 66 -20 33) -83]
Test Case: 522 | Input/Output: [(-77 94 -61 51) -77]
Test Case: 523 | Input/Output: [(40 -84 -97 25) -97]
Test Case: 524 | Input/Output: [(-11 76 60 81) -11]
Test Case: 525 | Input/Output: [(37 30 100 61) 30]
Test Case: 526 | Input/Output: [(94 97 65 -97) -97]
Test Case: 527 | Input/Output: [(-95 -13 29 -8) -95]
Test Case: 528 | Input/Output: [(7 -54 73 -90) -90]
Test Case: 529 | Input/Output: [(42 -52 7 15) -52]
Test Case: 530 | Input/Output: [(87 -59 -1 72) -59]
Test Case: 531 | Input/Output: [(39 43 52 36) 36]
Test Case: 532 | Input/Output: [(-49 100 59 -46) -49]
Test Case: 533 | Input/Output: [(-95 86 -87 53) -95]
Test Case: 534 | Input/Output: [(-66 -15 69 25) -66]
Test Case: 535 | Input/Output: [(68 85 95 65) 65]
Test Case: 536 | Input/Output: [(-52 65 -2 -13) -52]
Test Case: 537 | Input/Output: [(53 92 -15 28) -15]
Test Case: 538 | Input/Output: [(40 -98 -82 96) -98]
Test Case: 539 | Input/Output: [(76 67 -67 42) -67]
Test Case: 540 | Input/Output: [(50 64 -24 -2) -24]
Test Case: 541 | Input/Output: [(26 -79 -16 -50) -79]
Test Case: 542 | Input/Output: [(58 64 -83 -73) -83]
Test Case: 543 | Input/Output: [(17 -54 24 -72) -72]
Test Case: 544 | Input/Output: [(-10 20 -20 -53) -53]
Test Case: 545 | Input/Output: [(-25 -18 71 6) -25]
Test Case: 546 | Input/Output: [(-11 -97 21 92) -97]
Test Case: 547 | Input/Output: [(-50 25 -99 -46) -99]
Test Case: 548 | Input/Output: [(-100 44 38 82) -100]
Test Case: 549 | Input/Output: [(-80 95 -43 33) -80]
Test Case: 550 | Input/Output: [(80 -21 17 11) -21]
Test Case: 551 | Input/Output: [(80 4 -69 69) -69]
Test Case: 552 | Input/Output: [(-63 98 74 21) -63]
Test Case: 553 | Input/Output: [(69 -23 -42 8) -42]
Test Case: 554 | Input/Output: [(70 37 79 -55) -55]
Test Case: 555 | Input/Output: [(57 26 62 10) 10]
Test Case: 556 | Input/Output: [(15 -22 -66 -37) -66]
Test Case: 557 | Input/Output: [(12 -11 -90 23) -90]
Test Case: 558 | Input/Output: [(81 2 10 -67) -67]
Test Case: 559 | Input/Output: [(12 54 18 35) 12]
Test Case: 560 | Input/Output: [(-41 -52 33 71) -52]
Test Case: 561 | Input/Output: [(17 69 74 29) 17]
Test Case: 562 | Input/Output: [(-96 98 -17 34) -96]
Test Case: 563 | Input/Output: [(-28 15 -36 3) -36]
Test Case: 564 | Input/Output: [(80 -65 42 -45) -65]
Test Case: 565 | Input/Output: [(-31 -71 -32 56) -71]
Test Case: 566 | Input/Output: [(-71 -26 57 -34) -71]
Test Case: 567 | Input/Output: [(46 -96 73 98) -96]
Test Case: 568 | Input/Output: [(8 -68 67 -21) -68]
Test Case: 569 | Input/Output: [(8 -15 9 69) -15]
Test Case: 570 | Input/Output: [(-42 92 6 -29) -42]
Test Case: 571 | Input/Output: [(15 -52 80 -58) -58]
Test Case: 572 | Input/Output: [(21 -99 -36 66) -99]
Test Case: 573 | Input/Output: [(-5 88 40 -78) -78]
Test Case: 574 | Input/Output: [(78 41 -13 -24) -24]
Test Case: 575 | Input/Output: [(95 27 94 -85) -85]
Test Case: 576 | Input/Output: [(92 -51 74 75) -51]
Test Case: 577 | Input/Output: [(-34 -43 -95 6) -95]
Test Case: 578 | Input/Output: [(66 89 -79 3) -79]
Test Case: 579 | Input/Output: [(-40 -68 27 -86) -86]
Test Case: 580 | Input/Output: [(-68 65 16 -2) -68]
Test Case: 581 | Input/Output: [(61 12 -69 99) -69]
Test Case: 582 | Input/Output: [(83 -8 -89 42) -89]
Test Case: 583 | Input/Output: [(-75 75 -49 11) -75]
Test Case: 584 | Input/Output: [(24 -41 4 67) -41]
Test Case: 585 | Input/Output: [(72 -13 9 79) -13]
Test Case: 586 | Input/Output: [(96 8 -100 80) -100]
Test Case: 587 | Input/Output: [(86 -23 -47 -62) -62]
Test Case: 588 | Input/Output: [(24 -55 40 72) -55]
Test Case: 589 | Input/Output: [(19 81 -91 3) -91]
Test Case: 590 | Input/Output: [(-95 -75 -62 36) -95]
Test Case: 591 | Input/Output: [(62 48 -62 -100) -100]
Test Case: 592 | Input/Output: [(67 -28 -15 -78) -78]
Test Case: 593 | Input/Output: [(30 84 33 93) 30]
Test Case: 594 | Input/Output: [(-8 -76 -94 -21) -94]
Test Case: 595 | Input/Output: [(-19 26 28 5) -19]
Test Case: 596 | Input/Output: [(-78 15 -18 78) -78]
Test Case: 597 | Input/Output: [(29 -21 13 -68) -68]
Test Case: 598 | Input/Output: [(-39 43 -46 -46) -46]
Test Case: 599 | Input/Output: [(-75 75 98 56) -75]
Test Case: 600 | Input/Output: [(12 61 -45 -6) -45]
Test Case: 601 | Input/Output: [(65 -7 -85 18) -85]
Test Case: 602 | Input/Output: [(-4 -17 85 95) -17]
Test Case: 603 | Input/Output: [(50 39 -67 -87) -87]
Test Case: 604 | Input/Output: [(35 89 9 -6) -6]
Test Case: 605 | Input/Output: [(-42 -85 -37 -61) -85]
Test Case: 606 | Input/Output: [(-19 -86 -3 75) -86]
Test Case: 607 | Input/Output: [(-7 -53 91 34) -53]
Test Case: 608 | Input/Output: [(94 39 -84 97) -84]
Test Case: 609 | Input/Output: [(89 88 -31 43) -31]
Test Case: 610 | Input/Output: [(7 43 50 89) 7]
Test Case: 611 | Input/Output: [(-3 -56 -9 14) -56]
Test Case: 612 | Input/Output: [(-67 -61 41 -80) -80]
Test Case: 613 | Input/Output: [(-10 35 -83 74) -83]
Test Case: 614 | Input/Output: [(46 16 -69 -71) -71]
Test Case: 615 | Input/Output: [(-51 -94 -81 -92) -94]
Test Case: 616 | Input/Output: [(-6 -17 70 80) -17]
Test Case: 617 | Input/Output: [(82 19 -62 77) -62]
Test Case: 618 | Input/Output: [(51 -70 42 -65) -70]
Test Case: 619 | Input/Output: [(64 -88 -54 20) -88]
Test Case: 620 | Input/Output: [(-36 -77 -42 -15) -77]
Test Case: 621 | Input/Output: [(4 69 87 23) 4]
Test Case: 622 | Input/Output: [(95 39 65 25) 25]
Test Case: 623 | Input/Output: [(2 -65 -97 10) -97]
Test Case: 624 | Input/Output: [(51 -11 -82 97) -82]
Test Case: 625 | Input/Output: [(18 86 74 -72) -72]
Test Case: 626 | Input/Output: [(-75 -3 42 -14) -75]
Test Case: 627 | Input/Output: [(70 -91 -13 75) -91]
Test Case: 628 | Input/Output: [(64 6 80 -63) -63]
Test Case: 629 | Input/Output: [(-63 -40 76 -94) -94]
Test Case: 630 | Input/Output: [(83 -52 92 42) -52]
Test Case: 631 | Input/Output: [(-82 60 -50 6) -82]
Test Case: 632 | Input/Output: [(-86 -65 -14 19) -86]
Test Case: 633 | Input/Output: [(-52 27 -29 -53) -53]
Test Case: 634 | Input/Output: [(86 -87 67 -30) -87]
Test Case: 635 | Input/Output: [(-66 -60 -22 38) -66]
Test Case: 636 | Input/Output: [(-60 60 -15 -78) -78]
Test Case: 637 | Input/Output: [(-41 -50 37 -74) -74]
Test Case: 638 | Input/Output: [(-31 59 -47 -98) -98]
Test Case: 639 | Input/Output: [(60 -86 -14 -92) -92]
Test Case: 640 | Input/Output: [(-37 59 -21 -79) -79]
Test Case: 641 | Input/Output: [(78 19 -69 51) -69]
Test Case: 642 | Input/Output: [(68 -83 35 -54) -83]
Test Case: 643 | Input/Output: [(17 14 26 3) 3]
Test Case: 644 | Input/Output: [(75 80 10 28) 10]
Test Case: 645 | Input/Output: [(61 -15 -30 35) -30]
Test Case: 646 | Input/Output: [(22 14 -69 -75) -75]
Test Case: 647 | Input/Output: [(52 -25 72 -41) -41]
Test Case: 648 | Input/Output: [(-53 -30 -62 -10) -62]
Test Case: 649 | Input/Output: [(19 -46 87 37) -46]
Test Case: 650 | Input/Output: [(0 -28 57 -39) -39]
Test Case: 651 | Input/Output: [(65 -58 82 29) -58]
Test Case: 652 | Input/Output: [(51 37 78 -31) -31]
Test Case: 653 | Input/Output: [(-85 75 -69 47) -85]
Test Case: 654 | Input/Output: [(73 11 -25 85) -25]
Test Case: 655 | Input/Output: [(87 -1 -26 26) -26]
Test Case: 656 | Input/Output: [(-6 52 -29 -88) -88]
Test Case: 657 | Input/Output: [(-43 80 28 -52) -52]
Test Case: 658 | Input/Output: [(-38 34 -98 62) -98]
Test Case: 659 | Input/Output: [(99 -52 89 -35) -52]
Test Case: 660 | Input/Output: [(64 -27 -24 40) -27]
Test Case: 661 | Input/Output: [(-10 -3 21 53) -10]
Test Case: 662 | Input/Output: [(-52 78 -30 -95) -95]
Test Case: 663 | Input/Output: [(-100 -56 63 -16) -100]
Test Case: 664 | Input/Output: [(42 -15 -45 49) -45]
Test Case: 665 | Input/Output: [(92 11 1 -42) -42]
Test Case: 666 | Input/Output: [(35 76 -51 81) -51]
Test Case: 667 | Input/Output: [(-60 70 -34 43) -60]
Test Case: 668 | Input/Output: [(-44 -63 -57 84) -63]
Test Case: 669 | Input/Output: [(-22 86 37 69) -22]
Test Case: 670 | Input/Output: [(-31 -78 76 42) -78]
Test Case: 671 | Input/Output: [(59 76 -13 -94) -94]
Test Case: 672 | Input/Output: [(62 8 73 -21) -21]
Test Case: 673 | Input/Output: [(-7 -1 -88 4) -88]
Test Case: 674 | Input/Output: [(-45 -23 8 66) -45]
Test Case: 675 | Input/Output: [(96 -71 -47 15) -71]
Test Case: 676 | Input/Output: [(31 -31 33 -56) -56]
Test Case: 677 | Input/Output: [(-3 36 -47 31) -47]
Test Case: 678 | Input/Output: [(50 39 34 -50) -50]
Test Case: 679 | Input/Output: [(40 34 99 -19) -19]
Test Case: 680 | Input/Output: [(77 17 84 -21) -21]
Test Case: 681 | Input/Output: [(49 60 54 57) 49]
Test Case: 682 | Input/Output: [(28 -29 -75 -21) -75]
Test Case: 683 | Input/Output: [(-1 -23 -32 -18) -32]
Test Case: 684 | Input/Output: [(88 100 27 90) 27]
Test Case: 685 | Input/Output: [(-85 -22 -3 -23) -85]
Test Case: 686 | Input/Output: [(5 -83 62 77) -83]
Test Case: 687 | Input/Output: [(31 71 -52 79) -52]
Test Case: 688 | Input/Output: [(42 66 -67 38) -67]
Test Case: 689 | Input/Output: [(32 -39 -26 6) -39]
Test Case: 690 | Input/Output: [(-21 -67 98 40) -67]
Test Case: 691 | Input/Output: [(-12 3 36 76) -12]
Test Case: 692 | Input/Output: [(98 14 -40 26) -40]
Test Case: 693 | Input/Output: [(-89 -37 -32 3) -89]
Test Case: 694 | Input/Output: [(-99 -15 -25 -32) -99]
Test Case: 695 | Input/Output: [(-27 -62 -37 -27) -62]
Test Case: 696 | Input/Output: [(23 -32 -54 67) -54]
Test Case: 697 | Input/Output: [(0 -27 -89 63) -89]
Test Case: 698 | Input/Output: [(-94 26 -93 18) -94]
Test Case: 699 | Input/Output: [(-15 63 -48 -33) -48]
Test Case: 700 | Input/Output: [(75 84 25 -27) -27]
Test Case: 701 | Input/Output: [(29 14 -5 97) -5]
Test Case: 702 | Input/Output: [(89 -51 65 -97) -97]
Test Case: 703 | Input/Output: [(40 -16 86 -9) -16]
Test Case: 704 | Input/Output: [(63 57 19 -9) -9]
Test Case: 705 | Input/Output: [(-60 -68 31 -26) -68]
Test Case: 706 | Input/Output: [(80 -11 6 37) -11]
Test Case: 707 | Input/Output: [(-30 7 30 -14) -30]
Test Case: 708 | Input/Output: [(27 50 -99 -27) -99]
Test Case: 709 | Input/Output: [(-12 -65 88 35) -65]
Test Case: 710 | Input/Output: [(-23 -29 65 46) -29]
Test Case: 711 | Input/Output: [(-69 70 22 -7) -69]
Test Case: 712 | Input/Output: [(-30 -38 32 73) -38]
Test Case: 713 | Input/Output: [(-11 67 -1 98) -11]
Test Case: 714 | Input/Output: [(45 16 -1 23) -1]
Test Case: 715 | Input/Output: [(36 22 -21 -33) -33]
Test Case: 716 | Input/Output: [(-92 99 23 -8) -92]
Test Case: 717 | Input/Output: [(42 56 -32 55) -32]
Test Case: 718 | Input/Output: [(8 -54 20 -24) -54]
Test Case: 719 | Input/Output: [(11 83 -100 -53) -100]
Test Case: 720 | Input/Output: [(-15 -2 -64 -41) -64]
Test Case: 721 | Input/Output: [(28 83 27 -5) -5]
Test Case: 722 | Input/Output: [(7 44 47 -28) -28]
Test Case: 723 | Input/Output: [(-93 -7 19 -73) -93]
Test Case: 724 | Input/Output: [(69 -3 14 -31) -31]
Test Case: 725 | Input/Output: [(0 72 -41 67) -41]
Test Case: 726 | Input/Output: [(53 32 93 54) 32]
Test Case: 727 | Input/Output: [(56 -21 -42 -51) -51]
Test Case: 728 | Input/Output: [(8 71 -37 62) -37]
Test Case: 729 | Input/Output: [(-41 -87 -67 20) -87]
Test Case: 730 | Input/Output: [(-89 -5 21 47) -89]
Test Case: 731 | Input/Output: [(-99 -36 61 -61) -99]
Test Case: 732 | Input/Output: [(-10 -44 -83 14) -83]
Test Case: 733 | Input/Output: [(90 79 3 -50) -50]
Test Case: 734 | Input/Output: [(57 -95 90 92) -95]
Test Case: 735 | Input/Output: [(-96 -48 25 -22) -96]
Test Case: 736 | Input/Output: [(39 -48 89 64) -48]
Test Case: 737 | Input/Output: [(40 83 62 -11) -11]
Test Case: 738 | Input/Output: [(-86 -87 44 -54) -87]
Test Case: 739 | Input/Output: [(27 -34 23 -77) -77]
Test Case: 740 | Input/Output: [(3 17 -16 -8) -16]
Test Case: 741 | Input/Output: [(19 96 -23 -69) -69]
Test Case: 742 | Input/Output: [(-72 83 -47 -21) -72]
Test Case: 743 | Input/Output: [(-56 -32 -9 -3) -56]
Test Case: 744 | Input/Output: [(-45 -10 -20 85) -45]
Test Case: 745 | Input/Output: [(-85 84 -14 -15) -85]
Test Case: 746 | Input/Output: [(-28 -14 -95 21) -95]
Test Case: 747 | Input/Output: [(-76 98 79 -5) -76]
Test Case: 748 | Input/Output: [(-28 -52 -94 -4) -94]
Test Case: 749 | Input/Output: [(-49 92 22 -69) -69]
Test Case: 750 | Input/Output: [(-59 -40 -40 21) -59]
Test Case: 751 | Input/Output: [(-71 -72 49 16) -72]
Test Case: 752 | Input/Output: [(-99 51 -65 8) -99]
Test Case: 753 | Input/Output: [(58 -47 59 69) -47]
Test Case: 754 | Input/Output: [(-44 -31 -46 -38) -46]
Test Case: 755 | Input/Output: [(48 16 5 -67) -67]
Test Case: 756 | Input/Output: [(-14 -37 69 -76) -76]
Test Case: 757 | Input/Output: [(18 15 63 -82) -82]
Test Case: 758 | Input/Output: [(89 31 74 -15) -15]
Test Case: 759 | Input/Output: [(-1 -52 -37 -25) -52]
Test Case: 760 | Input/Output: [(52 36 98 73) 36]
Test Case: 761 | Input/Output: [(19 -64 -12 7) -64]
Test Case: 762 | Input/Output: [(43 39 -59 37) -59]
Test Case: 763 | Input/Output: [(-8 62 -76 -41) -76]
Test Case: 764 | Input/Output: [(62 92 73 -55) -55]
Test Case: 765 | Input/Output: [(57 87 -34 -69) -69]
Test Case: 766 | Input/Output: [(-71 58 -1 -21) -71]
Test Case: 767 | Input/Output: [(-90 -40 -40 83) -90]
Test Case: 768 | Input/Output: [(34 -35 -19 -49) -49]
Test Case: 769 | Input/Output: [(97 74 46 82) 46]
Test Case: 770 | Input/Output: [(64 -62 -17 -81) -81]
Test Case: 771 | Input/Output: [(51 -78 28 -22) -78]
Test Case: 772 | Input/Output: [(34 -72 5 96) -72]
Test Case: 773 | Input/Output: [(-61 -45 55 -50) -61]
Test Case: 774 | Input/Output: [(70 -40 3 -20) -40]
Test Case: 775 | Input/Output: [(-86 -19 60 -79) -86]
Test Case: 776 | Input/Output: [(-62 7 -48 -70) -70]
Test Case: 777 | Input/Output: [(96 37 -41 -49) -49]
Test Case: 778 | Input/Output: [(-6 93 -40 -22) -40]
Test Case: 779 | Input/Output: [(-30 -66 -38 -7) -66]
Test Case: 780 | Input/Output: [(-17 -22 -22 35) -22]
Test Case: 781 | Input/Output: [(53 -31 53 -67) -67]
Test Case: 782 | Input/Output: [(-13 62 71 -71) -71]
Test Case: 783 | Input/Output: [(-23 2 -92 -53) -92]
Test Case: 784 | Input/Output: [(76 79 -18 -62) -62]
Test Case: 785 | Input/Output: [(-53 -5 -62 55) -62]
Test Case: 786 | Input/Output: [(-1 -88 26 8) -88]
Test Case: 787 | Input/Output: [(59 -34 -88 -8) -88]
Test Case: 788 | Input/Output: [(-11 100 -80 -55) -80]
Test Case: 789 | Input/Output: [(-22 -73 -49 -16) -73]
Test Case: 790 | Input/Output: [(-56 -58 -76 57) -76]
Test Case: 791 | Input/Output: [(-7 -30 -69 42) -69]
Test Case: 792 | Input/Output: [(-7 71 38 90) -7]
Test Case: 793 | Input/Output: [(-5 -94 32 73) -94]
Test Case: 794 | Input/Output: [(-49 -44 75 -73) -73]
Test Case: 795 | Input/Output: [(-1 84 -30 81) -30]
Test Case: 796 | Input/Output: [(7 -17 -14 58) -17]
Test Case: 797 | Input/Output: [(33 8 22 77) 8]
Test Case: 798 | Input/Output: [(81 71 82 12) 12]
Test Case: 799 | Input/Output: [(9 3 24 -27) -27]
Test Case: 800 | Input/Output: [(89 -29 98 67) -29]
Test Case: 801 | Input/Output: [(17 -61 -18 -10) -61]
Test Case: 802 | Input/Output: [(64 -86 75 -55) -86]
Test Case: 803 | Input/Output: [(89 -22 -40 24) -40]
Test Case: 804 | Input/Output: [(51 -38 46 14) -38]
Test Case: 805 | Input/Output: [(-45 65 -27 67) -45]
Test Case: 806 | Input/Output: [(31 -93 -16 -36) -93]
Test Case: 807 | Input/Output: [(-8 -21 7 1) -21]
Test Case: 808 | Input/Output: [(-78 -43 89 -72) -78]
Test Case: 809 | Input/Output: [(8 -61 -5 -79) -79]
Test Case: 810 | Input/Output: [(-70 1 -71 -65) -71]
Test Case: 811 | Input/Output: [(15 -19 -69 -59) -69]
Test Case: 812 | Input/Output: [(21 -9 60 -71) -71]
Test Case: 813 | Input/Output: [(25 77 -16 31) -16]
Test Case: 814 | Input/Output: [(-40 -80 34 -20) -80]
Test Case: 815 | Input/Output: [(54 -54 88 -91) -91]
Test Case: 816 | Input/Output: [(-77 -93 70 42) -93]
Test Case: 817 | Input/Output: [(-91 68 -44 16) -91]
Test Case: 818 | Input/Output: [(-78 -28 -86 10) -86]
Test Case: 819 | Input/Output: [(99 -57 6 83) -57]
Test Case: 820 | Input/Output: [(-66 11 32 18) -66]
Test Case: 821 | Input/Output: [(79 -35 -6 64) -35]
Test Case: 822 | Input/Output: [(53 -20 100 50) -20]
Test Case: 823 | Input/Output: [(-5 51 -36 2) -36]
Test Case: 824 | Input/Output: [(-57 -25 -36 -72) -72]
Test Case: 825 | Input/Output: [(66 -14 -53 81) -53]
Test Case: 826 | Input/Output: [(36 -36 -75 18) -75]
Test Case: 827 | Input/Output: [(90 -82 4 -2) -82]
Test Case: 828 | Input/Output: [(37 49 -88 48) -88]
Test Case: 829 | Input/Output: [(-96 -100 87 19) -100]
Test Case: 830 | Input/Output: [(95 -45 4 -2) -45]
Test Case: 831 | Input/Output: [(-35 -44 -56 63) -56]
Test Case: 832 | Input/Output: [(30 59 89 27) 27]
Test Case: 833 | Input/Output: [(-2 -77 12 4) -77]
Test Case: 834 | Input/Output: [(-94 82 76 -75) -94]
Test Case: 835 | Input/Output: [(-49 40 99 32) -49]
Test Case: 836 | Input/Output: [(-45 67 -84 46) -84]
Test Case: 837 | Input/Output: [(-43 -70 83 47) -70]
Test Case: 838 | Input/Output: [(-52 -31 -63 22) -63]
Test Case: 839 | Input/Output: [(-77 -25 -12 -83) -83]
Test Case: 840 | Input/Output: [(96 90 33 80) 33]
Test Case: 841 | Input/Output: [(48 -54 -86 -17) -86]
Test Case: 842 | Input/Output: [(-57 -86 -44 41) -86]
Test Case: 843 | Input/Output: [(-17 -87 -18 92) -87]
Test Case: 844 | Input/Output: [(-5 43 3 -47) -47]
Test Case: 845 | Input/Output: [(-100 -9 -51 9) -100]
Test Case: 846 | Input/Output: [(33 -47 10 -22) -47]
Test Case: 847 | Input/Output: [(62 -62 5 43) -62]
Test Case: 848 | Input/Output: [(15 45 3 -83) -83]
Test Case: 849 | Input/Output: [(18 100 87 67) 18]
Test Case: 850 | Input/Output: [(-51 51 8 -4) -51]
Test Case: 851 | Input/Output: [(60 -46 18 -73) -73]
Test Case: 852 | Input/Output: [(-65 89 -14 63) -65]
Test Case: 853 | Input/Output: [(-42 97 3 77) -42]
Test Case: 854 | Input/Output: [(-68 -22 62 -86) -86]
Test Case: 855 | Input/Output: [(80 10 -25 49) -25]
Test Case: 856 | Input/Output: [(62 23 -66 68) -66]
Test Case: 857 | Input/Output: [(-1 85 13 84) -1]
Test Case: 858 | Input/Output: [(70 14 69 49) 14]
Test Case: 859 | Input/Output: [(100 -42 -58 24) -58]
Test Case: 860 | Input/Output: [(-92 29 58 7) -92]
Test Case: 861 | Input/Output: [(28 23 39 -11) -11]
Test Case: 862 | Input/Output: [(4 -89 61 78) -89]
Test Case: 863 | Input/Output: [(51 -97 100 27) -97]
Test Case: 864 | Input/Output: [(75 -51 -58 5) -58]
Test Case: 865 | Input/Output: [(-20 -32 -89 1) -89]
Test Case: 866 | Input/Output: [(83 -94 -9 95) -94]
Test Case: 867 | Input/Output: [(-65 -74 65 72) -74]
Test Case: 868 | Input/Output: [(13 -74 8 -61) -74]
Test Case: 869 | Input/Output: [(-58 -61 -51 16) -61]
Test Case: 870 | Input/Output: [(-76 -11 91 29) -76]
Test Case: 871 | Input/Output: [(-22 11 71 -61) -61]
Test Case: 872 | Input/Output: [(73 -42 0 90) -42]
Test Case: 873 | Input/Output: [(38 -18 -24 -60) -60]
Test Case: 874 | Input/Output: [(-24 -27 94 94) -27]
Test Case: 875 | Input/Output: [(0 4 78 50) 0]
Test Case: 876 | Input/Output: [(-84 -22 -54 -97) -97]
Test Case: 877 | Input/Output: [(-38 21 42 10) -38]
Test Case: 878 | Input/Output: [(40 -56 31 39) -56]
Test Case: 879 | Input/Output: [(67 -14 -89 -54) -89]
Test Case: 880 | Input/Output: [(36 90 -58 10) -58]
Test Case: 881 | Input/Output: [(-47 71 -88 -6) -88]
Test Case: 882 | Input/Output: [(21 78 20 19) 19]
Test Case: 883 | Input/Output: [(-68 -80 25 48) -80]
Test Case: 884 | Input/Output: [(-24 13 31 95) -24]
Test Case: 885 | Input/Output: [(44 -96 55 47) -96]
Test Case: 886 | Input/Output: [(32 1 11 -68) -68]
Test Case: 887 | Input/Output: [(76 -63 32 36) -63]
Test Case: 888 | Input/Output: [(-15 22 12 15) -15]
Test Case: 889 | Input/Output: [(74 -66 72 93) -66]
Test Case: 890 | Input/Output: [(80 48 71 -96) -96]
Test Case: 891 | Input/Output: [(40 -37 39 -4) -37]
Test Case: 892 | Input/Output: [(-90 15 -77 -48) -90]
Test Case: 893 | Input/Output: [(-39 76 -64 46) -64]
Test Case: 894 | Input/Output: [(96 -34 -16 -96) -96]
Test Case: 895 | Input/Output: [(-17 -68 66 79) -68]
Test Case: 896 | Input/Output: [(89 -53 23 -21) -53]
Test Case: 897 | Input/Output: [(53 -87 -91 4) -91]
Test Case: 898 | Input/Output: [(61 66 -55 -54) -55]
Test Case: 899 | Input/Output: [(50 -84 30 -20) -84]
Test Case: 900 | Input/Output: [(-66 49 -32 -60) -66]
Test Case: 901 | Input/Output: [(89 85 -26 46) -26]
Test Case: 902 | Input/Output: [(61 -75 -3 76) -75]
Test Case: 903 | Input/Output: [(-57 -59 -87 93) -87]
Test Case: 904 | Input/Output: [(29 36 52 65) 29]
Test Case: 905 | Input/Output: [(-27 -59 35 -25) -59]
Test Case: 906 | Input/Output: [(-79 -21 -7 -91) -91]
Test Case: 907 | Input/Output: [(95 98 -67 64) -67]
Test Case: 908 | Input/Output: [(-86 51 -41 29) -86]
Test Case: 909 | Input/Output: [(9 -20 -67 39) -67]
Test Case: 910 | Input/Output: [(-37 89 46 94) -37]
Test Case: 911 | Input/Output: [(-28 -19 -67 -15) -67]
Test Case: 912 | Input/Output: [(98 -57 77 15) -57]
Test Case: 913 | Input/Output: [(-23 63 4 -58) -58]
Test Case: 914 | Input/Output: [(24 66 -23 25) -23]
Test Case: 915 | Input/Output: [(27 -18 -73 -15) -73]
Test Case: 916 | Input/Output: [(12 16 20 51) 12]
Test Case: 917 | Input/Output: [(54 -62 -27 27) -62]
Test Case: 918 | Input/Output: [(39 0 -5 -19) -19]
Test Case: 919 | Input/Output: [(20 -81 59 -57) -81]
Test Case: 920 | Input/Output: [(100 45 22 -93) -93]
Test Case: 921 | Input/Output: [(92 -88 79 -21) -88]
Test Case: 922 | Input/Output: [(59 -59 -99 -76) -99]
Test Case: 923 | Input/Output: [(-1 -33 -41 49) -41]
Test Case: 924 | Input/Output: [(36 5 -37 -72) -72]
Test Case: 925 | Input/Output: [(70 -77 -73 24) -77]
Test Case: 926 | Input/Output: [(5 -15 49 38) -15]
Test Case: 927 | Input/Output: [(38 -93 47 91) -93]
Test Case: 928 | Input/Output: [(35 63 16 -30) -30]
Test Case: 929 | Input/Output: [(97 22 -79 37) -79]
Test Case: 930 | Input/Output: [(-87 94 -60 93) -87]
Test Case: 931 | Input/Output: [(84 -40 29 -63) -63]
Test Case: 932 | Input/Output: [(-1 40 -73 82) -73]
Test Case: 933 | Input/Output: [(10 80 76 61) 10]
Test Case: 934 | Input/Output: [(-5 -72 -72 98) -72]
Test Case: 935 | Input/Output: [(26 -52 91 43) -52]
Test Case: 936 | Input/Output: [(68 -48 83 43) -48]
Test Case: 937 | Input/Output: [(-39 33 59 -72) -72]
Test Case: 938 | Input/Output: [(15 45 -20 -56) -56]
Test Case: 939 | Input/Output: [(2 -6 89 -53) -53]
Test Case: 940 | Input/Output: [(-96 -49 5 47) -96]
Test Case: 941 | Input/Output: [(83 25 -44 78) -44]
Test Case: 942 | Input/Output: [(46 20 -22 69) -22]
Test Case: 943 | Input/Output: [(6 -99 85 -81) -99]
Test Case: 944 | Input/Output: [(31 -68 49 -79) -79]
Test Case: 945 | Input/Output: [(88 -78 74 -70) -78]
Test Case: 946 | Input/Output: [(94 -44 -66 35) -66]
Test Case: 947 | Input/Output: [(92 14 -82 -40) -82]
Test Case: 948 | Input/Output: [(-9 -14 -80 -5) -80]
Test Case: 949 | Input/Output: [(-72 32 33 -81) -81]
Test Case: 950 | Input/Output: [(44 92 94 -56) -56]
Test Case: 951 | Input/Output: [(-58 -35 -15 -62) -62]
Test Case: 952 | Input/Output: [(-29 29 -97 35) -97]
Test Case: 953 | Input/Output: [(36 -27 -76 -70) -76]
Test Case: 954 | Input/Output: [(-50 37 -65 67) -65]
Test Case: 955 | Input/Output: [(-1 59 67 98) -1]
Test Case: 956 | Input/Output: [(-45 -18 81 -26) -45]
Test Case: 957 | Input/Output: [(58 90 -8 -76) -76]
Test Case: 958 | Input/Output: [(-8 30 -86 -74) -86]
Test Case: 959 | Input/Output: [(-73 78 23 -19) -73]
Test Case: 960 | Input/Output: [(-62 -71 84 -85) -85]
Test Case: 961 | Input/Output: [(100 71 51 55) 51]
Test Case: 962 | Input/Output: [(80 -60 78 4) -60]
Test Case: 963 | Input/Output: [(19 -48 3 -87) -87]
Test Case: 964 | Input/Output: [(-61 55 44 62) -61]
Test Case: 965 | Input/Output: [(10 68 17 -28) -28]
Test Case: 966 | Input/Output: [(44 48 20 -13) -13]
Test Case: 967 | Input/Output: [(-62 37 74 -36) -62]
Test Case: 968 | Input/Output: [(-92 99 57 -59) -92]
Test Case: 969 | Input/Output: [(-69 -77 41 -2) -77]
Test Case: 970 | Input/Output: [(54 -41 48 3) -41]
Test Case: 971 | Input/Output: [(60 -81 99 89) -81]
Test Case: 972 | Input/Output: [(92 93 54 -42) -42]
Test Case: 973 | Input/Output: [(-71 -5 33 8) -71]
Test Case: 974 | Input/Output: [(-12 7 6 50) -12]
Test Case: 975 | Input/Output: [(87 -93 -95 -11) -95]
Test Case: 976 | Input/Output: [(75 24 80 62) 24]
Test Case: 977 | Input/Output: [(37 -70 30 -95) -95]
Test Case: 978 | Input/Output: [(87 -70 57 10) -70]
Test Case: 979 | Input/Output: [(-63 -92 47 57) -92]
Test Case: 980 | Input/Output: [(-62 -43 -56 78) -62]
Test Case: 981 | Input/Output: [(90 43 -90 16) -90]
Test Case: 982 | Input/Output: [(34 -76 -38 -27) -76]
Test Case: 983 | Input/Output: [(-15 -83 34 -96) -96]
Test Case: 984 | Input/Output: [(-57 -57 -58 -42) -58]
Test Case: 985 | Input/Output: [(-93 76 65 53) -93]
Test Case: 986 | Input/Output: [(46 -6 -13 -71) -71]
Test Case: 987 | Input/Output: [(58 84 -3 42) -3]
Test Case: 988 | Input/Output: [(-89 -12 84 -96) -96]
Test Case: 989 | Input/Output: [(64 79 60 44) 44]
Test Case: 990 | Input/Output: [(88 48 -46 -70) -70]
Test Case: 991 | Input/Output: [(76 -95 6 14) -95]
Test Case: 992 | Input/Output: [(-54 25 -8 -2) -54]
Test Case: 993 | Input/Output: [(36 -16 -5 47) -16]
Test Case: 994 | Input/Output: [(35 -84 -5 62) -84]
Test Case: 995 | Input/Output: [(-88 65 -59 87) -88]
Test Case: 996 | Input/Output: [(-98 23 -23 -26) -98]
Test Case: 997 | Input/Output: [(-7 8 -10 39) -10]
Test Case: 998 | Input/Output: [(70 23 87 61) 23]
Test Case: 999 | Input/Output: [(-59 -60 68 -77) -77]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -2 -126 103 118 18 15 92 16 28 -92 -76 -100 52 -119 -48 4
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[3 3 3 -20] -20] [[-37 -37 -37 37] -37] [[-97 -74 -74 -74] -97] [[-45 -38 -38 -38] -45] [[72 55 72 72] 55] [[-79 84 -79 -79] -79] [[53 53 53 85] 53] [[99 99 99 38] 38] [[-45 61 -45 -45] -45] [[-55 -8 -8 -8] -55] [(37 37 37 37) 37] [(43 43 43 43) 43] [(5 5 5 5) 5] [(-27 -27 -27 -27) -27] [(-57 -57 -57 -57) -57] [(15 69 65 3) 3] [(11 93 65 17) 11] [(99 42 64 91) 42] [(80 60 2 86) 2] [(78 48 7 54) 7] [(97 62 66 14) 14] [(29 27 7 27) 7] [(34 53 64 5) 5] [(59 74 11 41) 11] [(56 6 74 68) 6] [(8 69 98 81) 8] [(12 29 97 15) 12] [(75 13 39 85) 13] [(84 38 26 100) 26] [(41 48 78 8) 8] [(2 86 38 0) 0] [(16 81 39 81) 16] [(39 61 41 57) 39] [(47 24 19 11) 11] [(97 100 5 93) 5] [(-67 78 57 -87) -87] [(72 -54 -11 12) -54] [(84 71 -61 83) -61] [(-24 -80 -58 45) -80] [(-36 -89 33 22) -89] [(-79 36 49 54) -79] [(-99 -36 -59 -41) -99] [(23 -42 73 21) -42] [(34 20 -93 -18) -93] [(-21 66 13 11) -21] [(-2 -88 64 9) -88] [(-98 -11 -53 37) -98] [(80 45 -14 72) -14] [(72 -16 -5 54) -16] [(-80 -47 69 -69) -80] [(-100 3 5 -27) -100] [(-21 62 98 42) -21] [(-7 42 -47 -25) -47] [(95 58 -20 95) -20] [(-100 -3 -59 98) -100] [(64 69 -89 33) -89] [(61 -55 0 -24) -55] [(-58 -1 20 97) -58] [(73 1 -65 -31) -65] [(-61 44 -5 48) -61] [(-17 -17 -82 -44) -82] [(-33 37 11 81) -33] [(62 52 58 26) 26] [(-18 33 60 -55) -55] [(-47 58 63 52) -47] [(-27 -24 -9 -78) -78] [(-88 -25 18 1) -88] [(57 -33 31 -89) -89] [(47 92 -11 -3) -11] [(60 -80 -60 18) -80] [(-53 74 65 9) -53] [(83 -23 -33 -50) -50] [(51 -22 8 94) -22] [(6 -58 -51 49) -58] [(63 87 -38 -27) -38] [(35 -49 88 -34) -49] [(36 -25 73 -25) -25] [(50 6 -65 -80) -80] [(65 -28 -83 13) -83] [(64 -32 50 9) -32] [(-79 62 -61 -71) -79] [(79 2 23 -55) -55] [(-40 -44 -73 83) -73] [(11 -29 72 -64) -64] [(72 -41 70 -62) -62] [(58 53 77 25) 25] [(24 77 -3 -91) -91] [(-74 -54 -27 28) -74] [(-60 46 3 31) -60] [(99 -87 -44 83) -87] [(-50 -58 40 -52) -58] [(77 2 30 -65) -65] [(-66 96 32 -21) -66] [(79 -79 29 -16) -79] [(36 -33 73 -87) -87])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank})
Lexicase best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger in3 exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s () (integer_dec exec_dup_times (exec_do*count (boolean_pop integer_sub) exec_pop () integer_eq exec_shove (integer_dup_items) exec_when () exec_swap (boolean_xor) (exec_yank))) ()))) ())))))))) () ())
Lexicase best errors: [0 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 124
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank})
Zero cases best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger in3 exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s () (integer_dec exec_dup_times (exec_do*count (boolean_pop integer_sub) exec_pop () integer_eq exec_shove (integer_dup_items) exec_when () exec_swap (boolean_xor) (exec_yank))) ()))) ())))))))) () ())
Zero cases best errors: [0 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 124
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 1 2 1 3 2 1 1 8 5)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (9 1 2 1 3 2 1 1 8 5)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank})
Best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger in3 exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s () (integer_dec exec_dup_times (exec_do*count (boolean_pop integer_sub) exec_pop () integer_eq exec_shove (integer_dup_items) exec_when () exec_swap (boolean_xor) (exec_yank))) ()))) ())))))))) () ())
Errors: [0 0 1 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 84
Size: 124
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.991 0.999 0.998 0.999 0.997 0.998 0.999 0.999 0.992 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.606
Average program size in population (points): 69.846
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 466500
--- Timings ---
Current time: 1559314336700 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 32.7%
Fitness Testing:      1.5 seconds, 62.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank})
Lexicase best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items integer_dup_items integer_gt) (integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger in3 exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s () (integer_dec exec_dup_times (exec_do*count (boolean_pop integer_sub) exec_pop () integer_eq exec_shove (integer_dup_items) exec_when () exec_swap (boolean_xor) (exec_yank))) ()))) ()))) () ())))))) () ()) ())
Lexicase best errors: [1 0 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 141
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank})
Zero cases best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items integer_dup_items integer_gt) (integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger in3 exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s () (integer_dec exec_dup_times (exec_do*count (boolean_pop integer_sub) exec_pop () integer_eq exec_shove (integer_dup_items) exec_when () exec_swap (boolean_xor) (exec_yank))) ()))) ()))) () ())))))) () ()) ())
Zero cases best errors: [1 0 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 141
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 717 314 314 241 313 39 319 120 184)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (241 717 314 314 241 313 39 319 120 184)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank})
Best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and exec_eq) boolean_yankdup) (boolean_frominteger in3 exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s () (integer_dec exec_dup_times (exec_do*count (boolean_pop integer_sub) exec_pop () integer_eq exec_shove (integer_dup_items) exec_when () exec_swap (boolean_xor) (exec_yank))) ()))) ())))))))) () ())
Errors: [1 0 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 84
Size: 124
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 7.198
Median total errors in population: 7
Error averages by case: (0.759 0.283 0.686 0.686 0.759 0.687 0.961 0.681 0.88 0.816)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.685
Average program size in population (points): 82.95
Average percent parens in population: 0.263
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.481
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 764806
--- Timings ---
Current time: 1559314338943 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         2.4 seconds, 49.5%
Fitness Testing:      1.9 seconds, 39.1%
Report:               0.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult in2 boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger in3 exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing ())) ())))))))) () ())
Lexicase best errors: [1 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult in2 boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger in3 exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing ())) ())))))))) () ())
Zero cases best errors: [1 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 386 201 610 200 381 380 382 382 79)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (79 386 201 610 200 381 380 382 382 79)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush})
Best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (exec_swap (exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger exec_yank exec_yankdup exec_while (exec_do*times (boolean_flush))))))) ())) () ())
Errors: [1 0 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 45
Size: 67
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 6.92
Median total errors in population: 7
Error averages by case: (0.921 0.614 0.799 0.39 0.8 0.619 0.62 0.618 0.618 0.921)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.22
Average program size in population (points): 91.322
Average percent parens in population: 0.285
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9595
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1071857
--- Timings ---
Current time: 1559314341748 milliseconds
Total Time:           7.6 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         4.5 seconds, 59.7%
Fitness Testing:      2.2 seconds, 28.4%
Report:               0.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank})
Lexicase best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger exec_yank exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_min integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s () (integer_dec exec_dup_times (exec_do*count (boolean_pop integer_sub) exec_pop () integer_eq exec_shove (integer_dup_items) exec_when () exec_swap (boolean_xor) (exec_yank))) ()))) ())))))))) () ())
Lexicase best errors: [0 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 124
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank})
Zero cases best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger exec_yank exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_min integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s () (integer_dec exec_dup_times (exec_do*count (boolean_pop integer_sub) exec_pop () integer_eq exec_shove (integer_dup_items) exec_when () exec_swap (boolean_xor) (exec_yank))) ()))) ())))))))) () ())
Zero cases best errors: [0 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 124
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (707 1 500 499 1 207 163 870 163 207)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (707 1 500 499 1 207 163 870 163 207)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank})
Best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing () exec_if () (exec_do*count () exec_dup_times (boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup) (boolean_frominteger in3 exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y (exec_do*count () exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s () (integer_dec exec_dup_times (exec_do*count (boolean_pop integer_sub) exec_pop () integer_eq exec_shove (integer_dup_items) exec_when () exec_swap (boolean_xor) (exec_yank))) ()))) ())))))))) () ())
Errors: [0 1 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 84
Size: 124
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.682
Median total errors in population: 6
Error averages by case: (0.293 0.999 0.5 0.501 0.999 0.793 0.837 0.13 0.837 0.793)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.982
Average program size in population (points): 93.127
Average percent parens in population: 0.291
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.42175
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1391203
--- Timings ---
Current time: 1559314344282 milliseconds
Total Time:          10.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         6.4 seconds, 63.5%
Fitness Testing:      2.4 seconds, 24.1%
Report:               1.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: 84                 
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: 61                 
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 69                 
Correct output: 11                  | Program output: 93                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 60                 
Correct output: 7                   | Program output: 48                 
Correct output: 14                  | Program output: 62                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output: 53                 
Correct output: 11                  | Program output: 74                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 69                 
Correct output: 12                  | Program output: 29                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 38                 
Correct output: 8                   | Program output: 48                 
Correct output: 0                   | Program output: 86                 
Correct output: 16                  | Program output: 81                 
Correct output: 39                  | Program output: 61                 
Correct output: 11                  | Program output: 24                 
Correct output: 5                   | Program output: 100                
Correct output: -87                 | Program output: 78                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 71                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 36                 
Correct output: -99                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: 20                 
Correct output: -21                 | Program output: 66                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -11                
Correct output: -14                 | Program output: 45                 
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -47                
Correct output: -100                | Program output: 3                  
Correct output: -21                 | Program output: 62                 
Correct output: -47                 | Program output: 42                 
Correct output: -20                 | Program output: 58                 
Correct output: -100                | Program output: -3                 
Correct output: -89                 | Program output: 69                 
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: 1                  
Correct output: -61                 | Program output: 44                 
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: 37                 
Correct output: 26                  | Program output: 52                 
Correct output: -55                 | Program output: 33                 
Correct output: -47                 | Program output: 58                 
Correct output: -78                 | Program output: -24                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: 92                 
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 74                 
Correct output: -50                 | Program output: -23                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: 87                 
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: 6                  
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: 62                 
Correct output: -55                 | Program output: 2                  
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 53                 
Correct output: -91                 | Program output: 77                 
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 2                  
Correct output: -66                 | Program output: 96                 
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction 92} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tagged_19} {:close 0, :instruction integer_add} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dup_items} {:close 3, :instruction in3} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec})
Lexicase best program: (exec_empty exec_while (integer_lte integer_flush integer_stackdepth exec_when (92) integer_yank exec_do*times (boolean_dup_times integer_lt) exec_k () (boolean_rot boolean_not exec_k_when_autoconstructing (tagged_19) (integer_add print_boolean) exec_y () integer_dup_items) in3) integer_dup integer_stackdepth in2 exec_s_when_autoconstructing (print_integer exec_empty integer_eq) (exec_yankdup boolean_swap integer_div exec_when (integer_lte print_newline print_exec ())) ())
Lexicase best errors: [0 1 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction 92} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tagged_19} {:close 0, :instruction integer_add} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction integer_dup_items} {:close 3, :instruction in3} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec})
Zero cases best program: (exec_empty exec_while (integer_lte integer_flush integer_stackdepth exec_when (92) integer_yank exec_do*times (boolean_dup_times integer_lt) exec_k () (boolean_rot boolean_not exec_k_when_autoconstructing (tagged_19) (integer_add print_boolean) exec_y () integer_dup_items) in3) integer_dup integer_stackdepth in2 exec_s_when_autoconstructing (print_integer exec_empty integer_eq) (exec_yankdup boolean_swap integer_div exec_when (integer_lte print_newline print_exec ())) ())
Zero cases best errors: [0 1 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 150 251 233 241 488 150 203 203 203)
Population mean number of elite cases: 2.56
Count of perfect (error zero) individuals by case: (437 150 251 233 241 488 150 203 203 203)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4})
Best program: (boolean_rot integer_gt exec_pop (integer_inc) in2 integer_swap print_integer print_integer integer_mod boolean_and integer_dup boolean_yank boolean_rot exec_rot (integer_dec integer_fromboolean integer_eq boolean_pop) (boolean_yank) (boolean_pop integer_mult integer_dup_items exec_do*while (boolean_dup_times exec_y (integer_flush exec_do*times (boolean_or integer_shove integer_eq) exec_do*while (integer_pop integer_yank boolean_yank integer_eq integer_mult) integer_shove boolean_and)) exec_when (integer_dup boolean_dup_times in4) boolean_eq print_newline boolean_swap in4))
Errors: [0 1 1 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 46
Size: 56
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 7.441
Median total errors in population: 8
Error averages by case: (0.563 0.85 0.749 0.767 0.759 0.512 0.85 0.797 0.797 0.797)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.768
Average program size in population (points): 81.811
Average percent parens in population: 0.283
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.87225
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1769235
--- Timings ---
Current time: 1559314347418 milliseconds
Total Time:          12.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         8.4 seconds, 65.9%
Fitness Testing:      2.8 seconds, 21.7%
Report:               1.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 65                 
Correct output: 11                  | Program output: 65                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 64                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 74                 
Correct output: 8                   | Program output: 98                 
Correct output: 12                  | Program output: 97                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 78                 
Correct output: 0                   | Program output: 38                 
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 19                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: 57                 
Correct output: -54                 | Program output: -11                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -58                
Correct output: -89                 | Program output: 33                 
Correct output: -79                 | Program output: 49                 
Correct output: -99                 | Program output: -59                
Correct output: -42                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: 13                 
Correct output: -88                 | Program output: 64                 
Correct output: -98                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -5                 
Correct output: -80                 | Program output: 69                 
Correct output: -100                | Program output: 5                  
Correct output: -21                 | Program output: 98                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: 0                  
Correct output: -58                 | Program output: 20                 
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 58                 
Correct output: -55                 | Program output: 60                 
Correct output: -47                 | Program output: 63                 
Correct output: -78                 | Program output: -9                 
Correct output: -88                 | Program output: 18                 
Correct output: -89                 | Program output: 31                 
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -60                
Correct output: -53                 | Program output: 65                 
Correct output: -50                 | Program output: -33                
Correct output: -22                 | Program output: 8                  
Correct output: -58                 | Program output: -51                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: 88                 
Correct output: -25                 | Program output: 73                 
Correct output: -80                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 50                 
Correct output: -79                 | Program output: -61                
Correct output: -55                 | Program output: 23                 
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: -91                 | Program output: -3                 
Correct output: -74                 | Program output: -27                
Correct output: -60                 | Program output: 3                  
Correct output: -87                 | Program output: -44                
Correct output: -58                 | Program output: 40                 
Correct output: -65                 | Program output: 30                 
Correct output: -66                 | Program output: 32                 
Correct output: -79                 | Program output: 29                 
Correct output: -87                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 2, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_538} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 0, :instruction tag_exec_177} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_shove (exec_do*times (exec_when (exec_dup_times (exec_do*range (in3 boolean_yank)) print_integer exec_empty) exec_noop integer_dup_items exec_dup (tag_boolean_538 boolean_frominteger integer_inc boolean_dup_times boolean_invert_second_then_and) exec_y_when_autoconstructing (exec_flush boolean_shove) exec_do*range () print_boolean exec_empty) integer_flush boolean_dup_items integer_eq print_newline) integer_empty boolean_invert_first_then_and integer_dup integer_gt print_newline tag_exec_177 (exec_yankdup print_boolean integer_gte exec_while (exec_do*times (boolean_flush))))
Lexicase best errors: [0 1 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 2, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_538} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 0, :instruction tag_exec_177} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_shove (exec_do*times (exec_when (exec_dup_times (exec_do*range (in3 boolean_yank)) print_integer exec_empty) exec_noop integer_dup_items exec_dup (tag_boolean_538 boolean_frominteger integer_inc boolean_dup_times boolean_invert_second_then_and) exec_y_when_autoconstructing (exec_flush boolean_shove) exec_do*range () print_boolean exec_empty) integer_flush boolean_dup_items integer_eq print_newline) integer_empty boolean_invert_first_then_and integer_dup integer_gt print_newline tag_exec_177 (exec_yankdup print_boolean integer_gte exec_while (exec_do*times (boolean_flush))))
Zero cases best errors: [0 1 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 276 101 275 345 345 345 101 376 135)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (101 276 101 275 345 345 345 101 376 135)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 2, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_538} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush})
Best program: (exec_shove (exec_do*times (exec_when (exec_dup_times (exec_do*range (in3 boolean_yank)) print_integer exec_empty) exec_noop) integer_dup_items exec_dup (tag_boolean_538 boolean_frominteger integer_inc boolean_dup_times boolean_invert_second_then_and exec_y_when_autoconstructing (exec_flush boolean_shove) exec_do*range () print_boolean exec_yankdup) integer_flush boolean_dup_items integer_eq print_newline) integer_empty boolean_invert_first_then_and exec_do*range (integer_gt) print_newline print_boolean exec_yankdup exec_while (exec_do*times (boolean_flush)))
Errors: [0 1 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.6
Median total errors in population: 7
Error averages by case: (0.899 0.724 0.899 0.725 0.655 0.655 0.655 0.899 0.624 0.865)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.746
Average program size in population (points): 83.199
Average percent parens in population: 0.285
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.3391875
Median age in population: 7.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2171014
--- Timings ---
Current time: 1559314350194 milliseconds
Total Time:          16.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.6 seconds, 65.8%
Fitness Testing:      3.1 seconds, 19.4%
Report:               2.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction tagged_452} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt) integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing (exec_if () (exec_do*count () tagged_452 boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21 exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup boolean_frominteger) (in3) (exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y () exec_do*count (exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s (integer_dec exec_dup_times (exec_do*count (print_integer integer_sub) exec_pop ())) () ()))) ())))))))) () ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 112
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 0, :instruction tagged_452} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction 96} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 62} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt) integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (exec_when (exec_y_when_autoconstructing (exec_if () (exec_do*count () tagged_452 boolean_invert_first_then_and boolean_frominteger integer_dup_times exec_s_when_autoconstructing (-21 exec_pop (boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) boolean_yankdup boolean_frominteger) (in3) (exec_do*while (exec_yankdup exec_k () (96 print_integer exec_noop) boolean_swap integer_swap integer_rot exec_yankdup exec_swap (boolean_or 62 integer_fromboolean exec_y () exec_do*count (exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_invert_first_then_and exec_s (integer_dec exec_dup_times (exec_do*count (print_integer integer_sub) exec_pop ())) () ()))) ())))))))) () ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 112
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (70 199 318 201 294 878 200 317 70 881)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (70 199 318 201 294 878 200 317 70 881)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*range (integer_pop integer_pop integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_pop exec_k (integer_dec boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) exec_when (integer_gt) integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (boolean_shove exec_if () (integer_max) exec_while (integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (exec_stackdepth integer_swap integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) () ())
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 57
Size: 82
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 6.572
Median total errors in population: 6
Error averages by case: (0.93 0.801 0.682 0.799 0.706 0.122 0.8 0.683 0.93 0.119)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.688
Average program size in population (points): 76.628
Average percent parens in population: 0.276
Minimum age in population: 6.0
Maximum age in population: 10.6875
Average age in population: 8.8148125
Median age in population: 8.890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2506972
--- Timings ---
Current time: 1559314353347 milliseconds
Total Time:          19.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.2 seconds, 68.5%
Fitness Testing:      3.4 seconds, 17.7%
Report:               2.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: 37                 
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 85                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 17                 
Correct output: 42                  | Program output: 91                 
Correct output: 2                   | Program output: 86                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 41                 
Correct output: 6                   | Program output: 68                 
Correct output: 8                   | Program output: 81                 
Correct output: 12                  | Program output: 15                 
Correct output: 13                  | Program output: 85                 
Correct output: 26                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 81                 
Correct output: 39                  | Program output: 57                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 93                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 12                 
Correct output: -61                 | Program output: 83                 
Correct output: -80                 | Program output: 45                 
Correct output: -89                 | Program output: 22                 
Correct output: -79                 | Program output: 54                 
Correct output: -99                 | Program output: -41                
Correct output: -42                 | Program output: 21                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: 11                 
Correct output: -88                 | Program output: 9                  
Correct output: -98                 | Program output: 37                 
Correct output: -14                 | Program output: 72                 
Correct output: -16                 | Program output: 54                 
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: 42                 
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: 98                 
Correct output: -89                 | Program output: 33                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: 97                 
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: 48                 
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: 81                 
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 52                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: 18                 
Correct output: -53                 | Program output: 9                  
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 94                 
Correct output: -58                 | Program output: 49                 
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 13                 
Correct output: -32                 | Program output: 9                  
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: 83                 
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 28                 
Correct output: -60                 | Program output: 31                 
Correct output: -87                 | Program output: 83                 
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank exec_yankdup in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop integer_rot integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ()) ()))) ()) () ())
Lexicase best errors: [0 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank exec_yankdup in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop integer_rot integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ()) ()))) ()) () ())
Zero cases best errors: [0 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (302 727 64 161 242 343 64 64 859 674)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (302 727 64 161 242 343 64 64 859 674)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_pop exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Errors: [0 0 1 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 84
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.5
Median total errors in population: 6
Error averages by case: (0.698 0.273 0.936 0.839 0.758 0.657 0.936 0.936 0.141 0.326)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.65
Average program size in population (points): 81.787
Average percent parens in population: 0.302
Minimum age in population: 7.0
Maximum age in population: 12.28125
Average age in population: 10.320890625
Median age in population: 10.359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3001928
--- Timings ---
Current time: 1559314356136 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.1 seconds, 69.2%
Fitness Testing:      3.8 seconds, 17.2%
Report:               2.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -41                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output:                    
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Lexicase best errors: [0 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Zero cases best errors: [0 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 330 318 144 328 372 370 140 144 146)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (333 330 318 144 328 372 370 140 144 146)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Errors: [0 0 1 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 88
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 7.375
Median total errors in population: 8
Error averages by case: (0.667 0.67 0.682 0.856 0.672 0.628 0.63 0.86 0.856 0.854)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.678
Average program size in population (points): 78.981
Average percent parens in population: 0.289
Minimum age in population: 8.875
Maximum age in population: 13.5859375
Average age in population: 11.80240625
Median age in population: 11.86328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3532331
--- Timings ---
Current time: 1559314359060 milliseconds
Total Time:          24.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        17.0 seconds, 69.1%
Fitness Testing:      4.2 seconds, 16.9%
Report:               3.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -41                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output:                    
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 870 4 187 652 654 187 4 5 832)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (417 870 4 187 652 654 187 4 5 832)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 88
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 6.188
Median total errors in population: 6
Error averages by case: (0.583 0.13 0.996 0.813 0.348 0.346 0.813 0.996 0.995 0.168)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.44
Average program size in population (points): 82.883
Average percent parens in population: 0.292
Minimum age in population: 10.5
Maximum age in population: 15.05078125
Average age in population: 13.58240234375
Median age in population: 13.396484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4195314
--- Timings ---
Current time: 1559314362129 milliseconds
Total Time:          27.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.9 seconds, 68.3%
Fitness Testing:      4.7 seconds, 17.0%
Report:               4.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -41                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output:                    
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_gt integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup) integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing () (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) ())) () ())) ())) ()) () ())
Lexicase best errors: [0 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_gt integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup) integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing () (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) ())) () ())) ())) ()) () ())
Zero cases best errors: [0 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 277 1000 668 230 1000 151 510 192 400)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (281 277 0 668 230 0 151 510 192 400)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Errors: [0 0 1 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 88
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 7.291
Median total errors in population: 7
Error averages by case: (0.719 0.723 1.0 0.332 0.77 1.0 0.849 0.49 0.808 0.6)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 56.24
Average program size in population (points): 79.558
Average percent parens in population: 0.291
Minimum age in population: 11.75
Maximum age in population: 16.55859375
Average age in population: 15.15452734375
Median age in population: 15.3046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4785401
--- Timings ---
Current time: 1559314365164 milliseconds
Total Time:          30.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.9 seconds, 68.0%
Fitness Testing:      5.2 seconds, 16.8%
Report:               4.6 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 414141             
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output:                    
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output:                    
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Lexicase best errors: [1 0 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Zero cases best errors: [1 0 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 534 149 103 25 1 148 150 24 426)
Population mean number of elite cases: 1.73
Count of perfect (error zero) individuals by case: (165 534 149 103 25 1 148 150 24 426)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 print_integer integer_min integer_max exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Errors: [1 0 0 1 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 76
Size: 103
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 8.275
Median total errors in population: 8
Error averages by case: (0.835 0.466 0.851 0.897 0.975 0.999 0.852 0.85 0.976 0.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.165
Average program size in population (points): 82.191
Average percent parens in population: 0.290
Minimum age in population: 14.0625
Maximum age in population: 18.53515625
Average age in population: 16.6677333984375
Median age in population: 16.72607421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.005
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5453381
--- Timings ---
Current time: 1559314368158 milliseconds
Total Time:          33.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 67.5%
Fitness Testing:      5.7 seconds, 16.8%
Report:               5.2 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 exec_rot (exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) (integer_dup_items integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty integer_gt exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Lexicase best errors: [0 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 89
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 exec_rot (exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) (integer_dup_items integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty integer_gt exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Zero cases best errors: [0 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 89
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 145 203 147 615 290 323 204 325 93)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (290 145 203 147 615 290 323 204 325 93)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 exec_rot (exec_k (exec_yankdup boolean_eq in3 in3 boolean_yank) (boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) integer_dup_items integer_gt) (integer_yankdup) (boolean_yankdup exec_noop integer_min boolean_dup boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop in1 print_integer integer_min integer_max exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())))) ()))
Errors: [0 1 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 64
Size: 90
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.365
Median total errors in population: 7
Error averages by case: (0.71 0.855 0.797 0.853 0.385 0.71 0.677 0.796 0.675 0.907)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.737
Average program size in population (points): 79.006
Average percent parens in population: 0.292
Minimum age in population: 15.0625
Maximum age in population: 19.9462890625
Average age in population: 18.39021728515625
Median age in population: 18.40673828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.007
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6018606
--- Timings ---
Current time: 1559314370872 milliseconds
Total Time:          36.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.7 seconds, 67.3%
Fitness Testing:      6.1 seconds, 16.7%
Report:               5.8 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_not in4 exec_rot (exec_k (boolean_frominteger boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) (integer_dup_items integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Lexicase best errors: [0 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 89
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_not in4 exec_rot (exec_k (boolean_frominteger boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) (integer_dup_items integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ()))) ()) () ())
Zero cases best errors: [0 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 89
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (828 396 85 392 368 80 396 392 172 371)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (828 396 85 392 368 80 396 392 172 371)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 integer_fromboolean exec_dup_items print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ()) ()) () ())) ()))) ()) () ())
Errors: [0 0 1 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 83
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.52
Median total errors in population: 6
Error averages by case: (0.172 0.604 0.915 0.608 0.632 0.92 0.604 0.608 0.828 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.865
Average program size in population (points): 82.334
Average percent parens in population: 0.304
Minimum age in population: 17.41943359375
Maximum age in population: 21.726318359375
Average age in population: 19.87960766601562
Median age in population: 19.908203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6525074
--- Timings ---
Current time: 1559314373660 milliseconds
Total Time:          39.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.5 seconds, 67.4%
Fitness Testing:      6.5 seconds, 16.5%
Report:               6.2 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and integer_mult integer_inc) in3 in3 boolean_yank boolean_swap boolean_and exec_rot (exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) (integer_dup_items integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_dup_times () boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while () boolean_pop exec_yankdup exec_eq integer_inc exec_k_when_autoconstructing (in4 in1 print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_dup exec_if (boolean_frominteger) (-90 integer_inc integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ())) ())
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 94
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and integer_mult integer_inc) in3 in3 boolean_yank boolean_swap boolean_and exec_rot (exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) (integer_dup_items integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_dup_times () boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while () boolean_pop exec_yankdup exec_eq integer_inc exec_k_when_autoconstructing (in4 in1 print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_dup exec_if (boolean_frominteger) (-90 integer_inc integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup exec_y_when_autoconstructing ()) () ())) () ())) ())) ())
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 94
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 335 631 830 200 6 4 200 336 323)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (287 335 631 830 200 6 4 200 336 323)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup})
Best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s (integer_mult exec_if (boolean_yankdup) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and integer_div integer_add exec_s (integer_mult exec_if (boolean_frominteger) (-90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty boolean_dup) () ())) () ()) () ())) () ())) ())
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 68
Size: 93
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.848
Median total errors in population: 7
Error averages by case: (0.713 0.665 0.369 0.17 0.8 0.994 0.996 0.8 0.664 0.677)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.714
Average program size in population (points): 69.576
Average percent parens in population: 0.295
Minimum age in population: 18.572265625
Maximum age in population: 23.1094970703125
Average age in population: 21.31250952148438
Median age in population: 21.390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6988530
--- Timings ---
Current time: 1559314376492 milliseconds
Total Time:          42.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.3 seconds, 67.4%
Fitness Testing:      6.9 seconds, 16.3%
Report:               6.7 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 65                 
Correct output: 11                  | Program output: 65                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 64                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 74                 
Correct output: 8                   | Program output: 98                 
Correct output: 12                  | Program output: 97                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 78                 
Correct output: 0                   | Program output: 38                 
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 19                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: 57                 
Correct output: -54                 | Program output: -11                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -58                
Correct output: -89                 | Program output: 33                 
Correct output: -79                 | Program output: 49                 
Correct output: -99                 | Program output: -59                
Correct output: -42                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: 13                 
Correct output: -88                 | Program output: 64                 
Correct output: -98                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -5                 
Correct output: -80                 | Program output: 69                 
Correct output: -100                | Program output: 5                  
Correct output: -21                 | Program output: 98                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: 0                  
Correct output: -58                 | Program output: 20                 
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 58                 
Correct output: -55                 | Program output: 60                 
Correct output: -47                 | Program output: 63                 
Correct output: -78                 | Program output: -9                 
Correct output: -88                 | Program output: 18                 
Correct output: -89                 | Program output: 31                 
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -60                
Correct output: -53                 | Program output: 65                 
Correct output: -50                 | Program output: -33                
Correct output: -22                 | Program output: 8                  
Correct output: -58                 | Program output: -51                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: 88                 
Correct output: -25                 | Program output: 73                 
Correct output: -80                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 50                 
Correct output: -79                 | Program output: -61                
Correct output: -55                 | Program output: 23                 
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 72                 
Correct output: -62                 | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: -91                 | Program output: -3                 
Correct output: -74                 | Program output: -27                
Correct output: -60                 | Program output: 3                  
Correct output: -87                 | Program output: -44                
Correct output: -58                 | Program output: 40                 
Correct output: -65                 | Program output: 30                 
Correct output: -66                 | Program output: 32                 
Correct output: -79                 | Program output: 29                 
Correct output: -87                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 boolean_pop print_integer integer_mod exec_pop () integer_dup boolean_yank boolean_rot exec_rot (integer_dec integer_fromboolean integer_eq boolean_pop) () (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup))) ()) () ())
Lexicase best errors: [0 0 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 boolean_pop print_integer integer_mod exec_pop () integer_dup boolean_yank boolean_rot exec_rot (integer_dec integer_fromboolean integer_eq boolean_pop) () (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup))) ()) () ())
Zero cases best errors: [0 0 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 110 210 201 109 202 322 319 652 201)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (109 110 210 201 109 202 322 319 652 201)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup})
Best program: (boolean_eq exec_stackdepth exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 boolean_pop print_integer integer_mod boolean_and integer_dup boolean_yank boolean_rot exec_rot (integer_dec integer_fromboolean integer_eq boolean_pop) () (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items integer_dup_items exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup))) () ())
Errors: [0 0 1 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.565
Median total errors in population: 7
Error averages by case: (0.891 0.89 0.79 0.799 0.891 0.798 0.678 0.681 0.348 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.716
Average program size in population (points): 79.905
Average percent parens in population: 0.298
Minimum age in population: 20.177734375
Maximum age in population: 24.45123291015625
Average age in population: 22.88818273925781
Median age in population: 22.95663452148438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7516713
--- Timings ---
Current time: 1559314379089 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.2 seconds, 67.2%
Fitness Testing:      7.3 seconds, 16.1%
Report:               7.4 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2-2               
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53-53             
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 6464               
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (exec_empty in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_yankdup integer_flush boolean_dup_items integer_eq boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (integer_dup_times exec_if () (integer_max) exec_while (exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and integer_min boolean_dup_items) boolean_yankdup) ()))) () ())
Lexicase best errors: [1 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -21} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (exec_empty in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_dup_items integer_gt integer_yankdup boolean_yankdup exec_yankdup integer_flush boolean_dup_items integer_eq boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items in1 boolean_flush print_integer exec_when (integer_dup_times exec_if () (integer_max) exec_while (exec_s_when_autoconstructing (-21) (exec_pop (boolean_invert_second_then_and integer_min boolean_dup_items) boolean_yankdup) ()))) () ())
Zero cases best errors: [1 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (166 192 199 687 191 800 188 327 166 196)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (166 192 199 687 191 800 188 327 166 196)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction -90} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) exec_eq integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 print_integer integer_min integer_max exec_do*range (integer_div integer_add exec_s (exec_eq exec_if (boolean_frominteger -90 integer_dup_times integer_dup_items exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) (boolean_dup exec_y_when_autoconstructing ()) ()) ()) () ())) ()))) ()) () ())
Errors: [1 0 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 69
Size: 97
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 6.888
Median total errors in population: 7
Error averages by case: (0.834 0.808 0.801 0.313 0.809 0.2 0.812 0.673 0.834 0.804)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.175
Average program size in population (points): 73.304
Average percent parens in population: 0.296
Minimum age in population: 21.177734375
Maximum age in population: 26.05841064453125
Average age in population: 24.50658200073242
Median age in population: 24.618896484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8018465
--- Timings ---
Current time: 1559314382145 milliseconds
Total Time:          48.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.5 seconds, 67.8%
Fitness Testing:      7.6 seconds, 15.9%
Report:               7.7 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output:                    
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 93                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 60                 
Correct output: 7                   | Program output: 48                 
Correct output: 14                  | Program output: 62                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 74                 
Correct output: 6                   | Program output: 66                 
Correct output: 8                   | Program output: 69                 
Correct output: 12                  | Program output: 29                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 38                 
Correct output: 8                   | Program output: 78                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 81                 
Correct output: 39                  | Program output: 61                 
Correct output: 11                  | Program output: 24                 
Correct output: 5                   | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 71                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 36                 
Correct output: -99                 | Program output: -41                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: 66                 
Correct output: -88                 | Program output: 64                 
Correct output: -98                 | Program output: -11                
Correct output: -14                 | Program output: 45                 
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: 62                 
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 58                 
Correct output: -100                | Program output: -3                 
Correct output: -89                 | Program output: 69                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: 44                 
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: 37                 
Correct output: 26                  | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 58                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 74                 
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output: 50                 
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 53                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) () ())) ()) () ()) ()) ())
Lexicase best errors: [0 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 94
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) () ())) ()) () ()) ()) ())
Zero cases best errors: [0 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 94
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (427 435 247 785 404 1 54 427 398 426)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (427 435 247 785 404 1 54 427 398 426)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq exec_eq integer_stackdepth in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) () ()) ())
Errors: [0 0 0 0 1 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 74
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.396
Median total errors in population: 7
Error averages by case: (0.573 0.565 0.753 0.215 0.596 0.999 0.946 0.573 0.602 0.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.701
Average program size in population (points): 84.158
Average percent parens in population: 0.300
Minimum age in population: 23.452392578125
Maximum age in population: 27.88021850585938
Average age in population: 26.12322303771973
Median age in population: 26.09419250488281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8558243
--- Timings ---
Current time: 1559314384845 milliseconds
Total Time:          50.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 68.0%
Fitness Testing:      8.1 seconds, 15.9%
Report:               8.1 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 93                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 60                 
Correct output: 7                   | Program output: 48                 
Correct output: 14                  | Program output: 62                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 74                 
Correct output: 6                   | Program output: 66                 
Correct output: 8                   | Program output: 69                 
Correct output: 12                  | Program output: 29                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 38                 
Correct output: 8                   | Program output: 48                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 81                 
Correct output: 39                  | Program output: 61                 
Correct output: 11                  | Program output: 24                 
Correct output: 5                   | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 71                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 36                 
Correct output: -99                 | Program output: -41                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: 66                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -11                
Correct output: -14                 | Program output: 45                 
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: 62                 
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 58                 
Correct output: -100                | Program output: -3                 
Correct output: -89                 | Program output: 69                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: 44                 
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: 37                 
Correct output: 26                  | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 58                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 74                 
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 53                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq boolean_not integer_pop integer_dup_items exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_pop in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) () ()) ()) ())
Lexicase best errors: [0 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq boolean_not integer_pop integer_dup_items exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_pop in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) () ()) ()) ())
Zero cases best errors: [0 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (594 517 196 4 37 197 860 418 133 183)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (594 517 196 4 37 197 860 418 133 183)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s})
Best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_pop in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div exec_while (exec_s () () ()))) ()))) ()) () ()) ()) ())
Errors: [0 0 1 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 79
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.861
Median total errors in population: 6
Error averages by case: (0.406 0.483 0.804 0.996 0.963 0.803 0.14 0.582 0.867 0.817)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.715
Average program size in population (points): 80.423
Average percent parens in population: 0.280
Minimum age in population: 24.4921875
Maximum age in population: 29.22688293457031
Average age in population: 27.8211402130127
Median age in population: 27.81878662109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.006
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9070350
--- Timings ---
Current time: 1559314387518 milliseconds
Total Time:          53.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.3 seconds, 68.0%
Fitness Testing:      8.5 seconds, 15.9%
Report:               8.5 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: 84                 
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: 61                 
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 69                 
Correct output: 11                  | Program output: 93                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 60                 
Correct output: 7                   | Program output: 48                 
Correct output: 14                  | Program output: 62                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output:                    
Correct output: 11                  | Program output: 74                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 69                 
Correct output: 12                  | Program output: 29                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 38                 
Correct output: 8                   | Program output: 48                 
Correct output: 0                   | Program output: 86                 
Correct output: 16                  | Program output: 81                 
Correct output: 39                  | Program output: 61                 
Correct output: 11                  | Program output: 24                 
Correct output: 5                   | Program output: 100                
Correct output: -87                 | Program output: 78                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 71                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 36                 
Correct output: -99                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: 20                 
Correct output: -21                 | Program output: 66                 
Correct output: -88                 | Program output:                    
Correct output: -98                 | Program output: -11                
Correct output: -14                 | Program output: 45                 
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -47                
Correct output: -100                | Program output: 3                  
Correct output: -21                 | Program output: 62                 
Correct output: -47                 | Program output: 42                 
Correct output: -20                 | Program output: 58                 
Correct output: -100                | Program output: -3                 
Correct output: -89                 | Program output: 69                 
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: 1                  
Correct output: -61                 | Program output: 44                 
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: 37                 
Correct output: 26                  | Program output: 52                 
Correct output: -55                 | Program output: 33                 
Correct output: -47                 | Program output: 58                 
Correct output: -78                 | Program output: -24                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: 92                 
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 74                 
Correct output: -50                 | Program output: -23                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: 87                 
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: 6                  
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output:                    
Correct output: -79                 | Program output: 62                 
Correct output: -55                 | Program output: 2                  
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 53                 
Correct output: -91                 | Program output: 77                 
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 2                  
Correct output: -66                 | Program output: 96                 
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_pop in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in2 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) () ()) ()) ())
Lexicase best errors: [1 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_pop in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_eq integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in2 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) () ()) ()) ())
Zero cases best errors: [1 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 193 418 199 625 200 244 521 195 419)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (165 193 418 199 625 200 244 521 195 419)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_pop in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq exec_eq integer_gt integer_inc boolean_shove in4 in1 exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc integer_inc exec_k_when_autoconstructing (in2 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) () ()) ())
Errors: [1 0 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 77
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 6.821
Median total errors in population: 6
Error averages by case: (0.835 0.807 0.582 0.801 0.375 0.8 0.756 0.479 0.805 0.581)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.832
Average program size in population (points): 79.494
Average percent parens in population: 0.283
Minimum age in population: 25.4921875
Maximum age in population: 30.84462738037109
Average age in population: 29.21293870925903
Median age in population: 29.29962921142578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 9576719
--- Timings ---
Current time: 1559314390219 milliseconds
Total Time:          56.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.1 seconds, 68.1%
Fitness Testing:      8.8 seconds, 15.8%
Report:               8.9 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output:                    
Correct output: 38                  | Program output: 99999999           
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37373737           
Correct output: 43                  | Program output: 434343             
Correct output: 5                   | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3333               
Correct output: 11                  | Program output: 939317             
Correct output: 42                  | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: 7                   | Program output: 4848               
Correct output: 14                  | Program output: 6214               
Correct output: 7                   | Program output: 27272727           
Correct output: 5                   | Program output: 535                
Correct output: 11                  | Program output: 74747474           
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output:                    
Correct output: 12                  | Program output: 292915             
Correct output: 13                  | Program output:                    
Correct output: 26                  | Program output:                    
Correct output: 8                   | Program output: 48                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output:                    
Correct output: 39                  | Program output: 6161               
Correct output: 11                  | Program output: 24                 
Correct output: 5                   | Program output:                    
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output:                    
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 3636               
Correct output: -99                 | Program output: -41                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: 66                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -11                
Correct output: -14                 | Program output:                    
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: 626262             
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output:                    
Correct output: -100                | Program output: -3                 
Correct output: -89                 | Program output: 69696933           
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: 444444             
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output:                    
Correct output: 26                  | Program output: 525226             
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 5858               
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 74                 
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 53535325           
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 464646             
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean boolean_eq exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_fromboolean exec_empty) exec_while (boolean_pop boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in2 boolean_yank boolean_swap integer_dup_times exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc integer_inc exec_k_when_autoconstructing (in2 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) ()))) ()) () ())
Lexicase best errors: [0 0 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 97
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean boolean_eq exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_fromboolean exec_empty) exec_while (boolean_pop boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in2 boolean_yank boolean_swap integer_dup_times exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc integer_inc exec_k_when_autoconstructing (in2 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) ()))) ()) () ())
Zero cases best errors: [0 0 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 97
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 682 325 140 293 486 294 143 284 497)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (2 682 325 140 293 486 294 143 284 497)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_pop in2 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq exec_y_when_autoconstructing (integer_gt integer_inc exec_k_when_autoconstructing (in4 in1 exec_noop integer_dup exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (in4 integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()))) ()) () ()) ())) ())
Errors: [1 1 0 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 79
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.854
Median total errors in population: 6
Error averages by case: (0.998 0.318 0.675 0.86 0.707 0.514 0.706 0.857 0.716 0.503)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.824
Average program size in population (points): 80.562
Average percent parens in population: 0.292
Minimum age in population: 28.14798736572266
Maximum age in population: 32.3638858795166
Average age in population: 30.63408831787109
Median age in population: 30.76689147949219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.006
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 10095727
--- Timings ---
Current time: 1559314393062 milliseconds
Total Time:          58.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.0 seconds, 68.2%
Fitness Testing:      9.2 seconds, 15.8%
Report:               9.3 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 91                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 41                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 93                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 12                 
Correct output: -61                 | Program output: 83                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 21                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 72                 
Correct output: -16                 | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 33                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: 18                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 13                 
Correct output: -32                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 83                 
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) boolean_invert_first_then_and integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 exec_rot (exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) (boolean_shove integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (exec_stackdepth exec_do*times ()) () (exec_eq integer_gt) integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Lexicase best errors: [1 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 98
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean exec_empty) boolean_invert_first_then_and integer_mult integer_fromboolean in3 in3 boolean_yank boolean_swap in4 exec_rot (exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) (boolean_shove integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (exec_stackdepth exec_do*times ()) () (exec_eq integer_gt) integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Zero cases best errors: [1 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 98
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (168 859 582 167 188 40 247 405 327 489)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (168 859 582 167 188 40 247 405 327 489)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean boolean_eq exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) integer_fromboolean exec_empty) exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_s (exec_do*times ()) () (exec_eq integer_gt) integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Errors: [1 0 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 102
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.528
Median total errors in population: 7
Error averages by case: (0.832 0.141 0.418 0.833 0.812 0.96 0.753 0.595 0.673 0.511)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.076
Average program size in population (points): 86.63
Average percent parens in population: 0.293
Minimum age in population: 30.28955078125
Maximum age in population: 33.70708751678467
Average age in population: 32.63976634502411
Median age in population: 32.55609226226807
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 10685762
--- Timings ---
Current time: 1559314395749 milliseconds
Total Time:          61.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.8 seconds, 67.9%
Fitness Testing:      9.7 seconds, 15.8%
Report:               9.9 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 91                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 41                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 93                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 12                 
Correct output: -61                 | Program output: 83                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 21                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 72                 
Correct output: -16                 | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 33                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: 18                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 13                 
Correct output: -32                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 83                 
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean boolean_eq exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) integer_fromboolean exec_empty) exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_s (exec_do*times ()) () (exec_eq integer_gt) integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 102
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq exec_stackdepth integer_pop integer_fromboolean boolean_eq exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) integer_fromboolean exec_empty) exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_s (exec_do*times ()) () (exec_eq integer_gt) integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 102
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 385 630 601 278 274 823 488 264 842)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (263 385 630 601 278 274 823 488 264 842)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) integer_gt) integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 63
Size: 92
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 5.152
Median total errors in population: 5
Error averages by case: (0.737 0.615 0.37 0.399 0.722 0.726 0.177 0.512 0.736 0.158)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.347
Average program size in population (points): 92.195
Average percent parens in population: 0.321
Minimum age in population: 32.94766807556152
Maximum age in population: 35.38323783874512
Average age in population: 34.21708470392227
Median age in population: 34.30040740966797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.009
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 11180289
--- Timings ---
Current time: 1559314398332 milliseconds
Total Time:          64.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 68.1%
Fitness Testing:     10.1 seconds, 15.7%
Report:              10.3 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 91                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 41                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 93                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 12                 
Correct output: -61                 | Program output: 83                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 21                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 72                 
Correct output: -16                 | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 33                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: 18                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 13                 
Correct output: -32                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 83                 
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq exec_stackdepth boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_fromboolean in3 in2 boolean_yank boolean_swap boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ())) ()) () ()))) ()) ()))) ()) () ())
Lexicase best errors: [1 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 107
Percent parens: 0.336
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq exec_stackdepth boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_fromboolean in3 in2 boolean_yank boolean_swap boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ())) ()) () ()))) ()) ()))) ()) () ())
Zero cases best errors: [1 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 107
Percent parens: 0.336
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 749 1000 825 105 674 711 1000 670)
Population mean number of elite cases: 7.73
Count of perfect (error zero) individuals by case: (0 0 749 0 825 105 674 711 0 670)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Best program: (boolean_eq boolean_not exec_eq integer_fromboolean exec_empty boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) exec_eq integer_gt) integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_shove (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Errors: [1 1 0 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 64
Size: 93
Percent parens: 0.312
--- Population Statistics ---
Average total errors in population: 6.266
Median total errors in population: 5
Error averages by case: (1.0 1.0 0.251 1.0 0.175 0.895 0.326 0.289 1.0 0.33)
Error minima by case: (1 1 0 1 0 0 0 0 1 0)
Average genome size in population (length): 62.677
Average program size in population (points): 93.13
Average percent parens in population: 0.326
Minimum age in population: 33.94766807556152
Maximum age in population: 37.22910261154175
Average age in population: 35.79485223317146
Median age in population: 35.91657304763794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 11630634
--- Timings ---
Current time: 1559314400918 milliseconds
Total Time:          66.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.5 seconds, 68.2%
Fitness Testing:     10.5 seconds, 15.7%
Report:              10.7 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 91                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 41                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 93                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 12                 
Correct output: -61                 | Program output: 83                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 21                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 72                 
Correct output: -16                 | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 33                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: 18                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 13                 
Correct output: -32                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 83                 
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq exec_stackdepth boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop) integer_fromboolean boolean_xor exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_fromboolean in3 in2 boolean_yank boolean_swap boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ())) ()) () ()))) ()) ()))) ()) () ())
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 107
Percent parens: 0.336
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq exec_stackdepth boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop) integer_fromboolean boolean_xor exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_fromboolean in3 in2 boolean_yank boolean_swap boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ())) ()) () ()))) ()) ()))) ()) () ())
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 107
Percent parens: 0.336
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 687 423 428 815 663 383 637 363 669)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (6 687 423 428 815 663 383 637 363 669)
Population mean number of perfect (error zero) cases: 5.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty exec_while (integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank) boolean_swap exec_y_when_autoconstructing (integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ())) exec_eq integer_gt) integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Errors: [1 0 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 64
Size: 94
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 4.926
Median total errors in population: 3
Error averages by case: (0.994 0.313 0.577 0.572 0.185 0.337 0.617 0.363 0.637 0.331)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.708
Average program size in population (points): 98.315
Average percent parens in population: 0.331
Minimum age in population: 34.94766807556152
Maximum age in population: 39.17253923416138
Average age in population: 37.52930020070076
Median age in population: 37.60408198833466
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 12158914
--- Timings ---
Current time: 1559314403637 milliseconds
Total Time:          69.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.4 seconds, 68.3%
Fitness Testing:     10.9 seconds, 15.6%
Report:              11.0 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 505
Test mean error for best: 0.50500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 25                 
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output:                    
Correct output: 11                  | Program output: 65                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 4096               
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 74                 
Correct output: 8                   | Program output: 98                 
Correct output: 12                  | Program output: 97                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 78                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 19                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -11                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -58                
Correct output: -89                 | Program output: 33                 
Correct output: -79                 | Program output: 49                 
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 73                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: 13                 
Correct output: -88                 | Program output: 64                 
Correct output: -98                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: 98                 
Correct output: -47                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: 20                 
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 63                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: -60                
Correct output: -53                 | Program output: 65                 
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 8                  
Correct output: -58                 | Program output: -51                
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 77                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -27                
Correct output: -60                 | Program output:                    
Correct output: -87                 | Program output: -44                
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq exec_stackdepth boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte) integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor exec_while () integer_lte boolean_invert_first_then_and integer_mult integer_fromboolean in3 integer_fromboolean integer_fromboolean in3 integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_s (exec_do*times ()) () (exec_eq integer_gt) integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 109
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq exec_stackdepth boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte) integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor exec_while () integer_lte boolean_invert_first_then_and integer_mult integer_fromboolean in3 integer_fromboolean integer_fromboolean in3 integer_lte boolean_eq exec_stackdepth integer_pop exec_dup (exec_empty) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_s (exec_do*times ()) () (exec_eq integer_gt) integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min exec_rot (exec_k (exec_s_when_autoconstructing () (integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ()) ()) () ()) ())) ()) () ())
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 109
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (385 814 642 496 387 334 197 352 796 378)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (385 814 642 496 387 334 197 352 796 378)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1166} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s})
Best program: (boolean_eq exec_stackdepth boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_pop exec_dup (exec_empty exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean in3 in3 boolean_yank) boolean_swap in4 integer_dup_times exec_k (exec_yankdup boolean_eq boolean_not) (exec_stackdepth exec_dup_items exec_do*times ()) exec_eq integer_gt integer_yankdup boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_1166 exec_k_when_autoconstructing (in4 in1 exec_noop integer_min integer_lte print_integer boolean_dup_items boolean_pop exec_do*range (integer_div integer_dec exec_s () () ())) ())) ()) () ()) ()) () ())
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 96
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 5.219
Median total errors in population: 4
Error averages by case: (0.615 0.186 0.358 0.504 0.613 0.666 0.803 0.648 0.204 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.937
Average program size in population (points): 99.042
Average percent parens in population: 0.323
Minimum age in population: 35.94766807556152
Maximum age in population: 40.88084888458252
Average age in population: 39.18639715075493
Median age in population: 39.27278056740761
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.008
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 12727196
--- Timings ---
Current time: 1559314406461 milliseconds
Total Time:          72.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.3 seconds, 68.3%
Fitness Testing:     11.3 seconds, 15.6%
Report:              11.4 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 33                 
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 62                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 19                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 52                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 2                  
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 53                 
Correct output: -91                 | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60-60             
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 2                  
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_eq exec_stackdepth boolean_eq boolean_not integer_pop boolean_invert_first_then_and exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_fromboolean in3 in2 boolean_yank boolean_invert_first_then_and boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_lte boolean_dup_times boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ())) ()))) ()) ()))) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 100
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_eq exec_stackdepth boolean_eq boolean_not integer_pop boolean_invert_first_then_and exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_fromboolean in3 in2 boolean_yank boolean_invert_first_then_and boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_lte boolean_dup_times boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ())) ()))) ()) ()))) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 100
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (581 401 206 398 390 416 829 281 818 296)
Population mean number of elite cases: 4.62
Count of perfect (error zero) individuals by case: (581 401 206 398 390 416 829 281 818 296)
Population mean number of perfect (error zero) cases: 4.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Best program: (boolean_eq boolean_not integer_pop integer_fromboolean exec_empty boolean_eq exec_stackdepth integer_pop integer_fromboolean exec_empty boolean_xor exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 integer_fromboolean integer_fromboolean in3 in2 boolean_yank boolean_swap boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) integer_swap exec_noop integer_min exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (integer_div integer_add exec_s () () ())) ())) ()) () ()))) ()) ()))) ())
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 66
Size: 98
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 5.384
Median total errors in population: 6
Error averages by case: (0.419 0.599 0.794 0.602 0.61 0.584 0.171 0.719 0.182 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.578
Average program size in population (points): 100.173
Average percent parens in population: 0.325
Minimum age in population: 36.94766807556152
Maximum age in population: 42.41763114929199
Average age in population: 40.69128154024482
Median age in population: 40.78964617848396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.009
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 13313017
--- Timings ---
Current time: 1559314409309 milliseconds
Total Time:          75.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.2 seconds, 68.3%
Fitness Testing:     11.7 seconds, 15.6%
Report:              12.0 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 223
Test mean error for best: 0.22300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -11                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -58                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -60                
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 8                  
Correct output: -58                 | Program output: -51                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -44                
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Lexicase best program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ()))) ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 109
Percent parens: 0.349
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Zero cases best program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ()))) ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 109
Percent parens: 0.349
--- Lexicase Population Statistics ---
Count of elite individuals by case: (851 646 641 834 488 486 648 839 787 850)
Population mean number of elite cases: 7.07
Count of perfect (error zero) individuals by case: (851 646 641 834 488 486 648 839 787 850)
Population mean number of perfect (error zero) cases: 7.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_1131} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_997} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_752} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s})
Best program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 75
Size: 117
Percent parens: 0.359
--- Population Statistics ---
Average total errors in population: 2.93
Median total errors in population: 2
Error averages by case: (0.149 0.354 0.359 0.166 0.512 0.514 0.352 0.161 0.213 0.15)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.171
Average program size in population (points): 105.814
Average percent parens in population: 0.336
Minimum age in population: 40.15779781341553
Maximum age in population: 43.91809037327766
Average age in population: 42.46319750712812
Median age in population: 42.47043514251709
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.011
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 13929779
--- Timings ---
Current time: 1559314412199 milliseconds
Total Time:          77.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.1 seconds, 68.2%
Fitness Testing:     12.2 seconds, 15.7%
Report:              12.5 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 27
Successful program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 117


Auto-simplifying with starting size: 117
step: 0
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 500
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 1000
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 1500
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 2000
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 2500
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 3000
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 3500
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 4000
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 4500
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 5000
program: (integer_yank boolean_frominteger boolean_eq boolean_not integer_pop integer_fromboolean exec_empty exec_while (integer_lte integer_rot exec_stackdepth integer_pop integer_fromboolean boolean_xor) exec_while (integer_lte boolean_invert_first_then_and) integer_mult integer_fromboolean in3 exec_swap (integer_rot in3 in2 boolean_yank) (in4 boolean_eq exec_k (exec_eq integer_gt) (integer_yankdup) boolean_yankdup exec_noop integer_min exec_rot (boolean_invert_first_then_and exec_rot (boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_if () (tag_integer_1131 exec_do*while (tag_integer_1131 exec_do*while (boolean_pop exec_yankdup integer_gt integer_inc exec_k_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_do*while (boolean_yankdup exec_noop integer_min exec_rot (boolean_dup_items exec_s_when_autoconstructing () (exec_if () (tag_integer_997 exec_k_when_autoconstructing (tagged_752 in1 exec_noop integer_min integer_lte print_integer integer_min boolean_pop exec_do*range (boolean_invert_second_then_and integer_add exec_s () () ())) ())) ()) () ()))) ()) ())))) ()) () ()) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 223
Test mean error for best: 0.22300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -11                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -58                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -60                
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 8                  
Correct output: -58                 | Program output: -51                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -44                
Correct output: -58                 | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
