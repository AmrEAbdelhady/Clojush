Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[36 60 60 60] 36] [[65 58 58 58] 58] [[52 52 -41 52] -41] [[54 54 54 18] 18] [[-72 37 37 37] -72] [[1 1 1 -66] -66] [[90 -32 90 90] -32] [[-30 -85 -85 -85] -85] [[-52 -52 -47 -52] -52] [[1 79 1 1] 1] [(-75 -75 -75 -75) -75] [(-77 -77 -77 -77) -77] [(-85 -85 -85 -85) -85] [(60 60 60 60) 60] [(23 23 23 23) 23] [(26 39 69 57) 26] [(95 18 2 11) 2] [(30 33 26 42) 26] [(34 50 77 44) 34] [(92 78 95 54) 54] [(21 49 97 30) 21] [(49 72 47 31) 31] [(49 92 38 6) 6] [(3 33 62 53) 3] [(76 86 72 49) 49] [(76 3 0 86) 0] [(84 77 76 49) 49] [(30 63 31 71) 30] [(82 62 50 32) 32] [(83 73 83 5) 5] [(75 67 21 86) 21] [(70 71 88 64) 64] [(75 34 54 71) 34] [(76 29 50 83) 29] [(22 35 95 84) 22] [(-46 28 -80 34) -80] [(-92 23 -51 96) -92] [(-17 -42 86 91) -42] [(-4 -33 100 -60) -60] [(25 49 -55 -12) -55] [(-54 -45 -33 63) -54] [(-37 -58 2 46) -58] [(-65 -75 -19 -62) -75] [(73 -36 94 71) -36] [(65 88 26 46) 26] [(71 -82 64 6) -82] [(68 -30 53 -88) -88] [(83 70 30 32) 30] [(-10 81 -14 -30) -30] [(1 64 -51 52) -51] [(94 -1 -100 18) -100] [(47 2 46 9) 2] [(47 81 -79 -33) -79] [(-85 44 24 -46) -85] [(76 33 -10 -31) -31] [(-22 -89 -38 67) -89] [(97 50 41 68) 41] [(-69 32 19 -6) -69] [(14 40 32 -30) -30] [(11 -83 97 -34) -83] [(-33 16 -60 -35) -60] [(-65 81 -76 -23) -76] [(85 -52 79 29) -52] [(-35 -80 -16 -81) -81] [(-40 -48 -71 -70) -71] [(56 -70 -65 25) -70] [(55 61 69 -68) -68] [(66 -16 23 63) -16] [(-49 91 -97 18) -97] [(25 76 -23 73) -23] [(-9 -17 26 -3) -17] [(-99 -24 94 4) -99] [(-34 46 -94 95) -94] [(-47 -46 -32 35) -47] [(-57 37 44 -95) -95] [(47 86 -11 -65) -65] [(53 20 -49 87) -49] [(4 -1 71 90) -1] [(42 12 39 -90) -90] [(-44 13 -44 49) -44] [(-79 -95 -91 6) -95] [(73 -82 62 24) -82] [(24 -59 -63 97) -63] [(-27 -91 35 68) -91] [(100 24 -96 -17) -96] [(97 22 -94 -38) -94] [(-99 -69 -8 -43) -99] [(99 79 81 6) 6] [(-66 85 -41 83) -66] [(53 -54 34 -61) -61] [(7 -33 71 0) -33] [(83 -41 -59 -96) -96] [(-24 -7 53 -87) -87] [(61 -55 21 -77) -77] [(-46 -72 -57 -91) -91])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[36 60 60 60] 36]
Train Case:   6 | Input/Output: [[65 58 58 58] 58]
Train Case:   7 | Input/Output: [[52 52 -41 52] -41]
Train Case:   8 | Input/Output: [[54 54 54 18] 18]
Train Case:   9 | Input/Output: [[-72 37 37 37] -72]
Train Case:  10 | Input/Output: [[1 1 1 -66] -66]
Train Case:  11 | Input/Output: [[90 -32 90 90] -32]
Train Case:  12 | Input/Output: [[-30 -85 -85 -85] -85]
Train Case:  13 | Input/Output: [[-52 -52 -47 -52] -52]
Train Case:  14 | Input/Output: [[1 79 1 1] 1]
Train Case:  15 | Input/Output: [(-75 -75 -75 -75) -75]
Train Case:  16 | Input/Output: [(-77 -77 -77 -77) -77]
Train Case:  17 | Input/Output: [(-85 -85 -85 -85) -85]
Train Case:  18 | Input/Output: [(60 60 60 60) 60]
Train Case:  19 | Input/Output: [(23 23 23 23) 23]
Train Case:  20 | Input/Output: [(26 39 69 57) 26]
Train Case:  21 | Input/Output: [(95 18 2 11) 2]
Train Case:  22 | Input/Output: [(30 33 26 42) 26]
Train Case:  23 | Input/Output: [(34 50 77 44) 34]
Train Case:  24 | Input/Output: [(92 78 95 54) 54]
Train Case:  25 | Input/Output: [(21 49 97 30) 21]
Train Case:  26 | Input/Output: [(49 72 47 31) 31]
Train Case:  27 | Input/Output: [(49 92 38 6) 6]
Train Case:  28 | Input/Output: [(3 33 62 53) 3]
Train Case:  29 | Input/Output: [(76 86 72 49) 49]
Train Case:  30 | Input/Output: [(76 3 0 86) 0]
Train Case:  31 | Input/Output: [(84 77 76 49) 49]
Train Case:  32 | Input/Output: [(30 63 31 71) 30]
Train Case:  33 | Input/Output: [(82 62 50 32) 32]
Train Case:  34 | Input/Output: [(83 73 83 5) 5]
Train Case:  35 | Input/Output: [(75 67 21 86) 21]
Train Case:  36 | Input/Output: [(70 71 88 64) 64]
Train Case:  37 | Input/Output: [(75 34 54 71) 34]
Train Case:  38 | Input/Output: [(76 29 50 83) 29]
Train Case:  39 | Input/Output: [(22 35 95 84) 22]
Train Case:  40 | Input/Output: [(-46 28 -80 34) -80]
Train Case:  41 | Input/Output: [(-92 23 -51 96) -92]
Train Case:  42 | Input/Output: [(-17 -42 86 91) -42]
Train Case:  43 | Input/Output: [(-4 -33 100 -60) -60]
Train Case:  44 | Input/Output: [(25 49 -55 -12) -55]
Train Case:  45 | Input/Output: [(-54 -45 -33 63) -54]
Train Case:  46 | Input/Output: [(-37 -58 2 46) -58]
Train Case:  47 | Input/Output: [(-65 -75 -19 -62) -75]
Train Case:  48 | Input/Output: [(73 -36 94 71) -36]
Train Case:  49 | Input/Output: [(65 88 26 46) 26]
Train Case:  50 | Input/Output: [(71 -82 64 6) -82]
Train Case:  51 | Input/Output: [(68 -30 53 -88) -88]
Train Case:  52 | Input/Output: [(83 70 30 32) 30]
Train Case:  53 | Input/Output: [(-10 81 -14 -30) -30]
Train Case:  54 | Input/Output: [(1 64 -51 52) -51]
Train Case:  55 | Input/Output: [(94 -1 -100 18) -100]
Train Case:  56 | Input/Output: [(47 2 46 9) 2]
Train Case:  57 | Input/Output: [(47 81 -79 -33) -79]
Train Case:  58 | Input/Output: [(-85 44 24 -46) -85]
Train Case:  59 | Input/Output: [(76 33 -10 -31) -31]
Train Case:  60 | Input/Output: [(-22 -89 -38 67) -89]
Train Case:  61 | Input/Output: [(97 50 41 68) 41]
Train Case:  62 | Input/Output: [(-69 32 19 -6) -69]
Train Case:  63 | Input/Output: [(14 40 32 -30) -30]
Train Case:  64 | Input/Output: [(11 -83 97 -34) -83]
Train Case:  65 | Input/Output: [(-33 16 -60 -35) -60]
Train Case:  66 | Input/Output: [(-65 81 -76 -23) -76]
Train Case:  67 | Input/Output: [(85 -52 79 29) -52]
Train Case:  68 | Input/Output: [(-35 -80 -16 -81) -81]
Train Case:  69 | Input/Output: [(-40 -48 -71 -70) -71]
Train Case:  70 | Input/Output: [(56 -70 -65 25) -70]
Train Case:  71 | Input/Output: [(55 61 69 -68) -68]
Train Case:  72 | Input/Output: [(66 -16 23 63) -16]
Train Case:  73 | Input/Output: [(-49 91 -97 18) -97]
Train Case:  74 | Input/Output: [(25 76 -23 73) -23]
Train Case:  75 | Input/Output: [(-9 -17 26 -3) -17]
Train Case:  76 | Input/Output: [(-99 -24 94 4) -99]
Train Case:  77 | Input/Output: [(-34 46 -94 95) -94]
Train Case:  78 | Input/Output: [(-47 -46 -32 35) -47]
Train Case:  79 | Input/Output: [(-57 37 44 -95) -95]
Train Case:  80 | Input/Output: [(47 86 -11 -65) -65]
Train Case:  81 | Input/Output: [(53 20 -49 87) -49]
Train Case:  82 | Input/Output: [(4 -1 71 90) -1]
Train Case:  83 | Input/Output: [(42 12 39 -90) -90]
Train Case:  84 | Input/Output: [(-44 13 -44 49) -44]
Train Case:  85 | Input/Output: [(-79 -95 -91 6) -95]
Train Case:  86 | Input/Output: [(73 -82 62 24) -82]
Train Case:  87 | Input/Output: [(24 -59 -63 97) -63]
Train Case:  88 | Input/Output: [(-27 -91 35 68) -91]
Train Case:  89 | Input/Output: [(100 24 -96 -17) -96]
Train Case:  90 | Input/Output: [(97 22 -94 -38) -94]
Train Case:  91 | Input/Output: [(-99 -69 -8 -43) -99]
Train Case:  92 | Input/Output: [(99 79 81 6) 6]
Train Case:  93 | Input/Output: [(-66 85 -41 83) -66]
Train Case:  94 | Input/Output: [(53 -54 34 -61) -61]
Train Case:  95 | Input/Output: [(7 -33 71 0) -33]
Train Case:  96 | Input/Output: [(83 -41 -59 -96) -96]
Train Case:  97 | Input/Output: [(-24 -7 53 -87) -87]
Train Case:  98 | Input/Output: [(61 -55 21 -77) -77]
Train Case:  99 | Input/Output: [(-46 -72 -57 -91) -91]
Test Case:   0 | Input/Output: [[-99 -99 -99 0] -99]
Test Case:   1 | Input/Output: [[85 85 98 85] 85]
Test Case:   2 | Input/Output: [[-56 -56 -56 -63] -63]
Test Case:   3 | Input/Output: [[90 -43 90 90] -43]
Test Case:   4 | Input/Output: [[-55 -69 -69 -69] -69]
Test Case:   5 | Input/Output: [[10 10 -2 10] -2]
Test Case:   6 | Input/Output: [[7 7 7 -93] -93]
Test Case:   7 | Input/Output: [[-45 -45 -51 -45] -51]
Test Case:   8 | Input/Output: [[39 73 39 39] 39]
Test Case:   9 | Input/Output: [[46 57 57 57] 46]
Test Case:  10 | Input/Output: [[23 23 -79 23] -79]
Test Case:  11 | Input/Output: [[95 -77 -77 -77] -77]
Test Case:  12 | Input/Output: [[-14 -14 -90 -14] -90]
Test Case:  13 | Input/Output: [[-90 -90 -90 -18] -90]
Test Case:  14 | Input/Output: [[-13 -31 -31 -31] -31]
Test Case:  15 | Input/Output: [[34 34 34 -51] -51]
Test Case:  16 | Input/Output: [[-88 -88 -88 7] -88]
Test Case:  17 | Input/Output: [[-33 -21 -21 -21] -33]
Test Case:  18 | Input/Output: [[2 2 51 2] 2]
Test Case:  19 | Input/Output: [[-74 -12 -74 -74] -74]
Test Case:  20 | Input/Output: [[-46 -46 -46 -59] -59]
Test Case:  21 | Input/Output: [[-62 -62 -62 73] -62]
Test Case:  22 | Input/Output: [[-62 -62 -32 -62] -62]
Test Case:  23 | Input/Output: [[-32 85 85 85] -32]
Test Case:  24 | Input/Output: [[62 62 62 61] 61]
Test Case:  25 | Input/Output: [[-88 -47 -88 -88] -88]
Test Case:  26 | Input/Output: [[19 19 -37 19] -37]
Test Case:  27 | Input/Output: [[-38 -38 -38 85] -38]
Test Case:  28 | Input/Output: [[8 -1 8 8] -1]
Test Case:  29 | Input/Output: [[-49 -35 -35 -35] -49]
Test Case:  30 | Input/Output: [[96 -16 -16 -16] -16]
Test Case:  31 | Input/Output: [[-3 -43 -3 -3] -43]
Test Case:  32 | Input/Output: [[48 48 -89 48] -89]
Test Case:  33 | Input/Output: [[-16 70 70 70] -16]
Test Case:  34 | Input/Output: [[4 -89 -89 -89] -89]
Test Case:  35 | Input/Output: [[-100 23 -100 -100] -100]
Test Case:  36 | Input/Output: [[-31 28 -31 -31] -31]
Test Case:  37 | Input/Output: [[-42 79 79 79] -42]
Test Case:  38 | Input/Output: [[-69 -50 -50 -50] -69]
Test Case:  39 | Input/Output: [[-30 83 83 83] -30]
Test Case:  40 | Input/Output: [[50 50 50 68] 50]
Test Case:  41 | Input/Output: [[-3 61 -3 -3] -3]
Test Case:  42 | Input/Output: [[-81 100 -81 -81] -81]
Test Case:  43 | Input/Output: [[48 34 48 48] 34]
Test Case:  44 | Input/Output: [[10 -95 10 10] -95]
Test Case:  45 | Input/Output: [[63 63 63 42] 42]
Test Case:  46 | Input/Output: [[-27 -27 -27 5] -27]
Test Case:  47 | Input/Output: [[71 -15 71 71] -15]
Test Case:  48 | Input/Output: [[-77 -38 -77 -77] -77]
Test Case:  49 | Input/Output: [[-9 -9 -9 -60] -60]
Test Case:  50 | Input/Output: [[-30 -7 -7 -7] -30]
Test Case:  51 | Input/Output: [[79 -97 79 79] -97]
Test Case:  52 | Input/Output: [[-32 20 -32 -32] -32]
Test Case:  53 | Input/Output: [[4 37 37 37] 4]
Test Case:  54 | Input/Output: [[-24 61 61 61] -24]
Test Case:  55 | Input/Output: [[-57 -57 -57 -42] -57]
Test Case:  56 | Input/Output: [[36 36 -45 36] -45]
Test Case:  57 | Input/Output: [[-47 -47 -47 49] -47]
Test Case:  58 | Input/Output: [[-67 -37 -37 -37] -67]
Test Case:  59 | Input/Output: [[56 38 56 56] 38]
Test Case:  60 | Input/Output: [[-83 15 -83 -83] -83]
Test Case:  61 | Input/Output: [[20 20 -55 20] -55]
Test Case:  62 | Input/Output: [[76 -77 -77 -77] -77]
Test Case:  63 | Input/Output: [[37 37 -86 37] -86]
Test Case:  64 | Input/Output: [[87 87 87 -21] -21]
Test Case:  65 | Input/Output: [[-42 -42 -42 -27] -42]
Test Case:  66 | Input/Output: [[27 -35 -35 -35] -35]
Test Case:  67 | Input/Output: [[66 66 60 66] 60]
Test Case:  68 | Input/Output: [[5 5 91 5] 5]
Test Case:  69 | Input/Output: [[43 80 43 43] 43]
Test Case:  70 | Input/Output: [[88 17 88 88] 17]
Test Case:  71 | Input/Output: [[38 -4 -4 -4] -4]
Test Case:  72 | Input/Output: [[85 -87 -87 -87] -87]
Test Case:  73 | Input/Output: [[-56 -56 -83 -56] -83]
Test Case:  74 | Input/Output: [[7 7 7 8] 7]
Test Case:  75 | Input/Output: [[40 40 8 40] 8]
Test Case:  76 | Input/Output: [[30 87 30 30] 30]
Test Case:  77 | Input/Output: [[-36 6 -36 -36] -36]
Test Case:  78 | Input/Output: [[15 15 27 15] 15]
Test Case:  79 | Input/Output: [[-93 -93 -93 65] -93]
Test Case:  80 | Input/Output: [[57 92 92 92] 57]
Test Case:  81 | Input/Output: [[9 -50 -50 -50] -50]
Test Case:  82 | Input/Output: [[84 84 84 55] 55]
Test Case:  83 | Input/Output: [[34 -85 -85 -85] -85]
Test Case:  84 | Input/Output: [[91 -52 91 91] -52]
Test Case:  85 | Input/Output: [[66 -43 -43 -43] -43]
Test Case:  86 | Input/Output: [[-41 -41 6 -41] -41]
Test Case:  87 | Input/Output: [[84 84 84 -9] -9]
Test Case:  88 | Input/Output: [[-47 -47 -47 76] -47]
Test Case:  89 | Input/Output: [[83 83 83 -19] -19]
Test Case:  90 | Input/Output: [[48 48 43 48] 43]
Test Case:  91 | Input/Output: [[-27 35 -27 -27] -27]
Test Case:  92 | Input/Output: [[39 -30 39 39] -30]
Test Case:  93 | Input/Output: [[40 16 40 40] 16]
Test Case:  94 | Input/Output: [[-8 -8 73 -8] -8]
Test Case:  95 | Input/Output: [[-92 -92 -63 -92] -92]
Test Case:  96 | Input/Output: [[13 13 13 -76] -76]
Test Case:  97 | Input/Output: [[95 95 -77 95] -77]
Test Case:  98 | Input/Output: [[1 1 1 90] 1]
Test Case:  99 | Input/Output: [[31 31 31 -28] -28]
Test Case: 100 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 101 | Input/Output: [(26 26 26 26) 26]
Test Case: 102 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 103 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 104 | Input/Output: [(80 80 80 80) 80]
Test Case: 105 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 106 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 107 | Input/Output: [(25 25 25 25) 25]
Test Case: 108 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 109 | Input/Output: [(91 91 91 91) 91]
Test Case: 110 | Input/Output: [(45 45 45 45) 45]
Test Case: 111 | Input/Output: [(43 43 43 43) 43]
Test Case: 112 | Input/Output: [(76 76 76 76) 76]
Test Case: 113 | Input/Output: [(35 35 35 35) 35]
Test Case: 114 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 115 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 116 | Input/Output: [(32 32 32 32) 32]
Test Case: 117 | Input/Output: [(21 21 21 21) 21]
Test Case: 118 | Input/Output: [(55 55 55 55) 55]
Test Case: 119 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 120 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 121 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 122 | Input/Output: [(17 17 17 17) 17]
Test Case: 123 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 124 | Input/Output: [(26 26 26 26) 26]
Test Case: 125 | Input/Output: [(27 27 27 27) 27]
Test Case: 126 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 127 | Input/Output: [(48 48 48 48) 48]
Test Case: 128 | Input/Output: [(100 100 100 100) 100]
Test Case: 129 | Input/Output: [(53 53 53 53) 53]
Test Case: 130 | Input/Output: [(9 9 9 9) 9]
Test Case: 131 | Input/Output: [(68 68 68 68) 68]
Test Case: 132 | Input/Output: [(80 80 80 80) 80]
Test Case: 133 | Input/Output: [(14 14 14 14) 14]
Test Case: 134 | Input/Output: [(95 95 95 95) 95]
Test Case: 135 | Input/Output: [(42 42 42 42) 42]
Test Case: 136 | Input/Output: [(67 67 67 67) 67]
Test Case: 137 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 138 | Input/Output: [(62 62 62 62) 62]
Test Case: 139 | Input/Output: [(54 54 54 54) 54]
Test Case: 140 | Input/Output: [(4 4 4 4) 4]
Test Case: 141 | Input/Output: [(6 6 6 6) 6]
Test Case: 142 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 143 | Input/Output: [(31 31 31 31) 31]
Test Case: 144 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 145 | Input/Output: [(42 42 42 42) 42]
Test Case: 146 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 147 | Input/Output: [(16 16 16 16) 16]
Test Case: 148 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 149 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 150 | Input/Output: [(71 71 71 71) 71]
Test Case: 151 | Input/Output: [(38 38 38 38) 38]
Test Case: 152 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 153 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 154 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 155 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 156 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 157 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 158 | Input/Output: [(5 5 5 5) 5]
Test Case: 159 | Input/Output: [(87 87 87 87) 87]
Test Case: 160 | Input/Output: [(69 69 69 69) 69]
Test Case: 161 | Input/Output: [(77 77 77 77) 77]
Test Case: 162 | Input/Output: [(31 31 31 31) 31]
Test Case: 163 | Input/Output: [(84 84 84 84) 84]
Test Case: 164 | Input/Output: [(91 91 91 91) 91]
Test Case: 165 | Input/Output: [(14 14 14 14) 14]
Test Case: 166 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 167 | Input/Output: [(3 3 3 3) 3]
Test Case: 168 | Input/Output: [(10 10 10 10) 10]
Test Case: 169 | Input/Output: [(27 27 27 27) 27]
Test Case: 170 | Input/Output: [(30 30 30 30) 30]
Test Case: 171 | Input/Output: [(28 28 28 28) 28]
Test Case: 172 | Input/Output: [(62 62 62 62) 62]
Test Case: 173 | Input/Output: [(73 73 73 73) 73]
Test Case: 174 | Input/Output: [(80 80 80 80) 80]
Test Case: 175 | Input/Output: [(68 68 68 68) 68]
Test Case: 176 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 177 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 178 | Input/Output: [(0 0 0 0) 0]
Test Case: 179 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 180 | Input/Output: [(3 3 3 3) 3]
Test Case: 181 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 182 | Input/Output: [(35 35 35 35) 35]
Test Case: 183 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 184 | Input/Output: [(2 2 2 2) 2]
Test Case: 185 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 186 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 187 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 188 | Input/Output: [(58 58 58 58) 58]
Test Case: 189 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 190 | Input/Output: [(1 1 1 1) 1]
Test Case: 191 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 192 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 193 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 194 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 195 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 196 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 197 | Input/Output: [(34 34 34 34) 34]
Test Case: 198 | Input/Output: [(91 91 91 91) 91]
Test Case: 199 | Input/Output: [(75 75 75 75) 75]
Test Case: 200 | Input/Output: [(14 69 55 91) 14]
Test Case: 201 | Input/Output: [(95 0 3 91) 0]
Test Case: 202 | Input/Output: [(38 60 82 39) 38]
Test Case: 203 | Input/Output: [(61 23 100 12) 12]
Test Case: 204 | Input/Output: [(51 15 5 38) 5]
Test Case: 205 | Input/Output: [(74 20 69 66) 20]
Test Case: 206 | Input/Output: [(5 57 36 65) 5]
Test Case: 207 | Input/Output: [(86 0 87 56) 0]
Test Case: 208 | Input/Output: [(59 5 56 66) 5]
Test Case: 209 | Input/Output: [(27 69 60 57) 27]
Test Case: 210 | Input/Output: [(100 56 26 49) 26]
Test Case: 211 | Input/Output: [(8 60 80 33) 8]
Test Case: 212 | Input/Output: [(47 92 37 69) 37]
Test Case: 213 | Input/Output: [(93 77 49 82) 49]
Test Case: 214 | Input/Output: [(11 94 78 50) 11]
Test Case: 215 | Input/Output: [(1 50 71 12) 1]
Test Case: 216 | Input/Output: [(72 14 1 23) 1]
Test Case: 217 | Input/Output: [(40 89 12 69) 12]
Test Case: 218 | Input/Output: [(29 36 82 11) 11]
Test Case: 219 | Input/Output: [(78 62 52 8) 8]
Test Case: 220 | Input/Output: [(62 39 28 35) 28]
Test Case: 221 | Input/Output: [(98 78 60 64) 60]
Test Case: 222 | Input/Output: [(68 60 10 81) 10]
Test Case: 223 | Input/Output: [(42 73 13 83) 13]
Test Case: 224 | Input/Output: [(23 70 33 65) 23]
Test Case: 225 | Input/Output: [(82 10 68 27) 10]
Test Case: 226 | Input/Output: [(84 3 79 63) 3]
Test Case: 227 | Input/Output: [(9 73 99 11) 9]
Test Case: 228 | Input/Output: [(8 82 78 71) 8]
Test Case: 229 | Input/Output: [(38 41 72 85) 38]
Test Case: 230 | Input/Output: [(73 82 31 37) 31]
Test Case: 231 | Input/Output: [(29 26 20 41) 20]
Test Case: 232 | Input/Output: [(30 35 77 94) 30]
Test Case: 233 | Input/Output: [(16 75 35 34) 16]
Test Case: 234 | Input/Output: [(91 60 3 14) 3]
Test Case: 235 | Input/Output: [(30 30 76 94) 30]
Test Case: 236 | Input/Output: [(62 96 1 89) 1]
Test Case: 237 | Input/Output: [(28 43 5 34) 5]
Test Case: 238 | Input/Output: [(2 53 74 90) 2]
Test Case: 239 | Input/Output: [(48 7 26 26) 7]
Test Case: 240 | Input/Output: [(9 81 71 18) 9]
Test Case: 241 | Input/Output: [(7 73 12 100) 7]
Test Case: 242 | Input/Output: [(12 2 93 79) 2]
Test Case: 243 | Input/Output: [(50 57 29 76) 29]
Test Case: 244 | Input/Output: [(24 9 29 95) 9]
Test Case: 245 | Input/Output: [(81 98 47 42) 42]
Test Case: 246 | Input/Output: [(94 97 95 23) 23]
Test Case: 247 | Input/Output: [(51 57 51 42) 42]
Test Case: 248 | Input/Output: [(87 38 62 67) 38]
Test Case: 249 | Input/Output: [(98 93 63 2) 2]
Test Case: 250 | Input/Output: [(21 7 6 4) 4]
Test Case: 251 | Input/Output: [(54 100 94 53) 53]
Test Case: 252 | Input/Output: [(73 40 78 5) 5]
Test Case: 253 | Input/Output: [(23 73 31 10) 10]
Test Case: 254 | Input/Output: [(72 26 18 13) 13]
Test Case: 255 | Input/Output: [(62 25 6 70) 6]
Test Case: 256 | Input/Output: [(26 30 9 2) 2]
Test Case: 257 | Input/Output: [(47 32 73 22) 22]
Test Case: 258 | Input/Output: [(54 68 82 70) 54]
Test Case: 259 | Input/Output: [(84 47 55 68) 47]
Test Case: 260 | Input/Output: [(76 66 58 33) 33]
Test Case: 261 | Input/Output: [(32 47 66 87) 32]
Test Case: 262 | Input/Output: [(33 35 83 99) 33]
Test Case: 263 | Input/Output: [(23 65 90 31) 23]
Test Case: 264 | Input/Output: [(52 13 68 49) 13]
Test Case: 265 | Input/Output: [(68 5 53 50) 5]
Test Case: 266 | Input/Output: [(98 96 21 88) 21]
Test Case: 267 | Input/Output: [(24 3 97 93) 3]
Test Case: 268 | Input/Output: [(9 26 59 15) 9]
Test Case: 269 | Input/Output: [(1 71 74 59) 1]
Test Case: 270 | Input/Output: [(70 78 57 60) 57]
Test Case: 271 | Input/Output: [(76 1 46 96) 1]
Test Case: 272 | Input/Output: [(72 76 31 7) 7]
Test Case: 273 | Input/Output: [(69 21 30 62) 21]
Test Case: 274 | Input/Output: [(8 24 41 42) 8]
Test Case: 275 | Input/Output: [(8 31 48 83) 8]
Test Case: 276 | Input/Output: [(29 58 13 93) 13]
Test Case: 277 | Input/Output: [(57 91 57 96) 57]
Test Case: 278 | Input/Output: [(94 83 99 38) 38]
Test Case: 279 | Input/Output: [(82 12 63 22) 12]
Test Case: 280 | Input/Output: [(74 83 94 30) 30]
Test Case: 281 | Input/Output: [(28 66 36 91) 28]
Test Case: 282 | Input/Output: [(58 83 59 4) 4]
Test Case: 283 | Input/Output: [(86 36 63 42) 36]
Test Case: 284 | Input/Output: [(79 94 23 7) 7]
Test Case: 285 | Input/Output: [(97 35 77 69) 35]
Test Case: 286 | Input/Output: [(22 71 4 94) 4]
Test Case: 287 | Input/Output: [(92 12 97 80) 12]
Test Case: 288 | Input/Output: [(60 43 5 57) 5]
Test Case: 289 | Input/Output: [(48 34 97 39) 34]
Test Case: 290 | Input/Output: [(100 32 8 10) 8]
Test Case: 291 | Input/Output: [(82 77 90 87) 77]
Test Case: 292 | Input/Output: [(49 92 89 40) 40]
Test Case: 293 | Input/Output: [(30 14 41 83) 14]
Test Case: 294 | Input/Output: [(72 51 17 34) 17]
Test Case: 295 | Input/Output: [(40 42 12 0) 0]
Test Case: 296 | Input/Output: [(51 58 11 23) 11]
Test Case: 297 | Input/Output: [(21 91 44 2) 2]
Test Case: 298 | Input/Output: [(41 95 60 61) 41]
Test Case: 299 | Input/Output: [(28 37 1 62) 1]
Test Case: 300 | Input/Output: [(69 0 67 3) 0]
Test Case: 301 | Input/Output: [(6 84 54 44) 6]
Test Case: 302 | Input/Output: [(68 52 3 49) 3]
Test Case: 303 | Input/Output: [(29 88 73 100) 29]
Test Case: 304 | Input/Output: [(48 38 85 43) 38]
Test Case: 305 | Input/Output: [(50 21 35 12) 12]
Test Case: 306 | Input/Output: [(80 29 78 65) 29]
Test Case: 307 | Input/Output: [(49 99 51 40) 40]
Test Case: 308 | Input/Output: [(45 74 74 64) 45]
Test Case: 309 | Input/Output: [(14 26 92 18) 14]
Test Case: 310 | Input/Output: [(10 91 54 25) 10]
Test Case: 311 | Input/Output: [(48 82 55 40) 40]
Test Case: 312 | Input/Output: [(19 17 92 95) 17]
Test Case: 313 | Input/Output: [(77 70 53 1) 1]
Test Case: 314 | Input/Output: [(27 51 68 18) 18]
Test Case: 315 | Input/Output: [(95 10 32 0) 0]
Test Case: 316 | Input/Output: [(28 77 62 4) 4]
Test Case: 317 | Input/Output: [(72 25 47 95) 25]
Test Case: 318 | Input/Output: [(0 6 23 46) 0]
Test Case: 319 | Input/Output: [(72 68 71 98) 68]
Test Case: 320 | Input/Output: [(5 79 77 9) 5]
Test Case: 321 | Input/Output: [(92 99 13 8) 8]
Test Case: 322 | Input/Output: [(65 99 38 36) 36]
Test Case: 323 | Input/Output: [(81 31 13 100) 13]
Test Case: 324 | Input/Output: [(18 78 26 97) 18]
Test Case: 325 | Input/Output: [(23 72 56 20) 20]
Test Case: 326 | Input/Output: [(34 1 14 59) 1]
Test Case: 327 | Input/Output: [(21 82 85 25) 21]
Test Case: 328 | Input/Output: [(82 87 46 8) 8]
Test Case: 329 | Input/Output: [(81 54 48 45) 45]
Test Case: 330 | Input/Output: [(45 89 85 66) 45]
Test Case: 331 | Input/Output: [(82 48 19 23) 19]
Test Case: 332 | Input/Output: [(83 21 78 22) 21]
Test Case: 333 | Input/Output: [(35 93 84 69) 35]
Test Case: 334 | Input/Output: [(42 10 78 75) 10]
Test Case: 335 | Input/Output: [(35 58 22 81) 22]
Test Case: 336 | Input/Output: [(7 72 21 9) 7]
Test Case: 337 | Input/Output: [(85 67 80 42) 42]
Test Case: 338 | Input/Output: [(82 37 3 40) 3]
Test Case: 339 | Input/Output: [(42 97 76 74) 42]
Test Case: 340 | Input/Output: [(95 98 13 36) 13]
Test Case: 341 | Input/Output: [(74 29 79 96) 29]
Test Case: 342 | Input/Output: [(41 76 38 78) 38]
Test Case: 343 | Input/Output: [(14 11 31 36) 11]
Test Case: 344 | Input/Output: [(28 60 82 42) 28]
Test Case: 345 | Input/Output: [(31 27 53 68) 27]
Test Case: 346 | Input/Output: [(22 11 43 52) 11]
Test Case: 347 | Input/Output: [(71 57 74 55) 55]
Test Case: 348 | Input/Output: [(30 46 95 23) 23]
Test Case: 349 | Input/Output: [(70 20 45 37) 20]
Test Case: 350 | Input/Output: [(28 6 98 42) 6]
Test Case: 351 | Input/Output: [(64 70 57 81) 57]
Test Case: 352 | Input/Output: [(4 96 97 21) 4]
Test Case: 353 | Input/Output: [(62 6 55 65) 6]
Test Case: 354 | Input/Output: [(65 50 56 82) 50]
Test Case: 355 | Input/Output: [(14 1 14 20) 1]
Test Case: 356 | Input/Output: [(23 73 4 59) 4]
Test Case: 357 | Input/Output: [(84 57 91 66) 57]
Test Case: 358 | Input/Output: [(15 64 100 89) 15]
Test Case: 359 | Input/Output: [(90 52 13 21) 13]
Test Case: 360 | Input/Output: [(29 17 74 50) 17]
Test Case: 361 | Input/Output: [(26 32 73 10) 10]
Test Case: 362 | Input/Output: [(71 82 10 45) 10]
Test Case: 363 | Input/Output: [(52 35 69 37) 35]
Test Case: 364 | Input/Output: [(20 41 58 69) 20]
Test Case: 365 | Input/Output: [(10 74 32 80) 10]
Test Case: 366 | Input/Output: [(61 99 71 14) 14]
Test Case: 367 | Input/Output: [(4 45 53 39) 4]
Test Case: 368 | Input/Output: [(71 33 70 7) 7]
Test Case: 369 | Input/Output: [(1 4 40 54) 1]
Test Case: 370 | Input/Output: [(12 25 54 3) 3]
Test Case: 371 | Input/Output: [(15 45 19 3) 3]
Test Case: 372 | Input/Output: [(91 67 12 95) 12]
Test Case: 373 | Input/Output: [(28 50 73 7) 7]
Test Case: 374 | Input/Output: [(22 100 43 34) 22]
Test Case: 375 | Input/Output: [(76 63 87 100) 63]
Test Case: 376 | Input/Output: [(54 24 62 28) 24]
Test Case: 377 | Input/Output: [(96 2 27 14) 2]
Test Case: 378 | Input/Output: [(77 66 10 79) 10]
Test Case: 379 | Input/Output: [(47 82 86 52) 47]
Test Case: 380 | Input/Output: [(85 41 68 30) 30]
Test Case: 381 | Input/Output: [(10 65 5 4) 4]
Test Case: 382 | Input/Output: [(42 13 17 55) 13]
Test Case: 383 | Input/Output: [(10 28 41 10) 10]
Test Case: 384 | Input/Output: [(28 93 4 92) 4]
Test Case: 385 | Input/Output: [(42 84 55 56) 42]
Test Case: 386 | Input/Output: [(26 3 17 65) 3]
Test Case: 387 | Input/Output: [(19 30 95 22) 19]
Test Case: 388 | Input/Output: [(97 74 26 67) 26]
Test Case: 389 | Input/Output: [(71 89 99 87) 71]
Test Case: 390 | Input/Output: [(25 85 7 34) 7]
Test Case: 391 | Input/Output: [(14 78 56 22) 14]
Test Case: 392 | Input/Output: [(72 73 13 90) 13]
Test Case: 393 | Input/Output: [(43 16 5 13) 5]
Test Case: 394 | Input/Output: [(46 54 23 63) 23]
Test Case: 395 | Input/Output: [(15 77 9 44) 9]
Test Case: 396 | Input/Output: [(99 69 16 76) 16]
Test Case: 397 | Input/Output: [(62 48 5 50) 5]
Test Case: 398 | Input/Output: [(72 76 70 17) 17]
Test Case: 399 | Input/Output: [(98 87 20 57) 20]
Test Case: 400 | Input/Output: [(-94 -27 25 24) -94]
Test Case: 401 | Input/Output: [(51 -26 66 -42) -42]
Test Case: 402 | Input/Output: [(-32 -48 12 7) -48]
Test Case: 403 | Input/Output: [(-11 16 53 56) -11]
Test Case: 404 | Input/Output: [(24 68 -75 26) -75]
Test Case: 405 | Input/Output: [(-39 4 39 -28) -39]
Test Case: 406 | Input/Output: [(9 74 37 0) 0]
Test Case: 407 | Input/Output: [(91 -72 8 -82) -82]
Test Case: 408 | Input/Output: [(60 -65 33 61) -65]
Test Case: 409 | Input/Output: [(93 -53 -87 -80) -87]
Test Case: 410 | Input/Output: [(-60 -66 5 -21) -66]
Test Case: 411 | Input/Output: [(-91 42 90 1) -91]
Test Case: 412 | Input/Output: [(-51 7 77 -26) -51]
Test Case: 413 | Input/Output: [(94 -82 58 -48) -82]
Test Case: 414 | Input/Output: [(15 100 17 -9) -9]
Test Case: 415 | Input/Output: [(5 81 -84 -98) -98]
Test Case: 416 | Input/Output: [(-66 -14 -14 -57) -66]
Test Case: 417 | Input/Output: [(3 -73 54 -18) -73]
Test Case: 418 | Input/Output: [(-83 91 -21 -72) -83]
Test Case: 419 | Input/Output: [(-6 -49 22 -1) -49]
Test Case: 420 | Input/Output: [(-92 94 -59 92) -92]
Test Case: 421 | Input/Output: [(93 -45 -8 66) -45]
Test Case: 422 | Input/Output: [(30 46 43 -8) -8]
Test Case: 423 | Input/Output: [(-97 42 76 69) -97]
Test Case: 424 | Input/Output: [(84 78 -64 -91) -91]
Test Case: 425 | Input/Output: [(-90 11 45 -92) -92]
Test Case: 426 | Input/Output: [(80 70 21 -35) -35]
Test Case: 427 | Input/Output: [(2 49 10 92) 2]
Test Case: 428 | Input/Output: [(-12 14 47 55) -12]
Test Case: 429 | Input/Output: [(42 6 -5 5) -5]
Test Case: 430 | Input/Output: [(-52 -7 75 -18) -52]
Test Case: 431 | Input/Output: [(-7 83 66 -72) -72]
Test Case: 432 | Input/Output: [(-14 -58 30 -67) -67]
Test Case: 433 | Input/Output: [(-14 -98 82 69) -98]
Test Case: 434 | Input/Output: [(-86 20 -37 -42) -86]
Test Case: 435 | Input/Output: [(-78 25 -6 37) -78]
Test Case: 436 | Input/Output: [(-33 51 67 -46) -46]
Test Case: 437 | Input/Output: [(-66 -42 27 86) -66]
Test Case: 438 | Input/Output: [(71 55 13 -98) -98]
Test Case: 439 | Input/Output: [(-90 65 25 -47) -90]
Test Case: 440 | Input/Output: [(76 -53 -53 -60) -60]
Test Case: 441 | Input/Output: [(23 83 -66 71) -66]
Test Case: 442 | Input/Output: [(80 21 -20 -39) -39]
Test Case: 443 | Input/Output: [(27 -67 -18 -4) -67]
Test Case: 444 | Input/Output: [(43 52 -65 -16) -65]
Test Case: 445 | Input/Output: [(90 -50 77 -95) -95]
Test Case: 446 | Input/Output: [(78 -58 61 -66) -66]
Test Case: 447 | Input/Output: [(66 22 80 19) 19]
Test Case: 448 | Input/Output: [(31 -99 -25 74) -99]
Test Case: 449 | Input/Output: [(86 23 72 11) 11]
Test Case: 450 | Input/Output: [(89 -12 -94 -8) -94]
Test Case: 451 | Input/Output: [(-65 -10 65 61) -65]
Test Case: 452 | Input/Output: [(-66 -15 85 77) -66]
Test Case: 453 | Input/Output: [(-32 -59 0 -44) -59]
Test Case: 454 | Input/Output: [(10 52 -32 -3) -32]
Test Case: 455 | Input/Output: [(71 -72 91 -74) -74]
Test Case: 456 | Input/Output: [(-75 -11 -77 -46) -77]
Test Case: 457 | Input/Output: [(15 2 69 34) 2]
Test Case: 458 | Input/Output: [(-8 80 59 -81) -81]
Test Case: 459 | Input/Output: [(5 19 81 20) 5]
Test Case: 460 | Input/Output: [(-31 -78 38 -19) -78]
Test Case: 461 | Input/Output: [(20 74 43 29) 20]
Test Case: 462 | Input/Output: [(-83 41 4 -44) -83]
Test Case: 463 | Input/Output: [(-42 38 54 13) -42]
Test Case: 464 | Input/Output: [(-88 51 68 -55) -88]
Test Case: 465 | Input/Output: [(100 -90 73 -99) -99]
Test Case: 466 | Input/Output: [(-78 -68 1 32) -78]
Test Case: 467 | Input/Output: [(-87 -11 65 -73) -87]
Test Case: 468 | Input/Output: [(39 -92 -49 71) -92]
Test Case: 469 | Input/Output: [(-73 6 -20 -86) -86]
Test Case: 470 | Input/Output: [(-36 90 -13 17) -36]
Test Case: 471 | Input/Output: [(-99 72 37 67) -99]
Test Case: 472 | Input/Output: [(-93 25 -72 -17) -93]
Test Case: 473 | Input/Output: [(100 24 69 -17) -17]
Test Case: 474 | Input/Output: [(29 -14 13 -77) -77]
Test Case: 475 | Input/Output: [(74 -73 -64 -21) -73]
Test Case: 476 | Input/Output: [(-25 -59 46 3) -59]
Test Case: 477 | Input/Output: [(32 54 -97 36) -97]
Test Case: 478 | Input/Output: [(79 74 29 95) 29]
Test Case: 479 | Input/Output: [(-22 -44 -22 66) -44]
Test Case: 480 | Input/Output: [(-64 45 -36 95) -64]
Test Case: 481 | Input/Output: [(-80 -70 44 -100) -100]
Test Case: 482 | Input/Output: [(-55 -22 51 89) -55]
Test Case: 483 | Input/Output: [(62 -87 -17 -30) -87]
Test Case: 484 | Input/Output: [(-59 0 -19 17) -59]
Test Case: 485 | Input/Output: [(98 19 28 57) 19]
Test Case: 486 | Input/Output: [(-73 -2 1 -2) -73]
Test Case: 487 | Input/Output: [(54 -86 -55 -72) -86]
Test Case: 488 | Input/Output: [(39 -60 49 73) -60]
Test Case: 489 | Input/Output: [(-74 54 69 47) -74]
Test Case: 490 | Input/Output: [(42 -34 -17 -48) -48]
Test Case: 491 | Input/Output: [(-68 56 96 -45) -68]
Test Case: 492 | Input/Output: [(-74 6 -6 62) -74]
Test Case: 493 | Input/Output: [(-90 37 97 -28) -90]
Test Case: 494 | Input/Output: [(-15 -81 82 34) -81]
Test Case: 495 | Input/Output: [(10 13 29 46) 10]
Test Case: 496 | Input/Output: [(72 29 74 -42) -42]
Test Case: 497 | Input/Output: [(83 -66 -84 -85) -85]
Test Case: 498 | Input/Output: [(-26 37 55 73) -26]
Test Case: 499 | Input/Output: [(67 36 15 85) 15]
Test Case: 500 | Input/Output: [(-47 5 -29 -71) -71]
Test Case: 501 | Input/Output: [(-22 55 40 74) -22]
Test Case: 502 | Input/Output: [(13 68 4 -26) -26]
Test Case: 503 | Input/Output: [(-45 98 -57 -38) -57]
Test Case: 504 | Input/Output: [(31 -63 -5 88) -63]
Test Case: 505 | Input/Output: [(70 -10 35 -30) -30]
Test Case: 506 | Input/Output: [(94 16 -79 84) -79]
Test Case: 507 | Input/Output: [(96 -54 87 -96) -96]
Test Case: 508 | Input/Output: [(70 -69 38 28) -69]
Test Case: 509 | Input/Output: [(-60 76 -49 79) -60]
Test Case: 510 | Input/Output: [(-76 60 -70 47) -76]
Test Case: 511 | Input/Output: [(-24 -24 9 -33) -33]
Test Case: 512 | Input/Output: [(5 10 -14 53) -14]
Test Case: 513 | Input/Output: [(79 -69 71 -91) -91]
Test Case: 514 | Input/Output: [(-79 -86 -95 -32) -95]
Test Case: 515 | Input/Output: [(20 -35 -52 -30) -52]
Test Case: 516 | Input/Output: [(-64 52 -93 49) -93]
Test Case: 517 | Input/Output: [(87 30 -64 -64) -64]
Test Case: 518 | Input/Output: [(32 66 -85 -6) -85]
Test Case: 519 | Input/Output: [(83 14 -67 -41) -67]
Test Case: 520 | Input/Output: [(-30 -87 -6 71) -87]
Test Case: 521 | Input/Output: [(25 -15 -50 -62) -62]
Test Case: 522 | Input/Output: [(-6 -13 19 93) -13]
Test Case: 523 | Input/Output: [(100 -93 -77 -7) -93]
Test Case: 524 | Input/Output: [(77 14 -51 60) -51]
Test Case: 525 | Input/Output: [(20 -2 12 25) -2]
Test Case: 526 | Input/Output: [(4 -1 22 63) -1]
Test Case: 527 | Input/Output: [(-23 -31 27 -44) -44]
Test Case: 528 | Input/Output: [(9 -79 -99 -92) -99]
Test Case: 529 | Input/Output: [(46 -50 -11 -27) -50]
Test Case: 530 | Input/Output: [(98 -79 60 60) -79]
Test Case: 531 | Input/Output: [(-18 -36 39 60) -36]
Test Case: 532 | Input/Output: [(24 -96 33 68) -96]
Test Case: 533 | Input/Output: [(-21 -33 51 75) -33]
Test Case: 534 | Input/Output: [(-11 -11 -11 -100) -100]
Test Case: 535 | Input/Output: [(90 -97 -28 77) -97]
Test Case: 536 | Input/Output: [(-42 -89 -98 -70) -98]
Test Case: 537 | Input/Output: [(-20 -21 59 69) -21]
Test Case: 538 | Input/Output: [(-1 -29 83 -81) -81]
Test Case: 539 | Input/Output: [(95 -10 26 -14) -14]
Test Case: 540 | Input/Output: [(-68 -27 -64 24) -68]
Test Case: 541 | Input/Output: [(68 -78 58 -53) -78]
Test Case: 542 | Input/Output: [(-76 58 2 -97) -97]
Test Case: 543 | Input/Output: [(24 99 25 -87) -87]
Test Case: 544 | Input/Output: [(-24 -2 -64 78) -64]
Test Case: 545 | Input/Output: [(-40 35 -30 19) -40]
Test Case: 546 | Input/Output: [(-15 73 -42 7) -42]
Test Case: 547 | Input/Output: [(-27 -67 91 -14) -67]
Test Case: 548 | Input/Output: [(-45 17 -82 -20) -82]
Test Case: 549 | Input/Output: [(-49 32 -86 45) -86]
Test Case: 550 | Input/Output: [(33 69 -69 -66) -69]
Test Case: 551 | Input/Output: [(-7 62 86 -35) -35]
Test Case: 552 | Input/Output: [(-49 -88 13 -75) -88]
Test Case: 553 | Input/Output: [(36 90 -32 20) -32]
Test Case: 554 | Input/Output: [(61 16 -64 7) -64]
Test Case: 555 | Input/Output: [(-30 -49 -29 -61) -61]
Test Case: 556 | Input/Output: [(62 45 63 85) 45]
Test Case: 557 | Input/Output: [(-25 -77 73 -60) -77]
Test Case: 558 | Input/Output: [(16 65 -27 6) -27]
Test Case: 559 | Input/Output: [(-20 27 -15 36) -20]
Test Case: 560 | Input/Output: [(43 -67 30 56) -67]
Test Case: 561 | Input/Output: [(-42 58 63 -24) -42]
Test Case: 562 | Input/Output: [(23 -55 81 -42) -55]
Test Case: 563 | Input/Output: [(-44 97 11 52) -44]
Test Case: 564 | Input/Output: [(68 -1 47 -43) -43]
Test Case: 565 | Input/Output: [(-34 -51 59 1) -51]
Test Case: 566 | Input/Output: [(61 53 36 -7) -7]
Test Case: 567 | Input/Output: [(28 11 18 46) 11]
Test Case: 568 | Input/Output: [(-86 97 -30 -1) -86]
Test Case: 569 | Input/Output: [(69 -8 11 -10) -10]
Test Case: 570 | Input/Output: [(0 -11 -29 100) -29]
Test Case: 571 | Input/Output: [(-64 -92 81 -78) -92]
Test Case: 572 | Input/Output: [(-7 -60 10 -95) -95]
Test Case: 573 | Input/Output: [(-34 57 -26 7) -34]
Test Case: 574 | Input/Output: [(35 25 56 -91) -91]
Test Case: 575 | Input/Output: [(29 -23 11 -47) -47]
Test Case: 576 | Input/Output: [(22 -68 -38 9) -68]
Test Case: 577 | Input/Output: [(-33 84 53 82) -33]
Test Case: 578 | Input/Output: [(74 65 62 93) 62]
Test Case: 579 | Input/Output: [(32 -48 62 12) -48]
Test Case: 580 | Input/Output: [(-33 54 7 79) -33]
Test Case: 581 | Input/Output: [(69 -97 -28 -27) -97]
Test Case: 582 | Input/Output: [(67 -23 -85 23) -85]
Test Case: 583 | Input/Output: [(80 -26 -35 -26) -35]
Test Case: 584 | Input/Output: [(47 -45 -6 98) -45]
Test Case: 585 | Input/Output: [(-70 40 -72 -73) -73]
Test Case: 586 | Input/Output: [(29 -58 92 -97) -97]
Test Case: 587 | Input/Output: [(38 6 -15 -53) -53]
Test Case: 588 | Input/Output: [(-71 -75 33 -44) -75]
Test Case: 589 | Input/Output: [(-98 89 17 36) -98]
Test Case: 590 | Input/Output: [(88 -24 -88 61) -88]
Test Case: 591 | Input/Output: [(1 -60 -89 65) -89]
Test Case: 592 | Input/Output: [(-88 -1 4 47) -88]
Test Case: 593 | Input/Output: [(3 27 -27 50) -27]
Test Case: 594 | Input/Output: [(94 -33 31 40) -33]
Test Case: 595 | Input/Output: [(99 -42 65 -21) -42]
Test Case: 596 | Input/Output: [(33 28 5 88) 5]
Test Case: 597 | Input/Output: [(45 -91 -4 30) -91]
Test Case: 598 | Input/Output: [(-89 -8 43 -37) -89]
Test Case: 599 | Input/Output: [(-60 -71 14 72) -71]
Test Case: 600 | Input/Output: [(-2 57 -62 56) -62]
Test Case: 601 | Input/Output: [(-75 46 -70 1) -75]
Test Case: 602 | Input/Output: [(-48 63 -35 -35) -48]
Test Case: 603 | Input/Output: [(88 -68 60 21) -68]
Test Case: 604 | Input/Output: [(37 0 -1 74) -1]
Test Case: 605 | Input/Output: [(82 -69 42 -79) -79]
Test Case: 606 | Input/Output: [(97 3 21 50) 3]
Test Case: 607 | Input/Output: [(44 66 -65 -61) -65]
Test Case: 608 | Input/Output: [(-8 -60 72 88) -60]
Test Case: 609 | Input/Output: [(38 78 87 27) 27]
Test Case: 610 | Input/Output: [(4 -71 84 21) -71]
Test Case: 611 | Input/Output: [(-70 95 80 -38) -70]
Test Case: 612 | Input/Output: [(23 -94 23 91) -94]
Test Case: 613 | Input/Output: [(92 79 31 8) 8]
Test Case: 614 | Input/Output: [(-76 -52 -7 -52) -76]
Test Case: 615 | Input/Output: [(39 -41 50 -47) -47]
Test Case: 616 | Input/Output: [(22 41 -90 -14) -90]
Test Case: 617 | Input/Output: [(0 -45 -86 99) -86]
Test Case: 618 | Input/Output: [(-3 24 44 -80) -80]
Test Case: 619 | Input/Output: [(42 62 84 -12) -12]
Test Case: 620 | Input/Output: [(-22 21 -48 -80) -80]
Test Case: 621 | Input/Output: [(-4 21 -17 25) -17]
Test Case: 622 | Input/Output: [(34 17 -53 -22) -53]
Test Case: 623 | Input/Output: [(-67 -37 54 -72) -72]
Test Case: 624 | Input/Output: [(96 -46 54 -69) -69]
Test Case: 625 | Input/Output: [(61 -96 45 13) -96]
Test Case: 626 | Input/Output: [(10 -60 -81 -93) -93]
Test Case: 627 | Input/Output: [(-94 18 84 8) -94]
Test Case: 628 | Input/Output: [(-62 -90 -98 34) -98]
Test Case: 629 | Input/Output: [(34 49 -14 2) -14]
Test Case: 630 | Input/Output: [(45 -36 -58 77) -58]
Test Case: 631 | Input/Output: [(-21 61 -39 -97) -97]
Test Case: 632 | Input/Output: [(90 46 24 47) 24]
Test Case: 633 | Input/Output: [(-11 87 -27 5) -27]
Test Case: 634 | Input/Output: [(26 87 57 59) 26]
Test Case: 635 | Input/Output: [(-21 15 -98 -98) -98]
Test Case: 636 | Input/Output: [(-28 -88 -67 37) -88]
Test Case: 637 | Input/Output: [(97 96 48 -85) -85]
Test Case: 638 | Input/Output: [(-39 46 -2 3) -39]
Test Case: 639 | Input/Output: [(-36 -16 -16 49) -36]
Test Case: 640 | Input/Output: [(25 -65 -29 -21) -65]
Test Case: 641 | Input/Output: [(15 10 46 -45) -45]
Test Case: 642 | Input/Output: [(80 94 1 -12) -12]
Test Case: 643 | Input/Output: [(-16 -77 -85 -34) -85]
Test Case: 644 | Input/Output: [(53 -51 99 -99) -99]
Test Case: 645 | Input/Output: [(8 32 -8 49) -8]
Test Case: 646 | Input/Output: [(-63 20 -69 -80) -80]
Test Case: 647 | Input/Output: [(-13 -22 -84 -61) -84]
Test Case: 648 | Input/Output: [(-70 84 -30 8) -70]
Test Case: 649 | Input/Output: [(92 -48 28 51) -48]
Test Case: 650 | Input/Output: [(47 -82 -89 -54) -89]
Test Case: 651 | Input/Output: [(68 63 -91 -38) -91]
Test Case: 652 | Input/Output: [(93 -71 -5 -67) -71]
Test Case: 653 | Input/Output: [(9 -65 -98 -12) -98]
Test Case: 654 | Input/Output: [(5 52 35 -74) -74]
Test Case: 655 | Input/Output: [(-27 17 -2 -38) -38]
Test Case: 656 | Input/Output: [(-66 -85 11 45) -85]
Test Case: 657 | Input/Output: [(40 -11 43 49) -11]
Test Case: 658 | Input/Output: [(59 -65 70 54) -65]
Test Case: 659 | Input/Output: [(-88 -33 20 -34) -88]
Test Case: 660 | Input/Output: [(98 -7 -26 -63) -63]
Test Case: 661 | Input/Output: [(-83 -39 90 -82) -83]
Test Case: 662 | Input/Output: [(38 -39 -53 82) -53]
Test Case: 663 | Input/Output: [(-48 33 15 21) -48]
Test Case: 664 | Input/Output: [(6 88 -62 -27) -62]
Test Case: 665 | Input/Output: [(-42 9 16 12) -42]
Test Case: 666 | Input/Output: [(-62 8 -29 55) -62]
Test Case: 667 | Input/Output: [(88 -67 -90 -52) -90]
Test Case: 668 | Input/Output: [(52 -99 -1 -25) -99]
Test Case: 669 | Input/Output: [(-28 7 -66 -15) -66]
Test Case: 670 | Input/Output: [(-44 -12 99 73) -44]
Test Case: 671 | Input/Output: [(-66 -93 -66 21) -93]
Test Case: 672 | Input/Output: [(35 3 -20 91) -20]
Test Case: 673 | Input/Output: [(57 -92 92 -8) -92]
Test Case: 674 | Input/Output: [(-24 -29 76 -82) -82]
Test Case: 675 | Input/Output: [(-98 32 42 78) -98]
Test Case: 676 | Input/Output: [(-87 -5 -21 96) -87]
Test Case: 677 | Input/Output: [(-24 57 0 -31) -31]
Test Case: 678 | Input/Output: [(-69 -84 75 66) -84]
Test Case: 679 | Input/Output: [(5 -76 28 20) -76]
Test Case: 680 | Input/Output: [(-41 60 73 -58) -58]
Test Case: 681 | Input/Output: [(24 59 -41 -37) -41]
Test Case: 682 | Input/Output: [(-20 -29 2 31) -29]
Test Case: 683 | Input/Output: [(42 15 18 -39) -39]
Test Case: 684 | Input/Output: [(60 56 42 83) 42]
Test Case: 685 | Input/Output: [(52 -98 86 67) -98]
Test Case: 686 | Input/Output: [(-70 -55 68 -94) -94]
Test Case: 687 | Input/Output: [(9 -50 -31 79) -50]
Test Case: 688 | Input/Output: [(-39 66 -37 43) -39]
Test Case: 689 | Input/Output: [(-28 -41 -47 48) -47]
Test Case: 690 | Input/Output: [(-71 -75 42 58) -75]
Test Case: 691 | Input/Output: [(-81 -92 19 9) -92]
Test Case: 692 | Input/Output: [(-57 -17 7 -25) -57]
Test Case: 693 | Input/Output: [(11 -31 -71 53) -71]
Test Case: 694 | Input/Output: [(-41 20 18 58) -41]
Test Case: 695 | Input/Output: [(-52 65 -34 24) -52]
Test Case: 696 | Input/Output: [(-53 42 41 -95) -95]
Test Case: 697 | Input/Output: [(-79 -40 0 -37) -79]
Test Case: 698 | Input/Output: [(68 13 72 42) 13]
Test Case: 699 | Input/Output: [(35 -52 63 34) -52]
Test Case: 700 | Input/Output: [(14 62 -51 -14) -51]
Test Case: 701 | Input/Output: [(-60 65 -35 -35) -60]
Test Case: 702 | Input/Output: [(59 -86 -5 -78) -86]
Test Case: 703 | Input/Output: [(-89 -40 -87 25) -89]
Test Case: 704 | Input/Output: [(-22 99 -20 -73) -73]
Test Case: 705 | Input/Output: [(-81 -17 78 -35) -81]
Test Case: 706 | Input/Output: [(-2 -94 41 29) -94]
Test Case: 707 | Input/Output: [(-67 -80 63 27) -80]
Test Case: 708 | Input/Output: [(-47 -1 4 20) -47]
Test Case: 709 | Input/Output: [(26 67 23 99) 23]
Test Case: 710 | Input/Output: [(-43 -45 19 -58) -58]
Test Case: 711 | Input/Output: [(-8 -10 -38 19) -38]
Test Case: 712 | Input/Output: [(-7 -9 64 -69) -69]
Test Case: 713 | Input/Output: [(-51 76 -47 -63) -63]
Test Case: 714 | Input/Output: [(94 14 -71 -55) -71]
Test Case: 715 | Input/Output: [(61 -7 -42 -66) -66]
Test Case: 716 | Input/Output: [(91 90 24 89) 24]
Test Case: 717 | Input/Output: [(-82 11 48 -23) -82]
Test Case: 718 | Input/Output: [(-5 88 -70 -53) -70]
Test Case: 719 | Input/Output: [(64 64 -62 -80) -80]
Test Case: 720 | Input/Output: [(62 -55 33 -52) -55]
Test Case: 721 | Input/Output: [(69 -87 53 -3) -87]
Test Case: 722 | Input/Output: [(-15 41 -93 10) -93]
Test Case: 723 | Input/Output: [(-55 48 90 43) -55]
Test Case: 724 | Input/Output: [(55 -31 40 16) -31]
Test Case: 725 | Input/Output: [(-90 64 30 -15) -90]
Test Case: 726 | Input/Output: [(-52 -27 42 -6) -52]
Test Case: 727 | Input/Output: [(-49 20 66 -20) -49]
Test Case: 728 | Input/Output: [(83 -48 24 15) -48]
Test Case: 729 | Input/Output: [(-1 -46 -47 25) -47]
Test Case: 730 | Input/Output: [(-40 45 18 93) -40]
Test Case: 731 | Input/Output: [(63 -12 -54 -97) -97]
Test Case: 732 | Input/Output: [(-62 -43 62 74) -62]
Test Case: 733 | Input/Output: [(-94 69 -98 -5) -98]
Test Case: 734 | Input/Output: [(-97 -20 71 50) -97]
Test Case: 735 | Input/Output: [(18 88 76 -54) -54]
Test Case: 736 | Input/Output: [(-51 -43 73 82) -51]
Test Case: 737 | Input/Output: [(-58 63 31 61) -58]
Test Case: 738 | Input/Output: [(79 -64 -83 -32) -83]
Test Case: 739 | Input/Output: [(-40 -23 28 52) -40]
Test Case: 740 | Input/Output: [(18 17 -65 37) -65]
Test Case: 741 | Input/Output: [(75 42 -50 -86) -86]
Test Case: 742 | Input/Output: [(52 -53 30 61) -53]
Test Case: 743 | Input/Output: [(17 14 44 39) 14]
Test Case: 744 | Input/Output: [(-48 -26 -84 96) -84]
Test Case: 745 | Input/Output: [(56 -5 2 24) -5]
Test Case: 746 | Input/Output: [(27 81 -18 -85) -85]
Test Case: 747 | Input/Output: [(-54 71 -69 -3) -69]
Test Case: 748 | Input/Output: [(-67 70 83 31) -67]
Test Case: 749 | Input/Output: [(-82 -82 88 89) -82]
Test Case: 750 | Input/Output: [(42 -42 95 18) -42]
Test Case: 751 | Input/Output: [(54 -83 88 -80) -83]
Test Case: 752 | Input/Output: [(32 -54 72 -55) -55]
Test Case: 753 | Input/Output: [(-58 -76 -7 -18) -76]
Test Case: 754 | Input/Output: [(-28 -31 -45 -14) -45]
Test Case: 755 | Input/Output: [(-79 -1 64 -50) -79]
Test Case: 756 | Input/Output: [(38 31 -76 54) -76]
Test Case: 757 | Input/Output: [(78 64 -4 59) -4]
Test Case: 758 | Input/Output: [(18 22 -82 93) -82]
Test Case: 759 | Input/Output: [(-87 39 -67 6) -87]
Test Case: 760 | Input/Output: [(-70 -55 82 86) -70]
Test Case: 761 | Input/Output: [(-54 58 92 -26) -54]
Test Case: 762 | Input/Output: [(-39 -99 29 -44) -99]
Test Case: 763 | Input/Output: [(-1 -1 -51 -87) -87]
Test Case: 764 | Input/Output: [(-31 90 -64 -12) -64]
Test Case: 765 | Input/Output: [(-34 -95 -60 89) -95]
Test Case: 766 | Input/Output: [(69 -8 31 -76) -76]
Test Case: 767 | Input/Output: [(-49 32 -75 47) -75]
Test Case: 768 | Input/Output: [(-12 -84 -88 79) -88]
Test Case: 769 | Input/Output: [(-45 -6 5 -36) -45]
Test Case: 770 | Input/Output: [(-40 -15 18 96) -40]
Test Case: 771 | Input/Output: [(-31 -73 100 56) -73]
Test Case: 772 | Input/Output: [(26 95 -18 29) -18]
Test Case: 773 | Input/Output: [(55 -89 14 56) -89]
Test Case: 774 | Input/Output: [(-24 53 -100 69) -100]
Test Case: 775 | Input/Output: [(-49 15 -3 -72) -72]
Test Case: 776 | Input/Output: [(62 0 -88 29) -88]
Test Case: 777 | Input/Output: [(67 -26 -50 62) -50]
Test Case: 778 | Input/Output: [(-54 68 27 -97) -97]
Test Case: 779 | Input/Output: [(-94 85 -60 -21) -94]
Test Case: 780 | Input/Output: [(69 51 -49 -48) -49]
Test Case: 781 | Input/Output: [(-89 35 12 -51) -89]
Test Case: 782 | Input/Output: [(68 72 -20 -2) -20]
Test Case: 783 | Input/Output: [(48 -21 0 51) -21]
Test Case: 784 | Input/Output: [(7 -58 -53 -89) -89]
Test Case: 785 | Input/Output: [(-61 -20 -44 -86) -86]
Test Case: 786 | Input/Output: [(78 -56 98 -93) -93]
Test Case: 787 | Input/Output: [(32 15 84 -64) -64]
Test Case: 788 | Input/Output: [(-42 29 -76 10) -76]
Test Case: 789 | Input/Output: [(64 40 3 73) 3]
Test Case: 790 | Input/Output: [(-42 -70 8 -81) -81]
Test Case: 791 | Input/Output: [(67 93 -85 6) -85]
Test Case: 792 | Input/Output: [(-9 -68 -29 -4) -68]
Test Case: 793 | Input/Output: [(-22 59 17 18) -22]
Test Case: 794 | Input/Output: [(-96 -76 -11 -25) -96]
Test Case: 795 | Input/Output: [(-5 97 -11 70) -11]
Test Case: 796 | Input/Output: [(-50 81 13 -47) -50]
Test Case: 797 | Input/Output: [(96 61 -54 85) -54]
Test Case: 798 | Input/Output: [(-6 25 -41 26) -41]
Test Case: 799 | Input/Output: [(-37 20 -22 -67) -67]
Test Case: 800 | Input/Output: [(42 -82 -55 30) -82]
Test Case: 801 | Input/Output: [(-11 -48 -12 2) -48]
Test Case: 802 | Input/Output: [(-1 8 -80 -3) -80]
Test Case: 803 | Input/Output: [(-78 -66 23 -96) -96]
Test Case: 804 | Input/Output: [(85 95 -96 23) -96]
Test Case: 805 | Input/Output: [(55 -91 2 51) -91]
Test Case: 806 | Input/Output: [(-63 44 -74 -22) -74]
Test Case: 807 | Input/Output: [(50 78 -100 -94) -100]
Test Case: 808 | Input/Output: [(-13 98 -45 -57) -57]
Test Case: 809 | Input/Output: [(98 -58 43 -52) -58]
Test Case: 810 | Input/Output: [(37 42 -13 91) -13]
Test Case: 811 | Input/Output: [(-83 88 52 -39) -83]
Test Case: 812 | Input/Output: [(-56 -14 -76 -88) -88]
Test Case: 813 | Input/Output: [(69 -89 -95 -28) -95]
Test Case: 814 | Input/Output: [(24 -18 -8 1) -18]
Test Case: 815 | Input/Output: [(10 37 32 98) 10]
Test Case: 816 | Input/Output: [(-59 1 -7 -80) -80]
Test Case: 817 | Input/Output: [(-39 49 -93 69) -93]
Test Case: 818 | Input/Output: [(97 45 -60 81) -60]
Test Case: 819 | Input/Output: [(-11 -82 -25 -64) -82]
Test Case: 820 | Input/Output: [(-4 -72 -88 -6) -88]
Test Case: 821 | Input/Output: [(61 -73 -69 -18) -73]
Test Case: 822 | Input/Output: [(-100 90 -25 -16) -100]
Test Case: 823 | Input/Output: [(-59 -15 -25 -78) -78]
Test Case: 824 | Input/Output: [(82 -13 67 -37) -37]
Test Case: 825 | Input/Output: [(-69 -25 -8 26) -69]
Test Case: 826 | Input/Output: [(-32 79 67 5) -32]
Test Case: 827 | Input/Output: [(-89 21 -85 -37) -89]
Test Case: 828 | Input/Output: [(-95 -43 -30 64) -95]
Test Case: 829 | Input/Output: [(-29 -61 -3 -88) -88]
Test Case: 830 | Input/Output: [(85 45 -97 -25) -97]
Test Case: 831 | Input/Output: [(52 -7 -63 -27) -63]
Test Case: 832 | Input/Output: [(-87 57 22 98) -87]
Test Case: 833 | Input/Output: [(27 -64 -75 85) -75]
Test Case: 834 | Input/Output: [(56 -30 -3 100) -30]
Test Case: 835 | Input/Output: [(16 85 9 -22) -22]
Test Case: 836 | Input/Output: [(-86 -59 -75 -32) -86]
Test Case: 837 | Input/Output: [(-41 54 81 14) -41]
Test Case: 838 | Input/Output: [(3 -79 -67 69) -79]
Test Case: 839 | Input/Output: [(53 -16 8 -64) -64]
Test Case: 840 | Input/Output: [(-46 -18 -71 -66) -71]
Test Case: 841 | Input/Output: [(93 19 71 -33) -33]
Test Case: 842 | Input/Output: [(72 -5 -2 -22) -22]
Test Case: 843 | Input/Output: [(-41 73 -46 16) -46]
Test Case: 844 | Input/Output: [(-37 -86 4 -47) -86]
Test Case: 845 | Input/Output: [(6 42 -3 -56) -56]
Test Case: 846 | Input/Output: [(17 3 42 81) 3]
Test Case: 847 | Input/Output: [(-1 -66 87 -96) -96]
Test Case: 848 | Input/Output: [(10 -49 29 -14) -49]
Test Case: 849 | Input/Output: [(81 92 -66 -85) -85]
Test Case: 850 | Input/Output: [(-66 21 -44 -22) -66]
Test Case: 851 | Input/Output: [(-99 -81 -36 27) -99]
Test Case: 852 | Input/Output: [(-21 13 -90 -71) -90]
Test Case: 853 | Input/Output: [(24 -89 3 -26) -89]
Test Case: 854 | Input/Output: [(-55 -93 -39 94) -93]
Test Case: 855 | Input/Output: [(91 -75 44 -66) -75]
Test Case: 856 | Input/Output: [(-20 93 30 69) -20]
Test Case: 857 | Input/Output: [(-35 35 39 -8) -35]
Test Case: 858 | Input/Output: [(35 -15 47 89) -15]
Test Case: 859 | Input/Output: [(-16 -33 -84 -10) -84]
Test Case: 860 | Input/Output: [(-66 51 -89 77) -89]
Test Case: 861 | Input/Output: [(84 31 72 -13) -13]
Test Case: 862 | Input/Output: [(-1 41 3 -98) -98]
Test Case: 863 | Input/Output: [(-21 -75 100 63) -75]
Test Case: 864 | Input/Output: [(59 -76 52 17) -76]
Test Case: 865 | Input/Output: [(4 -42 81 -34) -42]
Test Case: 866 | Input/Output: [(11 6 -56 5) -56]
Test Case: 867 | Input/Output: [(35 71 -9 -55) -55]
Test Case: 868 | Input/Output: [(-26 44 -95 -76) -95]
Test Case: 869 | Input/Output: [(-75 -14 -46 74) -75]
Test Case: 870 | Input/Output: [(26 67 52 60) 26]
Test Case: 871 | Input/Output: [(-68 -50 -47 93) -68]
Test Case: 872 | Input/Output: [(-74 97 -93 -84) -93]
Test Case: 873 | Input/Output: [(21 -12 6 99) -12]
Test Case: 874 | Input/Output: [(26 -24 -40 64) -40]
Test Case: 875 | Input/Output: [(-18 50 87 -77) -77]
Test Case: 876 | Input/Output: [(56 -21 13 28) -21]
Test Case: 877 | Input/Output: [(24 9 84 -44) -44]
Test Case: 878 | Input/Output: [(73 -3 -23 -3) -23]
Test Case: 879 | Input/Output: [(-72 -68 -16 93) -72]
Test Case: 880 | Input/Output: [(-73 -36 53 -24) -73]
Test Case: 881 | Input/Output: [(-25 -16 81 -63) -63]
Test Case: 882 | Input/Output: [(-12 45 -53 46) -53]
Test Case: 883 | Input/Output: [(-55 -20 -47 -9) -55]
Test Case: 884 | Input/Output: [(-8 46 99 24) -8]
Test Case: 885 | Input/Output: [(-17 -20 -75 89) -75]
Test Case: 886 | Input/Output: [(14 48 -72 43) -72]
Test Case: 887 | Input/Output: [(-11 73 -37 -56) -56]
Test Case: 888 | Input/Output: [(6 36 93 85) 6]
Test Case: 889 | Input/Output: [(-98 44 -7 -46) -98]
Test Case: 890 | Input/Output: [(45 -16 78 40) -16]
Test Case: 891 | Input/Output: [(83 -50 19 -53) -53]
Test Case: 892 | Input/Output: [(-26 -7 94 4) -26]
Test Case: 893 | Input/Output: [(-23 -56 -30 -48) -56]
Test Case: 894 | Input/Output: [(65 48 79 20) 20]
Test Case: 895 | Input/Output: [(68 -22 26 14) -22]
Test Case: 896 | Input/Output: [(53 -85 -99 41) -99]
Test Case: 897 | Input/Output: [(-15 -99 -27 -50) -99]
Test Case: 898 | Input/Output: [(-58 -71 -3 -65) -71]
Test Case: 899 | Input/Output: [(-73 -78 74 66) -78]
Test Case: 900 | Input/Output: [(-71 -19 -8 83) -71]
Test Case: 901 | Input/Output: [(-97 25 39 -83) -97]
Test Case: 902 | Input/Output: [(-87 67 48 -10) -87]
Test Case: 903 | Input/Output: [(-70 -19 -2 -64) -70]
Test Case: 904 | Input/Output: [(-5 -54 41 46) -54]
Test Case: 905 | Input/Output: [(50 85 91 33) 33]
Test Case: 906 | Input/Output: [(-56 27 -59 -24) -59]
Test Case: 907 | Input/Output: [(31 29 -69 -89) -89]
Test Case: 908 | Input/Output: [(-9 -85 -74 18) -85]
Test Case: 909 | Input/Output: [(85 -82 65 53) -82]
Test Case: 910 | Input/Output: [(28 31 -61 -84) -84]
Test Case: 911 | Input/Output: [(72 -98 5 -90) -98]
Test Case: 912 | Input/Output: [(-53 -8 -65 2) -65]
Test Case: 913 | Input/Output: [(-92 -78 39 -4) -92]
Test Case: 914 | Input/Output: [(36 -94 50 -29) -94]
Test Case: 915 | Input/Output: [(65 -50 -87 -91) -91]
Test Case: 916 | Input/Output: [(-5 1 -7 -36) -36]
Test Case: 917 | Input/Output: [(36 22 30 -96) -96]
Test Case: 918 | Input/Output: [(4 -73 34 -55) -73]
Test Case: 919 | Input/Output: [(48 -39 -47 49) -47]
Test Case: 920 | Input/Output: [(100 -14 -36 -4) -36]
Test Case: 921 | Input/Output: [(55 -88 31 -85) -88]
Test Case: 922 | Input/Output: [(-61 -61 -19 66) -61]
Test Case: 923 | Input/Output: [(28 -97 53 70) -97]
Test Case: 924 | Input/Output: [(-70 -13 60 -80) -80]
Test Case: 925 | Input/Output: [(-36 -91 3 -46) -91]
Test Case: 926 | Input/Output: [(-45 66 14 27) -45]
Test Case: 927 | Input/Output: [(-1 91 -44 -91) -91]
Test Case: 928 | Input/Output: [(-12 -2 14 -18) -18]
Test Case: 929 | Input/Output: [(30 -68 -44 -32) -68]
Test Case: 930 | Input/Output: [(40 -21 -61 84) -61]
Test Case: 931 | Input/Output: [(-93 81 -96 11) -96]
Test Case: 932 | Input/Output: [(20 60 8 34) 8]
Test Case: 933 | Input/Output: [(-71 63 -51 73) -71]
Test Case: 934 | Input/Output: [(8 21 -63 -2) -63]
Test Case: 935 | Input/Output: [(-33 -43 52 -72) -72]
Test Case: 936 | Input/Output: [(49 -63 83 -29) -63]
Test Case: 937 | Input/Output: [(32 -2 42 88) -2]
Test Case: 938 | Input/Output: [(45 86 -61 -88) -88]
Test Case: 939 | Input/Output: [(-13 -52 76 66) -52]
Test Case: 940 | Input/Output: [(-8 92 -90 8) -90]
Test Case: 941 | Input/Output: [(-31 18 34 54) -31]
Test Case: 942 | Input/Output: [(-35 88 45 94) -35]
Test Case: 943 | Input/Output: [(-8 -9 -41 -91) -91]
Test Case: 944 | Input/Output: [(-74 -99 79 -84) -99]
Test Case: 945 | Input/Output: [(45 -31 -54 -7) -54]
Test Case: 946 | Input/Output: [(50 79 -48 17) -48]
Test Case: 947 | Input/Output: [(-61 -60 -61 25) -61]
Test Case: 948 | Input/Output: [(-18 69 70 -18) -18]
Test Case: 949 | Input/Output: [(-19 46 70 -70) -70]
Test Case: 950 | Input/Output: [(-61 -92 72 73) -92]
Test Case: 951 | Input/Output: [(-27 -95 -69 36) -95]
Test Case: 952 | Input/Output: [(51 -47 60 70) -47]
Test Case: 953 | Input/Output: [(-46 75 65 -25) -46]
Test Case: 954 | Input/Output: [(-96 -36 -37 -39) -96]
Test Case: 955 | Input/Output: [(-84 13 16 -15) -84]
Test Case: 956 | Input/Output: [(-19 20 11 78) -19]
Test Case: 957 | Input/Output: [(34 45 -80 15) -80]
Test Case: 958 | Input/Output: [(-83 24 20 -85) -85]
Test Case: 959 | Input/Output: [(-35 31 -50 -35) -50]
Test Case: 960 | Input/Output: [(-94 -98 -70 -3) -98]
Test Case: 961 | Input/Output: [(-33 -35 -81 50) -81]
Test Case: 962 | Input/Output: [(-80 -74 66 -39) -80]
Test Case: 963 | Input/Output: [(-22 97 -31 42) -31]
Test Case: 964 | Input/Output: [(-8 98 -11 61) -11]
Test Case: 965 | Input/Output: [(-38 32 -93 45) -93]
Test Case: 966 | Input/Output: [(31 53 57 23) 23]
Test Case: 967 | Input/Output: [(-84 -3 -30 39) -84]
Test Case: 968 | Input/Output: [(-67 -28 -17 39) -67]
Test Case: 969 | Input/Output: [(-34 88 -79 -18) -79]
Test Case: 970 | Input/Output: [(-40 -99 -59 -98) -99]
Test Case: 971 | Input/Output: [(16 -74 -88 -29) -88]
Test Case: 972 | Input/Output: [(12 -29 88 -90) -90]
Test Case: 973 | Input/Output: [(-27 55 -58 37) -58]
Test Case: 974 | Input/Output: [(-75 -62 77 61) -75]
Test Case: 975 | Input/Output: [(-18 -91 1 48) -91]
Test Case: 976 | Input/Output: [(-28 65 -79 -32) -79]
Test Case: 977 | Input/Output: [(90 -24 0 77) -24]
Test Case: 978 | Input/Output: [(62 -60 72 29) -60]
Test Case: 979 | Input/Output: [(58 -13 81 88) -13]
Test Case: 980 | Input/Output: [(-65 -51 92 56) -65]
Test Case: 981 | Input/Output: [(-75 -12 -26 72) -75]
Test Case: 982 | Input/Output: [(2 39 57 -89) -89]
Test Case: 983 | Input/Output: [(-65 44 -38 -60) -65]
Test Case: 984 | Input/Output: [(-85 -66 -90 -96) -96]
Test Case: 985 | Input/Output: [(82 5 -45 -71) -71]
Test Case: 986 | Input/Output: [(-39 -32 11 59) -39]
Test Case: 987 | Input/Output: [(47 2 -56 -96) -96]
Test Case: 988 | Input/Output: [(64 58 -50 50) -50]
Test Case: 989 | Input/Output: [(-84 77 -19 64) -84]
Test Case: 990 | Input/Output: [(-41 11 42 72) -41]
Test Case: 991 | Input/Output: [(97 -46 -14 -79) -79]
Test Case: 992 | Input/Output: [(0 80 0 12) 0]
Test Case: 993 | Input/Output: [(57 98 24 -64) -64]
Test Case: 994 | Input/Output: [(10 -77 -76 -31) -77]
Test Case: 995 | Input/Output: [(6 79 -97 -79) -97]
Test Case: 996 | Input/Output: [(56 -67 99 -21) -67]
Test Case: 997 | Input/Output: [(-10 76 -16 -45) -45]
Test Case: 998 | Input/Output: [(-52 0 -64 -27) -64]
Test Case: 999 | Input/Output: [(98 84 48 84) 48]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -21 -62 -48 -38 -114 104 33 28 -26 64 -82 26 12 -24 -39 27
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[36 60 60 60] 36] [[65 58 58 58] 58] [[52 52 -41 52] -41] [[54 54 54 18] 18] [[-72 37 37 37] -72] [[1 1 1 -66] -66] [[90 -32 90 90] -32] [[-30 -85 -85 -85] -85] [[-52 -52 -47 -52] -52] [[1 79 1 1] 1] [(-75 -75 -75 -75) -75] [(-77 -77 -77 -77) -77] [(-85 -85 -85 -85) -85] [(60 60 60 60) 60] [(23 23 23 23) 23] [(26 39 69 57) 26] [(95 18 2 11) 2] [(30 33 26 42) 26] [(34 50 77 44) 34] [(92 78 95 54) 54] [(21 49 97 30) 21] [(49 72 47 31) 31] [(49 92 38 6) 6] [(3 33 62 53) 3] [(76 86 72 49) 49] [(76 3 0 86) 0] [(84 77 76 49) 49] [(30 63 31 71) 30] [(82 62 50 32) 32] [(83 73 83 5) 5] [(75 67 21 86) 21] [(70 71 88 64) 64] [(75 34 54 71) 34] [(76 29 50 83) 29] [(22 35 95 84) 22] [(-46 28 -80 34) -80] [(-92 23 -51 96) -92] [(-17 -42 86 91) -42] [(-4 -33 100 -60) -60] [(25 49 -55 -12) -55] [(-54 -45 -33 63) -54] [(-37 -58 2 46) -58] [(-65 -75 -19 -62) -75] [(73 -36 94 71) -36] [(65 88 26 46) 26] [(71 -82 64 6) -82] [(68 -30 53 -88) -88] [(83 70 30 32) 30] [(-10 81 -14 -30) -30] [(1 64 -51 52) -51] [(94 -1 -100 18) -100] [(47 2 46 9) 2] [(47 81 -79 -33) -79] [(-85 44 24 -46) -85] [(76 33 -10 -31) -31] [(-22 -89 -38 67) -89] [(97 50 41 68) 41] [(-69 32 19 -6) -69] [(14 40 32 -30) -30] [(11 -83 97 -34) -83] [(-33 16 -60 -35) -60] [(-65 81 -76 -23) -76] [(85 -52 79 29) -52] [(-35 -80 -16 -81) -81] [(-40 -48 -71 -70) -71] [(56 -70 -65 25) -70] [(55 61 69 -68) -68] [(66 -16 23 63) -16] [(-49 91 -97 18) -97] [(25 76 -23 73) -23] [(-9 -17 26 -3) -17] [(-99 -24 94 4) -99] [(-34 46 -94 95) -94] [(-47 -46 -32 35) -47] [(-57 37 44 -95) -95] [(47 86 -11 -65) -65] [(53 20 -49 87) -49] [(4 -1 71 90) -1] [(42 12 39 -90) -90] [(-44 13 -44 49) -44] [(-79 -95 -91 6) -95] [(73 -82 62 24) -82] [(24 -59 -63 97) -63] [(-27 -91 35 68) -91] [(100 24 -96 -17) -96] [(97 22 -94 -38) -94] [(-99 -69 -8 -43) -99] [(99 79 81 6) 6] [(-66 85 -41 83) -66] [(53 -54 34 -61) -61] [(7 -33 71 0) -33] [(83 -41 -59 -96) -96] [(-24 -7 53 -87) -87] [(61 -55 21 -77) -77] [(-46 -72 -57 -91) -91])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 765
Test mean error for best: 0.76500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 36                  | Program output:                    
Correct output: 58                  | Program output:                    
Correct output: -41                 | Program output:                    
Correct output: 18                  | Program output:                    
Correct output: -72                 | Program output:                    
Correct output: -66                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output:                    
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output:                    
Correct output: 23                  | Program output:                    
Correct output: 26                  | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: 26                  | Program output:                    
Correct output: 34                  | Program output:                    
Correct output: 54                  | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 31                  | Program output:                    
Correct output: 6                   | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 49                  | Program output:                    
Correct output: 0                   | Program output:                    
Correct output: 49                  | Program output:                    
Correct output: 30                  | Program output:                    
Correct output: 32                  | Program output:                    
Correct output: 5                   | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 64                  | Program output:                    
Correct output: 34                  | Program output:                    
Correct output: 29                  | Program output:                    
Correct output: 22                  | Program output:                    
Correct output: -80                 | Program output:                    
Correct output: -92                 | Program output:                    
Correct output: -42                 | Program output: -42                
Correct output: -60                 | Program output: -33                
Correct output: -55                 | Program output:                    
Correct output: -54                 | Program output: -45                
Correct output: -58                 | Program output: -58                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: -36                
Correct output: 26                  | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -30                
Correct output: 30                  | Program output:                    
Correct output: -30                 | Program output:                    
Correct output: -51                 | Program output:                    
Correct output: -100                | Program output: -1                 
Correct output: 2                   | Program output: 2                  
Correct output: -79                 | Program output:                    
Correct output: -85                 | Program output:                    
Correct output: -31                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: 41                  | Program output:                    
Correct output: -69                 | Program output:                    
Correct output: -30                 | Program output:                    
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -80                
Correct output: -71                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output:                    
Correct output: -16                 | Program output: -16                
Correct output: -97                 | Program output:                    
Correct output: -23                 | Program output:                    
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -24                
Correct output: -94                 | Program output:                    
Correct output: -47                 | Program output: -46                
Correct output: -95                 | Program output:                    
Correct output: -65                 | Program output:                    
Correct output: -49                 | Program output:                    
Correct output: -1                  | Program output: -1                 
Correct output: -90                 | Program output:                    
Correct output: -44                 | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -59                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output:                    
Correct output: -94                 | Program output:                    
Correct output: -99                 | Program output: -69                
Correct output: 6                   | Program output:                    
Correct output: -66                 | Program output:                    
Correct output: -61                 | Program output: -54                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -41                
Correct output: -87                 | Program output: -7                 
Correct output: -77                 | Program output: -55                
Correct output: -91                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_468} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub})
Lexicase best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty integer_div exec_rot (tag_integer_468 in2 integer_shove) (exec_if (exec_k_when_autoconstructing () (integer_dup boolean_yankdup) exec_yank print_integer integer_dup_times exec_do*while (boolean_or exec_noop integer_pop exec_while (exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop integer_gt integer_lte exec_yankdup integer_yankdup) exec_k_when_autoconstructing (exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush exec_dup_times (exec_if (integer_eq in4 boolean_shove in4 boolean_pop integer_lte integer_shove integer_sub) ())) () ()) () ()) () ()) ())) ()) ())
Lexicase best errors: [1 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 86
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_468} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub})
Zero cases best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty integer_div exec_rot (tag_integer_468 in2 integer_shove) (exec_if (exec_k_when_autoconstructing () (integer_dup boolean_yankdup) exec_yank print_integer integer_dup_times exec_do*while (boolean_or exec_noop integer_pop exec_while (exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop integer_gt integer_lte exec_yankdup integer_yankdup) exec_k_when_autoconstructing (exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush exec_dup_times (exec_if (integer_eq in4 boolean_shove in4 boolean_pop integer_lte integer_shove integer_sub) ())) () ()) () ()) () ()) ())) ()) ())
Zero cases best errors: [1 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 86
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 8 1000 1 1 15 1 8 1 1)
Population mean number of elite cases: 1.04
Count of perfect (error zero) individuals by case: (7 8 0 1 1 15 1 8 1 1)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_468} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub})
Best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty integer_div exec_rot (tag_integer_468 in2 integer_shove) (exec_if (exec_k_when_autoconstructing () (integer_dup boolean_yankdup) exec_yank print_integer integer_dup_times exec_do*while (boolean_or exec_noop integer_pop exec_while (exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop integer_gt integer_lte exec_yankdup integer_yankdup) exec_k_when_autoconstructing (exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush exec_dup_times (exec_if (integer_eq in4 boolean_shove in4 boolean_pop integer_lte integer_shove integer_sub) ())) () ()) () ()) () ()) ())) ()) ())
Errors: [1 1 1 0 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 59
Size: 86
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 9.957
Median total errors in population: 10
Error averages by case: (0.993 0.992 1.0 0.999 0.999 0.985 0.999 0.992 0.999 0.999)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 51.47
Average program size in population (points): 70.696
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 491986
--- Timings ---
Current time: 1559314724415 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.7 seconds, 27.4%
Fitness Testing:      1.8 seconds, 68.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 65                 
Correct output: -41                 | Program output: 52                 
Correct output: 18                  | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 26                  | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 54                  | Program output: 92                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 49                 
Correct output: 6                   | Program output: 49                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 76                 
Correct output: 0                   | Program output: 76                 
Correct output: 49                  | Program output: 84                 
Correct output: 30                  | Program output: 30                 
Correct output: 32                  | Program output: 82                 
Correct output: 5                   | Program output: 83                 
Correct output: 21                  | Program output: 75                 
Correct output: 64                  | Program output: 70                 
Correct output: 34                  | Program output: 75                 
Correct output: 29                  | Program output: 76                 
Correct output: 22                  | Program output: 22                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -60                 | Program output: -33                
Correct output: -55                 | Program output: 25                 
Correct output: -54                 | Program output: -45                
Correct output: -58                 | Program output: -58                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: -36                
Correct output: 26                  | Program output: 65                 
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -30                
Correct output: 30                  | Program output: 83                 
Correct output: -30                 | Program output: -10                
Correct output: -51                 | Program output: 1                  
Correct output: -100                | Program output: -1                 
Correct output: 2                   | Program output: 2                  
Correct output: -79                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -31                 | Program output: 76                 
Correct output: -89                 | Program output: -89                
Correct output: 41                  | Program output: 97                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: 14                 
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -33                
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -80                
Correct output: -71                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 55                 
Correct output: -16                 | Program output: -16                
Correct output: -97                 | Program output: -49                
Correct output: -23                 | Program output: 25                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -24                
Correct output: -94                 | Program output: -34                
Correct output: -47                 | Program output: -46                
Correct output: -95                 | Program output: -57                
Correct output: -65                 | Program output: 47                 
Correct output: -49                 | Program output: 53                 
Correct output: -1                  | Program output: -1                 
Correct output: -90                 | Program output: 42                 
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -59                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: 100                
Correct output: -94                 | Program output: 97                 
Correct output: -99                 | Program output: -69                
Correct output: 6                   | Program output: 99                 
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -54                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -41                
Correct output: -87                 | Program output: -7                 
Correct output: -77                 | Program output: -55                
Correct output: -91                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_468} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty integer_div exec_rot (tag_integer_468 in2 integer_shove) (exec_if (exec_k_when_autoconstructing () (integer_dup boolean_yankdup) exec_yank print_integer integer_dup_times exec_do*while (boolean_or exec_noop integer_pop exec_while (exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop integer_gt integer_lte exec_yankdup integer_yankdup) exec_k_when_autoconstructing (exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush boolean_yank exec_do*range (integer_pop) boolean_dup_items exec_do*while (boolean_rot) in1) () (boolean_yankdup)) () ()) () ()) ())) ()) ())
Lexicase best errors: [1 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_468} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty integer_div exec_rot (tag_integer_468 in2 integer_shove) (exec_if (exec_k_when_autoconstructing () (integer_dup boolean_yankdup) exec_yank print_integer integer_dup_times exec_do*while (boolean_or exec_noop integer_pop exec_while (exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop integer_gt integer_lte exec_yankdup integer_yankdup) exec_k_when_autoconstructing (exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush boolean_yank exec_do*range (integer_pop) boolean_dup_items exec_do*while (boolean_rot) in1) () (boolean_yankdup)) () ()) () ()) ())) ()) ())
Zero cases best errors: [1 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (245 370 63 781 370 245 370 370 274 142)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (245 370 63 781 370 245 370 370 274 142)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_468} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction boolean_yankdup})
Best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty integer_div exec_rot (tag_integer_468 in2 integer_shove) (exec_if (exec_k_when_autoconstructing () (integer_dup boolean_yankdup) exec_yank print_integer integer_dup_times exec_do*while (boolean_or exec_noop integer_pop exec_while (exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop integer_gt integer_lte exec_yankdup integer_yankdup) exec_k_when_autoconstructing (exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush boolean_yank exec_do*range (integer_pop) boolean_dup_items exec_do*while (boolean_rot) in1) () (boolean_yankdup)) () ()) () ()) ())) ()) ())
Errors: [1 0 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 57
Size: 83
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.77
Median total errors in population: 6
Error averages by case: (0.755 0.63 0.937 0.219 0.63 0.755 0.63 0.63 0.726 0.858)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.426
Average program size in population (points): 86.653
Average percent parens in population: 0.283
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.498
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1078729
--- Timings ---
Current time: 1559314727268 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 43.1%
Fitness Testing:      2.6 seconds, 47.3%
Report:               0.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 60                 
Correct output: 58                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: 18                  | Program output: 18                 
Correct output: -72                 | Program output: 37                 
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 34                  | Program output: 44                 
Correct output: 54                  | Program output: 54                 
Correct output: 21                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 30                  | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 64                  | Program output: 64                 
Correct output: 34                  | Program output: 54                 
Correct output: 29                  | Program output: 50                 
Correct output: 22                  | Program output: 84                 
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -51                
Correct output: -42                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -33                
Correct output: -58                 | Program output: 2                  
Correct output: -75                 | Program output: -62                
Correct output: -36                 | Program output: 71                 
Correct output: 26                  | Program output: 26                 
Correct output: -82                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 30                  | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: 2                   | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -46                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -38                
Correct output: 41                  | Program output: 41                 
Correct output: -69                 | Program output: -6                 
Correct output: -30                 | Program output: -30                
Correct output: -83                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 29                 
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -70                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -17                 | Program output: -3                 
Correct output: -99                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -1                  | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -91                
Correct output: -82                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -43                
Correct output: 6                   | Program output: 6                  
Correct output: -66                 | Program output: -41                
Correct output: -61                 | Program output: -61                
Correct output: -33                 | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Lexicase best errors: [0 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Zero cases best errors: [0 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (441 1000 912 443 440 343 452 442 442 440)
Population mean number of elite cases: 5.36
Count of perfect (error zero) individuals by case: (441 0 912 443 440 343 452 442 442 440)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or})
Best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (exec_dup_items boolean_or)) ()) () ())
Errors: [0 1 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 46
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 5.645
Median total errors in population: 7
Error averages by case: (0.559 1.0 0.088 0.557 0.56 0.657 0.548 0.558 0.558 0.56)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.918
Average program size in population (points): 64.468
Average percent parens in population: 0.299
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.03
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 284
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 288
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1458980
--- Timings ---
Current time: 1559314730125 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 52.8%
Fitness Testing:      3.1 seconds, 36.3%
Report:               0.8 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 60                 
Correct output: 58                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: 18                  | Program output: 18                 
Correct output: -72                 | Program output: 37                 
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 34                  | Program output: 44                 
Correct output: 54                  | Program output: 54                 
Correct output: 21                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 30                  | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 64                  | Program output: 64                 
Correct output: 34                  | Program output: 54                 
Correct output: 29                  | Program output: 50                 
Correct output: 22                  | Program output: 84                 
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -51                
Correct output: -42                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -33                
Correct output: -58                 | Program output: 2                  
Correct output: -75                 | Program output: -62                
Correct output: -36                 | Program output: 71                 
Correct output: 26                  | Program output: 26                 
Correct output: -82                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 30                  | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: 2                   | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -46                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -38                
Correct output: 41                  | Program output: 41                 
Correct output: -69                 | Program output: -6                 
Correct output: -30                 | Program output: -30                
Correct output: -83                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 29                 
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -70                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -17                 | Program output: -3                 
Correct output: -99                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -1                  | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -91                
Correct output: -82                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -43                
Correct output: 6                   | Program output: 6                  
Correct output: -66                 | Program output: -41                
Correct output: -61                 | Program output: -61                
Correct output: -33                 | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Lexicase best errors: [0 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Zero cases best errors: [0 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (698 711 710 220 861 220 711 220 940 711)
Population mean number of elite cases: 6.00
Count of perfect (error zero) individuals by case: (698 711 710 220 861 220 711 220 940 711)
Population mean number of perfect (error zero) cases: 6.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Errors: [0 0 0 1 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 46
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 3.998
Median total errors in population: 3
Error averages by case: (0.302 0.289 0.29 0.78 0.139 0.78 0.289 0.78 0.06 0.289)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.133
Average program size in population (points): 55.317
Average percent parens in population: 0.288
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.28625
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 285
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1814586
--- Timings ---
Current time: 1559314732881 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.6 seconds, 58.2%
Fitness Testing:      3.5 seconds, 31.0%
Report:               1.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 65                 
Correct output: -41                 | Program output: 52                 
Correct output: 18                  | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 26                  | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 54                  | Program output: 92                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 49                 
Correct output: 6                   | Program output: 49                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 76                 
Correct output: 0                   | Program output: 76                 
Correct output: 49                  | Program output: 84                 
Correct output: 30                  | Program output: 30                 
Correct output: 32                  | Program output: 82                 
Correct output: 5                   | Program output: 83                 
Correct output: 21                  | Program output: 75                 
Correct output: 64                  | Program output: 70                 
Correct output: 34                  | Program output: 75                 
Correct output: 29                  | Program output: 76                 
Correct output: 22                  | Program output: 22                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -60                 | Program output: -33                
Correct output: -55                 | Program output: 25                 
Correct output: -54                 | Program output: -45                
Correct output: -58                 | Program output: -58                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: -36                
Correct output: 26                  | Program output: 65                 
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -30                
Correct output: 30                  | Program output: 83                 
Correct output: -30                 | Program output: -10                
Correct output: -51                 | Program output: 1                  
Correct output: -100                | Program output: -1                 
Correct output: 2                   | Program output: 2                  
Correct output: -79                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -31                 | Program output: 76                 
Correct output: -89                 | Program output: -89                
Correct output: 41                  | Program output: 97                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: 14                 
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -33                
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -80                
Correct output: -71                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 55                 
Correct output: -16                 | Program output: -16                
Correct output: -97                 | Program output: -49                
Correct output: -23                 | Program output: 25                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -24                
Correct output: -94                 | Program output: -34                
Correct output: -47                 | Program output: -46                
Correct output: -95                 | Program output: -57                
Correct output: -65                 | Program output: 47                 
Correct output: -49                 | Program output: 53                 
Correct output: -1                  | Program output: -1                 
Correct output: -90                 | Program output: 42                 
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -59                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: 100                
Correct output: -94                 | Program output: 97                 
Correct output: -99                 | Program output: -69                
Correct output: 6                   | Program output: 99                 
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -54                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -41                
Correct output: -87                 | Program output: -7                 
Correct output: -77                 | Program output: -55                
Correct output: -91                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_468} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty integer_div exec_rot (tag_integer_468 in2 integer_shove) (exec_if (exec_k_when_autoconstructing () (integer_dup boolean_yankdup) exec_yank print_integer integer_dup_times exec_do*while (boolean_or exec_noop integer_pop exec_while (exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop integer_gt integer_lte exec_yankdup integer_yankdup) exec_k_when_autoconstructing (exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush boolean_yank exec_do*range (integer_pop) boolean_dup_items exec_do*while (boolean_rot) in1) () (boolean_yankdup)) () ()) () ()) ())) ()) ())
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_468} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty integer_div exec_rot (tag_integer_468 in2 integer_shove) (exec_if (exec_k_when_autoconstructing () (integer_dup boolean_yankdup) exec_yank print_integer integer_dup_times exec_do*while (boolean_or exec_noop integer_pop exec_while (exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop integer_gt integer_lte exec_yankdup integer_yankdup) exec_k_when_autoconstructing (exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush boolean_yank exec_do*range (integer_pop) boolean_dup_items exec_do*while (boolean_rot) in1) () (boolean_yankdup)) () ()) () ()) ())) ()) ())
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 565 230 327 230 630 230 328 580 43)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (0 565 230 327 230 630 230 328 580 43)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_468} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction boolean_yankdup})
Best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty integer_div exec_rot (tag_integer_468 in2 integer_shove) (exec_if (exec_k_when_autoconstructing () (integer_dup boolean_yankdup) exec_yank print_integer integer_dup_times exec_do*while (boolean_or exec_noop integer_pop exec_while (exec_y () integer_div exec_do*count (integer_yankdup integer_flush) in4 boolean_pop integer_gt integer_lte exec_yankdup integer_yankdup) exec_k_when_autoconstructing (exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush boolean_yank exec_do*range (integer_pop) boolean_dup_items exec_do*while (boolean_rot) in1) () (boolean_yankdup)) () ()) () ()) ())) ()) ())
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 52
Size: 78
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.837
Median total errors in population: 7
Error averages by case: (1.0 0.435 0.77 0.673 0.77 0.37 0.77 0.672 0.42 0.957)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.459
Average program size in population (points): 60.519
Average percent parens in population: 0.293
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.817375
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2197634
--- Timings ---
Current time: 1559314735559 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 61.2%
Fitness Testing:      3.9 seconds, 28.1%
Report:               1.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 60                 
Correct output: 58                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: 18                  | Program output: 18                 
Correct output: -72                 | Program output: 37                 
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 34                  | Program output: 44                 
Correct output: 54                  | Program output: 54                 
Correct output: 21                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 30                  | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 64                  | Program output: 64                 
Correct output: 34                  | Program output: 54                 
Correct output: 29                  | Program output: 50                 
Correct output: 22                  | Program output: 84                 
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -51                
Correct output: -42                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -33                
Correct output: -58                 | Program output: 2                  
Correct output: -75                 | Program output: -62                
Correct output: -36                 | Program output: 71                 
Correct output: 26                  | Program output: 26                 
Correct output: -82                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 30                  | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: 2                   | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -46                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -38                
Correct output: 41                  | Program output: 41                 
Correct output: -69                 | Program output: -6                 
Correct output: -30                 | Program output: -30                
Correct output: -83                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 29                 
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -70                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -17                 | Program output: -3                 
Correct output: -99                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -1                  | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -91                
Correct output: -82                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -43                
Correct output: 6                   | Program output: 6                  
Correct output: -66                 | Program output: -41                
Correct output: -61                 | Program output: -61                
Correct output: -33                 | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 48
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 48
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (243 245 243 653 326 242 251 843 242 907)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (243 245 243 653 326 242 251 843 242 907)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte boolean_dup boolean_invert_second_then_and integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 46
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 5.805
Median total errors in population: 6
Error averages by case: (0.757 0.755 0.757 0.347 0.674 0.758 0.749 0.157 0.758 0.093)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.784
Average program size in population (points): 71.91
Average percent parens in population: 0.304
Minimum age in population: 5.0
Maximum age in population: 9.0625
Average age in population: 7.378875
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2646455
--- Timings ---
Current time: 1559314738232 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.4 seconds, 62.7%
Fitness Testing:      4.4 seconds, 26.3%
Report:               1.7 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 60                 
Correct output: 58                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: 18                  | Program output: 18                 
Correct output: -72                 | Program output: 37                 
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 34                  | Program output: 44                 
Correct output: 54                  | Program output: 54                 
Correct output: 21                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 30                  | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 64                  | Program output: 64                 
Correct output: 34                  | Program output: 54                 
Correct output: 29                  | Program output: 50                 
Correct output: 22                  | Program output: 84                 
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -51                
Correct output: -42                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -33                
Correct output: -58                 | Program output: 2                  
Correct output: -75                 | Program output: -62                
Correct output: -36                 | Program output: 71                 
Correct output: 26                  | Program output: 26                 
Correct output: -82                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 30                  | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: 2                   | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -46                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -38                
Correct output: 41                  | Program output: 41                 
Correct output: -69                 | Program output: -6                 
Correct output: -30                 | Program output: -30                
Correct output: -83                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 29                 
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -70                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -17                 | Program output: -3                 
Correct output: -99                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -1                  | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -91                
Correct output: -82                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -43                
Correct output: 6                   | Program output: 6                  
Correct output: -66                 | Program output: -41                
Correct output: -61                 | Program output: -61                
Correct output: -33                 | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc) integer_fromboolean boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc) integer_fromboolean boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (673 933 760 161 674 673 167 2 762 673)
Population mean number of elite cases: 5.48
Count of perfect (error zero) individuals by case: (673 933 760 161 674 673 167 2 762 673)
Population mean number of perfect (error zero) cases: 5.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times integer_dup integer_dec exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_flush exec_yank) (exec_do*times (integer_gt boolean_or)) ()) () ())
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 43
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 4.522
Median total errors in population: 3
Error averages by case: (0.327 0.067 0.24 0.839 0.326 0.327 0.833 0.998 0.238 0.327)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.469
Average program size in population (points): 58.808
Average percent parens in population: 0.290
Minimum age in population: 6.125
Maximum age in population: 10.59375
Average age in population: 8.75265625
Median age in population: 8.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3034684
--- Timings ---
Current time: 1559314740829 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.4 seconds, 64.1%
Fitness Testing:      4.8 seconds, 24.9%
Report:               2.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 60                 
Correct output: 58                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: 18                  | Program output: 18                 
Correct output: -72                 | Program output: 37                 
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 34                  | Program output: 44                 
Correct output: 54                  | Program output: 54                 
Correct output: 21                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 30                  | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 64                  | Program output: 64                 
Correct output: 34                  | Program output: 54                 
Correct output: 29                  | Program output: 50                 
Correct output: 22                  | Program output: 84                 
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -51                
Correct output: -42                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -33                
Correct output: -58                 | Program output: 2                  
Correct output: -75                 | Program output: -62                
Correct output: -36                 | Program output: 71                 
Correct output: 26                  | Program output: 26                 
Correct output: -82                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 30                  | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: 2                   | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -46                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -38                
Correct output: 41                  | Program output: 41                 
Correct output: -69                 | Program output: -6                 
Correct output: -30                 | Program output: -30                
Correct output: -83                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 29                 
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -70                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -17                 | Program output: -3                 
Correct output: -99                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -1                  | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -91                
Correct output: -82                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -43                
Correct output: 6                   | Program output: 6                  
Correct output: -66                 | Program output: -41                
Correct output: -61                 | Program output: -61                
Correct output: -33                 | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_exec_881} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte boolean_swap integer_min print_integer) boolean_shove integer_mult integer_lte exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop tag_exec_881 (integer_lte exec_yankdup integer_yankdup) integer_gt exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush boolean_yank exec_do*range (integer_pop) boolean_dup_items exec_do*while (boolean_rot) in1) () (boolean_yankdup)) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 73
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_exec_881} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte boolean_swap integer_min print_integer) boolean_shove integer_mult integer_lte exec_y () integer_div exec_do*count (exec_dup_items boolean_frominteger integer_sub boolean_shove exec_eq integer_yankdup integer_flush) in4 boolean_pop tag_exec_881 (integer_lte exec_yankdup integer_yankdup) integer_gt exec_rot (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_do*times (integer_shove integer_stackdepth integer_div) integer_lte boolean_flush boolean_yank exec_do*range (integer_pop) boolean_dup_items exec_do*while (boolean_rot) in1) () (boolean_yankdup)) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 73
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (543 790 940 541 789 789 540 332 787 787)
Population mean number of elite cases: 6.84
Count of perfect (error zero) individuals by case: (543 790 940 541 789 789 540 332 787 787)
Population mean number of perfect (error zero) cases: 6.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_598} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Best program: (boolean_pop boolean_swap in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (in2 boolean_dup_times exec_empty tagged_598 integer_add integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank exec_do*times (integer_gt boolean_or)) () ()) () ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 46
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 3.162
Median total errors in population: 1
Error averages by case: (0.457 0.21 0.06 0.459 0.211 0.211 0.46 0.668 0.213 0.213)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.61
Average program size in population (points): 55.419
Average percent parens in population: 0.280
Minimum age in population: 7.125
Maximum age in population: 12.09375
Average age in population: 9.9035
Median age in population: 9.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3416990
--- Timings ---
Current time: 1559314743508 milliseconds
Total Time:          21.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.4 seconds, 65.5%
Fitness Testing:      5.2 seconds, 23.8%
Report:               2.3 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 212
Test mean error for best: 0.21200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: 18                  | Program output: 18                 
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 34                  | Program output: 34                 
Correct output: 54                  | Program output: 54                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 30                  | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 64                  | Program output: 64                 
Correct output: 34                  | Program output: 54                 
Correct output: 29                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -17                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -54                
Correct output: -58                 | Program output: -37                
Correct output: -75                 | Program output: -65                
Correct output: -36                 | Program output: 71                 
Correct output: 26                  | Program output: 26                 
Correct output: -82                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 30                  | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: 2                   | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -38                
Correct output: 41                  | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -30                
Correct output: -83                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 29                 
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -70                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -17                 | Program output: -9                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -1                  | Program output: 4                  
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -91                
Correct output: -82                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: 6                   | Program output: 6                  
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -33                 | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ())) () ())
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ())) () ())
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 946 690 1 738 940 689 232 886 922)
Population mean number of elite cases: 6.05
Count of perfect (error zero) individuals by case: (1 946 690 1 738 940 689 232 886 922)
Population mean number of perfect (error zero) cases: 6.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ())) () ())
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 38
Size: 52
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 3.955
Median total errors in population: 3
Error averages by case: (0.999 0.054 0.31 0.999 0.262 0.06 0.311 0.768 0.114 0.078)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.623
Average program size in population (points): 50.781
Average percent parens in population: 0.275
Minimum age in population: 9.0
Maximum age in population: 13.8828125
Average age in population: 11.3651640625
Median age in population: 11.453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3808174
--- Timings ---
Current time: 1559314746110 milliseconds
Total Time:          24.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.3 seconds, 66.4%
Fitness Testing:      5.6 seconds, 22.9%
Report:               2.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: 18                  | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 34                  | Program output: 34                 
Correct output: 54                  | Program output: 78                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 47                 
Correct output: 6                   | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 72                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 76                 
Correct output: 30                  | Program output: 30                 
Correct output: 32                  | Program output: 50                 
Correct output: 5                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: 64                  | Program output: 70                 
Correct output: 34                  | Program output: 34                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -42                
Correct output: -60                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -54                
Correct output: -58                 | Program output: -58                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: -36                
Correct output: 26                  | Program output: 26                 
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -30                
Correct output: 30                  | Program output: 30                 
Correct output: -30                 | Program output: -14                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: 2                   | Program output: 2                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -31                 | Program output: -10                
Correct output: -89                 | Program output: -89                
Correct output: 41                  | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: 14                 
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -80                
Correct output: -71                 | Program output: -71                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 55                 
Correct output: -16                 | Program output: -16                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -57                
Correct output: -65                 | Program output: -11                
Correct output: -49                 | Program output: -49                
Correct output: -1                  | Program output: -1                 
Correct output: -90                 | Program output: 12                 
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: 6                   | Program output: 79                 
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -54                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -59                
Correct output: -87                 | Program output: -24                
Correct output: -77                 | Program output: -55                
Correct output: -91                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_pop boolean_swap in3 boolean_rot exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap in2 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove)) () ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_pop boolean_swap in3 boolean_rot exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap in2 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove)) () ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (736 939 204 940 941 736 941 204 730 714)
Population mean number of elite cases: 7.09
Count of perfect (error zero) individuals by case: (736 939 204 940 941 736 941 204 730 714)
Population mean number of perfect (error zero) cases: 7.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove})
Best program: (boolean_pop boolean_swap in3 boolean_rot exec_s_when_autoconstructing (in3 integer_empty) (integer_yank boolean_swap in2 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove)) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 2.915
Median total errors in population: 2
Error averages by case: (0.264 0.061 0.796 0.06 0.059 0.264 0.059 0.796 0.27 0.286)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.745
Average program size in population (points): 49.466
Average percent parens in population: 0.279
Minimum age in population: 12.6015625
Maximum age in population: 14.0390625
Average age in population: 13.43984375
Median age in population: 13.0390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 435
Genome diversity (% unique genomes):	 0.407
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 442
Syntactic diversity (% unique Push programs):	 0.395
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4074379
--- Timings ---
Current time: 1559314748521 milliseconds
Total Time:          27.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.2 seconds, 67.4%
Fitness Testing:      5.9 seconds, 22.0%
Report:               2.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 212
Test mean error for best: 0.21200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: 18                  | Program output: 18                 
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 34                  | Program output: 34                 
Correct output: 54                  | Program output: 54                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 30                  | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 64                  | Program output: 64                 
Correct output: 34                  | Program output: 54                 
Correct output: 29                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -17                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -54                
Correct output: -58                 | Program output: -37                
Correct output: -75                 | Program output: -65                
Correct output: -36                 | Program output: 71                 
Correct output: 26                  | Program output: 26                 
Correct output: -82                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 30                  | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: 2                   | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -38                
Correct output: 41                  | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -30                
Correct output: -83                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 29                 
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -70                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -17                 | Program output: -9                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -1                  | Program output: 4                  
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -91                
Correct output: -82                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: 6                   | Program output: 6                  
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -33                 | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times boolean_xor integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 52
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times boolean_xor integer_dec boolean_shove integer_lte exec_k () (integer_stackdepth) exec_s_when_autoconstructing (integer_mult exec_yank) (exec_do*times (integer_gt boolean_or)) ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 52
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 917 947 948 939 941 943 939 942 948)
Population mean number of elite cases: 8.78
Count of perfect (error zero) individuals by case: (312 917 947 948 939 941 943 939 942 948)
Population mean number of perfect (error zero) cases: 8.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 1.224
Median total errors in population: 1
Error averages by case: (0.688 0.083 0.053 0.052 0.061 0.059 0.057 0.061 0.058 0.052)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.391
Average program size in population (points): 45.424
Average percent parens in population: 0.264
Minimum age in population: 13.8203125
Maximum age in population: 16.0390625
Average age in population: 15.198390625
Median age in population: 15.0390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 381
Genome diversity (% unique genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 387
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4345575
--- Timings ---
Current time: 1559314750873 milliseconds
Total Time:          29.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.0 seconds, 68.2%
Fitness Testing:      6.2 seconds, 21.3%
Report:               3.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 41


Auto-simplifying with starting size: 41
step: 0
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 500
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 1000
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 1500
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 2000
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 2500
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 3000
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 3500
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 4000
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 4500
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 5000
program: (integer_dup_items integer_dup_times boolean_eq print_integer integer_mod boolean_empty in3 in4 exec_s_when_autoconstructing (in3 integer_empty) (in1 boolean_swap integer_min integer_min print_integer) (boolean_shove integer_mult integer_lte integer_max integer_inc integer_fromboolean) boolean_dup_items exec_rot (exec_pop (boolean_dup_times integer_dup exec_pop (boolean_dup_times integer_dup integer_dec boolean_shove))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 212
Test mean error for best: 0.21200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: 18                  | Program output: 18                 
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 34                  | Program output: 34                 
Correct output: 54                  | Program output: 54                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 30                  | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 64                  | Program output: 64                 
Correct output: 34                  | Program output: 54                 
Correct output: 29                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -92                
Correct output: -42                 | Program output: -17                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -54                
Correct output: -58                 | Program output: -37                
Correct output: -75                 | Program output: -65                
Correct output: -36                 | Program output: 71                 
Correct output: 26                  | Program output: 26                 
Correct output: -82                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 30                  | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: 2                   | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -38                
Correct output: 41                  | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -30                
Correct output: -83                 | Program output: -34                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 29                 
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -70                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -17                 | Program output: -9                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -1                  | Program output: 4                  
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -91                
Correct output: -82                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: 6                   | Program output: 6                  
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -33                 | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
;;******************************
