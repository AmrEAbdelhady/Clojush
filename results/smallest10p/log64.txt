Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -78 -12 -12] -78] [[81 -20 -20 -20] -20] [[24 24 24 -47] -47] [[-24 -24 -24 -67] -67] [[-26 34 34 34] -26] [[-28 -28 72 -28] -28] [[55 55 -54 55] -54] [[-76 -6 -76 -76] -76] [[64 9 9 9] 9] [[54 -42 54 54] -42] [(96 96 96 96) 96] [(-77 -77 -77 -77) -77] [(50 50 50 50) 50] [(78 78 78 78) 78] [(68 68 68 68) 68] [(32 34 13 85) 13] [(93 25 3 96) 3] [(75 32 1 3) 1] [(96 58 20 39) 20] [(8 94 4 34) 4] [(78 76 29 19) 19] [(29 56 55 15) 15] [(67 99 63 33) 33] [(41 64 42 30) 30] [(96 25 93 14) 14] [(77 73 49 44) 44] [(12 61 86 21) 12] [(30 12 1 56) 1] [(88 9 15 13) 9] [(41 67 77 66) 41] [(69 36 47 0) 0] [(38 94 41 49) 38] [(52 10 66 13) 10] [(32 88 92 17) 17] [(36 75 48 73) 36] [(15 59 73 27) 15] [(87 -57 -1 -34) -57] [(-24 -95 76 -47) -95] [(-38 -72 -53 -73) -73] [(-66 32 40 56) -66] [(-6 88 -11 43) -11] [(-57 -12 49 4) -57] [(86 48 -95 -38) -95] [(-53 75 28 -31) -53] [(-11 -56 40 -3) -56] [(-79 82 -48 -5) -79] [(92 -6 19 92) -6] [(-65 37 25 82) -65] [(-19 -71 -5 -76) -76] [(25 -73 97 -73) -73] [(-70 -60 -28 -46) -70] [(37 -68 -33 -69) -69] [(-19 82 5 49) -19] [(29 95 25 -98) -98] [(59 1 -48 -62) -62] [(-92 11 85 80) -92] [(72 55 -4 -70) -70] [(8 61 -76 -30) -76] [(-67 31 4 -65) -67] [(4 3 -16 -44) -44] [(-45 49 85 20) -45] [(43 20 89 88) 20] [(-48 -89 -24 -27) -89] [(22 -68 18 44) -68] [(-2 -59 99 31) -59] [(-52 34 -96 -45) -96] [(-47 16 -17 -71) -71] [(-18 84 48 0) -18] [(-72 -43 96 72) -72] [(97 -55 92 63) -55] [(-94 85 -42 39) -94] [(20 -19 41 -77) -77] [(78 -81 -43 79) -81] [(-73 -59 -69 -78) -78] [(77 32 -46 30) -46] [(90 60 56 -25) -25] [(-38 52 69 -35) -38] [(-4 -68 8 -85) -85] [(61 -26 99 -66) -66] [(-78 -7 -28 -39) -78] [(60 -56 -48 -32) -56] [(0 -60 15 84) -60] [(81 -61 -34 25) -61] [(-30 41 99 -49) -49] [(-52 -73 -26 -85) -85] [(-59 32 -83 32) -83] [(-72 73 24 95) -72] [(56 9 -14 1) -14] [(-43 97 73 -73) -73] [(-21 -7 62 93) -21] [(-19 -89 19 13) -89] [(-81 2 -91 -47) -91] [(-59 -55 -88 4) -88] [(37 25 36 40) 25] [(25 33 -55 -97) -97])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-12 -78 -12 -12] -78]
Train Case:   6 | Input/Output: [[81 -20 -20 -20] -20]
Train Case:   7 | Input/Output: [[24 24 24 -47] -47]
Train Case:   8 | Input/Output: [[-24 -24 -24 -67] -67]
Train Case:   9 | Input/Output: [[-26 34 34 34] -26]
Train Case:  10 | Input/Output: [[-28 -28 72 -28] -28]
Train Case:  11 | Input/Output: [[55 55 -54 55] -54]
Train Case:  12 | Input/Output: [[-76 -6 -76 -76] -76]
Train Case:  13 | Input/Output: [[64 9 9 9] 9]
Train Case:  14 | Input/Output: [[54 -42 54 54] -42]
Train Case:  15 | Input/Output: [(96 96 96 96) 96]
Train Case:  16 | Input/Output: [(-77 -77 -77 -77) -77]
Train Case:  17 | Input/Output: [(50 50 50 50) 50]
Train Case:  18 | Input/Output: [(78 78 78 78) 78]
Train Case:  19 | Input/Output: [(68 68 68 68) 68]
Train Case:  20 | Input/Output: [(32 34 13 85) 13]
Train Case:  21 | Input/Output: [(93 25 3 96) 3]
Train Case:  22 | Input/Output: [(75 32 1 3) 1]
Train Case:  23 | Input/Output: [(96 58 20 39) 20]
Train Case:  24 | Input/Output: [(8 94 4 34) 4]
Train Case:  25 | Input/Output: [(78 76 29 19) 19]
Train Case:  26 | Input/Output: [(29 56 55 15) 15]
Train Case:  27 | Input/Output: [(67 99 63 33) 33]
Train Case:  28 | Input/Output: [(41 64 42 30) 30]
Train Case:  29 | Input/Output: [(96 25 93 14) 14]
Train Case:  30 | Input/Output: [(77 73 49 44) 44]
Train Case:  31 | Input/Output: [(12 61 86 21) 12]
Train Case:  32 | Input/Output: [(30 12 1 56) 1]
Train Case:  33 | Input/Output: [(88 9 15 13) 9]
Train Case:  34 | Input/Output: [(41 67 77 66) 41]
Train Case:  35 | Input/Output: [(69 36 47 0) 0]
Train Case:  36 | Input/Output: [(38 94 41 49) 38]
Train Case:  37 | Input/Output: [(52 10 66 13) 10]
Train Case:  38 | Input/Output: [(32 88 92 17) 17]
Train Case:  39 | Input/Output: [(36 75 48 73) 36]
Train Case:  40 | Input/Output: [(15 59 73 27) 15]
Train Case:  41 | Input/Output: [(87 -57 -1 -34) -57]
Train Case:  42 | Input/Output: [(-24 -95 76 -47) -95]
Train Case:  43 | Input/Output: [(-38 -72 -53 -73) -73]
Train Case:  44 | Input/Output: [(-66 32 40 56) -66]
Train Case:  45 | Input/Output: [(-6 88 -11 43) -11]
Train Case:  46 | Input/Output: [(-57 -12 49 4) -57]
Train Case:  47 | Input/Output: [(86 48 -95 -38) -95]
Train Case:  48 | Input/Output: [(-53 75 28 -31) -53]
Train Case:  49 | Input/Output: [(-11 -56 40 -3) -56]
Train Case:  50 | Input/Output: [(-79 82 -48 -5) -79]
Train Case:  51 | Input/Output: [(92 -6 19 92) -6]
Train Case:  52 | Input/Output: [(-65 37 25 82) -65]
Train Case:  53 | Input/Output: [(-19 -71 -5 -76) -76]
Train Case:  54 | Input/Output: [(25 -73 97 -73) -73]
Train Case:  55 | Input/Output: [(-70 -60 -28 -46) -70]
Train Case:  56 | Input/Output: [(37 -68 -33 -69) -69]
Train Case:  57 | Input/Output: [(-19 82 5 49) -19]
Train Case:  58 | Input/Output: [(29 95 25 -98) -98]
Train Case:  59 | Input/Output: [(59 1 -48 -62) -62]
Train Case:  60 | Input/Output: [(-92 11 85 80) -92]
Train Case:  61 | Input/Output: [(72 55 -4 -70) -70]
Train Case:  62 | Input/Output: [(8 61 -76 -30) -76]
Train Case:  63 | Input/Output: [(-67 31 4 -65) -67]
Train Case:  64 | Input/Output: [(4 3 -16 -44) -44]
Train Case:  65 | Input/Output: [(-45 49 85 20) -45]
Train Case:  66 | Input/Output: [(43 20 89 88) 20]
Train Case:  67 | Input/Output: [(-48 -89 -24 -27) -89]
Train Case:  68 | Input/Output: [(22 -68 18 44) -68]
Train Case:  69 | Input/Output: [(-2 -59 99 31) -59]
Train Case:  70 | Input/Output: [(-52 34 -96 -45) -96]
Train Case:  71 | Input/Output: [(-47 16 -17 -71) -71]
Train Case:  72 | Input/Output: [(-18 84 48 0) -18]
Train Case:  73 | Input/Output: [(-72 -43 96 72) -72]
Train Case:  74 | Input/Output: [(97 -55 92 63) -55]
Train Case:  75 | Input/Output: [(-94 85 -42 39) -94]
Train Case:  76 | Input/Output: [(20 -19 41 -77) -77]
Train Case:  77 | Input/Output: [(78 -81 -43 79) -81]
Train Case:  78 | Input/Output: [(-73 -59 -69 -78) -78]
Train Case:  79 | Input/Output: [(77 32 -46 30) -46]
Train Case:  80 | Input/Output: [(90 60 56 -25) -25]
Train Case:  81 | Input/Output: [(-38 52 69 -35) -38]
Train Case:  82 | Input/Output: [(-4 -68 8 -85) -85]
Train Case:  83 | Input/Output: [(61 -26 99 -66) -66]
Train Case:  84 | Input/Output: [(-78 -7 -28 -39) -78]
Train Case:  85 | Input/Output: [(60 -56 -48 -32) -56]
Train Case:  86 | Input/Output: [(0 -60 15 84) -60]
Train Case:  87 | Input/Output: [(81 -61 -34 25) -61]
Train Case:  88 | Input/Output: [(-30 41 99 -49) -49]
Train Case:  89 | Input/Output: [(-52 -73 -26 -85) -85]
Train Case:  90 | Input/Output: [(-59 32 -83 32) -83]
Train Case:  91 | Input/Output: [(-72 73 24 95) -72]
Train Case:  92 | Input/Output: [(56 9 -14 1) -14]
Train Case:  93 | Input/Output: [(-43 97 73 -73) -73]
Train Case:  94 | Input/Output: [(-21 -7 62 93) -21]
Train Case:  95 | Input/Output: [(-19 -89 19 13) -89]
Train Case:  96 | Input/Output: [(-81 2 -91 -47) -91]
Train Case:  97 | Input/Output: [(-59 -55 -88 4) -88]
Train Case:  98 | Input/Output: [(37 25 36 40) 25]
Train Case:  99 | Input/Output: [(25 33 -55 -97) -97]
Test Case:   0 | Input/Output: [[-60 23 -60 -60] -60]
Test Case:   1 | Input/Output: [[35 35 35 93] 35]
Test Case:   2 | Input/Output: [[-72 79 -72 -72] -72]
Test Case:   3 | Input/Output: [[53 66 66 66] 53]
Test Case:   4 | Input/Output: [[-7 -7 -7 99] -7]
Test Case:   5 | Input/Output: [[-14 2 2 2] -14]
Test Case:   6 | Input/Output: [[71 -73 -73 -73] -73]
Test Case:   7 | Input/Output: [[68 1 68 68] 1]
Test Case:   8 | Input/Output: [[-69 4 -69 -69] -69]
Test Case:   9 | Input/Output: [[56 -75 56 56] -75]
Test Case:  10 | Input/Output: [[-21 -52 -52 -52] -52]
Test Case:  11 | Input/Output: [[11 -40 11 11] -40]
Test Case:  12 | Input/Output: [[-5 68 68 68] -5]
Test Case:  13 | Input/Output: [[-79 -79 32 -79] -79]
Test Case:  14 | Input/Output: [[-55 48 -55 -55] -55]
Test Case:  15 | Input/Output: [[-44 -44 -21 -44] -44]
Test Case:  16 | Input/Output: [[48 -27 48 48] -27]
Test Case:  17 | Input/Output: [[75 -27 -27 -27] -27]
Test Case:  18 | Input/Output: [[-51 -34 -34 -34] -51]
Test Case:  19 | Input/Output: [[96 96 96 52] 52]
Test Case:  20 | Input/Output: [[8 8 -88 8] -88]
Test Case:  21 | Input/Output: [[63 -6 63 63] -6]
Test Case:  22 | Input/Output: [[-86 10 -86 -86] -86]
Test Case:  23 | Input/Output: [[19 97 97 97] 19]
Test Case:  24 | Input/Output: [[100 100 100 3] 3]
Test Case:  25 | Input/Output: [[2 2 61 2] 2]
Test Case:  26 | Input/Output: [[38 38 -56 38] -56]
Test Case:  27 | Input/Output: [[46 -90 -90 -90] -90]
Test Case:  28 | Input/Output: [[95 95 95 -47] -47]
Test Case:  29 | Input/Output: [[-73 85 -73 -73] -73]
Test Case:  30 | Input/Output: [[-42 -42 -42 74] -42]
Test Case:  31 | Input/Output: [[-52 -42 -52 -52] -52]
Test Case:  32 | Input/Output: [[-17 -17 73 -17] -17]
Test Case:  33 | Input/Output: [[95 -1 -1 -1] -1]
Test Case:  34 | Input/Output: [[-75 -73 -73 -73] -75]
Test Case:  35 | Input/Output: [[-50 95 -50 -50] -50]
Test Case:  36 | Input/Output: [[-9 -35 -9 -9] -35]
Test Case:  37 | Input/Output: [[-20 -20 -5 -20] -20]
Test Case:  38 | Input/Output: [[60 -7 -7 -7] -7]
Test Case:  39 | Input/Output: [[54 -36 -36 -36] -36]
Test Case:  40 | Input/Output: [[-45 -45 -58 -45] -58]
Test Case:  41 | Input/Output: [[-97 -38 -38 -38] -97]
Test Case:  42 | Input/Output: [[-100 -8 -100 -100] -100]
Test Case:  43 | Input/Output: [[29 -71 29 29] -71]
Test Case:  44 | Input/Output: [[-40 -40 -40 -34] -40]
Test Case:  45 | Input/Output: [[27 27 -32 27] -32]
Test Case:  46 | Input/Output: [[-64 -64 97 -64] -64]
Test Case:  47 | Input/Output: [[0 -100 0 0] -100]
Test Case:  48 | Input/Output: [[-17 -17 -17 76] -17]
Test Case:  49 | Input/Output: [[91 47 47 47] 47]
Test Case:  50 | Input/Output: [[-16 -2 -2 -2] -16]
Test Case:  51 | Input/Output: [[81 81 -67 81] -67]
Test Case:  52 | Input/Output: [[6 -86 6 6] -86]
Test Case:  53 | Input/Output: [[86 61 61 61] 61]
Test Case:  54 | Input/Output: [[14 -91 -91 -91] -91]
Test Case:  55 | Input/Output: [[5 -12 -12 -12] -12]
Test Case:  56 | Input/Output: [[91 91 96 91] 91]
Test Case:  57 | Input/Output: [[-61 25 25 25] -61]
Test Case:  58 | Input/Output: [[-57 -57 -57 73] -57]
Test Case:  59 | Input/Output: [[-14 80 80 80] -14]
Test Case:  60 | Input/Output: [[-47 -47 -47 6] -47]
Test Case:  61 | Input/Output: [[-96 -96 -6 -96] -96]
Test Case:  62 | Input/Output: [[26 76 26 26] 26]
Test Case:  63 | Input/Output: [[-49 13 13 13] -49]
Test Case:  64 | Input/Output: [[91 91 -96 91] -96]
Test Case:  65 | Input/Output: [[63 63 32 63] 32]
Test Case:  66 | Input/Output: [[12 12 -46 12] -46]
Test Case:  67 | Input/Output: [[-66 86 -66 -66] -66]
Test Case:  68 | Input/Output: [[62 62 75 62] 62]
Test Case:  69 | Input/Output: [[99 56 99 99] 56]
Test Case:  70 | Input/Output: [[39 39 39 81] 39]
Test Case:  71 | Input/Output: [[23 23 -77 23] -77]
Test Case:  72 | Input/Output: [[-21 -21 25 -21] -21]
Test Case:  73 | Input/Output: [[69 84 69 69] 69]
Test Case:  74 | Input/Output: [[-54 28 28 28] -54]
Test Case:  75 | Input/Output: [[-67 -67 -59 -67] -67]
Test Case:  76 | Input/Output: [[45 -39 -39 -39] -39]
Test Case:  77 | Input/Output: [[-100 -2 -2 -2] -100]
Test Case:  78 | Input/Output: [[-89 -89 78 -89] -89]
Test Case:  79 | Input/Output: [[-17 -17 -82 -17] -82]
Test Case:  80 | Input/Output: [[26 41 26 26] 26]
Test Case:  81 | Input/Output: [[43 96 43 43] 43]
Test Case:  82 | Input/Output: [[-87 -87 -87 56] -87]
Test Case:  83 | Input/Output: [[95 95 57 95] 57]
Test Case:  84 | Input/Output: [[-91 -28 -28 -28] -91]
Test Case:  85 | Input/Output: [[-22 -22 77 -22] -22]
Test Case:  86 | Input/Output: [[-55 -55 37 -55] -55]
Test Case:  87 | Input/Output: [[19 66 66 66] 19]
Test Case:  88 | Input/Output: [[-91 61 61 61] -91]
Test Case:  89 | Input/Output: [[92 -31 -31 -31] -31]
Test Case:  90 | Input/Output: [[49 49 49 -99] -99]
Test Case:  91 | Input/Output: [[-61 -61 56 -61] -61]
Test Case:  92 | Input/Output: [[-82 21 21 21] -82]
Test Case:  93 | Input/Output: [[69 -4 -4 -4] -4]
Test Case:  94 | Input/Output: [[50 36 36 36] 36]
Test Case:  95 | Input/Output: [[-78 -78 -78 29] -78]
Test Case:  96 | Input/Output: [[-79 -86 -79 -79] -86]
Test Case:  97 | Input/Output: [[88 88 88 -56] -56]
Test Case:  98 | Input/Output: [[58 31 31 31] 31]
Test Case:  99 | Input/Output: [[-10 0 -10 -10] -10]
Test Case: 100 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 101 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 102 | Input/Output: [(24 24 24 24) 24]
Test Case: 103 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 104 | Input/Output: [(5 5 5 5) 5]
Test Case: 105 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 106 | Input/Output: [(47 47 47 47) 47]
Test Case: 107 | Input/Output: [(1 1 1 1) 1]
Test Case: 108 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 109 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 110 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 111 | Input/Output: [(0 0 0 0) 0]
Test Case: 112 | Input/Output: [(19 19 19 19) 19]
Test Case: 113 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 114 | Input/Output: [(5 5 5 5) 5]
Test Case: 115 | Input/Output: [(3 3 3 3) 3]
Test Case: 116 | Input/Output: [(98 98 98 98) 98]
Test Case: 117 | Input/Output: [(85 85 85 85) 85]
Test Case: 118 | Input/Output: [(9 9 9 9) 9]
Test Case: 119 | Input/Output: [(8 8 8 8) 8]
Test Case: 120 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 121 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 122 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 123 | Input/Output: [(51 51 51 51) 51]
Test Case: 124 | Input/Output: [(57 57 57 57) 57]
Test Case: 125 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 126 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 127 | Input/Output: [(15 15 15 15) 15]
Test Case: 128 | Input/Output: [(0 0 0 0) 0]
Test Case: 129 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 130 | Input/Output: [(78 78 78 78) 78]
Test Case: 131 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 132 | Input/Output: [(93 93 93 93) 93]
Test Case: 133 | Input/Output: [(9 9 9 9) 9]
Test Case: 134 | Input/Output: [(15 15 15 15) 15]
Test Case: 135 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 136 | Input/Output: [(22 22 22 22) 22]
Test Case: 137 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 138 | Input/Output: [(84 84 84 84) 84]
Test Case: 139 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 140 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 141 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 142 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 143 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 144 | Input/Output: [(8 8 8 8) 8]
Test Case: 145 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 146 | Input/Output: [(70 70 70 70) 70]
Test Case: 147 | Input/Output: [(85 85 85 85) 85]
Test Case: 148 | Input/Output: [(83 83 83 83) 83]
Test Case: 149 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 150 | Input/Output: [(86 86 86 86) 86]
Test Case: 151 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 152 | Input/Output: [(47 47 47 47) 47]
Test Case: 153 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 154 | Input/Output: [(93 93 93 93) 93]
Test Case: 155 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 156 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 157 | Input/Output: [(65 65 65 65) 65]
Test Case: 158 | Input/Output: [(21 21 21 21) 21]
Test Case: 159 | Input/Output: [(100 100 100 100) 100]
Test Case: 160 | Input/Output: [(41 41 41 41) 41]
Test Case: 161 | Input/Output: [(73 73 73 73) 73]
Test Case: 162 | Input/Output: [(95 95 95 95) 95]
Test Case: 163 | Input/Output: [(5 5 5 5) 5]
Test Case: 164 | Input/Output: [(38 38 38 38) 38]
Test Case: 165 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 166 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 167 | Input/Output: [(28 28 28 28) 28]
Test Case: 168 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 169 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 170 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 171 | Input/Output: [(61 61 61 61) 61]
Test Case: 172 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 173 | Input/Output: [(54 54 54 54) 54]
Test Case: 174 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 175 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 176 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 177 | Input/Output: [(57 57 57 57) 57]
Test Case: 178 | Input/Output: [(29 29 29 29) 29]
Test Case: 179 | Input/Output: [(43 43 43 43) 43]
Test Case: 180 | Input/Output: [(54 54 54 54) 54]
Test Case: 181 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 182 | Input/Output: [(44 44 44 44) 44]
Test Case: 183 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 184 | Input/Output: [(78 78 78 78) 78]
Test Case: 185 | Input/Output: [(8 8 8 8) 8]
Test Case: 186 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 187 | Input/Output: [(48 48 48 48) 48]
Test Case: 188 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 189 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 190 | Input/Output: [(32 32 32 32) 32]
Test Case: 191 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 192 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 193 | Input/Output: [(59 59 59 59) 59]
Test Case: 194 | Input/Output: [(57 57 57 57) 57]
Test Case: 195 | Input/Output: [(96 96 96 96) 96]
Test Case: 196 | Input/Output: [(58 58 58 58) 58]
Test Case: 197 | Input/Output: [(0 0 0 0) 0]
Test Case: 198 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 199 | Input/Output: [(17 17 17 17) 17]
Test Case: 200 | Input/Output: [(6 15 26 84) 6]
Test Case: 201 | Input/Output: [(78 74 31 56) 31]
Test Case: 202 | Input/Output: [(74 95 77 9) 9]
Test Case: 203 | Input/Output: [(84 68 76 83) 68]
Test Case: 204 | Input/Output: [(27 10 76 95) 10]
Test Case: 205 | Input/Output: [(64 50 98 53) 50]
Test Case: 206 | Input/Output: [(19 29 71 41) 19]
Test Case: 207 | Input/Output: [(77 77 33 17) 17]
Test Case: 208 | Input/Output: [(71 44 37 78) 37]
Test Case: 209 | Input/Output: [(27 1 84 41) 1]
Test Case: 210 | Input/Output: [(95 62 54 81) 54]
Test Case: 211 | Input/Output: [(24 30 12 0) 0]
Test Case: 212 | Input/Output: [(75 6 8 31) 6]
Test Case: 213 | Input/Output: [(84 22 97 87) 22]
Test Case: 214 | Input/Output: [(71 92 50 41) 41]
Test Case: 215 | Input/Output: [(34 82 19 27) 19]
Test Case: 216 | Input/Output: [(50 29 23 26) 23]
Test Case: 217 | Input/Output: [(56 71 7 18) 7]
Test Case: 218 | Input/Output: [(66 92 89 23) 23]
Test Case: 219 | Input/Output: [(6 43 9 41) 6]
Test Case: 220 | Input/Output: [(38 14 40 83) 14]
Test Case: 221 | Input/Output: [(15 19 62 13) 13]
Test Case: 222 | Input/Output: [(5 33 31 91) 5]
Test Case: 223 | Input/Output: [(4 50 26 35) 4]
Test Case: 224 | Input/Output: [(29 75 78 73) 29]
Test Case: 225 | Input/Output: [(73 12 70 3) 3]
Test Case: 226 | Input/Output: [(69 66 90 47) 47]
Test Case: 227 | Input/Output: [(55 78 0 56) 0]
Test Case: 228 | Input/Output: [(32 92 94 88) 32]
Test Case: 229 | Input/Output: [(33 98 52 10) 10]
Test Case: 230 | Input/Output: [(72 61 44 60) 44]
Test Case: 231 | Input/Output: [(10 36 81 11) 10]
Test Case: 232 | Input/Output: [(13 37 31 53) 13]
Test Case: 233 | Input/Output: [(89 91 98 83) 83]
Test Case: 234 | Input/Output: [(46 56 75 95) 46]
Test Case: 235 | Input/Output: [(77 29 5 63) 5]
Test Case: 236 | Input/Output: [(30 70 66 42) 30]
Test Case: 237 | Input/Output: [(53 91 14 16) 14]
Test Case: 238 | Input/Output: [(10 98 56 17) 10]
Test Case: 239 | Input/Output: [(88 95 88 84) 84]
Test Case: 240 | Input/Output: [(43 73 70 55) 43]
Test Case: 241 | Input/Output: [(38 31 84 68) 31]
Test Case: 242 | Input/Output: [(41 46 13 40) 13]
Test Case: 243 | Input/Output: [(56 6 44 17) 6]
Test Case: 244 | Input/Output: [(99 23 96 66) 23]
Test Case: 245 | Input/Output: [(57 80 97 68) 57]
Test Case: 246 | Input/Output: [(72 82 84 75) 72]
Test Case: 247 | Input/Output: [(24 16 45 42) 16]
Test Case: 248 | Input/Output: [(19 41 31 65) 19]
Test Case: 249 | Input/Output: [(95 0 13 48) 0]
Test Case: 250 | Input/Output: [(30 23 53 10) 10]
Test Case: 251 | Input/Output: [(59 75 87 23) 23]
Test Case: 252 | Input/Output: [(76 82 17 32) 17]
Test Case: 253 | Input/Output: [(28 89 65 84) 28]
Test Case: 254 | Input/Output: [(97 76 10 5) 5]
Test Case: 255 | Input/Output: [(85 83 60 1) 1]
Test Case: 256 | Input/Output: [(42 11 65 71) 11]
Test Case: 257 | Input/Output: [(14 57 0 13) 0]
Test Case: 258 | Input/Output: [(51 4 65 37) 4]
Test Case: 259 | Input/Output: [(71 51 19 20) 19]
Test Case: 260 | Input/Output: [(16 92 50 51) 16]
Test Case: 261 | Input/Output: [(53 13 85 22) 13]
Test Case: 262 | Input/Output: [(85 80 6 9) 6]
Test Case: 263 | Input/Output: [(73 48 13 48) 13]
Test Case: 264 | Input/Output: [(100 51 70 85) 51]
Test Case: 265 | Input/Output: [(32 36 56 21) 21]
Test Case: 266 | Input/Output: [(76 67 19 48) 19]
Test Case: 267 | Input/Output: [(37 91 39 73) 37]
Test Case: 268 | Input/Output: [(46 72 75 93) 46]
Test Case: 269 | Input/Output: [(10 19 63 6) 6]
Test Case: 270 | Input/Output: [(7 38 53 84) 7]
Test Case: 271 | Input/Output: [(89 97 3 52) 3]
Test Case: 272 | Input/Output: [(97 39 82 74) 39]
Test Case: 273 | Input/Output: [(89 22 73 50) 22]
Test Case: 274 | Input/Output: [(11 17 34 56) 11]
Test Case: 275 | Input/Output: [(46 34 95 83) 34]
Test Case: 276 | Input/Output: [(54 50 46 15) 15]
Test Case: 277 | Input/Output: [(4 54 48 98) 4]
Test Case: 278 | Input/Output: [(81 85 0 39) 0]
Test Case: 279 | Input/Output: [(54 78 74 54) 54]
Test Case: 280 | Input/Output: [(34 39 29 96) 29]
Test Case: 281 | Input/Output: [(65 48 61 56) 48]
Test Case: 282 | Input/Output: [(5 71 39 29) 5]
Test Case: 283 | Input/Output: [(70 65 58 5) 5]
Test Case: 284 | Input/Output: [(12 18 27 76) 12]
Test Case: 285 | Input/Output: [(50 54 51 52) 50]
Test Case: 286 | Input/Output: [(43 64 30 43) 30]
Test Case: 287 | Input/Output: [(59 10 94 79) 10]
Test Case: 288 | Input/Output: [(4 59 36 86) 4]
Test Case: 289 | Input/Output: [(74 8 35 9) 8]
Test Case: 290 | Input/Output: [(74 92 93 87) 74]
Test Case: 291 | Input/Output: [(85 77 33 61) 33]
Test Case: 292 | Input/Output: [(92 51 57 82) 51]
Test Case: 293 | Input/Output: [(23 31 44 13) 13]
Test Case: 294 | Input/Output: [(19 26 69 69) 19]
Test Case: 295 | Input/Output: [(19 100 70 12) 12]
Test Case: 296 | Input/Output: [(51 7 17 46) 7]
Test Case: 297 | Input/Output: [(8 76 28 1) 1]
Test Case: 298 | Input/Output: [(55 24 40 93) 24]
Test Case: 299 | Input/Output: [(46 22 27 22) 22]
Test Case: 300 | Input/Output: [(32 67 31 14) 14]
Test Case: 301 | Input/Output: [(22 29 50 59) 22]
Test Case: 302 | Input/Output: [(70 21 39 40) 21]
Test Case: 303 | Input/Output: [(57 39 5 24) 5]
Test Case: 304 | Input/Output: [(23 88 74 16) 16]
Test Case: 305 | Input/Output: [(57 50 26 26) 26]
Test Case: 306 | Input/Output: [(25 51 57 65) 25]
Test Case: 307 | Input/Output: [(68 98 45 22) 22]
Test Case: 308 | Input/Output: [(20 42 65 71) 20]
Test Case: 309 | Input/Output: [(76 80 5 83) 5]
Test Case: 310 | Input/Output: [(83 85 57 90) 57]
Test Case: 311 | Input/Output: [(86 52 22 15) 15]
Test Case: 312 | Input/Output: [(13 14 80 84) 13]
Test Case: 313 | Input/Output: [(34 97 5 100) 5]
Test Case: 314 | Input/Output: [(72 90 64 39) 39]
Test Case: 315 | Input/Output: [(93 51 24 23) 23]
Test Case: 316 | Input/Output: [(74 79 40 80) 40]
Test Case: 317 | Input/Output: [(41 81 53 19) 19]
Test Case: 318 | Input/Output: [(93 100 44 64) 44]
Test Case: 319 | Input/Output: [(100 90 76 76) 76]
Test Case: 320 | Input/Output: [(38 83 38 98) 38]
Test Case: 321 | Input/Output: [(13 31 3 67) 3]
Test Case: 322 | Input/Output: [(99 97 21 17) 17]
Test Case: 323 | Input/Output: [(78 65 37 1) 1]
Test Case: 324 | Input/Output: [(16 56 70 59) 16]
Test Case: 325 | Input/Output: [(51 91 58 56) 51]
Test Case: 326 | Input/Output: [(57 70 100 11) 11]
Test Case: 327 | Input/Output: [(100 10 47 16) 10]
Test Case: 328 | Input/Output: [(10 11 73 72) 10]
Test Case: 329 | Input/Output: [(29 21 0 2) 0]
Test Case: 330 | Input/Output: [(96 75 26 56) 26]
Test Case: 331 | Input/Output: [(57 15 3 90) 3]
Test Case: 332 | Input/Output: [(9 37 41 34) 9]
Test Case: 333 | Input/Output: [(24 89 87 68) 24]
Test Case: 334 | Input/Output: [(51 69 11 4) 4]
Test Case: 335 | Input/Output: [(16 71 91 40) 16]
Test Case: 336 | Input/Output: [(67 18 10 14) 10]
Test Case: 337 | Input/Output: [(43 8 92 38) 8]
Test Case: 338 | Input/Output: [(1 28 35 59) 1]
Test Case: 339 | Input/Output: [(97 96 35 56) 35]
Test Case: 340 | Input/Output: [(66 7 62 85) 7]
Test Case: 341 | Input/Output: [(34 22 1 12) 1]
Test Case: 342 | Input/Output: [(80 5 99 15) 5]
Test Case: 343 | Input/Output: [(56 2 22 44) 2]
Test Case: 344 | Input/Output: [(30 47 44 44) 30]
Test Case: 345 | Input/Output: [(36 42 35 26) 26]
Test Case: 346 | Input/Output: [(91 19 1 23) 1]
Test Case: 347 | Input/Output: [(93 86 83 92) 83]
Test Case: 348 | Input/Output: [(84 21 57 82) 21]
Test Case: 349 | Input/Output: [(65 13 43 51) 13]
Test Case: 350 | Input/Output: [(48 58 4 97) 4]
Test Case: 351 | Input/Output: [(55 67 18 9) 9]
Test Case: 352 | Input/Output: [(93 15 23 48) 15]
Test Case: 353 | Input/Output: [(80 7 5 44) 5]
Test Case: 354 | Input/Output: [(18 69 80 78) 18]
Test Case: 355 | Input/Output: [(25 17 36 50) 17]
Test Case: 356 | Input/Output: [(62 56 90 100) 56]
Test Case: 357 | Input/Output: [(70 68 85 43) 43]
Test Case: 358 | Input/Output: [(60 94 26 5) 5]
Test Case: 359 | Input/Output: [(24 78 100 55) 24]
Test Case: 360 | Input/Output: [(49 15 43 51) 15]
Test Case: 361 | Input/Output: [(1 81 59 43) 1]
Test Case: 362 | Input/Output: [(90 55 73 83) 55]
Test Case: 363 | Input/Output: [(88 71 23 85) 23]
Test Case: 364 | Input/Output: [(7 13 33 43) 7]
Test Case: 365 | Input/Output: [(99 93 85 96) 85]
Test Case: 366 | Input/Output: [(30 24 13 9) 9]
Test Case: 367 | Input/Output: [(19 32 12 6) 6]
Test Case: 368 | Input/Output: [(20 29 21 56) 20]
Test Case: 369 | Input/Output: [(26 70 85 52) 26]
Test Case: 370 | Input/Output: [(15 45 49 17) 15]
Test Case: 371 | Input/Output: [(52 90 45 24) 24]
Test Case: 372 | Input/Output: [(4 85 85 48) 4]
Test Case: 373 | Input/Output: [(92 62 52 75) 52]
Test Case: 374 | Input/Output: [(13 39 82 14) 13]
Test Case: 375 | Input/Output: [(34 80 10 60) 10]
Test Case: 376 | Input/Output: [(100 81 31 25) 25]
Test Case: 377 | Input/Output: [(15 96 15 98) 15]
Test Case: 378 | Input/Output: [(80 19 78 52) 19]
Test Case: 379 | Input/Output: [(0 95 90 93) 0]
Test Case: 380 | Input/Output: [(7 29 71 92) 7]
Test Case: 381 | Input/Output: [(73 98 81 69) 69]
Test Case: 382 | Input/Output: [(85 63 70 48) 48]
Test Case: 383 | Input/Output: [(17 27 21 58) 17]
Test Case: 384 | Input/Output: [(28 40 53 72) 28]
Test Case: 385 | Input/Output: [(86 81 87 58) 58]
Test Case: 386 | Input/Output: [(62 1 31 33) 1]
Test Case: 387 | Input/Output: [(21 16 6 62) 6]
Test Case: 388 | Input/Output: [(48 87 43 61) 43]
Test Case: 389 | Input/Output: [(99 12 98 95) 12]
Test Case: 390 | Input/Output: [(27 1 94 36) 1]
Test Case: 391 | Input/Output: [(84 60 74 82) 60]
Test Case: 392 | Input/Output: [(49 63 14 35) 14]
Test Case: 393 | Input/Output: [(48 43 41 53) 41]
Test Case: 394 | Input/Output: [(73 31 88 20) 20]
Test Case: 395 | Input/Output: [(61 92 20 94) 20]
Test Case: 396 | Input/Output: [(11 68 88 4) 4]
Test Case: 397 | Input/Output: [(93 65 10 70) 10]
Test Case: 398 | Input/Output: [(81 74 7 16) 7]
Test Case: 399 | Input/Output: [(42 9 96 80) 9]
Test Case: 400 | Input/Output: [(-41 -91 100 -33) -91]
Test Case: 401 | Input/Output: [(58 -95 37 91) -95]
Test Case: 402 | Input/Output: [(-63 -50 -36 -71) -71]
Test Case: 403 | Input/Output: [(100 89 -30 -12) -30]
Test Case: 404 | Input/Output: [(-48 -73 -87 23) -87]
Test Case: 405 | Input/Output: [(15 63 33 -93) -93]
Test Case: 406 | Input/Output: [(-81 48 33 67) -81]
Test Case: 407 | Input/Output: [(-98 28 21 97) -98]
Test Case: 408 | Input/Output: [(71 -52 46 -46) -52]
Test Case: 409 | Input/Output: [(91 -35 -37 99) -37]
Test Case: 410 | Input/Output: [(85 -77 86 98) -77]
Test Case: 411 | Input/Output: [(13 75 28 -13) -13]
Test Case: 412 | Input/Output: [(-64 52 80 5) -64]
Test Case: 413 | Input/Output: [(56 96 -66 -35) -66]
Test Case: 414 | Input/Output: [(95 26 36 53) 26]
Test Case: 415 | Input/Output: [(59 10 73 13) 10]
Test Case: 416 | Input/Output: [(23 89 90 9) 9]
Test Case: 417 | Input/Output: [(63 -1 98 -57) -57]
Test Case: 418 | Input/Output: [(59 38 -10 -55) -55]
Test Case: 419 | Input/Output: [(18 -54 -53 21) -54]
Test Case: 420 | Input/Output: [(26 -9 -51 -73) -73]
Test Case: 421 | Input/Output: [(50 42 -21 -90) -90]
Test Case: 422 | Input/Output: [(74 55 61 56) 55]
Test Case: 423 | Input/Output: [(-89 30 -86 -45) -89]
Test Case: 424 | Input/Output: [(82 8 28 -55) -55]
Test Case: 425 | Input/Output: [(44 30 22 -1) -1]
Test Case: 426 | Input/Output: [(82 67 56 -72) -72]
Test Case: 427 | Input/Output: [(27 65 54 -78) -78]
Test Case: 428 | Input/Output: [(68 71 -62 14) -62]
Test Case: 429 | Input/Output: [(-77 83 -94 -98) -98]
Test Case: 430 | Input/Output: [(2 -69 -91 19) -91]
Test Case: 431 | Input/Output: [(94 -63 -100 -14) -100]
Test Case: 432 | Input/Output: [(36 -82 98 5) -82]
Test Case: 433 | Input/Output: [(-81 -48 -78 -18) -81]
Test Case: 434 | Input/Output: [(99 70 -95 -94) -95]
Test Case: 435 | Input/Output: [(-39 27 -86 28) -86]
Test Case: 436 | Input/Output: [(28 -75 39 6) -75]
Test Case: 437 | Input/Output: [(-34 -82 33 10) -82]
Test Case: 438 | Input/Output: [(-55 92 31 25) -55]
Test Case: 439 | Input/Output: [(-89 81 81 69) -89]
Test Case: 440 | Input/Output: [(-15 -76 -14 -6) -76]
Test Case: 441 | Input/Output: [(-67 31 31 0) -67]
Test Case: 442 | Input/Output: [(-64 -89 -61 31) -89]
Test Case: 443 | Input/Output: [(-15 -22 -25 -84) -84]
Test Case: 444 | Input/Output: [(-48 -35 -54 86) -54]
Test Case: 445 | Input/Output: [(-12 -36 -70 84) -70]
Test Case: 446 | Input/Output: [(-77 -56 99 -29) -77]
Test Case: 447 | Input/Output: [(6 -17 64 -26) -26]
Test Case: 448 | Input/Output: [(-74 41 -69 -10) -74]
Test Case: 449 | Input/Output: [(-54 -61 -86 48) -86]
Test Case: 450 | Input/Output: [(32 -53 24 -47) -53]
Test Case: 451 | Input/Output: [(-38 19 -3 -92) -92]
Test Case: 452 | Input/Output: [(-59 -6 -29 69) -59]
Test Case: 453 | Input/Output: [(-26 -73 -22 44) -73]
Test Case: 454 | Input/Output: [(-17 -72 75 -1) -72]
Test Case: 455 | Input/Output: [(-64 65 -25 100) -64]
Test Case: 456 | Input/Output: [(4 35 -62 -94) -94]
Test Case: 457 | Input/Output: [(25 20 -16 90) -16]
Test Case: 458 | Input/Output: [(38 -41 34 -15) -41]
Test Case: 459 | Input/Output: [(93 82 -35 63) -35]
Test Case: 460 | Input/Output: [(12 93 8 -71) -71]
Test Case: 461 | Input/Output: [(-45 -43 -77 -81) -81]
Test Case: 462 | Input/Output: [(-50 15 45 -80) -80]
Test Case: 463 | Input/Output: [(-91 -12 41 97) -91]
Test Case: 464 | Input/Output: [(98 -55 10 80) -55]
Test Case: 465 | Input/Output: [(-21 97 51 63) -21]
Test Case: 466 | Input/Output: [(-37 29 97 -84) -84]
Test Case: 467 | Input/Output: [(10 97 -46 70) -46]
Test Case: 468 | Input/Output: [(25 -13 -43 -75) -75]
Test Case: 469 | Input/Output: [(98 -94 -27 -46) -94]
Test Case: 470 | Input/Output: [(75 -42 51 -51) -51]
Test Case: 471 | Input/Output: [(70 -49 -90 -1) -90]
Test Case: 472 | Input/Output: [(-73 -44 -5 -83) -83]
Test Case: 473 | Input/Output: [(70 -12 -79 -32) -79]
Test Case: 474 | Input/Output: [(-86 -60 -99 23) -99]
Test Case: 475 | Input/Output: [(-80 -55 -24 -12) -80]
Test Case: 476 | Input/Output: [(81 -8 -42 -88) -88]
Test Case: 477 | Input/Output: [(87 6 -31 -25) -31]
Test Case: 478 | Input/Output: [(-38 74 68 -90) -90]
Test Case: 479 | Input/Output: [(22 88 16 -63) -63]
Test Case: 480 | Input/Output: [(45 -44 73 87) -44]
Test Case: 481 | Input/Output: [(-100 -6 -7 20) -100]
Test Case: 482 | Input/Output: [(73 52 95 76) 52]
Test Case: 483 | Input/Output: [(-100 45 34 52) -100]
Test Case: 484 | Input/Output: [(-81 -55 -21 -14) -81]
Test Case: 485 | Input/Output: [(-32 17 -29 -87) -87]
Test Case: 486 | Input/Output: [(-9 -9 -20 -97) -97]
Test Case: 487 | Input/Output: [(-92 -1 65 -99) -99]
Test Case: 488 | Input/Output: [(77 23 64 5) 5]
Test Case: 489 | Input/Output: [(20 100 56 17) 17]
Test Case: 490 | Input/Output: [(-51 22 2 -15) -51]
Test Case: 491 | Input/Output: [(53 -66 45 -52) -66]
Test Case: 492 | Input/Output: [(20 -26 -92 -34) -92]
Test Case: 493 | Input/Output: [(-19 -14 55 -37) -37]
Test Case: 494 | Input/Output: [(-77 -18 -26 82) -77]
Test Case: 495 | Input/Output: [(67 -75 -62 -49) -75]
Test Case: 496 | Input/Output: [(59 -80 25 4) -80]
Test Case: 497 | Input/Output: [(-47 28 79 29) -47]
Test Case: 498 | Input/Output: [(-78 -62 -73 61) -78]
Test Case: 499 | Input/Output: [(-100 -16 -88 19) -100]
Test Case: 500 | Input/Output: [(-61 -26 -77 -96) -96]
Test Case: 501 | Input/Output: [(-76 69 35 50) -76]
Test Case: 502 | Input/Output: [(40 48 -64 52) -64]
Test Case: 503 | Input/Output: [(-51 -3 95 26) -51]
Test Case: 504 | Input/Output: [(57 34 -83 22) -83]
Test Case: 505 | Input/Output: [(91 -44 -8 -43) -44]
Test Case: 506 | Input/Output: [(8 37 18 42) 8]
Test Case: 507 | Input/Output: [(-13 63 -44 53) -44]
Test Case: 508 | Input/Output: [(-86 64 -60 -72) -86]
Test Case: 509 | Input/Output: [(-68 -38 64 65) -68]
Test Case: 510 | Input/Output: [(-23 -50 -28 -39) -50]
Test Case: 511 | Input/Output: [(19 -44 -9 65) -44]
Test Case: 512 | Input/Output: [(-63 -59 -55 45) -63]
Test Case: 513 | Input/Output: [(85 76 -63 -51) -63]
Test Case: 514 | Input/Output: [(-12 -67 12 -48) -67]
Test Case: 515 | Input/Output: [(-12 -87 -39 -40) -87]
Test Case: 516 | Input/Output: [(30 -12 44 -14) -14]
Test Case: 517 | Input/Output: [(6 -6 -16 93) -16]
Test Case: 518 | Input/Output: [(-48 -13 50 -100) -100]
Test Case: 519 | Input/Output: [(13 80 -67 49) -67]
Test Case: 520 | Input/Output: [(70 69 -23 7) -23]
Test Case: 521 | Input/Output: [(-92 -33 23 -21) -92]
Test Case: 522 | Input/Output: [(18 -88 -71 3) -88]
Test Case: 523 | Input/Output: [(10 -81 9 -42) -81]
Test Case: 524 | Input/Output: [(4 -39 31 -88) -88]
Test Case: 525 | Input/Output: [(-56 -28 74 80) -56]
Test Case: 526 | Input/Output: [(83 -97 66 -64) -97]
Test Case: 527 | Input/Output: [(-12 10 -77 97) -77]
Test Case: 528 | Input/Output: [(-80 -14 -28 93) -80]
Test Case: 529 | Input/Output: [(-32 74 -10 71) -32]
Test Case: 530 | Input/Output: [(57 -43 -88 -85) -88]
Test Case: 531 | Input/Output: [(-82 -72 -98 77) -98]
Test Case: 532 | Input/Output: [(42 99 38 58) 38]
Test Case: 533 | Input/Output: [(4 -94 92 -89) -94]
Test Case: 534 | Input/Output: [(49 74 -86 -26) -86]
Test Case: 535 | Input/Output: [(80 -66 65 -96) -96]
Test Case: 536 | Input/Output: [(-58 33 -23 86) -58]
Test Case: 537 | Input/Output: [(22 -74 9 -78) -78]
Test Case: 538 | Input/Output: [(0 13 -97 67) -97]
Test Case: 539 | Input/Output: [(33 -80 -56 -16) -80]
Test Case: 540 | Input/Output: [(-17 43 7 94) -17]
Test Case: 541 | Input/Output: [(5 -37 39 -11) -37]
Test Case: 542 | Input/Output: [(-39 41 8 58) -39]
Test Case: 543 | Input/Output: [(-59 -63 76 -83) -83]
Test Case: 544 | Input/Output: [(-61 -70 -14 91) -70]
Test Case: 545 | Input/Output: [(43 -92 15 -48) -92]
Test Case: 546 | Input/Output: [(-60 -1 -26 96) -60]
Test Case: 547 | Input/Output: [(-3 -19 -82 59) -82]
Test Case: 548 | Input/Output: [(-4 90 57 77) -4]
Test Case: 549 | Input/Output: [(8 30 -1 56) -1]
Test Case: 550 | Input/Output: [(58 87 8 37) 8]
Test Case: 551 | Input/Output: [(-19 55 -69 91) -69]
Test Case: 552 | Input/Output: [(-70 31 73 -92) -92]
Test Case: 553 | Input/Output: [(60 52 -35 56) -35]
Test Case: 554 | Input/Output: [(-99 30 49 8) -99]
Test Case: 555 | Input/Output: [(69 -36 74 -83) -83]
Test Case: 556 | Input/Output: [(-79 -69 48 63) -79]
Test Case: 557 | Input/Output: [(-73 -8 13 50) -73]
Test Case: 558 | Input/Output: [(-9 37 32 -61) -61]
Test Case: 559 | Input/Output: [(-66 13 -21 88) -66]
Test Case: 560 | Input/Output: [(21 -25 -12 92) -25]
Test Case: 561 | Input/Output: [(14 59 86 41) 14]
Test Case: 562 | Input/Output: [(67 87 51 51) 51]
Test Case: 563 | Input/Output: [(-7 -90 -45 -38) -90]
Test Case: 564 | Input/Output: [(23 48 -38 19) -38]
Test Case: 565 | Input/Output: [(-71 3 -88 77) -88]
Test Case: 566 | Input/Output: [(-67 19 -51 92) -67]
Test Case: 567 | Input/Output: [(17 72 35 -29) -29]
Test Case: 568 | Input/Output: [(65 66 -19 63) -19]
Test Case: 569 | Input/Output: [(-48 90 -53 -89) -89]
Test Case: 570 | Input/Output: [(98 37 -32 80) -32]
Test Case: 571 | Input/Output: [(-74 44 39 23) -74]
Test Case: 572 | Input/Output: [(33 40 -16 13) -16]
Test Case: 573 | Input/Output: [(-38 -97 84 55) -97]
Test Case: 574 | Input/Output: [(-81 69 3 -91) -91]
Test Case: 575 | Input/Output: [(20 1 -88 -96) -96]
Test Case: 576 | Input/Output: [(-65 -5 48 -77) -77]
Test Case: 577 | Input/Output: [(-95 47 -32 51) -95]
Test Case: 578 | Input/Output: [(-43 -16 86 -73) -73]
Test Case: 579 | Input/Output: [(-68 -19 95 2) -68]
Test Case: 580 | Input/Output: [(-32 -71 -76 -56) -76]
Test Case: 581 | Input/Output: [(95 49 -90 -32) -90]
Test Case: 582 | Input/Output: [(-4 -65 -17 81) -65]
Test Case: 583 | Input/Output: [(34 16 98 20) 16]
Test Case: 584 | Input/Output: [(-66 -53 -58 84) -66]
Test Case: 585 | Input/Output: [(-3 -62 96 85) -62]
Test Case: 586 | Input/Output: [(-90 -99 -73 69) -99]
Test Case: 587 | Input/Output: [(-37 38 -72 -49) -72]
Test Case: 588 | Input/Output: [(-17 -29 -12 18) -29]
Test Case: 589 | Input/Output: [(97 52 78 75) 52]
Test Case: 590 | Input/Output: [(12 -87 -85 -18) -87]
Test Case: 591 | Input/Output: [(70 -69 -53 65) -69]
Test Case: 592 | Input/Output: [(-59 45 40 -100) -100]
Test Case: 593 | Input/Output: [(-41 -22 -26 12) -41]
Test Case: 594 | Input/Output: [(84 63 4 -95) -95]
Test Case: 595 | Input/Output: [(13 11 -13 56) -13]
Test Case: 596 | Input/Output: [(38 38 27 31) 27]
Test Case: 597 | Input/Output: [(59 43 -87 86) -87]
Test Case: 598 | Input/Output: [(31 -30 96 90) -30]
Test Case: 599 | Input/Output: [(-19 8 36 -38) -38]
Test Case: 600 | Input/Output: [(9 -13 -85 -90) -90]
Test Case: 601 | Input/Output: [(-14 -16 -59 -51) -59]
Test Case: 602 | Input/Output: [(45 93 40 89) 40]
Test Case: 603 | Input/Output: [(60 9 78 3) 3]
Test Case: 604 | Input/Output: [(-21 24 -45 -62) -62]
Test Case: 605 | Input/Output: [(-72 -36 -95 -54) -95]
Test Case: 606 | Input/Output: [(32 -96 89 -33) -96]
Test Case: 607 | Input/Output: [(100 80 -15 73) -15]
Test Case: 608 | Input/Output: [(28 -15 3 19) -15]
Test Case: 609 | Input/Output: [(-52 53 7 -77) -77]
Test Case: 610 | Input/Output: [(30 93 42 36) 30]
Test Case: 611 | Input/Output: [(-4 33 -78 -91) -91]
Test Case: 612 | Input/Output: [(26 20 65 89) 20]
Test Case: 613 | Input/Output: [(-96 -61 -23 -2) -96]
Test Case: 614 | Input/Output: [(68 -23 -79 -53) -79]
Test Case: 615 | Input/Output: [(-15 -71 -49 -60) -71]
Test Case: 616 | Input/Output: [(-79 -36 -11 48) -79]
Test Case: 617 | Input/Output: [(-39 -99 49 22) -99]
Test Case: 618 | Input/Output: [(60 -30 46 -59) -59]
Test Case: 619 | Input/Output: [(-15 -87 -59 90) -87]
Test Case: 620 | Input/Output: [(-99 92 5 -62) -99]
Test Case: 621 | Input/Output: [(96 -70 25 88) -70]
Test Case: 622 | Input/Output: [(82 27 -68 19) -68]
Test Case: 623 | Input/Output: [(73 -58 -67 -48) -67]
Test Case: 624 | Input/Output: [(5 -10 28 -32) -32]
Test Case: 625 | Input/Output: [(-35 17 8 81) -35]
Test Case: 626 | Input/Output: [(-15 91 -39 48) -39]
Test Case: 627 | Input/Output: [(-52 -8 69 -31) -52]
Test Case: 628 | Input/Output: [(-43 -94 -97 52) -97]
Test Case: 629 | Input/Output: [(88 70 -96 63) -96]
Test Case: 630 | Input/Output: [(7 -40 74 67) -40]
Test Case: 631 | Input/Output: [(36 -89 -54 -63) -89]
Test Case: 632 | Input/Output: [(34 -10 5 -9) -10]
Test Case: 633 | Input/Output: [(-42 -65 -96 -54) -96]
Test Case: 634 | Input/Output: [(-67 29 13 89) -67]
Test Case: 635 | Input/Output: [(41 79 -56 -92) -92]
Test Case: 636 | Input/Output: [(-68 68 -46 -86) -86]
Test Case: 637 | Input/Output: [(31 87 64 -17) -17]
Test Case: 638 | Input/Output: [(-66 -91 -17 -96) -96]
Test Case: 639 | Input/Output: [(-36 53 -17 31) -36]
Test Case: 640 | Input/Output: [(42 0 -62 72) -62]
Test Case: 641 | Input/Output: [(-83 66 -78 15) -83]
Test Case: 642 | Input/Output: [(55 -54 -87 -20) -87]
Test Case: 643 | Input/Output: [(21 -31 -26 -38) -38]
Test Case: 644 | Input/Output: [(1 22 100 -37) -37]
Test Case: 645 | Input/Output: [(25 74 -82 74) -82]
Test Case: 646 | Input/Output: [(-40 46 33 -69) -69]
Test Case: 647 | Input/Output: [(83 89 -5 -22) -22]
Test Case: 648 | Input/Output: [(-64 -14 -38 30) -64]
Test Case: 649 | Input/Output: [(-71 -86 87 71) -86]
Test Case: 650 | Input/Output: [(-71 -33 27 83) -71]
Test Case: 651 | Input/Output: [(-52 80 -8 -96) -96]
Test Case: 652 | Input/Output: [(-80 100 -80 -17) -80]
Test Case: 653 | Input/Output: [(-40 31 4 87) -40]
Test Case: 654 | Input/Output: [(-54 -4 -93 74) -93]
Test Case: 655 | Input/Output: [(48 92 22 66) 22]
Test Case: 656 | Input/Output: [(90 49 45 -7) -7]
Test Case: 657 | Input/Output: [(49 5 -87 56) -87]
Test Case: 658 | Input/Output: [(-27 11 84 -59) -59]
Test Case: 659 | Input/Output: [(2 -18 -14 33) -18]
Test Case: 660 | Input/Output: [(-70 -32 59 -85) -85]
Test Case: 661 | Input/Output: [(4 52 34 -90) -90]
Test Case: 662 | Input/Output: [(-25 -23 -74 -34) -74]
Test Case: 663 | Input/Output: [(6 13 -5 -97) -97]
Test Case: 664 | Input/Output: [(31 -74 17 92) -74]
Test Case: 665 | Input/Output: [(99 -48 -96 5) -96]
Test Case: 666 | Input/Output: [(-46 10 69 16) -46]
Test Case: 667 | Input/Output: [(-34 -9 -4 7) -34]
Test Case: 668 | Input/Output: [(49 50 -35 97) -35]
Test Case: 669 | Input/Output: [(76 -65 -86 -62) -86]
Test Case: 670 | Input/Output: [(-37 35 51 97) -37]
Test Case: 671 | Input/Output: [(48 34 -10 -21) -21]
Test Case: 672 | Input/Output: [(52 -37 -25 -70) -70]
Test Case: 673 | Input/Output: [(22 -77 13 -70) -77]
Test Case: 674 | Input/Output: [(48 87 -60 66) -60]
Test Case: 675 | Input/Output: [(0 11 -48 -96) -96]
Test Case: 676 | Input/Output: [(74 47 4 26) 4]
Test Case: 677 | Input/Output: [(21 83 -16 26) -16]
Test Case: 678 | Input/Output: [(22 -57 49 3) -57]
Test Case: 679 | Input/Output: [(48 -44 -22 32) -44]
Test Case: 680 | Input/Output: [(35 -3 72 28) -3]
Test Case: 681 | Input/Output: [(75 -12 -84 -30) -84]
Test Case: 682 | Input/Output: [(-73 100 41 7) -73]
Test Case: 683 | Input/Output: [(36 -36 5 74) -36]
Test Case: 684 | Input/Output: [(-63 61 -100 -48) -100]
Test Case: 685 | Input/Output: [(-76 43 -16 -56) -76]
Test Case: 686 | Input/Output: [(-99 26 70 91) -99]
Test Case: 687 | Input/Output: [(59 70 -87 98) -87]
Test Case: 688 | Input/Output: [(-26 -60 -46 -76) -76]
Test Case: 689 | Input/Output: [(86 -28 -17 -61) -61]
Test Case: 690 | Input/Output: [(-3 41 12 -26) -26]
Test Case: 691 | Input/Output: [(64 -48 23 25) -48]
Test Case: 692 | Input/Output: [(91 23 -58 -84) -84]
Test Case: 693 | Input/Output: [(-14 -93 -27 -74) -93]
Test Case: 694 | Input/Output: [(52 75 59 84) 52]
Test Case: 695 | Input/Output: [(-22 61 18 1) -22]
Test Case: 696 | Input/Output: [(-79 87 -34 26) -79]
Test Case: 697 | Input/Output: [(29 99 20 -57) -57]
Test Case: 698 | Input/Output: [(39 100 -57 46) -57]
Test Case: 699 | Input/Output: [(-64 54 -59 96) -64]
Test Case: 700 | Input/Output: [(-67 44 78 -54) -67]
Test Case: 701 | Input/Output: [(64 -9 21 55) -9]
Test Case: 702 | Input/Output: [(-58 16 -95 38) -95]
Test Case: 703 | Input/Output: [(12 -90 -53 -25) -90]
Test Case: 704 | Input/Output: [(6 -28 -19 -75) -75]
Test Case: 705 | Input/Output: [(-90 -35 100 78) -90]
Test Case: 706 | Input/Output: [(18 57 -25 75) -25]
Test Case: 707 | Input/Output: [(-44 21 -6 -14) -44]
Test Case: 708 | Input/Output: [(-21 34 -31 0) -31]
Test Case: 709 | Input/Output: [(-19 -5 55 -79) -79]
Test Case: 710 | Input/Output: [(14 74 -99 68) -99]
Test Case: 711 | Input/Output: [(100 67 58 90) 58]
Test Case: 712 | Input/Output: [(-86 -24 -80 36) -86]
Test Case: 713 | Input/Output: [(-46 -34 10 9) -46]
Test Case: 714 | Input/Output: [(25 -17 100 75) -17]
Test Case: 715 | Input/Output: [(-14 -42 93 -19) -42]
Test Case: 716 | Input/Output: [(89 -74 -99 60) -99]
Test Case: 717 | Input/Output: [(-53 -53 -2 -28) -53]
Test Case: 718 | Input/Output: [(-99 -3 -68 100) -99]
Test Case: 719 | Input/Output: [(-75 -48 73 11) -75]
Test Case: 720 | Input/Output: [(-42 -51 53 -76) -76]
Test Case: 721 | Input/Output: [(-40 22 -17 -1) -40]
Test Case: 722 | Input/Output: [(20 40 -29 51) -29]
Test Case: 723 | Input/Output: [(8 -73 -55 -96) -96]
Test Case: 724 | Input/Output: [(-9 73 55 88) -9]
Test Case: 725 | Input/Output: [(26 56 91 22) 22]
Test Case: 726 | Input/Output: [(75 62 -38 41) -38]
Test Case: 727 | Input/Output: [(43 -62 -32 54) -62]
Test Case: 728 | Input/Output: [(-100 15 -78 -72) -100]
Test Case: 729 | Input/Output: [(52 -47 63 -55) -55]
Test Case: 730 | Input/Output: [(-89 37 -34 91) -89]
Test Case: 731 | Input/Output: [(49 31 15 58) 15]
Test Case: 732 | Input/Output: [(-47 -12 27 28) -47]
Test Case: 733 | Input/Output: [(-24 -94 -83 -1) -94]
Test Case: 734 | Input/Output: [(-56 -26 73 69) -56]
Test Case: 735 | Input/Output: [(17 92 -68 32) -68]
Test Case: 736 | Input/Output: [(-52 -85 -39 -30) -85]
Test Case: 737 | Input/Output: [(-82 -57 32 72) -82]
Test Case: 738 | Input/Output: [(23 57 -86 22) -86]
Test Case: 739 | Input/Output: [(67 -8 -30 24) -30]
Test Case: 740 | Input/Output: [(-48 97 -69 14) -69]
Test Case: 741 | Input/Output: [(58 -63 -20 5) -63]
Test Case: 742 | Input/Output: [(-18 84 -86 -73) -86]
Test Case: 743 | Input/Output: [(19 48 27 -84) -84]
Test Case: 744 | Input/Output: [(5 -27 -69 61) -69]
Test Case: 745 | Input/Output: [(-97 -17 -94 -28) -97]
Test Case: 746 | Input/Output: [(-1 76 -17 -9) -17]
Test Case: 747 | Input/Output: [(-36 75 24 17) -36]
Test Case: 748 | Input/Output: [(-67 -30 33 -7) -67]
Test Case: 749 | Input/Output: [(-11 72 48 21) -11]
Test Case: 750 | Input/Output: [(52 64 -7 63) -7]
Test Case: 751 | Input/Output: [(58 77 -91 -96) -96]
Test Case: 752 | Input/Output: [(65 -26 40 0) -26]
Test Case: 753 | Input/Output: [(-78 -8 -98 -85) -98]
Test Case: 754 | Input/Output: [(90 51 -38 -38) -38]
Test Case: 755 | Input/Output: [(81 50 97 -51) -51]
Test Case: 756 | Input/Output: [(43 73 42 27) 27]
Test Case: 757 | Input/Output: [(53 -4 80 -9) -9]
Test Case: 758 | Input/Output: [(-26 -75 -76 23) -76]
Test Case: 759 | Input/Output: [(8 86 84 -95) -95]
Test Case: 760 | Input/Output: [(75 2 -81 -49) -81]
Test Case: 761 | Input/Output: [(-10 -85 45 -76) -85]
Test Case: 762 | Input/Output: [(91 -61 -53 -92) -92]
Test Case: 763 | Input/Output: [(-24 -100 -16 42) -100]
Test Case: 764 | Input/Output: [(-8 -44 64 30) -44]
Test Case: 765 | Input/Output: [(98 -26 88 -52) -52]
Test Case: 766 | Input/Output: [(-34 -57 -88 20) -88]
Test Case: 767 | Input/Output: [(-93 -44 36 -72) -93]
Test Case: 768 | Input/Output: [(-64 -95 20 82) -95]
Test Case: 769 | Input/Output: [(16 28 -49 68) -49]
Test Case: 770 | Input/Output: [(-80 -19 -40 46) -80]
Test Case: 771 | Input/Output: [(56 21 -18 -47) -47]
Test Case: 772 | Input/Output: [(44 53 25 -36) -36]
Test Case: 773 | Input/Output: [(-89 74 67 59) -89]
Test Case: 774 | Input/Output: [(85 68 20 53) 20]
Test Case: 775 | Input/Output: [(-48 6 79 -89) -89]
Test Case: 776 | Input/Output: [(6 42 -32 -17) -32]
Test Case: 777 | Input/Output: [(-3 48 -64 58) -64]
Test Case: 778 | Input/Output: [(100 54 34 7) 7]
Test Case: 779 | Input/Output: [(-32 93 -42 72) -42]
Test Case: 780 | Input/Output: [(-74 -58 66 11) -74]
Test Case: 781 | Input/Output: [(-55 74 67 22) -55]
Test Case: 782 | Input/Output: [(-60 44 74 -44) -60]
Test Case: 783 | Input/Output: [(17 86 -83 17) -83]
Test Case: 784 | Input/Output: [(-59 90 74 -34) -59]
Test Case: 785 | Input/Output: [(12 -8 -1 -55) -55]
Test Case: 786 | Input/Output: [(54 -26 99 -20) -26]
Test Case: 787 | Input/Output: [(48 -45 36 -41) -45]
Test Case: 788 | Input/Output: [(-50 -94 72 -70) -94]
Test Case: 789 | Input/Output: [(66 -92 -23 -57) -92]
Test Case: 790 | Input/Output: [(98 -86 -14 -24) -86]
Test Case: 791 | Input/Output: [(-12 100 -88 -31) -88]
Test Case: 792 | Input/Output: [(84 -66 -37 -92) -92]
Test Case: 793 | Input/Output: [(89 47 46 -55) -55]
Test Case: 794 | Input/Output: [(-47 25 -87 -13) -87]
Test Case: 795 | Input/Output: [(-79 -6 80 29) -79]
Test Case: 796 | Input/Output: [(-32 50 37 79) -32]
Test Case: 797 | Input/Output: [(13 1 63 -52) -52]
Test Case: 798 | Input/Output: [(6 1 71 16) 1]
Test Case: 799 | Input/Output: [(54 -43 91 76) -43]
Test Case: 800 | Input/Output: [(-77 -82 -46 -26) -82]
Test Case: 801 | Input/Output: [(0 50 -30 32) -30]
Test Case: 802 | Input/Output: [(36 -46 22 -50) -50]
Test Case: 803 | Input/Output: [(-43 81 85 80) -43]
Test Case: 804 | Input/Output: [(16 -71 -27 -74) -74]
Test Case: 805 | Input/Output: [(28 -58 -35 -13) -58]
Test Case: 806 | Input/Output: [(-51 -59 46 100) -59]
Test Case: 807 | Input/Output: [(41 67 44 47) 41]
Test Case: 808 | Input/Output: [(-39 -23 60 -12) -39]
Test Case: 809 | Input/Output: [(-7 -3 -25 83) -25]
Test Case: 810 | Input/Output: [(-85 -24 -93 79) -93]
Test Case: 811 | Input/Output: [(16 44 61 51) 16]
Test Case: 812 | Input/Output: [(-95 -79 -9 40) -95]
Test Case: 813 | Input/Output: [(0 38 69 -58) -58]
Test Case: 814 | Input/Output: [(70 98 -41 39) -41]
Test Case: 815 | Input/Output: [(70 -58 9 47) -58]
Test Case: 816 | Input/Output: [(42 86 89 -21) -21]
Test Case: 817 | Input/Output: [(-50 -91 -97 -39) -97]
Test Case: 818 | Input/Output: [(6 -16 -96 29) -96]
Test Case: 819 | Input/Output: [(7 39 -9 -11) -11]
Test Case: 820 | Input/Output: [(-33 86 25 -17) -33]
Test Case: 821 | Input/Output: [(12 76 -40 76) -40]
Test Case: 822 | Input/Output: [(100 74 21 32) 21]
Test Case: 823 | Input/Output: [(-15 -49 -64 -41) -64]
Test Case: 824 | Input/Output: [(44 -28 77 45) -28]
Test Case: 825 | Input/Output: [(35 76 61 -45) -45]
Test Case: 826 | Input/Output: [(-26 -10 31 29) -26]
Test Case: 827 | Input/Output: [(-45 38 16 -21) -45]
Test Case: 828 | Input/Output: [(69 -77 90 57) -77]
Test Case: 829 | Input/Output: [(82 -87 68 -57) -87]
Test Case: 830 | Input/Output: [(0 15 14 -37) -37]
Test Case: 831 | Input/Output: [(7 83 58 -6) -6]
Test Case: 832 | Input/Output: [(-11 -33 -12 19) -33]
Test Case: 833 | Input/Output: [(-86 -86 -96 8) -96]
Test Case: 834 | Input/Output: [(-59 33 -36 73) -59]
Test Case: 835 | Input/Output: [(9 47 -59 -90) -90]
Test Case: 836 | Input/Output: [(39 -5 38 -51) -51]
Test Case: 837 | Input/Output: [(40 -69 71 63) -69]
Test Case: 838 | Input/Output: [(10 63 -87 -56) -87]
Test Case: 839 | Input/Output: [(41 -64 -51 -37) -64]
Test Case: 840 | Input/Output: [(31 66 -60 3) -60]
Test Case: 841 | Input/Output: [(58 -5 44 -87) -87]
Test Case: 842 | Input/Output: [(-1 37 -21 -50) -50]
Test Case: 843 | Input/Output: [(43 77 -97 91) -97]
Test Case: 844 | Input/Output: [(-95 -84 -30 97) -95]
Test Case: 845 | Input/Output: [(-19 52 56 55) -19]
Test Case: 846 | Input/Output: [(35 21 83 7) 7]
Test Case: 847 | Input/Output: [(1 -75 -57 -42) -75]
Test Case: 848 | Input/Output: [(-85 96 1 18) -85]
Test Case: 849 | Input/Output: [(-32 -78 -91 30) -91]
Test Case: 850 | Input/Output: [(-33 82 -36 69) -36]
Test Case: 851 | Input/Output: [(-3 76 -63 6) -63]
Test Case: 852 | Input/Output: [(6 46 -40 -20) -40]
Test Case: 853 | Input/Output: [(99 -78 96 50) -78]
Test Case: 854 | Input/Output: [(10 39 -99 89) -99]
Test Case: 855 | Input/Output: [(64 32 -61 0) -61]
Test Case: 856 | Input/Output: [(77 95 79 -49) -49]
Test Case: 857 | Input/Output: [(-87 -32 17 -14) -87]
Test Case: 858 | Input/Output: [(-41 -7 25 -98) -98]
Test Case: 859 | Input/Output: [(22 -100 62 79) -100]
Test Case: 860 | Input/Output: [(72 -93 75 69) -93]
Test Case: 861 | Input/Output: [(95 -10 -85 -25) -85]
Test Case: 862 | Input/Output: [(-7 -91 -60 -6) -91]
Test Case: 863 | Input/Output: [(85 36 44 -92) -92]
Test Case: 864 | Input/Output: [(14 -20 37 19) -20]
Test Case: 865 | Input/Output: [(-45 48 46 -1) -45]
Test Case: 866 | Input/Output: [(60 67 -68 26) -68]
Test Case: 867 | Input/Output: [(64 39 -9 -89) -89]
Test Case: 868 | Input/Output: [(63 -20 91 38) -20]
Test Case: 869 | Input/Output: [(-41 -20 34 -88) -88]
Test Case: 870 | Input/Output: [(-42 -16 43 -92) -92]
Test Case: 871 | Input/Output: [(-50 58 -83 33) -83]
Test Case: 872 | Input/Output: [(80 23 79 53) 23]
Test Case: 873 | Input/Output: [(3 -79 82 31) -79]
Test Case: 874 | Input/Output: [(5 37 -14 -1) -14]
Test Case: 875 | Input/Output: [(70 26 -31 -85) -85]
Test Case: 876 | Input/Output: [(46 67 -32 -24) -32]
Test Case: 877 | Input/Output: [(-86 -23 -59 -89) -89]
Test Case: 878 | Input/Output: [(-68 57 -92 -34) -92]
Test Case: 879 | Input/Output: [(-74 -49 58 63) -74]
Test Case: 880 | Input/Output: [(84 92 14 4) 4]
Test Case: 881 | Input/Output: [(41 -96 3 -38) -96]
Test Case: 882 | Input/Output: [(-55 81 43 66) -55]
Test Case: 883 | Input/Output: [(-18 -36 -44 22) -44]
Test Case: 884 | Input/Output: [(10 -76 -49 60) -76]
Test Case: 885 | Input/Output: [(-4 88 16 15) -4]
Test Case: 886 | Input/Output: [(-49 -52 -81 27) -81]
Test Case: 887 | Input/Output: [(99 -39 97 -40) -40]
Test Case: 888 | Input/Output: [(51 -78 -42 -15) -78]
Test Case: 889 | Input/Output: [(78 14 73 11) 11]
Test Case: 890 | Input/Output: [(88 98 31 -16) -16]
Test Case: 891 | Input/Output: [(46 90 -85 65) -85]
Test Case: 892 | Input/Output: [(72 -60 93 -53) -60]
Test Case: 893 | Input/Output: [(-3 -22 49 -86) -86]
Test Case: 894 | Input/Output: [(82 29 58 -44) -44]
Test Case: 895 | Input/Output: [(20 61 59 -90) -90]
Test Case: 896 | Input/Output: [(43 -64 52 -24) -64]
Test Case: 897 | Input/Output: [(-10 30 -98 -41) -98]
Test Case: 898 | Input/Output: [(7 -38 71 8) -38]
Test Case: 899 | Input/Output: [(-42 -71 49 -85) -85]
Test Case: 900 | Input/Output: [(67 -72 76 76) -72]
Test Case: 901 | Input/Output: [(62 39 51 -87) -87]
Test Case: 902 | Input/Output: [(34 49 -25 76) -25]
Test Case: 903 | Input/Output: [(69 -90 69 9) -90]
Test Case: 904 | Input/Output: [(-16 31 -91 13) -91]
Test Case: 905 | Input/Output: [(-44 39 43 -97) -97]
Test Case: 906 | Input/Output: [(-74 -85 -18 95) -85]
Test Case: 907 | Input/Output: [(59 -92 29 45) -92]
Test Case: 908 | Input/Output: [(4 -81 -97 54) -97]
Test Case: 909 | Input/Output: [(5 -47 30 86) -47]
Test Case: 910 | Input/Output: [(-6 70 45 71) -6]
Test Case: 911 | Input/Output: [(-31 -34 -78 67) -78]
Test Case: 912 | Input/Output: [(0 -36 -50 -7) -50]
Test Case: 913 | Input/Output: [(-62 -67 -52 42) -67]
Test Case: 914 | Input/Output: [(-71 -5 -97 -55) -97]
Test Case: 915 | Input/Output: [(14 -70 -67 -79) -79]
Test Case: 916 | Input/Output: [(32 10 59 -98) -98]
Test Case: 917 | Input/Output: [(-80 6 -77 14) -80]
Test Case: 918 | Input/Output: [(59 -67 97 -52) -67]
Test Case: 919 | Input/Output: [(97 -38 1 -93) -93]
Test Case: 920 | Input/Output: [(2 -82 52 -77) -82]
Test Case: 921 | Input/Output: [(24 -93 45 17) -93]
Test Case: 922 | Input/Output: [(50 -4 -95 -93) -95]
Test Case: 923 | Input/Output: [(-85 94 8 -64) -85]
Test Case: 924 | Input/Output: [(-94 45 6 -1) -94]
Test Case: 925 | Input/Output: [(-72 81 -47 80) -72]
Test Case: 926 | Input/Output: [(57 15 -87 -17) -87]
Test Case: 927 | Input/Output: [(66 -53 -24 -89) -89]
Test Case: 928 | Input/Output: [(-93 -90 -51 -61) -93]
Test Case: 929 | Input/Output: [(54 -18 -78 24) -78]
Test Case: 930 | Input/Output: [(-60 83 38 -74) -74]
Test Case: 931 | Input/Output: [(-83 11 -57 19) -83]
Test Case: 932 | Input/Output: [(-79 -26 -32 88) -79]
Test Case: 933 | Input/Output: [(38 -52 -71 31) -71]
Test Case: 934 | Input/Output: [(-75 55 7 100) -75]
Test Case: 935 | Input/Output: [(-78 86 75 -87) -87]
Test Case: 936 | Input/Output: [(0 -9 1 -31) -31]
Test Case: 937 | Input/Output: [(-88 5 20 52) -88]
Test Case: 938 | Input/Output: [(-72 -19 -61 42) -72]
Test Case: 939 | Input/Output: [(-56 -47 81 21) -56]
Test Case: 940 | Input/Output: [(-65 -1 0 8) -65]
Test Case: 941 | Input/Output: [(-59 65 12 -30) -59]
Test Case: 942 | Input/Output: [(-92 97 69 -21) -92]
Test Case: 943 | Input/Output: [(-2 80 -79 -47) -79]
Test Case: 944 | Input/Output: [(-36 57 56 85) -36]
Test Case: 945 | Input/Output: [(51 100 -5 68) -5]
Test Case: 946 | Input/Output: [(-76 -85 -99 -58) -99]
Test Case: 947 | Input/Output: [(-20 -96 -42 95) -96]
Test Case: 948 | Input/Output: [(-85 47 -48 -20) -85]
Test Case: 949 | Input/Output: [(-56 39 -16 72) -56]
Test Case: 950 | Input/Output: [(84 -30 4 52) -30]
Test Case: 951 | Input/Output: [(-91 -24 -17 22) -91]
Test Case: 952 | Input/Output: [(15 -68 92 -56) -68]
Test Case: 953 | Input/Output: [(47 -79 -4 -61) -79]
Test Case: 954 | Input/Output: [(-47 57 49 -90) -90]
Test Case: 955 | Input/Output: [(-24 17 -69 7) -69]
Test Case: 956 | Input/Output: [(-15 -81 80 -87) -87]
Test Case: 957 | Input/Output: [(-6 42 -35 72) -35]
Test Case: 958 | Input/Output: [(-11 -39 -65 97) -65]
Test Case: 959 | Input/Output: [(69 -59 -13 18) -59]
Test Case: 960 | Input/Output: [(-26 68 -24 32) -26]
Test Case: 961 | Input/Output: [(31 73 -30 -17) -30]
Test Case: 962 | Input/Output: [(-99 -44 13 39) -99]
Test Case: 963 | Input/Output: [(38 46 63 -51) -51]
Test Case: 964 | Input/Output: [(-24 43 -100 84) -100]
Test Case: 965 | Input/Output: [(10 -22 -27 77) -27]
Test Case: 966 | Input/Output: [(88 -10 11 -99) -99]
Test Case: 967 | Input/Output: [(75 53 99 -61) -61]
Test Case: 968 | Input/Output: [(-76 36 27 47) -76]
Test Case: 969 | Input/Output: [(100 -57 16 41) -57]
Test Case: 970 | Input/Output: [(28 67 -29 41) -29]
Test Case: 971 | Input/Output: [(30 -63 -76 38) -76]
Test Case: 972 | Input/Output: [(-65 13 62 54) -65]
Test Case: 973 | Input/Output: [(61 -72 88 -43) -72]
Test Case: 974 | Input/Output: [(-16 -32 5 97) -32]
Test Case: 975 | Input/Output: [(96 88 17 -73) -73]
Test Case: 976 | Input/Output: [(39 -26 61 62) -26]
Test Case: 977 | Input/Output: [(-94 85 97 -38) -94]
Test Case: 978 | Input/Output: [(82 -57 -68 -45) -68]
Test Case: 979 | Input/Output: [(33 31 -54 11) -54]
Test Case: 980 | Input/Output: [(30 22 93 -66) -66]
Test Case: 981 | Input/Output: [(-17 41 54 -8) -17]
Test Case: 982 | Input/Output: [(9 24 41 -96) -96]
Test Case: 983 | Input/Output: [(-56 -7 -56 -73) -73]
Test Case: 984 | Input/Output: [(-98 95 -92 -74) -98]
Test Case: 985 | Input/Output: [(-78 -75 44 -56) -78]
Test Case: 986 | Input/Output: [(35 1 90 63) 1]
Test Case: 987 | Input/Output: [(75 0 64 -93) -93]
Test Case: 988 | Input/Output: [(-6 -85 -93 -23) -93]
Test Case: 989 | Input/Output: [(70 -15 67 28) -15]
Test Case: 990 | Input/Output: [(20 -26 76 -61) -61]
Test Case: 991 | Input/Output: [(21 73 50 79) 21]
Test Case: 992 | Input/Output: [(62 -46 -77 79) -77]
Test Case: 993 | Input/Output: [(-94 69 -13 -37) -94]
Test Case: 994 | Input/Output: [(-48 -99 40 0) -99]
Test Case: 995 | Input/Output: [(68 -98 -79 53) -98]
Test Case: 996 | Input/Output: [(83 99 77 80) 77]
Test Case: 997 | Input/Output: [(-5 -3 19 47) -5]
Test Case: 998 | Input/Output: [(77 -14 57 -85) -85]
Test Case: 999 | Input/Output: [(44 -29 2 40) -29]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
random-screen = false
random-seed = -26 8 43 -68 -64 -102 70 27 90 15 9 21 27 22 109 -66
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -78 -12 -12] -78] [[81 -20 -20 -20] -20] [[24 24 24 -47] -47] [[-24 -24 -24 -67] -67] [[-26 34 34 34] -26] [[-28 -28 72 -28] -28] [[55 55 -54 55] -54] [[-76 -6 -76 -76] -76] [[64 9 9 9] 9] [[54 -42 54 54] -42] [(96 96 96 96) 96] [(-77 -77 -77 -77) -77] [(50 50 50 50) 50] [(78 78 78 78) 78] [(68 68 68 68) 68] [(32 34 13 85) 13] [(93 25 3 96) 3] [(75 32 1 3) 1] [(96 58 20 39) 20] [(8 94 4 34) 4] [(78 76 29 19) 19] [(29 56 55 15) 15] [(67 99 63 33) 33] [(41 64 42 30) 30] [(96 25 93 14) 14] [(77 73 49 44) 44] [(12 61 86 21) 12] [(30 12 1 56) 1] [(88 9 15 13) 9] [(41 67 77 66) 41] [(69 36 47 0) 0] [(38 94 41 49) 38] [(52 10 66 13) 10] [(32 88 92 17) 17] [(36 75 48 73) 36] [(15 59 73 27) 15] [(87 -57 -1 -34) -57] [(-24 -95 76 -47) -95] [(-38 -72 -53 -73) -73] [(-66 32 40 56) -66] [(-6 88 -11 43) -11] [(-57 -12 49 4) -57] [(86 48 -95 -38) -95] [(-53 75 28 -31) -53] [(-11 -56 40 -3) -56] [(-79 82 -48 -5) -79] [(92 -6 19 92) -6] [(-65 37 25 82) -65] [(-19 -71 -5 -76) -76] [(25 -73 97 -73) -73] [(-70 -60 -28 -46) -70] [(37 -68 -33 -69) -69] [(-19 82 5 49) -19] [(29 95 25 -98) -98] [(59 1 -48 -62) -62] [(-92 11 85 80) -92] [(72 55 -4 -70) -70] [(8 61 -76 -30) -76] [(-67 31 4 -65) -67] [(4 3 -16 -44) -44] [(-45 49 85 20) -45] [(43 20 89 88) 20] [(-48 -89 -24 -27) -89] [(22 -68 18 44) -68] [(-2 -59 99 31) -59] [(-52 34 -96 -45) -96] [(-47 16 -17 -71) -71] [(-18 84 48 0) -18] [(-72 -43 96 72) -72] [(97 -55 92 63) -55] [(-94 85 -42 39) -94] [(20 -19 41 -77) -77] [(78 -81 -43 79) -81] [(-73 -59 -69 -78) -78] [(77 32 -46 30) -46] [(90 60 56 -25) -25] [(-38 52 69 -35) -38] [(-4 -68 8 -85) -85] [(61 -26 99 -66) -66] [(-78 -7 -28 -39) -78] [(60 -56 -48 -32) -56] [(0 -60 15 84) -60] [(81 -61 -34 25) -61] [(-30 41 99 -49) -49] [(-52 -73 -26 -85) -85] [(-59 32 -83 32) -83] [(-72 73 24 95) -72] [(56 9 -14 1) -14] [(-43 97 73 -73) -73] [(-21 -7 62 93) -21] [(-19 -89 19 13) -89] [(-81 2 -91 -47) -91] [(-59 -55 -88 4) -88] [(37 25 36 40) 25] [(25 33 -55 -97) -97])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_679} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_dup_times exec_noop integer_flush exec_dup_times (in4 print_integer) exec_swap (boolean_xor exec_y (in2) integer_div boolean_dup integer_shove integer_eq) (exec_s_when_autoconstructing (integer_gte boolean_shove) (integer_eq tagged_679 exec_k_when_autoconstructing (exec_k (integer_div exec_do*count (exec_rot (exec_s (exec_y () integer_add exec_shove () integer_lte in3 exec_eq) () (boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add integer_empty exec_s () (exec_rot (integer_fromboolean in1 print_exec (boolean_yankdup in1 boolean_dup boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean exec_stackdepth exec_shove () in3) (exec_if (integer_min exec_when (boolean_and integer_stackdepth) print_newline boolean_invert_first_then_and boolean_and integer_stackdepth boolean_dup boolean_stackdepth integer_stackdepth print_boolean) ()) ()) ()) ()) () ())) ()) ()) ()))
Lexicase best errors: [0 1 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 101
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_679} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_dup_times exec_noop integer_flush exec_dup_times (in4 print_integer) exec_swap (boolean_xor exec_y (in2) integer_div boolean_dup integer_shove integer_eq) (exec_s_when_autoconstructing (integer_gte boolean_shove) (integer_eq tagged_679 exec_k_when_autoconstructing (exec_k (integer_div exec_do*count (exec_rot (exec_s (exec_y () integer_add exec_shove () integer_lte in3 exec_eq) () (boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add integer_empty exec_s () (exec_rot (integer_fromboolean in1 print_exec (boolean_yankdup in1 boolean_dup boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean exec_stackdepth exec_shove () in3) (exec_if (integer_min exec_when (boolean_and integer_stackdepth) print_newline boolean_invert_first_then_and boolean_and integer_stackdepth boolean_dup boolean_stackdepth integer_stackdepth print_boolean) ()) ()) ()) ()) () ())) ()) ()) ()))
Zero cases best errors: [0 1 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 101
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 3 3 3 4 4 2 9 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 3 3 3 3 4 4 2 9 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s})
Best program: (integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 print_integer boolean_or boolean_empty boolean_dup_items exec_when (boolean_and in4) integer_shove integer_gt) tag_exec_562 (exec_empty exec_y (boolean_rot integer_swap boolean_not integer_rot) integer_gt integer_add) exec_k () (boolean_rot integer_yankdup) exec_y () boolean_flush integer_dup integer_mult) exec_empty boolean_stackdepth integer_fromboolean boolean_frominteger) integer_shove boolean_pop integer_sub integer_pop in1 exec_y () integer_pop exec_k_when_autoconstructing (integer_mod exec_yank integer_dec boolean_stackdepth boolean_shove exec_while (integer_shove) exec_dup_items exec_y_when_autoconstructing (integer_div) in1 integer_pop) (exec_s () () ()))
Errors: [0 1 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 60
Size: 78
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.997 0.997 0.997 0.996 0.996 0.998 0.991 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.901
Average program size in population (points): 71.308
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 491007
--- Timings ---
Current time: 1559314584490 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.7 seconds, 26.1%
Fitness Testing:      1.9 seconds, 70.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -65} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in4 integer_div integer_shove in3 integer_mod in2 exec_k (print_integer) (exec_stackdepth integer_stackdepth exec_rot (exec_pop () boolean_or in2 print_newline boolean_or boolean_or exec_while () exec_dup_times (exec_do*times (in4) boolean_shove exec_do*range (exec_s (exec_flush integer_stackdepth integer_yank integer_dup_times exec_shove (integer_empty) exec_swap (exec_y () exec_do*times (exec_dup_items) exec_k_when_autoconstructing (integer_inc exec_do*count (exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot integer_fromboolean boolean_stackdepth) (-65 exec_if () (boolean_swap integer_swap) integer_gt) in4 boolean_flush exec_do*times (-87) boolean_not boolean_dup_times))) ()) ()) () ()))) () ()))
Lexicase best errors: [1 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 85
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -65} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in4 integer_div integer_shove in3 integer_mod in2 exec_k (print_integer) (exec_stackdepth integer_stackdepth exec_rot (exec_pop () boolean_or in2 print_newline boolean_or boolean_or exec_while () exec_dup_times (exec_do*times (in4) boolean_shove exec_do*range (exec_s (exec_flush integer_stackdepth integer_yank integer_dup_times exec_shove (integer_empty) exec_swap (exec_y () exec_do*times (exec_dup_items) exec_k_when_autoconstructing (integer_inc exec_do*count (exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot integer_fromboolean boolean_stackdepth) (-65 exec_if () (boolean_swap integer_swap) integer_gt) in4 boolean_flush exec_do*times (-87) boolean_not boolean_dup_times))) ()) ()) () ()))) () ()))
Zero cases best errors: [1 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 85
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 187 674 243 186 860 353 186 36 244)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (353 187 674 243 186 860 353 186 36 244)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 1, :instruction tag_exec_552} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_flush})
Best program: (integer_lt exec_if () (integer_swap) boolean_yankdup integer_gt exec_s (boolean_or integer_eq integer_min integer_yankdup) (boolean_frominteger) (boolean_rot) exec_do*count (boolean_rot integer_yank) integer_dup_items boolean_stackdepth integer_empty exec_pop (integer_yank integer_swap integer_lt) exec_pop (tag_exec_552 () print_integer boolean_dup) boolean_dup in2 exec_empty integer_empty integer_dup boolean_flush exec_if (exec_y_when_autoconstructing () boolean_yank exec_dup (exec_y_when_autoconstructing () exec_while () print_integer integer_flush boolean_dup_items boolean_swap boolean_dup_times integer_swap integer_sub exec_k (exec_do*count (exec_dup_times () integer_max integer_dup_times boolean_shove)) (exec_do*range () exec_k_when_autoconstructing (boolean_empty in2 integer_lt integer_gt) () boolean_invert_first_then_and integer_div boolean_dup integer_sub integer_stackdepth integer_dec boolean_invert_second_then_and integer_rot) in4 integer_dec integer_div exec_y_when_autoconstructing () exec_swap (integer_mult integer_fromboolean exec_flush) ())) ())
Errors: [1 1 0 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 73
Size: 99
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.678
Median total errors in population: 6
Error averages by case: (0.647 0.813 0.326 0.757 0.814 0.14 0.647 0.814 0.964 0.756)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.674
Average program size in population (points): 89.705
Average percent parens in population: 0.285
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.512
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1019349
--- Timings ---
Current time: 1559314587438 milliseconds
Total Time:           5.9 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 40.8%
Fitness Testing:      2.6 seconds, 44.9%
Report:               0.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_991} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -13} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq})
Lexicase best program: (boolean_empty boolean_xor boolean_rot in2 print_integer integer_mult boolean_yank exec_k_when_autoconstructing (exec_while (boolean_dup boolean_flush) integer_inc boolean_rot integer_pop integer_pop) (integer_inc boolean_dup_times integer_swap exec_do*times (boolean_not) integer_min) tagged_991 integer_mod exec_y () boolean_stackdepth exec_do*range (integer_stackdepth exec_dup_items -13 boolean_and print_newline exec_do*while (exec_k (integer_dup_times exec_yank integer_shove integer_gte exec_pop (boolean_empty) exec_do*range () boolean_flush boolean_or) (integer_dup_times exec_s (boolean_and integer_dup exec_when (boolean_eq)) () ()))))
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_991} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -13} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq})
Zero cases best program: (boolean_empty boolean_xor boolean_rot in2 print_integer integer_mult boolean_yank exec_k_when_autoconstructing (exec_while (boolean_dup boolean_flush) integer_inc boolean_rot integer_pop integer_pop) (integer_inc boolean_dup_times integer_swap exec_do*times (boolean_not) integer_min) tagged_991 integer_mod exec_y () boolean_stackdepth exec_do*range (integer_stackdepth exec_dup_items -13 boolean_and print_newline exec_do*while (exec_k (integer_dup_times exec_yank integer_shove integer_gte exec_pop (boolean_empty) exec_do*range () boolean_flush boolean_or) (integer_dup_times exec_s (boolean_and integer_dup exec_when (boolean_eq)) () ()))))
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (885 235 169 219 885 885 219 234 131 585)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (885 235 169 219 885 885 219 234 131 585)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_679} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean})
Best program: (boolean_dup_times exec_noop integer_flush exec_dup_times (in4 print_integer) exec_swap (boolean_xor exec_y (in2) integer_div boolean_dup integer_shove integer_eq) (exec_s_when_autoconstructing (integer_gte boolean_shove) (integer_eq tagged_679 exec_k_when_autoconstructing (exec_k (integer_div exec_do*count (exec_rot (exec_s (exec_y () integer_add exec_shove () integer_lte in3 exec_eq) () (boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add integer_empty exec_s () (exec_rot (integer_fromboolean in1 print_exec (boolean_yankdup in1 boolean_dup boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean exec_stackdepth exec_shove () in3) (exec_if (integer_min exec_when (boolean_and integer_stackdepth) print_newline boolean_invert_first_then_and boolean_and integer_stackdepth boolean_dup boolean_stackdepth integer_stackdepth print_boolean) ()) ()) ()) ()) () ())) ()) ()) ()))
Errors: [0 1 1 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 67
Size: 101
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 5.553
Median total errors in population: 4
Error averages by case: (0.115 0.765 0.831 0.781 0.115 0.115 0.781 0.766 0.869 0.415)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.944
Average program size in population (points): 90.83
Average percent parens in population: 0.296
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0655
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1561169
--- Timings ---
Current time: 1559314591004 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 49.3%
Fitness Testing:      3.4 seconds, 36.4%
Report:               1.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_991} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -13} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq})
Lexicase best program: (boolean_empty boolean_xor boolean_rot in2 print_integer integer_mult boolean_yank exec_k_when_autoconstructing (exec_while (boolean_dup boolean_flush) integer_inc boolean_rot integer_pop integer_pop) (integer_inc boolean_dup_times integer_swap exec_do*times (boolean_not) integer_min) tagged_991 integer_mod exec_y (boolean_stackdepth) exec_do*range (integer_stackdepth exec_dup_items -13 boolean_and print_newline exec_do*while (exec_k (integer_dup_times exec_yank integer_shove) (integer_gte exec_pop (boolean_empty exec_do*range () boolean_flush boolean_or) integer_dup_times exec_s (boolean_and integer_dup exec_when (boolean_eq)) () ()))))
Lexicase best errors: [1 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_991} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -13} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq})
Zero cases best program: (boolean_empty boolean_xor boolean_rot in2 print_integer integer_mult boolean_yank exec_k_when_autoconstructing (exec_while (boolean_dup boolean_flush) integer_inc boolean_rot integer_pop integer_pop) (integer_inc boolean_dup_times integer_swap exec_do*times (boolean_not) integer_min) tagged_991 integer_mod exec_y (boolean_stackdepth) exec_do*range (integer_stackdepth exec_dup_items -13 boolean_and print_newline exec_do*while (exec_k (integer_dup_times exec_yank integer_shove) (integer_gte exec_pop (boolean_empty exec_do*range () boolean_flush boolean_or) integer_dup_times exec_s (boolean_and integer_dup exec_when (boolean_eq)) () ()))))
Zero cases best errors: [1 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 283 283 283 283 306 309 1 307 311)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (311 283 283 283 283 306 309 1 307 311)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 1, :instruction tag_exec_552} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_flush})
Best program: (integer_lt exec_if () (integer_swap) boolean_yankdup integer_gt exec_s (boolean_or integer_eq integer_min integer_min) (boolean_frominteger) (boolean_rot) exec_do*count (boolean_rot in3) integer_dup_items boolean_stackdepth integer_empty exec_pop (integer_yank integer_swap integer_lt) exec_pop (tag_exec_552 () print_integer boolean_dup) boolean_dup in2 exec_empty integer_empty integer_dup boolean_flush exec_if (exec_y_when_autoconstructing () boolean_yank exec_dup (exec_y_when_autoconstructing () exec_while () print_integer integer_flush boolean_dup_items boolean_swap boolean_dup_times integer_swap integer_sub exec_k (exec_do*count (exec_dup_times () integer_max integer_dup_times boolean_shove)) (exec_do*range () exec_k_when_autoconstructing (boolean_empty in2 integer_lt integer_gt) () boolean_invert_first_then_and integer_div boolean_dup integer_sub integer_stackdepth integer_dec boolean_invert_second_then_and integer_sub) in4 integer_dec integer_div exec_y_when_autoconstructing () exec_swap (boolean_dup_items integer_fromboolean exec_flush) ())) ())
Errors: [1 0 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 73
Size: 99
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.323
Median total errors in population: 7
Error averages by case: (0.689 0.717 0.717 0.717 0.717 0.694 0.691 0.999 0.693 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.733
Average program size in population (points): 92.607
Average percent parens in population: 0.288
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.53025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2195548
--- Timings ---
Current time: 1559314594464 milliseconds
Total Time:          12.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 52.6%
Fitness Testing:      4.2 seconds, 32.5%
Report:               1.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: 76                 
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 28                 
Correct output: -56                 | Program output: 40                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 4                  
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 48                 
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 41                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: 69                 
Correct output: -85                 | Program output: 8                  
Correct output: -66                 | Program output: 99                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 99                 
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 73                 
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times) (boolean_and boolean_shove exec_do*range () integer_flush integer_shove) integer_mult) (integer_fromboolean boolean_shove) exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_rot integer_mod) boolean_dup) ())) ()))
Lexicase best errors: [1 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 82
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times) (boolean_and boolean_shove exec_do*range () integer_flush integer_shove) integer_mult) (integer_fromboolean boolean_shove) exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_rot integer_mod) boolean_dup) ())) ()))
Zero cases best errors: [1 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 82
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (550 910 178 90 178 272 90 271 89 272)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (550 910 178 90 178 272 90 271 89 272)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -13} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq})
Best program: (integer_div integer_lt exec_shove () exec_k_when_autoconstructing (exec_empty integer_shove boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (exec_y (integer_swap exec_k (boolean_shove boolean_flush in3 print_integer in2 exec_dup_items print_boolean exec_y () exec_dup_items boolean_dup_items exec_dup (integer_dup_times)) (integer_gt boolean_stackdepth) exec_dup_items integer_stackdepth exec_dup_items -13 boolean_and print_newline exec_do*while (exec_k (integer_dup_times exec_yank integer_shove integer_gte exec_pop (boolean_empty) exec_do*range () boolean_flush boolean_or) (integer_dup_times exec_s (boolean_and integer_dup exec_when (boolean_eq)) () ())))))))
Errors: [1 0 1 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 51
Size: 73
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 7.1
Median total errors in population: 6
Error averages by case: (0.45 0.09 0.822 0.91 0.822 0.728 0.91 0.729 0.911 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.697
Average program size in population (points): 90.554
Average percent parens in population: 0.283
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.961625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2758475
--- Timings ---
Current time: 1559314598054 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 55.5%
Fitness Testing:      4.9 seconds, 30.0%
Report:               2.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_100} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while})
Lexicase best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max print_integer boolean_flush exec_dup_items print_boolean exec_y () exec_dup_items boolean_dup_items exec_dup (integer_dup_times)) integer_gt integer_yank integer_lte integer_max exec_do*times (boolean_pop exec_flush) boolean_invert_first_then_and tagged_100 exec_stackdepth exec_shove (exec_pop () integer_shove) exec_empty boolean_dup_times integer_dup_times integer_sub exec_k (exec_do*count (exec_dup_times () integer_max integer_dup_times boolean_shove)) (exec_do*range () integer_pop) print_newline integer_pop exec_yank integer_dec exec_y () integer_yankdup exec_while (exec_swap (integer_sub) (boolean_rot exec_while ())))
Lexicase best errors: [1 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_100} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while})
Zero cases best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max print_integer boolean_flush exec_dup_items print_boolean exec_y () exec_dup_items boolean_dup_items exec_dup (integer_dup_times)) integer_gt integer_yank integer_lte integer_max exec_do*times (boolean_pop exec_flush) boolean_invert_first_then_and tagged_100 exec_stackdepth exec_shove (exec_pop () integer_shove) exec_empty boolean_dup_times integer_dup_times integer_sub exec_k (exec_do*count (exec_dup_times () integer_max integer_dup_times boolean_shove)) (exec_do*range () integer_pop) print_newline integer_pop exec_yank integer_dec exec_y () integer_yankdup exec_while (exec_swap (integer_sub) (boolean_rot exec_while ())))
Zero cases best errors: [1 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 586 300 316 4 904 285 300 4 4)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (283 586 300 316 4 904 285 300 4 4)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (boolean_frominteger print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove) (exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_shove integer_mod) boolean_dup) ()))) ()))
Errors: [1 0 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 82
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.014
Median total errors in population: 6
Error averages by case: (0.717 0.414 0.7 0.684 0.996 0.096 0.715 0.7 0.996 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.416
Average program size in population (points): 90.714
Average percent parens in population: 0.276
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.47075
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3292729
--- Timings ---
Current time: 1559314601113 milliseconds
Total Time:          19.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.1 seconds, 56.5%
Fitness Testing:      5.6 seconds, 28.2%
Report:               2.9 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (boolean_frominteger print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove) (exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_shove integer_mod) boolean_dup) ()))) ()))
Lexicase best errors: [1 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (boolean_frominteger print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove) (exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_shove integer_mod) boolean_dup) ()))) ()))
Zero cases best errors: [1 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 347 115 347 919 347 582 347 241 235)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (220 347 115 347 919 347 582 347 241 235)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (boolean_frominteger print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove) (exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_rot integer_mod) boolean_dup) ()))) ()))
Errors: [1 0 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 61
Size: 82
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.3
Median total errors in population: 6
Error averages by case: (0.78 0.653 0.885 0.653 0.081 0.653 0.418 0.653 0.759 0.765)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.753
Average program size in population (points): 86.256
Average percent parens in population: 0.269
Minimum age in population: 6.75
Maximum age in population: 11.0
Average age in population: 8.9200625
Median age in population: 8.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3805360
--- Timings ---
Current time: 1559314604204 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.3 seconds, 58.3%
Fitness Testing:      6.2 seconds, 27.2%
Report:               3.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_284} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while})
Lexicase best program: (integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 print_integer boolean_or integer_min boolean_dup_items exec_when (boolean_and in4) integer_shove integer_gt) tag_exec_562 (exec_empty exec_y (boolean_rot integer_swap boolean_not integer_rot) integer_gt exec_pop () exec_k () (boolean_rot tag_exec_562 (exec_empty tagged_284 boolean_rot integer_swap boolean_not integer_rot) integer_gt integer_add) exec_k () (boolean_rot integer_yankdup) exec_y () boolean_flush integer_dup integer_mult) exec_empty boolean_stackdepth integer_fromboolean exec_y () boolean_flush integer_dup in1) exec_empty boolean_stackdepth integer_fromboolean boolean_frominteger) integer_shove boolean_pop integer_sub integer_pop in1 exec_y () integer_pop exec_k_when_autoconstructing (integer_mod exec_yank integer_dec boolean_stackdepth boolean_shove exec_while ()) ())
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 90
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_284} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while})
Zero cases best program: (integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 print_integer boolean_or integer_min boolean_dup_items exec_when (boolean_and in4) integer_shove integer_gt) tag_exec_562 (exec_empty exec_y (boolean_rot integer_swap boolean_not integer_rot) integer_gt exec_pop () exec_k () (boolean_rot tag_exec_562 (exec_empty tagged_284 boolean_rot integer_swap boolean_not integer_rot) integer_gt integer_add) exec_k () (boolean_rot integer_yankdup) exec_y () boolean_flush integer_dup integer_mult) exec_empty boolean_stackdepth integer_fromboolean exec_y () boolean_flush integer_dup in1) exec_empty boolean_stackdepth integer_fromboolean boolean_frominteger) integer_shove boolean_pop integer_sub integer_pop in1 exec_y () integer_pop exec_k_when_autoconstructing (integer_mod exec_yank integer_dec boolean_stackdepth boolean_shove exec_while ()) ())
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 90
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 103 96 899 580 217 103 219 103 219)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (220 103 96 899 580 217 103 219 103 219)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_679} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Best program: (integer_min boolean_dup_times integer_dup_times integer_flush exec_dup_times (in4 print_integer) exec_swap (boolean_xor exec_y (in2) integer_div boolean_dup integer_shove integer_eq) (exec_s_when_autoconstructing (integer_gte boolean_shove) (integer_eq tagged_679 exec_k_when_autoconstructing (exec_k (integer_div exec_do*count (exec_rot (exec_s (exec_if (integer_yankdup boolean_dup_times boolean_and) (boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean in1 print_exec (boolean_yankdup in1 boolean_dup boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean exec_stackdepth exec_shove () in3) (-87) (boolean_not boolean_dup_times)) ())) ())) () ()) () ())) ()) ()) ()))
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 87
Percent parens: 0.368
--- Population Statistics ---
Average total errors in population: 7.241
Median total errors in population: 8
Error averages by case: (0.78 0.897 0.904 0.101 0.42 0.783 0.897 0.781 0.897 0.781)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.157
Average program size in population (points): 83.544
Average percent parens in population: 0.265
Minimum age in population: 7.75
Maximum age in population: 12.296875
Average age in population: 10.400515625
Median age in population: 10.453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4274799
--- Timings ---
Current time: 1559314608245 milliseconds
Total Time:          26.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.0 seconds, 60.6%
Fitness Testing:      6.8 seconds, 25.7%
Report:               3.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min})
Lexicase best program: (integer_div integer_lt exec_shove () exec_k_when_autoconstructing (exec_empty integer_shove boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (integer_yank boolean_xor boolean_pop) exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing () (exec_s_when_autoconstructing (exec_s (in1 boolean_yank exec_y (integer_dup_items in2 integer_shove exec_s (in4 integer_dup print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup exec_when (boolean_and boolean_shove integer_empty) integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove) (exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min)))) () ()) () ())))))
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 89
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min})
Zero cases best program: (integer_div integer_lt exec_shove () exec_k_when_autoconstructing (exec_empty integer_shove boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (integer_yank boolean_xor boolean_pop) exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing () (exec_s_when_autoconstructing (exec_s (in1 boolean_yank exec_y (integer_dup_items in2 integer_shove exec_s (in4 integer_dup print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup exec_when (boolean_and boolean_shove integer_empty) integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove) (exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min)))) () ()) () ())))))
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 89
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (397 4 415 399 102 812 502 399 916 397)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (397 4 415 399 102 812 502 399 916 397)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -65} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 3, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_items})
Best program: (integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in4 print_integer exec_if (boolean_empty boolean_dup_items exec_when (boolean_and in4) integer_shove integer_gt) (tag_exec_562 (exec_empty exec_y (boolean_rot integer_swap in4 integer_rot) integer_gt integer_add) exec_k () (boolean_rot integer_yankdup) exec_y () boolean_flush integer_dup integer_mult) exec_empty boolean_stackdepth integer_fromboolean boolean_frominteger) integer_shove boolean_pop integer_sub integer_pop in1 boolean_stackdepth) -65 exec_if () (boolean_swap integer_swap) integer_gt) integer_flush exec_yankdup integer_dec boolean_invert_first_then_and exec_while (integer_lt exec_y_when_autoconstructing (boolean_swap exec_dup (boolean_dup boolean_not boolean_yankdup boolean_dup_items exec_y_when_autoconstructing (boolean_not integer_stackdepth) boolean_yank boolean_dup exec_y (exec_k_when_autoconstructing (exec_yank boolean_swap) (boolean_invert_second_then_and integer_shove exec_do*range () exec_eq integer_shove print_exec (boolean_dup_items integer_rot integer_lte exec_k_when_autoconstructing (integer_dec boolean_invert_first_then_and) ()) exec_dup_items))))))
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 85
Size: 110
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 5.657
Median total errors in population: 7
Error averages by case: (0.603 0.996 0.585 0.601 0.898 0.188 0.498 0.601 0.084 0.603)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.074
Average program size in population (points): 86.049
Average percent parens in population: 0.276
Minimum age in population: 8.75
Maximum age in population: 13.7890625
Average age in population: 11.89228125
Median age in population: 11.984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4716268
--- Timings ---
Current time: 1559314611103 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 60.6%
Fitness Testing:      7.3 seconds, 24.7%
Report:               4.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_679} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (in1 print_integer integer_shove integer_eq) (exec_s_when_autoconstructing (integer_dup_times boolean_shove) (integer_eq tagged_679 exec_k_when_autoconstructing (exec_k (integer_div exec_y () boolean_flush integer_dup_times) (exec_shove (integer_empty) exec_swap (exec_y () integer_max exec_dup_items) (exec_k_when_autoconstructing (integer_inc exec_do*count (exec_y_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush boolean_dup_items boolean_swap boolean_dup_times integer_swap integer_sub exec_k (integer_fromboolean boolean_shove) (exec_dup_items integer_mod)) () ()))) ()))) ()) ()) ())) ()))
Lexicase best errors: [0 1 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 81
Percent parens: 0.358
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_679} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (in1 print_integer integer_shove integer_eq) (exec_s_when_autoconstructing (integer_dup_times boolean_shove) (integer_eq tagged_679 exec_k_when_autoconstructing (exec_k (integer_div exec_y () boolean_flush integer_dup_times) (exec_shove (integer_empty) exec_swap (exec_y () integer_max exec_dup_items) (exec_k_when_autoconstructing (integer_inc exec_do*count (exec_y_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush boolean_dup_items boolean_swap boolean_dup_times integer_swap integer_sub exec_k (integer_fromboolean boolean_shove) (exec_dup_items integer_mod)) () ()))) ()))) ()) ()) ())) ()))
Zero cases best errors: [0 1 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 81
Percent parens: 0.358
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 130 901 114 226 114 130 550 545 112)
Population mean number of elite cases: 2.93
Count of perfect (error zero) individuals by case: (112 130 901 114 226 114 130 550 545 112)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times () in2 integer_max exec_eq integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) boolean_invert_first_then_and boolean_shove) (exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger) boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min integer_flush exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_rot integer_mod)) boolean_dup) ())
Errors: [0 1 0 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 61
Size: 80
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.066
Median total errors in population: 7
Error averages by case: (0.888 0.87 0.099 0.886 0.774 0.886 0.87 0.45 0.455 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.461
Average program size in population (points): 85.513
Average percent parens in population: 0.276
Minimum age in population: 10.75
Maximum age in population: 15.30078125
Average age in population: 13.37698828125
Median age in population: 13.447265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5228359
--- Timings ---
Current time: 1559314613972 milliseconds
Total Time:          32.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.9 seconds, 61.1%
Fitness Testing:      7.9 seconds, 24.4%
Report:               4.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while})
Lexicase best program: (integer_min print_boolean integer_yankdup boolean_dup_times exec_noop integer_flush exec_dup_times (in4 print_integer) in1 exec_swap (boolean_xor exec_y ()) (in2 integer_div boolean_dup integer_shove integer_eq) exec_s_when_autoconstructing (integer_gte boolean_shove) (integer_eq integer_sub exec_k_when_autoconstructing (exec_k (integer_div exec_empty exec_rot (exec_s (exec_y () integer_add exec_shove () integer_lte in3 exec_eq) () (boolean_and boolean_swap integer_fromboolean boolean_not exec_swap (integer_sub integer_fromboolean integer_pop exec_rot (integer_fromboolean in1 print_exec (boolean_yankdup exec_swap (integer_sub) (boolean_rot exec_while ()))) () ()) ())) () ()) ()) ()) ())
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 81
Percent parens: 0.358
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while})
Zero cases best program: (integer_min print_boolean integer_yankdup boolean_dup_times exec_noop integer_flush exec_dup_times (in4 print_integer) in1 exec_swap (boolean_xor exec_y ()) (in2 integer_div boolean_dup integer_shove integer_eq) exec_s_when_autoconstructing (integer_gte boolean_shove) (integer_eq integer_sub exec_k_when_autoconstructing (exec_k (integer_div exec_empty exec_rot (exec_s (exec_y () integer_add exec_shove () integer_lte in3 exec_eq) () (boolean_and boolean_swap integer_fromboolean boolean_not exec_swap (integer_sub integer_fromboolean integer_pop exec_rot (integer_fromboolean in1 print_exec (boolean_yankdup exec_swap (integer_sub) (boolean_rot exec_while ()))) () ()) ())) () ()) ()) ()) ())
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 81
Percent parens: 0.358
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 193 277 276 192 909 248 907 193 192)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (192 193 277 276 192 909 248 907 193 192)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s})
Best program: (integer_mult integer_inc exec_eq in3 boolean_dup boolean_dup exec_do*range (exec_do*count () boolean_flush exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (exec_y (integer_swap boolean_pop boolean_yank exec_y (integer_dup_items in2 integer_shove exec_s (in4 integer_dup print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_invert_second_then_and) (print_boolean exec_flush exec_k_when_autoconstructing () (integer_yank)) exec_rot () (integer_flush) (exec_yankdup) integer_dec boolean_invert_first_then_and exec_rot (integer_pop) (exec_s () () ()) ()))))))
Errors: [0 0 1 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 44
Size: 68
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.421
Median total errors in population: 6
Error averages by case: (0.808 0.807 0.723 0.724 0.808 0.091 0.752 0.093 0.807 0.808)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.393
Average program size in population (points): 81.07
Average percent parens in population: 0.262
Minimum age in population: 11.75
Maximum age in population: 16.890625
Average age in population: 14.876677734375
Median age in population: 14.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5689813
--- Timings ---
Current time: 1559314617388 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.4 seconds, 62.4%
Fitness Testing:      8.5 seconds, 23.7%
Report:               4.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 boolean_not boolean_or boolean_empty print_newline exec_when (boolean_and in4) integer_shove integer_gt) tag_exec_562 (exec_empty exec_y (boolean_rot integer_swap boolean_not integer_rot) integer_fromboolean integer_add) integer_dec) boolean_rot integer_yankdup) exec_y () boolean_flush integer_dup integer_mult exec_empty boolean_shove exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_flush exec_flush exec_shove () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div boolean_yankdup integer_rot integer_mod)) (boolean_dup))
Lexicase best errors: [0 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 boolean_not boolean_or boolean_empty print_newline exec_when (boolean_and in4) integer_shove integer_gt) tag_exec_562 (exec_empty exec_y (boolean_rot integer_swap boolean_not integer_rot) integer_fromboolean integer_add) integer_dec) boolean_rot integer_yankdup) exec_y () boolean_flush integer_dup integer_mult exec_empty boolean_shove exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_flush exec_flush exec_shove () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div boolean_yankdup integer_rot integer_mod)) (boolean_dup))
Zero cases best errors: [0 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (804 227 115 245 226 245 334 333 922 920)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (804 227 115 245 226 245 334 333 922 920)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth) integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush exec_stackdepth boolean_dup exec_if () (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range (integer_flush integer_shove) integer_mult) integer_fromboolean boolean_shove) (exec_dup_items integer_mod exec_eq integer_add exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_rot integer_mod) boolean_dup) ()) ())) ())
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 63
Size: 84
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.629
Median total errors in population: 5
Error averages by case: (0.196 0.773 0.885 0.755 0.774 0.755 0.666 0.667 0.078 0.08)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.681
Average program size in population (points): 81.525
Average percent parens in population: 0.263
Minimum age in population: 12.828125
Maximum age in population: 18.21484375
Average age in population: 16.3581103515625
Median age in population: 16.43896484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6107231
--- Timings ---
Current time: 1559314620290 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.5 seconds, 63.0%
Fitness Testing:      9.0 seconds, 23.2%
Report:               5.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove exec_dup_items integer_mod exec_eq integer_lte integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) integer_lte boolean_dup)
Lexicase best errors: [0 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.140
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove exec_dup_items integer_mod exec_eq integer_lte integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) integer_lte boolean_dup)
Zero cases best errors: [0 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.140
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 284 245 114 275 114 643 284 918 284)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (284 284 245 114 275 114 643 284 918 284)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times () in2 exec_k (boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (boolean_dup_times print_integer exec_shove () integer_lt integer_swap exec_flush print_exec () exec_stackdepth boolean_dup exec_if (exec_k (boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and) (boolean_shove boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) integer_fromboolean exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (integer_shove boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_rot integer_mod) boolean_dup) ())) ()) () ())) ()) ())
Errors: [0 0 1 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 59
Size: 87
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 6.555
Median total errors in population: 7
Error averages by case: (0.716 0.716 0.755 0.886 0.725 0.886 0.357 0.716 0.082 0.716)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.155
Average program size in population (points): 80.568
Average percent parens in population: 0.261
Minimum age in population: 14.25
Maximum age in population: 20.0263671875
Average age in population: 17.85385400390625
Median age in population: 17.919677734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6503488
--- Timings ---
Current time: 1559314623355 milliseconds
Total Time:          42.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.8 seconds, 63.8%
Fitness Testing:      9.5 seconds, 22.7%
Report:               5.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (in1 print_integer exec_shove ()) (integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult boolean_yankdup in1 boolean_dup boolean_stackdepth exec_eq integer_add print_integer boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_dup integer_mod) boolean_dup) ())))) ()))
Lexicase best errors: [0 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (in1 print_integer exec_shove ()) (integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult boolean_yankdup in1 boolean_dup boolean_stackdepth exec_eq integer_add print_integer boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_dup integer_mod) boolean_dup) ())))) ()))
Zero cases best errors: [0 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (464 93 464 94 464 93 94 257 464 112)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (464 93 464 94 464 93 94 257 464 112)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div})
Best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max boolean_stackdepth integer_rot exec_k_when_autoconstructing (exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_do*range () integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove exec_dup_items integer_swap boolean_not integer_rot) integer_gt integer_add) (exec_k () (boolean_rot tag_exec_562 (exec_empty integer_flush boolean_dup_items boolean_swap boolean_dup_times integer_swap integer_sub integer_yank exec_do*count (exec_dup_times () integer_dup integer_dup_times boolean_shove)) exec_do*range () exec_k_when_autoconstructing (boolean_empty in2 integer_lt integer_gt) () boolean_invert_first_then_and integer_div boolean_dup integer_sub integer_stackdepth integer_dec boolean_invert_second_then_and integer_sub) in4 integer_dec integer_div)))
Errors: [0 0 1 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 66
Size: 84
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.401
Median total errors in population: 7
Error averages by case: (0.536 0.907 0.536 0.906 0.536 0.907 0.906 0.743 0.536 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.581
Average program size in population (points): 79.247
Average percent parens in population: 0.255
Minimum age in population: 15.875
Maximum age in population: 21.267578125
Average age in population: 19.30297412109375
Median age in population: 19.3443603515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6933955
--- Timings ---
Current time: 1559314626378 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.0 seconds, 64.5%
Fitness Testing:     10.0 seconds, 22.3%
Report:               5.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction tag_exec_156})
Lexicase best program: (integer_mult exec_do*while (in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 print_integer boolean_or boolean_empty boolean_dup_items exec_when (boolean_and in4) in2 integer_gt) tag_exec_562 (in2 integer_max boolean_not integer_empty boolean_yankdup) exec_s_when_autoconstructing (exec_s (in1 boolean_and) (boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult)) (boolean_dup_times boolean_and) (boolean_yankdup) exec_s_when_autoconstructing (exec_s (in1 boolean_yank exec_y (integer_dup_items in2 integer_shove exec_s (in4 integer_dup print_integer exec_shove () integer_lt exec_k () (boolean_rot integer_yankdup) exec_y () boolean_flush integer_dup integer_mult) (tag_exec_156 ()) ())) () ()) () ()))))
Lexicase best errors: [0 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.330
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction tag_exec_156})
Zero cases best program: (integer_mult exec_do*while (in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 print_integer boolean_or boolean_empty boolean_dup_items exec_when (boolean_and in4) in2 integer_gt) tag_exec_562 (in2 integer_max boolean_not integer_empty boolean_yankdup) exec_s_when_autoconstructing (exec_s (in1 boolean_and) (boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult)) (boolean_dup_times boolean_and) (boolean_yankdup) exec_s_when_autoconstructing (exec_s (in1 boolean_yank exec_y (integer_dup_items in2 integer_shove exec_s (in4 integer_dup print_integer exec_shove () integer_lt exec_k () (boolean_rot integer_yankdup) exec_y () boolean_flush integer_dup integer_mult) (tag_exec_156 ()) ())) () ()) () ()))))
Zero cases best errors: [0 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.330
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 116 263 116 107 432 919 486 539 259)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (116 116 263 116 107 432 919 486 539 259)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Best program: (integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 print_integer boolean_or boolean_empty boolean_dup_items exec_when (boolean_and in4) integer_shove integer_gt) tag_exec_562 (exec_empty integer_empty) boolean_flush exec_if (exec_y_when_autoconstructing () boolean_yank exec_dup (exec_y_when_autoconstructing () exec_while () print_integer integer_flush boolean_dup_items integer_mod integer_lt integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) integer_pop exec_s (integer_mod) (boolean_dup) ())) ()))) ())))
Errors: [0 0 1 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 58
Size: 81
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.647
Median total errors in population: 7
Error averages by case: (0.884 0.884 0.737 0.884 0.893 0.568 0.081 0.514 0.461 0.741)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.596
Average program size in population (points): 79.217
Average percent parens in population: 0.256
Minimum age in population: 17.6171875
Maximum age in population: 22.521728515625
Average age in population: 20.70213940429688
Median age in population: 20.78106689453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7286446
--- Timings ---
Current time: 1559314628935 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.0 seconds, 65.0%
Fitness Testing:     10.5 seconds, 22.0%
Report:               6.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_100} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s})
Lexicase best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) exec_when (boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush exec_y_when_autoconstructing (exec_if (integer_yankdup boolean_dup_times boolean_and integer_flush integer_shove) (exec_y () boolean_flush integer_dup integer_mult) exec_empty exec_dup_items boolean_dup_items exec_dup (integer_dup_times)) integer_gt integer_yank integer_lte) (integer_max) exec_do*times (boolean_pop boolean_empty) boolean_invert_first_then_and) tagged_100 exec_stackdepth integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_shove integer_sub integer_pop in1 exec_y () integer_pop exec_k_when_autoconstructing (integer_dup_times exec_yank integer_dec boolean_stackdepth boolean_shove exec_while (integer_sub) exec_dup_items exec_y_when_autoconstructing (integer_div) in1 integer_shove) (exec_s () () ()))
Lexicase best errors: [1 1 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 97
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_100} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s})
Zero cases best program: (integer_min print_boolean integer_yankdup integer_yank boolean_xor boolean_pop exec_dup_times (in2 integer_max print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) exec_when (boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush exec_y_when_autoconstructing (exec_if (integer_yankdup boolean_dup_times boolean_and integer_flush integer_shove) (exec_y () boolean_flush integer_dup integer_mult) exec_empty exec_dup_items boolean_dup_items exec_dup (integer_dup_times)) integer_gt integer_yank integer_lte) (integer_max) exec_do*times (boolean_pop boolean_empty) boolean_invert_first_then_and) tagged_100 exec_stackdepth integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_shove integer_sub integer_pop in1 exec_y () integer_pop exec_k_when_autoconstructing (integer_dup_times exec_yank integer_dec boolean_stackdepth boolean_shove exec_while (integer_sub) exec_dup_items exec_y_when_autoconstructing (integer_div) in1 integer_shove) (exec_s () () ()))
Zero cases best errors: [1 1 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 97
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 206 206 236 927 362 237 805 362 239)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (119 206 206 236 927 362 237 805 362 239)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_100} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup})
Best program: (integer_min print_boolean integer_yankdup integer_yank integer_pop boolean_pop exec_dup_times () in2 exec_k (boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (boolean_dup_times print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times integer_dup_times) () integer_gt integer_yank integer_lte) (integer_max) exec_do*times (boolean_pop boolean_xor) boolean_invert_first_then_and) tagged_100 exec_stackdepth exec_shove (exec_pop () integer_shove) exec_empty print_exec (exec_yank integer_yank boolean_shove integer_yank integer_fromboolean boolean_invert_second_then_and) print_boolean exec_flush exec_k_when_autoconstructing () (integer_yank)) (exec_rot () (integer_flush exec_yankdup) (integer_dec integer_div exec_rot (integer_lt exec_y_when_autoconstructing (boolean_swap exec_dup ())) () ()))) ())
Errors: [1 1 1 0 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 89
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.301
Median total errors in population: 6
Error averages by case: (0.881 0.794 0.794 0.764 0.073 0.638 0.763 0.195 0.638 0.761)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.61
Average program size in population (points): 80.23
Average percent parens in population: 0.264
Minimum age in population: 19.230224609375
Maximum age in population: 24.08575439453125
Average age in population: 22.19390905761719
Median age in population: 22.27691650390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7772997
--- Timings ---
Current time: 1559314631799 milliseconds
Total Time:          50.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.0 seconds, 65.4%
Fitness Testing:     11.1 seconds, 21.9%
Report:               6.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_div integer_lt integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 print_integer boolean_or boolean_empty boolean_dup_items exec_when (boolean_and in4) integer_shove integer_gt tag_exec_562 (exec_empty exec_y (boolean_stackdepth integer_swap exec_k_when_autoconstructing (exec_dup_times () in2 exec_k (boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (boolean_dup_times print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove) (exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger) boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing ())) ())) ()) ()) ()))))))
Lexicase best errors: [1 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 110
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_div integer_lt integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 print_integer boolean_or boolean_empty boolean_dup_items exec_when (boolean_and in4) integer_shove integer_gt tag_exec_562 (exec_empty exec_y (boolean_stackdepth integer_swap exec_k_when_autoconstructing (exec_dup_times () in2 exec_k (boolean_stackdepth integer_empty exec_k_when_autoconstructing (exec_do*times (exec_s (boolean_dup_times print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult) integer_fromboolean boolean_shove) (exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger) boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing ())) ())) ()) ()) ()))))))
Zero cases best errors: [1 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 110
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 244 594 227 244 573 244 244 226 227)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (227 244 594 227 244 573 244 244 226 227)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_679} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 23} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_flush})
Best program: (integer_mult integer_inc in4 exec_y_when_autoconstructing (print_integer in2 exec_while (integer_gte exec_do*range (in3 exec_s_when_autoconstructing (integer_gte boolean_shove) (integer_eq tagged_679 exec_do*range (exec_s (exec_flush integer_stackdepth integer_yank integer_dup_times exec_shove (integer_empty) exec_do*while (exec_y () exec_do*times (boolean_flush) exec_k_when_autoconstructing (integer_dup integer_mult) (boolean_dup_items 23 exec_when (boolean_frominteger) integer_shove boolean_pop integer_sub integer_pop in1 exec_y () integer_pop) exec_k_when_autoconstructing (exec_yank exec_yank integer_dec boolean_stackdepth boolean_shove exec_while (integer_flush) exec_dup_items exec_dup_times (integer_div) in1 integer_pop) (exec_flush))) () ())) ()))))
Errors: [1 0 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 55
Size: 78
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 6.95
Median total errors in population: 9
Error averages by case: (0.773 0.756 0.406 0.773 0.756 0.427 0.756 0.756 0.774 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.551
Average program size in population (points): 77.959
Average percent parens in population: 0.255
Minimum age in population: 20.6181640625
Maximum age in population: 25.53402709960938
Average age in population: 23.65605169677734
Median age in population: 23.73065185546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8213024
--- Timings ---
Current time: 1559314634608 milliseconds
Total Time:          53.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.1 seconds, 65.7%
Fitness Testing:     11.6 seconds, 21.7%
Report:               6.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_679} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 1, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction tagged_942} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor exec_noop integer_flush exec_dup_times (in4 print_integer exec_swap (boolean_xor exec_yankdup) (in2 integer_div boolean_dup integer_shove integer_eq) exec_s_when_autoconstructing (integer_gte boolean_shove) (integer_eq tagged_679 exec_k_when_autoconstructing (exec_k (integer_div exec_do*count (exec_rot (exec_s (exec_y () integer_add) (exec_shove () boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod exec_eq integer_add) (integer_sub boolean_xor boolean_dup) (boolean_frominteger boolean_yankdup exec_y () integer_pop exec_dup_times (exec_when () boolean_frominteger integer_stackdepth) exec_y (integer_inc) in1 boolean_xor integer_mod exec_stackdepth) exec_eq boolean_dup_items) tagged_942 in1 exec_dup_items) (integer_inc boolean_invert_second_then_and) boolean_yank exec_do*range (exec_y_when_autoconstructing () in3 exec_k_when_autoconstructing () (integer_mod exec_dup_times (integer_max boolean_yank boolean_dup_times)) exec_while (integer_dup_items boolean_frominteger))) ()) ()))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 109
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_679} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 1, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction tagged_942} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor exec_noop integer_flush exec_dup_times (in4 print_integer exec_swap (boolean_xor exec_yankdup) (in2 integer_div boolean_dup integer_shove integer_eq) exec_s_when_autoconstructing (integer_gte boolean_shove) (integer_eq tagged_679 exec_k_when_autoconstructing (exec_k (integer_div exec_do*count (exec_rot (exec_s (exec_y () integer_add) (exec_shove () boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod exec_eq integer_add) (integer_sub boolean_xor boolean_dup) (boolean_frominteger boolean_yankdup exec_y () integer_pop exec_dup_times (exec_when () boolean_frominteger integer_stackdepth) exec_y (integer_inc) in1 boolean_xor integer_mod exec_stackdepth) exec_eq boolean_dup_items) tagged_942 in1 exec_dup_items) (integer_inc boolean_invert_second_then_and) boolean_yank exec_do*range (exec_y_when_autoconstructing () in3 exec_k_when_autoconstructing () (integer_mod exec_dup_times (integer_max boolean_yank boolean_dup_times)) exec_while (integer_dup_items boolean_frominteger))) ()) ()))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 109
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (496 413 413 1 496 2 500 1 497 2)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (496 413 413 1 496 2 500 1 497 2)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Best program: (integer_min print_boolean integer_min exec_noop integer_flush exec_dup_times (in4 print_integer) exec_swap (boolean_xor exec_y (in2) integer_div boolean_dup integer_shove integer_eq) (exec_s_when_autoconstructing (integer_gte) (boolean_shove) (integer_shove) integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod exec_eq integer_add integer_sub boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range () integer_min exec_dup_times (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) integer_mult) integer_shove integer_mod) boolean_dup)
Errors: [0 1 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 50
Size: 65
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.179
Median total errors in population: 8
Error averages by case: (0.504 0.587 0.587 0.999 0.504 0.998 0.5 0.999 0.503 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.62
Average program size in population (points): 80.177
Average percent parens in population: 0.277
Minimum age in population: 21.9560546875
Maximum age in population: 27.2242431640625
Average age in population: 25.16860794067383
Median age in population: 25.19439697265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8872558
--- Timings ---
Current time: 1559314638515 milliseconds
Total Time:          56.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.4 seconds, 66.0%
Fitness Testing:     12.4 seconds, 21.9%
Report:               6.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt) (integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup) exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean)) ()))) ()) ()))
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 80
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt) (integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup) exec_y () exec_do*count (integer_min exec_dup_items) exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean)) ()))) ()) ()))
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 80
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 199 164 199 902 331 199 331 199 199)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (199 199 164 199 902 331 199 331 199 199)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items integer_sub exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt in1 exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean exec_do*count (exec_shove () in3) -87) (boolean_not boolean_dup_times) ()) ())) ()) ())) ()))))
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 58
Size: 88
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 7.078
Median total errors in population: 7
Error averages by case: (0.801 0.801 0.836 0.801 0.098 0.669 0.801 0.669 0.801 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.338
Average program size in population (points): 77.805
Average percent parens in population: 0.271
Minimum age in population: 23.421875
Maximum age in population: 28.58547973632812
Average age in population: 26.68945252990723
Median age in population: 26.69660186767578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9456468
--- Timings ---
Current time: 1559314641405 milliseconds
Total Time:          60.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.3 seconds, 65.4%
Fitness Testing:     13.1 seconds, 21.8%
Report:               7.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: 76                 
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 28                 
Correct output: -56                 | Program output: 40                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 4                  
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 48                 
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 41                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: 69                 
Correct output: -85                 | Program output: 8                  
Correct output: -66                 | Program output: 99                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 99                 
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 73                 
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yankdup})
Lexicase best program: (integer_div integer_lt exec_shove () exec_k_when_autoconstructing (exec_empty integer_shove boolean_dup) (exec_do*times (boolean_dup_times exec_s_when_autoconstructing () (exec_dup_items exec_y (integer_swap boolean_yankdup boolean_flush boolean_flush in3 print_integer in1 exec_dup_items integer_pop exec_y () exec_dup_items boolean_dup_items exec_dup (integer_mod exec_eq integer_add integer_yankdup boolean_dup_times in1 print_integer exec_shove (integer_lt integer_swap exec_flush exec_flush) exec_stackdepth boolean_dup integer_yank exec_rot () (integer_flush exec_yankdup) ()))) ())))
Lexicase best errors: [0 1 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yankdup})
Zero cases best program: (integer_div integer_lt exec_shove () exec_k_when_autoconstructing (exec_empty integer_shove boolean_dup) (exec_do*times (boolean_dup_times exec_s_when_autoconstructing () (exec_dup_items exec_y (integer_swap boolean_yankdup boolean_flush boolean_flush in3 print_integer in1 exec_dup_items integer_pop exec_y () exec_dup_items boolean_dup_items exec_dup (integer_mod exec_eq integer_add integer_yankdup boolean_dup_times in1 print_integer exec_shove (integer_lt integer_swap exec_flush exec_flush) exec_stackdepth boolean_dup integer_yank exec_rot () (integer_flush exec_yankdup) ()))) ())))
Zero cases best errors: [0 1 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 615 104 615 104 615 318 104 1 616)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (104 615 104 615 104 615 318 104 1 616)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_239} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap})
Best program: (integer_div integer_lt exec_do*range () exec_k_when_autoconstructing (exec_empty integer_shove boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (exec_y (integer_swap exec_k (boolean_shove boolean_flush in3 print_integer in2 exec_dup_items print_boolean exec_y () integer_mod boolean_dup_items exec_dup (integer_dup_times)) (integer_gt exec_stackdepth boolean_dup exec_if (exec_pop () integer_shove) (exec_empty boolean_pop exec_flush) boolean_invert_first_then_and) tagged_239 exec_stackdepth exec_shove (exec_pop () exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) exec_y_when_autoconstructing () integer_shove integer_mod) exec_swap () ()))))))
Errors: [0 1 0 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 50
Size: 74
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.804
Median total errors in population: 6
Error averages by case: (0.896 0.385 0.896 0.385 0.896 0.385 0.682 0.896 0.999 0.384)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.812
Average program size in population (points): 81.897
Average percent parens in population: 0.304
Minimum age in population: 25.30859375
Maximum age in population: 29.84149551391602
Average age in population: 28.06274362945557
Median age in population: 28.0863151550293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 9800122
--- Timings ---
Current time: 1559314645195 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.0 seconds, 66.1%
Fitness Testing:     13.5 seconds, 21.3%
Report:               7.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_dup_times exec_noop integer_div exec_dup_times (in2 integer_max print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) exec_stackdepth exec_s_when_autoconstructing (exec_if (integer_div boolean_dup_times integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult boolean_eq boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean)) ()))) () ())
Lexicase best errors: [0 1 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_dup_times exec_noop integer_div exec_dup_times (in2 integer_max print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) exec_stackdepth exec_s_when_autoconstructing (exec_if (integer_div boolean_dup_times integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult boolean_eq boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean)) ()))) () ())
Zero cases best errors: [0 1 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (153 331 1000 331 423 575 1 906 153 153)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (153 331 0 331 423 575 1 906 153 153)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Best program: (boolean_dup_times exec_noop integer_div exec_dup_times (in2 integer_max print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) exec_stackdepth exec_s_when_autoconstructing (exec_if (integer_yankdup boolean_dup_times integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean)) ()))) () ())
Errors: [0 1 1 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.974
Median total errors in population: 7
Error averages by case: (0.847 0.669 1.0 0.669 0.577 0.425 0.999 0.094 0.847 0.847)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 55.243
Average program size in population (points): 77.853
Average percent parens in population: 0.286
Minimum age in population: 26.453369140625
Maximum age in population: 31.41081047058105
Average age in population: 29.57741281700134
Median age in population: 29.61174583435059
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 10234317
--- Timings ---
Current time: 1559314647728 milliseconds
Total Time:          66.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 65.8%
Fitness Testing:     14.1 seconds, 21.2%
Report:               8.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_100} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_mod} {:close 1, :instruction boolean_dup})
Lexicase best program: (integer_div exec_y (exec_do*times (exec_noop) integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush boolean_invert_first_then_and exec_stackdepth exec_do*count (in2 exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush boolean_pop exec_flush boolean_invert_first_then_and) (tagged_100 exec_stackdepth exec_shove (exec_pop () integer_min exec_k_when_autoconstructing (exec_swap (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup integer_div exec_pop (boolean_invert_first_then_and) in4 integer_rot integer_mod) () boolean_dup) ()) ()) ()))))) () ()) ())))
Lexicase best errors: [0 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 81
Percent parens: 0.358
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_100} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_mod} {:close 1, :instruction boolean_dup})
Zero cases best program: (integer_div exec_y (exec_do*times (exec_noop) integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush boolean_invert_first_then_and exec_stackdepth exec_do*count (in2 exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush boolean_pop exec_flush boolean_invert_first_then_and) (tagged_100 exec_stackdepth exec_shove (exec_pop () integer_min exec_k_when_autoconstructing (exec_swap (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup integer_div exec_pop (boolean_invert_first_then_and) in4 integer_rot integer_mod) () boolean_dup) ()) ()) ()))))) () ()) ())))
Zero cases best errors: [0 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 81
Percent parens: 0.358
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 1000 676 821 247 247 1000 1000 247 1000)
Population mean number of elite cases: 6.49
Count of perfect (error zero) individuals by case: (247 0 676 821 247 247 0 0 247 0)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (integer_sub exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt in1 exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub boolean_not boolean_shove boolean_dup_times exec_eq) boolean_rot exec_eq) () boolean_and) integer_sub integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean)) ()))) () ()) ())) ())))))
Errors: [0 1 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 61
Size: 93
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 7.515
Median total errors in population: 8
Error averages by case: (0.753 1.0 0.324 0.179 0.753 0.753 1.0 1.0 0.753 1.0)
Error minima by case: (0 1 0 0 0 0 1 1 0 1)
Average genome size in population (length): 53.366
Average program size in population (points): 75.061
Average percent parens in population: 0.285
Minimum age in population: 28.1458740234375
Maximum age in population: 32.77012348175049
Average age in population: 31.13642333221436
Median age in population: 31.18641662597656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 10481102
--- Timings ---
Current time: 1559314650367 milliseconds
Total Time:          69.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.7 seconds, 66.3%
Fitness Testing:     14.4 seconds, 20.9%
Report:               8.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_swap (exec_noop) (integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_shove () integer_lt boolean_eq exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot boolean_stackdepth)) () ()) ())) ()) ()) ())))
Lexicase best errors: [1 1 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 75
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_swap (exec_noop) (integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_shove () integer_lt boolean_eq exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot boolean_stackdepth)) () ()) ())) ()) ()) ())))
Zero cases best errors: [1 1 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 75
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 922 1000 922 1000 922 1000 1000)
Population mean number of elite cases: 9.77
Count of perfect (error zero) individuals by case: (0 0 0 922 0 922 0 922 0 0)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush})
Best program: (integer_mult integer_inc in4 exec_y_when_autoconstructing (boolean_dup_times exec_noop) integer_flush exec_s_when_autoconstructing () () (exec_yank) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div in2 integer_shove integer_mod exec_flush)) ()))))) () ()) ()))
Errors: [1 1 1 0 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 58
Size: 82
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 7.234
Median total errors in population: 7
Error averages by case: (1.0 1.0 1.0 0.078 1.0 0.078 1.0 0.078 1.0 1.0)
Error minima by case: (1 1 1 0 1 0 1 0 1 1)
Average genome size in population (length): 55.957
Average program size in population (points): 81.581
Average percent parens in population: 0.313
Minimum age in population: 29.1458740234375
Maximum age in population: 34.39670753479004
Average age in population: 32.52352990865707
Median age in population: 32.61338090896606
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10704461
--- Timings ---
Current time: 1559314653118 milliseconds
Total Time:          71.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.9 seconds, 66.7%
Fitness Testing:     14.7 seconds, 20.5%
Report:               9.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_232} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (integer_sub exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt in1 exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and exec_eq)) (boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot boolean_stackdepth tag_integer_232 integer_mod exec_flush) integer_fromboolean exec_do*count (exec_shove () in3) -87) (boolean_not boolean_dup_times) ()) ())) ()))))))
Lexicase best errors: [1 1 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 90
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_232} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (integer_sub exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt in1 exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and exec_eq)) (boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot boolean_stackdepth tag_integer_232 integer_mod exec_flush) integer_fromboolean exec_do*count (exec_shove () in3) -87) (boolean_not boolean_dup_times) ()) ())) ()))))))
Zero cases best errors: [1 1 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 90
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 932 1000 932 1000 1000 1000 1000 932)
Population mean number of elite cases: 9.80
Count of perfect (error zero) individuals by case: (0 0 932 0 932 0 0 0 0 932)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_358} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_dup_times integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) boolean_dup exec_dup_items) exec_flush exec_do*range () integer_min) integer_add boolean_and tagged_358 boolean_yankdup in1 boolean_swap boolean_stackdepth exec_empty integer_mod exec_flush) (integer_fromboolean exec_do*count (exec_shove () in3) -87) (boolean_not boolean_dup_times)) ())
Errors: [1 1 0 1 0 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 49
Size: 64
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 7.204
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.068 1.0 0.068 1.0 1.0 1.0 1.0 0.068)
Error minima by case: (1 1 0 1 0 1 1 1 1 0)
Average genome size in population (length): 55.999
Average program size in population (points): 81.448
Average percent parens in population: 0.312
Minimum age in population: 30.1458740234375
Maximum age in population: 36.06133079528809
Average age in population: 34.04134277892113
Median age in population: 34.11048746109009
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10912420
--- Timings ---
Current time: 1559314655132 milliseconds
Total Time:          73.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 66.9%
Fitness Testing:     15.1 seconds, 20.4%
Report:               9.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_915} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty exec_s (in1 print_integer exec_shove ()) (integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times integer_add tag_exec_915 (integer_dup_times integer_yankdup print_integer integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_while () exec_do*count (integer_min exec_dup_items exec_flush) exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap () (integer_dup_items boolean_dup integer_div integer_inc boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean) ()))) ()))) ()) ()))
Lexicase best errors: [0 1 1 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 70
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_915} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty exec_s (in1 print_integer exec_shove ()) (integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times integer_add tag_exec_915 (integer_dup_times integer_yankdup print_integer integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_while () exec_do*count (integer_min exec_dup_items exec_flush) exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap () (integer_dup_items boolean_dup integer_div integer_inc boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean) ()))) ()))) ()) ()))
Zero cases best errors: [0 1 1 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 70
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (920 1000 1000 918 1000 919 1000 1000 1000 1000)
Population mean number of elite cases: 9.76
Count of perfect (error zero) individuals by case: (920 0 0 918 0 919 0 0 0 0)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty})
Best program: (integer_div boolean_dup_items integer_rot integer_mod exec_empty integer_shove boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_s_when_autoconstructing () (exec_dup_items integer_sub exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt) (in1 exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s (exec_rot (integer_yank exec_k_when_autoconstructing (integer_inc exec_s (exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_shove boolean_yankdup in1 boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) (integer_div exec_pop (boolean_invert_first_then_and) integer_empty) ())) () ()) ()) () ()) () ())) ()))) ()) ()))
Errors: [0 1 1 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 60
Size: 96
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.243
Median total errors in population: 7
Error averages by case: (0.08 1.0 1.0 0.082 1.0 0.081 1.0 1.0 1.0 1.0)
Error minima by case: (0 1 1 0 1 0 1 1 1 1)
Average genome size in population (length): 55.825
Average program size in population (points): 81.257
Average percent parens in population: 0.312
Minimum age in population: 31.1458740234375
Maximum age in population: 37.28653490543365
Average age in population: 35.48261212956905
Median age in population: 35.5479810833931
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 11131149
--- Timings ---
Current time: 1559314657262 milliseconds
Total Time:          75.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.8 seconds, 67.0%
Fitness Testing:     15.4 seconds, 20.3%
Report:               9.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_flush exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor in1 boolean_frominteger integer_swap exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min integer_add exec_swap (in2 boolean_dup) (integer_dup exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean))))) () ()) ()))
Lexicase best errors: [1 1 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 77
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_flush exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor in1 boolean_frominteger integer_swap exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min integer_add exec_swap (in2 boolean_dup) (integer_dup exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean))))) () ()) ()))
Zero cases best errors: [1 1 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 77
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 928 1000 1000 1000 930 1000 1000 1000)
Population mean number of elite cases: 9.86
Count of perfect (error zero) individuals by case: (0 0 928 0 0 0 930 0 0 0)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup})
Best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 exec_dup_items) (exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt exec_do*while (exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_flush integer_yankdup integer_yankdup boolean_dup_times integer_lt boolean_shove exec_do*range () integer_flush integer_shove) integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_k_when_autoconstructing (integer_min exec_k_when_autoconstructing (exec_swap (in2 integer_fromboolean) (integer_div exec_pop (boolean_dup))) ()) ()))) () ()) ())) ()) ()))
Errors: [1 1 0 1 1 1 0 1 1 1]
Total: 8
Mean: 0.8
Genome size: 58
Size: 88
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 8.142
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.072 1.0 1.0 1.0 0.07 1.0 1.0 1.0)
Error minima by case: (1 1 0 1 1 1 0 1 1 1)
Average genome size in population (length): 55.755
Average program size in population (points): 81.012
Average percent parens in population: 0.311
Minimum age in population: 33.6822338104248
Maximum age in population: 39.05932205915451
Average age in population: 36.9607591766715
Median age in population: 37.02838402986526
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 11347363
--- Timings ---
Current time: 1559314659446 milliseconds
Total Time:          78.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.3 seconds, 67.1%
Fitness Testing:     15.7 seconds, 20.1%
Report:               9.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_div boolean_dup_items integer_rot integer_mod exec_empty integer_shove boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_s_when_autoconstructing () (exec_dup_items integer_sub exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt) (in1 exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and) boolean_eq exec_k_when_autoconstructing () (exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items boolean_eq exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div in2 integer_shove integer_mod exec_flush)) ())))))) ()) ()))
Lexicase best errors: [1 0 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 84
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_div boolean_dup_items integer_rot integer_mod exec_empty integer_shove boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_s_when_autoconstructing () (exec_dup_items integer_sub exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt) (in1 exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and) boolean_eq exec_k_when_autoconstructing () (exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items boolean_eq exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div in2 integer_shove integer_mod exec_flush)) ())))))) ()) ()))
Zero cases best errors: [1 0 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 84
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 934 1000 1000 1000 1000 1000 934 934 1000)
Population mean number of elite cases: 9.80
Count of perfect (error zero) individuals by case: (0 934 0 0 0 0 0 934 934 0)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2})
Best program: (exec_dup_items exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt exec_do*while (exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_flush integer_yankdup integer_yankdup boolean_dup_times integer_lt integer_inc exec_do*range () integer_dup integer_shove) integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_k_when_autoconstructing (integer_min exec_k_when_autoconstructing (exec_swap (in2 integer_add) (integer_div exec_pop (boolean_invert_first_then_and) in2)) ()) ()))) () ()) ()))
Errors: [1 0 1 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 49
Size: 70
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.198
Median total errors in population: 7
Error averages by case: (1.0 0.066 1.0 1.0 1.0 1.0 1.0 0.066 0.066 1.0)
Error minima by case: (1 0 1 1 1 1 1 0 0 1)
Average genome size in population (length): 55.532
Average program size in population (points): 80.603
Average percent parens in population: 0.310
Minimum age in population: 35.27616310119629
Maximum age in population: 40.58507171273232
Average age in population: 38.42274211588502
Median age in population: 38.49715042114258
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 11565971
--- Timings ---
Current time: 1559314661502 milliseconds
Total Time:          80.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.8 seconds, 67.1%
Fitness Testing:     16.0 seconds, 20.0%
Report:              10.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 2, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) () integer_sub exec_noop exec_s (in1 print_integer exec_shove () integer_lt in1) (exec_flush boolean_dup) (exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () () (exec_rot (integer_fromboolean integer_add print_exec (integer_yank in1 boolean_rot boolean_stackdepth)) () ()))) ())) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 69
Percent parens: 0.377
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 2, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) () integer_sub exec_noop exec_s (in1 print_integer exec_shove () integer_lt in1) (exec_flush boolean_dup) (exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () () (exec_rot (integer_fromboolean integer_add print_exec (integer_yank in1 boolean_rot boolean_stackdepth)) () ()))) ())) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 69
Percent parens: 0.377
--- Lexicase Population Statistics ---
Count of elite individuals by case: (921 1000 921 920 1000 1000 1000 920 921 1000)
Population mean number of elite cases: 9.60
Count of perfect (error zero) individuals by case: (921 0 921 920 0 0 0 920 921 0)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 2, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (exec_stackdepth exec_s_when_autoconstructing (exec_if (integer_yankdup boolean_dup_times integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (exec_do*count (print_exec (exec_dup_items exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2) () boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) boolean_dup integer_div exec_pop (boolean_invert_first_then_and) boolean_dup integer_shove integer_mod print_boolean)))))) ()))) () ()) ()) ()))
Errors: [0 1 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 71
Size: 105
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 5.397
Median total errors in population: 5
Error averages by case: (0.079 1.0 0.079 0.08 1.0 1.0 1.0 0.08 0.079 1.0)
Error minima by case: (0 1 0 0 1 1 1 0 0 1)
Average genome size in population (length): 55.349
Average program size in population (points): 80.255
Average percent parens in population: 0.309
Minimum age in population: 36.27616310119629
Maximum age in population: 41.88195569813251
Average age in population: 39.90915727870166
Median age in population: 39.98671259731054
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 11784684
--- Timings ---
Current time: 1559314663617 milliseconds
Total Time:          82.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 67.2%
Fitness Testing:     16.3 seconds, 19.9%
Report:              10.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove (integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count () integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup) (boolean_dup_times boolean_and boolean_shove exec_do*range (integer_flush integer_shove) integer_stackdepth) integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2) (boolean_dup) integer_div exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean) ())))) () ()) ()))
Lexicase best errors: [1 0 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 80
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove (integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count () integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup) (boolean_dup_times boolean_and boolean_shove exec_do*range (integer_flush integer_shove) integer_stackdepth) integer_fromboolean boolean_shove) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () exec_do*count (integer_min exec_dup_items exec_flush exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2) (boolean_dup) integer_div exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean) ())))) () ()) ()))
Zero cases best errors: [1 0 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 80
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 925 926 1 1000 1000 926 1000 1000 1000)
Population mean number of elite cases: 8.78
Count of perfect (error zero) individuals by case: (0 925 926 1 0 0 926 0 0 0)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_491} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tag_exec_562} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Best program: (tagged_491 exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap boolean_rot integer_sub exec_do*count (exec_if (integer_inc integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush print_integer exec_dup_times () tag_exec_562 (exec_empty boolean_and) integer_eq integer_fromboolean boolean_and exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add print_exec (exec_rot (in1 boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) (integer_fromboolean exec_do*count (exec_shove () in3) -87) (boolean_not boolean_dup_times))) () ()) ())) ()) ()))) () ()) ()))
Errors: [1 0 0 1 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 63
Size: 99
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 7.222
Median total errors in population: 7
Error averages by case: (1.0 0.075 0.074 0.999 1.0 1.0 0.074 1.0 1.0 1.0)
Error minima by case: (1 0 0 0 1 1 0 1 1 1)
Average genome size in population (length): 55.128
Average program size in population (points): 79.86
Average percent parens in population: 0.308
Minimum age in population: 39.15635205805302
Maximum age in population: 43.12183298915625
Average age in population: 41.41867869159579
Median age in population: 41.46336096525192
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 12005301
--- Timings ---
Current time: 1559314665740 milliseconds
Total Time:          84.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 67.3%
Fitness Testing:     16.6 seconds, 19.7%
Report:              10.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_if (in1 boolean_rot) (exec_k_when_autoconstructing (exec_s_when_autoconstructing () (exec_dup_items) (integer_sub exec_do*times (exec_s (in1) (print_integer exec_shove () integer_lt in1 exec_flush integer_eq) (exec_stackdepth boolean_dup exec_eq exec_s (in1 print_integer exec_shove () integer_lt print_integer integer_dup exec_flush exec_pop (print_integer) boolean_rot exec_eq) () (boolean_and) boolean_eq integer_fromboolean boolean_not exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and boolean_flush integer_dup integer_mult in1 boolean_dup_times exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_rot integer_mod) (boolean_dup)))) ())))) ()))
Lexicase best errors: [1 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 85
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_if (in1 boolean_rot) (exec_k_when_autoconstructing (exec_s_when_autoconstructing () (exec_dup_items) (integer_sub exec_do*times (exec_s (in1) (print_integer exec_shove () integer_lt in1 exec_flush integer_eq) (exec_stackdepth boolean_dup exec_eq exec_s (in1 print_integer exec_shove () integer_lt print_integer integer_dup exec_flush exec_pop (print_integer) boolean_rot exec_eq) () (boolean_and) boolean_eq integer_fromboolean boolean_not exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and boolean_flush integer_dup integer_mult in1 boolean_dup_times exec_stackdepth boolean_dup exec_if (integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_rot integer_mod) (boolean_dup)))) ())))) ()))
Zero cases best errors: [1 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 85
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 886 2 882 645 232 1 235 877 645)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (1 886 2 882 645 232 1 235 877 645)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_add exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq) (boolean_rot exec_eq) () boolean_and) boolean_eq integer_fromboolean boolean_not exec_swap (boolean_shove exec_do*range (integer_flush integer_shove) integer_mult integer_fromboolean boolean_shove) (exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup exec_y () boolean_flush integer_min exec_dup_items exec_flush)) ()) ()))
Errors: [1 0 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 49
Size: 68
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 5.594
Median total errors in population: 5
Error averages by case: (0.999 0.114 0.998 0.118 0.355 0.768 0.999 0.765 0.123 0.355)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.327
Average program size in population (points): 81.668
Average percent parens in population: 0.309
Minimum age in population: 40.24866759777069
Maximum age in population: 44.87126119807363
Average age in population: 42.94467706054077
Median age in population: 42.98821781761944
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 12253116
--- Timings ---
Current time: 1559314667846 milliseconds
Total Time:          86.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 67.3%
Fitness Testing:     17.0 seconds, 19.7%
Report:              11.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: 76                 
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 28                 
Correct output: -56                 | Program output: 40                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 4                  
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 48                 
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 41                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: 69                 
Correct output: -85                 | Program output: 8                  
Correct output: -66                 | Program output: 99                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 99                 
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 73                 
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () (exec_dup_items integer_sub integer_sub exec_do*times (exec_s (in3 print_integer exec_shove () integer_lt) (in1 exec_flush exec_flush exec_flush integer_sub exec_s_when_autoconstructing (boolean_shove integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove print_boolean) integer_mod boolean_xor integer_fromboolean boolean_not exec_swap (integer_mod exec_eq integer_lte) (integer_max)) exec_while (boolean_pop boolean_empty) boolean_invert_first_then_and exec_eq exec_stackdepth)) () ()) ())) ())
Lexicase best errors: [0 1 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () (exec_dup_items integer_sub integer_sub exec_do*times (exec_s (in3 print_integer exec_shove () integer_lt) (in1 exec_flush exec_flush exec_flush integer_sub exec_s_when_autoconstructing (boolean_shove integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if (integer_yankdup integer_yankdup boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove print_boolean) integer_mod boolean_xor integer_fromboolean boolean_not exec_swap (integer_mod exec_eq integer_lte) (integer_max)) exec_while (boolean_pop boolean_empty) boolean_invert_first_then_and exec_eq exec_stackdepth)) () ()) ())) ())
Zero cases best errors: [0 1 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 170 295 139 879 275 139 603 294 171)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (139 170 295 139 879 275 139 603 294 171)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup})
Best program: (exec_if (in1 boolean_rot) (exec_k_when_autoconstructing (exec_s_when_autoconstructing () (exec_noop) (integer_flush exec_s_when_autoconstructing () (exec_dup_items integer_sub integer_sub exec_do*times (exec_s (in3 print_integer exec_shove () integer_lt) (in1 exec_flush exec_flush exec_flush integer_sub exec_s_when_autoconstructing (boolean_swap integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_pop (integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if (integer_yankdup integer_lte boolean_dup_times boolean_and boolean_shove exec_do*range () integer_flush integer_shove) (integer_mult integer_fromboolean boolean_shove print_boolean) integer_mod boolean_xor integer_fromboolean boolean_not exec_swap (integer_mod exec_eq integer_lte) (integer_max)) exec_while (boolean_pop boolean_empty) boolean_invert_first_then_and exec_eq exec_stackdepth integer_mod exec_eq integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (integer_mod) (boolean_dup)) ())))))) () ()) ())) ())) ()))
Errors: [0 1 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 78
Size: 113
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.896
Median total errors in population: 6
Error averages by case: (0.861 0.83 0.705 0.861 0.121 0.725 0.861 0.397 0.706 0.829)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.78
Average program size in population (points): 84.881
Average percent parens in population: 0.296
Minimum age in population: 42.45801951363683
Maximum age in population: 46.24573230557144
Average age in population: 44.67622015576065
Median age in population: 44.83017165865749
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 12494662
--- Timings ---
Current time: 1559314670356 milliseconds
Total Time:          89.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.1 seconds, 67.5%
Fitness Testing:     17.3 seconds, 19.5%
Report:              11.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup})
Lexicase best program: (exec_yank print_boolean integer_div integer_min exec_shove () exec_k_when_autoconstructing (exec_empty boolean_pop boolean_dup) (exec_do*times (boolean_dup_times exec_s_when_autoconstructing () (exec_dup_items) (exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt in1 exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq boolean_rot) (exec_eq) () boolean_and) boolean_dup_times exec_eq) (in2 exec_eq)) boolean_and boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean exec_s () (exec_rot (integer_yank) (exec_k_when_autoconstructing (integer_inc in2 boolean_dup) ()) ()) ()) () ()) ())) ()))))
Lexicase best errors: [0 1 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 89
Percent parens: 0.382
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup})
Zero cases best program: (exec_yank print_boolean integer_div integer_min exec_shove () exec_k_when_autoconstructing (exec_empty boolean_pop boolean_dup) (exec_do*times (boolean_dup_times exec_s_when_autoconstructing () (exec_dup_items) (exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt in1 exec_flush exec_flush) (exec_stackdepth boolean_dup exec_eq exec_do*range (integer_sub exec_s_when_autoconstructing (boolean_shove boolean_dup_times exec_eq boolean_rot) (exec_eq) () boolean_and) boolean_dup_times exec_eq) (in2 exec_eq)) boolean_and boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean exec_s () (exec_rot (integer_yank) (exec_k_when_autoconstructing (integer_inc in2 boolean_dup) ()) ()) ()) () ()) ())) ()))))
Zero cases best errors: [0 1 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 89
Percent parens: 0.382
--- Lexicase Population Statistics ---
Count of elite individuals by case: (127 243 128 348 173 128 347 128 242 125)
Population mean number of elite cases: 1.99
Count of perfect (error zero) individuals by case: (127 243 128 348 173 128 347 128 242 125)
Population mean number of perfect (error zero) cases: 1.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_dup_times exec_noop integer_flush exec_shove () exec_dup_items exec_y (integer_swap exec_k (exec_s (in1 exec_noop) (integer_flush exec_s_when_autoconstructing () () (exec_dup_items) exec_y (integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (print_exec (integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_min tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean exec_do*count (exec_y () in3) -87) (boolean_not boolean_dup_times))) () ()) ())) ()) ()))
Errors: [0 1 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 59
Size: 86
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 8.011
Median total errors in population: 8
Error averages by case: (0.873 0.757 0.872 0.652 0.827 0.872 0.653 0.872 0.758 0.875)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.142
Average program size in population (points): 87.335
Average percent parens in population: 0.289
Minimum age in population: 43.78025712817907
Maximum age in population: 48.15647580102086
Average age in population: 46.01086654979829
Median age in population: 46.05121669732034
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 12726451
--- Timings ---
Current time: 1559314673329 milliseconds
Total Time:          91.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.3 seconds, 67.8%
Fitness Testing:     17.7 seconds, 19.3%
Report:              11.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (exec_if (in1 boolean_rot exec_k_when_autoconstructing (exec_s_when_autoconstructing () (exec_dup_items) (integer_sub exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt in1 exec_flush integer_eq) (exec_stackdepth boolean_dup exec_eq exec_s (in1 print_integer exec_shove () integer_lt print_integer integer_dup exec_flush exec_pop (print_integer) boolean_xor exec_eq) () (boolean_and boolean_eq integer_fromboolean boolean_not exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and boolean_flush integer_dup integer_mult in1 print_exec (boolean_yankdup in1 boolean_rot boolean_stackdepth exec_empty integer_mod exec_pop () integer_fromboolean exec_do*count (exec_shove () in3) -87) exec_s_when_autoconstructing (boolean_dup_times) () ()))) ())) ()))) ()) ())
Lexicase best errors: [1 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 91
Percent parens: 0.330
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (exec_if (in1 boolean_rot exec_k_when_autoconstructing (exec_s_when_autoconstructing () (exec_dup_items) (integer_sub exec_do*times (exec_s (in1 print_integer exec_shove () integer_lt in1 exec_flush integer_eq) (exec_stackdepth boolean_dup exec_eq exec_s (in1 print_integer exec_shove () integer_lt print_integer integer_dup exec_flush exec_pop (print_integer) boolean_xor exec_eq) () (boolean_and boolean_eq integer_fromboolean boolean_not exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and boolean_flush integer_dup integer_mult in1 print_exec (boolean_yankdup in1 boolean_rot boolean_stackdepth exec_empty integer_mod exec_pop () integer_fromboolean exec_do*count (exec_shove () in3) -87) exec_s_when_autoconstructing (boolean_dup_times) () ()))) ())) ()))) ()) ())
Zero cases best errors: [1 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 91
Percent parens: 0.330
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 249 188 679 88 188 161 743 495 494)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (88 249 188 679 88 188 161 743 495 494)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean})
Best program: (boolean_dup_times integer_swap exec_k (exec_s (in1 print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush exec_stackdepth exec_do*count (integer_swap exec_do*count (exec_if () (integer_yankdup integer_yankdup boolean_dup_times boolean_and integer_inc print_newline) integer_flush integer_shove) integer_mult integer_fromboolean boolean_swap) exec_dup_items integer_mod boolean_xor boolean_dup boolean_frominteger boolean_yankdup integer_mod) (integer_mult integer_min exec_dup_items exec_y () exec_do*range (integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop (boolean_invert_first_then_and) in2 integer_shove integer_mod print_boolean)) ())) ()) ())
Errors: [1 1 1 0 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.627
Median total errors in population: 6
Error averages by case: (0.912 0.751 0.812 0.321 0.912 0.812 0.839 0.257 0.505 0.506)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.309
Average program size in population (points): 85.727
Average percent parens in population: 0.296
Minimum age in population: 44.78025712817907
Maximum age in population: 49.64629469998181
Average age in population: 47.47800671531633
Median age in population: 47.57168033206835
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 12947053
--- Timings ---
Current time: 1559314676133 milliseconds
Total Time:          94.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.6 seconds, 68.1%
Fitness Testing:     18.0 seconds, 19.0%
Report:              12.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (exec_dup (exec_do*times (exec_s (in1 in2 exec_s (in4 integer_dup print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (boolean_shove boolean_dup_items integer_shove) (exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 exec_dup (exec_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean exec_do*count (exec_y () in3) -87) boolean_not boolean_dup_times) ()))))) () ()))))))
Lexicase best errors: [0 0 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 93
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (exec_dup (exec_do*times (exec_s (in1 in2 exec_s (in4 integer_dup print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (boolean_shove boolean_dup_items integer_shove) (exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 exec_dup (exec_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean exec_do*count (exec_y () in3) -87) boolean_not boolean_dup_times) ()))))) () ()))))))
Zero cases best errors: [0 0 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 93
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (135 656 136 294 223 294 226 135 135 135)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (135 656 136 294 223 294 226 135 135 135)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction in1})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 integer_dup print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (boolean_shove boolean_dup_items integer_shove) (exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot integer_max exec_empty integer_mod exec_flush) integer_fromboolean exec_do*count (exec_y () in3) -87) (boolean_not in1)))))))))
Errors: [0 0 0 1 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 84
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.631
Median total errors in population: 8
Error averages by case: (0.865 0.344 0.864 0.706 0.777 0.706 0.774 0.865 0.865 0.865)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.232
Average program size in population (points): 86.844
Average percent parens in population: 0.295
Minimum age in population: 46.11572260223329
Maximum age in population: 50.93252859008498
Average age in population: 48.89181303777755
Median age in population: 48.93153967428952
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 13183007
--- Timings ---
Current time: 1559314679106 milliseconds
Total Time:          97.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.9 seconds, 68.5%
Fitness Testing:     18.3 seconds, 18.8%
Report:              12.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1) (in2 exec_s (in4 integer_dup print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (boolean_shove boolean_dup_items integer_shove) (exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth integer_pop integer_mod exec_flush integer_fromboolean)) ())))))))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 77
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1) (in2 exec_s (in4 integer_dup print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (boolean_shove boolean_dup_items integer_shove) (exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth integer_pop integer_mod exec_flush integer_fromboolean)) ())))))))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 77
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 101 490 215 85 489 485 215 490 101)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (101 101 490 215 85 489 485 215 490 101)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 1, :instruction in3} {:close 1, :instruction -87} {:close 0, :instruction boolean_not} {:close 0, :instruction in1})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup) (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 integer_dup print_integer exec_shove () integer_lt integer_swap exec_flush exec_flush) (boolean_shove boolean_dup_items integer_shove) (exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_and) (boolean_eq boolean_eq integer_empty integer_empty integer_add tag_exec_106 (boolean_pop tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot integer_max exec_empty integer_mod exec_flush) integer_fromboolean exec_do*count (exec_y () in3) -87) (boolean_not in1)))) ()))))))
Errors: [1 1 0 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 61
Size: 86
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 7.228
Median total errors in population: 7
Error averages by case: (0.899 0.899 0.51 0.785 0.915 0.511 0.515 0.785 0.51 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.374
Average program size in population (points): 85.146
Average percent parens in population: 0.290
Minimum age in population: 47.40814234502614
Maximum age in population: 52.42863209464122
Average age in population: 50.54135804951459
Median age in population: 50.63869932439411
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 13446524
--- Timings ---
Current time: 1559314682210 milliseconds
Total Time:         100.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.3 seconds, 68.7%
Fitness Testing:     18.7 seconds, 18.5%
Report:              12.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ()))))) () ())))) ()))
Lexicase best errors: [0 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ()))))) () ())))) ()))
Zero cases best errors: [0 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (711 375 190 190 73 266 74 190 899 380)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (711 375 190 190 73 266 74 190 899 380)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ()))))) () ())))) ()))
Errors: [0 0 1 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 64
Size: 94
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.652
Median total errors in population: 6
Error averages by case: (0.289 0.625 0.81 0.81 0.927 0.734 0.926 0.81 0.101 0.62)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.57
Average program size in population (points): 85.48
Average percent parens in population: 0.291
Minimum age in population: 49.06169603392482
Maximum age in population: 53.81312064273516
Average age in population: 52.01657144321461
Median age in population: 52.11117952183122
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 13697075
--- Timings ---
Current time: 1559314685052 milliseconds
Total Time:         103.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.4 seconds, 68.9%
Fitness Testing:     19.0 seconds, 18.4%
Report:              13.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ()))))) () ())))) ()))
Lexicase best errors: [0 1 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ()))))) () ())))) ()))
Zero cases best errors: [0 1 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (491 3 3 491 483 303 301 483 2 123)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (491 3 3 491 483 303 301 483 2 123)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) (boolean_and) (boolean_eq integer_fromboolean integer_empty boolean_invert_first_then_and integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ()))))) () ()))))
Errors: [0 1 1 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 59
Size: 85
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 7.317
Median total errors in population: 8
Error averages by case: (0.509 0.997 0.997 0.509 0.517 0.697 0.699 0.517 0.998 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.387
Average program size in population (points): 90.178
Average percent parens in population: 0.307
Minimum age in population: 50.48559285514057
Maximum age in population: 55.18833574856399
Average age in population: 53.86192034449254
Median age in population: 53.72278700920288
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 13951353
--- Timings ---
Current time: 1559314688084 milliseconds
Total Time:         106.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.7 seconds, 69.1%
Fitness Testing:     19.4 seconds, 18.2%
Report:              13.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (exec_y (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) boolean_and) (boolean_eq integer_fromboolean integer_empty print_boolean integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup exec_empty) integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ())) ())) ()) () ())))) ()))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 92
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (exec_y (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) boolean_and) (boolean_eq integer_fromboolean integer_empty print_boolean integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup exec_empty) integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ())) ())) ()) () ())))) ()))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 92
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 406 332 935 210 89 406 509 150 89)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (281 406 332 935 210 89 406 509 150 89)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove boolean_not boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_pop () print_newline exec_flush integer_add boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ()) ())) () ())))) ()))
Errors: [1 0 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 63
Size: 93
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.593
Median total errors in population: 7
Error averages by case: (0.719 0.594 0.668 0.065 0.79 0.911 0.594 0.491 0.85 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.305
Average program size in population (points): 91.95
Average percent parens in population: 0.311
Minimum age in population: 53.10418993217172
Maximum age in population: 56.92165782366646
Average age in population: 55.57331658074485
Median age in population: 55.72278700920288
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 14220890
--- Timings ---
Current time: 1559314690925 milliseconds
Total Time:         109.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.8 seconds, 69.3%
Fitness Testing:     19.8 seconds, 18.1%
Report:              13.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in2 in2 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) exec_empty boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove boolean_not boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ())))) () ())))) ()))
Lexicase best errors: [1 0 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in2 in2 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) exec_empty boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove boolean_not boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ())))) () ())))) ()))
Zero cases best errors: [1 0 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 124 418 340 407 487 334 134 5 289)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (227 124 418 340 407 487 334 134 5 289)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in2 in2 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove boolean_not boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup integer_fromboolean integer_add print_exec (boolean_yankdup exec_empty) integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ()))) ())) () ())))) ()))
Errors: [1 0 1 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 65
Size: 96
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 7.235
Median total errors in population: 7
Error averages by case: (0.773 0.876 0.582 0.66 0.593 0.513 0.666 0.866 0.995 0.711)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.268
Average program size in population (points): 92.056
Average percent parens in population: 0.312
Minimum age in population: 54.53375911535113
Maximum age in population: 58.72562132547318
Average age in population: 57.19517277128202
Median age in population: 57.23432900781336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 14495173
--- Timings ---
Current time: 1559314693812 milliseconds
Total Time:         112.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.9 seconds, 69.4%
Fitness Testing:     20.2 seconds, 18.0%
Report:              14.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_803} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_771} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () (exec_dup_items integer_sub integer_sub exec_do*times (in1 exec_noop print_integer exec_shove () integer_lt) in1 exec_flush exec_flush exec_flush integer_sub exec_s_when_autoconstructing (boolean_shove integer_lt integer_swap exec_flush exec_flush exec_stackdepth boolean_shove in3 integer_shove) (exec_dup_items) (integer_yankdup boolean_dup_times boolean_and tagged_803 boolean_not) integer_dup_items) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (exec_empty integer_mod exec_flush) (integer_fromboolean exec_do*count (exec_y () integer_yankdup tag_exec_771 (boolean_and boolean_shove exec_do*range () integer_flush exec_eq exec_stackdepth integer_mod exec_eq integer_add exec_y_when_autoconstructing (boolean_dup_times)))))))
Lexicase best errors: [0 0 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_803} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_771} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (boolean_dup_times exec_noop integer_flush exec_s_when_autoconstructing () (exec_dup_items integer_sub integer_sub exec_do*times (in1 exec_noop print_integer exec_shove () integer_lt) in1 exec_flush exec_flush exec_flush integer_sub exec_s_when_autoconstructing (boolean_shove integer_lt integer_swap exec_flush exec_flush exec_stackdepth boolean_shove in3 integer_shove) (exec_dup_items) (integer_yankdup boolean_dup_times boolean_and tagged_803 boolean_not) integer_dup_items) (boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (exec_empty integer_mod exec_flush) (integer_fromboolean exec_do*count (exec_y () integer_yankdup tag_exec_771 (boolean_and boolean_shove exec_do*range () integer_flush exec_eq exec_stackdepth integer_mod exec_eq integer_add exec_y_when_autoconstructing (boolean_dup_times)))))))
Zero cases best errors: [0 0 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (449 395 317 910 504 328 279 5 593 216)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (449 395 317 910 504 328 279 5 593 216)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (exec_y (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times boolean_and boolean_shove boolean_not) boolean_and) (boolean_eq integer_fromboolean integer_empty print_boolean integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup exec_empty) integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) (integer_div exec_pop () boolean_invert_first_then_and)) ())) ())) ()) () ())))) ()))
Errors: [0 0 0 0 0 1 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 61
Size: 92
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 6.004
Median total errors in population: 5
Error averages by case: (0.551 0.605 0.683 0.09 0.496 0.672 0.721 0.995 0.407 0.784)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.562
Average program size in population (points): 90.87
Average percent parens in population: 0.310
Minimum age in population: 56.72278700920288
Maximum age in population: 60.36672637549054
Average age in population: 58.72702015645717
Median age in population: 58.80344118627545
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 14771271
--- Timings ---
Current time: 1559314696685 milliseconds
Total Time:         115.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.0 seconds, 69.4%
Fitness Testing:     20.6 seconds, 17.8%
Report:              14.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove integer_shove boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_y (exec_swap (integer_mod boolean_empty integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) () integer_div exec_pop () boolean_invert_first_then_and) ())) ()))))) () ()))))
Lexicase best errors: [0 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove integer_shove boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_y (exec_swap (integer_mod boolean_empty integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_k_when_autoconstructing (exec_swap (in2 boolean_dup) () integer_div exec_pop () boolean_invert_first_then_and) ())) ()))))) () ()))))
Zero cases best errors: [0 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 372 564 135 348 1 295 368 294 349)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (348 372 564 135 348 1 295 368 294 349)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction in2})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) boolean_shove boolean_dup_items integer_add exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove integer_shove boolean_and) boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod exec_flush integer_add exec_y_when_autoconstructing (boolean_xor integer_min exec_y (exec_swap (in2) ()))))) () ()))))
Errors: [0 1 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 80
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.926
Median total errors in population: 7
Error averages by case: (0.652 0.628 0.436 0.865 0.652 0.999 0.705 0.632 0.706 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.973
Average program size in population (points): 90.114
Average percent parens in population: 0.311
Minimum age in population: 57.72278700920288
Maximum age in population: 61.70588217858494
Average age in population: 60.23972454581467
Median age in population: 60.24686707535329
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 15074840
--- Timings ---
Current time: 1559314699395 milliseconds
Total Time:         117.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.9 seconds, 69.5%
Fitness Testing:     21.0 seconds, 17.8%
Report:              14.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) exec_shove () boolean_eq integer_swap exec_flush exec_do*range () boolean_shove boolean_dup_items integer_shove)) (exec_dup_items) integer_yankdup boolean_dup_times boolean_and integer_add boolean_not) (boolean_and boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod boolean_empty integer_add exec_y_when_autoconstructing (boolean_xor integer_min boolean_invert_first_then_and) in2 integer_shove integer_mod exec_swap (integer_add integer_empty exec_s (exec_rot () (integer_fromboolean in1 print_exec (boolean_yankdup in1 boolean_dup)) ()) () ()) ()))) ()))))
Lexicase best errors: [0 1 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 105
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush exec_flush) exec_shove () boolean_eq integer_swap exec_flush exec_do*range () boolean_shove boolean_dup_items integer_shove)) (exec_dup_items) integer_yankdup boolean_dup_times boolean_and integer_add boolean_not) (boolean_and boolean_eq integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth) exec_empty) (integer_mod boolean_empty integer_add exec_y_when_autoconstructing (boolean_xor integer_min boolean_invert_first_then_and) in2 integer_shove integer_mod exec_swap (integer_add integer_empty exec_s (exec_rot () (integer_fromboolean in1 print_exec (boolean_yankdup in1 boolean_dup)) ()) () ()) ()))) ()))))
Zero cases best errors: [0 1 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 105
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 442 100 369 100 433 356 355 76 891)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (249 442 100 369 100 433 356 355 76 891)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 3, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s () (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) ()) exec_if () (boolean_eq integer_fromboolean boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()) ())) ()))))
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 51
Size: 79
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 6.629
Median total errors in population: 7
Error averages by case: (0.751 0.558 0.9 0.631 0.9 0.567 0.644 0.645 0.924 0.109)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.042
Average program size in population (points): 89.115
Average percent parens in population: 0.314
Minimum age in population: 59.72278700920288
Maximum age in population: 63.33376396095628
Average age in population: 61.72895164786684
Median age in population: 61.82101067157964
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 15357285
--- Timings ---
Current time: 1559314702089 milliseconds
Total Time:         120.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.9 seconds, 69.5%
Fitness Testing:     21.4 seconds, 17.7%
Report:              15.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove boolean_not boolean_and) integer_lt boolean_eq integer_empty integer_empty tag_exec_106 (exec_s () (integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth)) ())) ()))) () ()) () ())))) ()))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 90
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove boolean_not boolean_and) integer_lt boolean_eq integer_empty integer_empty tag_exec_106 (exec_s () (integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot exec_stackdepth)) ())) ()))) () ()) () ())))) ()))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 90
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (565 883 708 112 5 600 883 250 832 250)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (565 883 708 112 5 600 883 250 832 250)
Population mean number of perfect (error zero) cases: 5.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 boolean_flush exec_s (in4 integer_dup) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()) ())) ()))))) ()) () ()))))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 62
Size: 101
Percent parens: 0.386
--- Population Statistics ---
Average total errors in population: 4.912
Median total errors in population: 4
Error averages by case: (0.435 0.117 0.292 0.888 0.995 0.4 0.117 0.75 0.168 0.75)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.221
Average program size in population (points): 88.175
Average percent parens in population: 0.315
Minimum age in population: 60.79509516884718
Maximum age in population: 64.97507862792827
Average age in population: 63.17900733111712
Median age in population: 63.23975130934627
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 15650716
--- Timings ---
Current time: 1559314704916 milliseconds
Total Time:         123.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.8 seconds, 69.6%
Fitness Testing:     21.8 seconds, 17.7%
Report:              15.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (exec_s (in4) (exec_do*times (exec_s (in4 exec_do*times (exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove boolean_not boolean_and) integer_lt integer_empty integer_empty tag_exec_106 (exec_s () (integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean exec_stackdepth) ())) ()))) () ())) ())) () ()) () ())))) ()))
Lexicase best errors: [0 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 97
Percent parens: 0.402
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 in2 exec_s (in4 exec_do*times (exec_s (in4) (exec_do*times (exec_s (in4 exec_do*times (exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and boolean_shove boolean_not boolean_and) integer_lt integer_empty integer_empty tag_exec_106 (exec_s () (integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean exec_stackdepth) ())) ()))) () ())) ())) () ()) () ())))) ()))
Zero cases best errors: [0 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 97
Percent parens: 0.402
--- Lexicase Population Statistics ---
Count of elite individuals by case: (698 107 486 32 615 497 246 2 19 840)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (698 107 486 32 615 497 246 2 19 840)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 boolean_flush exec_s (in4 integer_dup) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()) ())) ()))))) ()) () ()))))
Errors: [0 1 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 101
Percent parens: 0.386
--- Population Statistics ---
Average total errors in population: 6.458
Median total errors in population: 6
Error averages by case: (0.302 0.893 0.514 0.968 0.385 0.503 0.754 0.998 0.981 0.16)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.377
Average program size in population (points): 88.218
Average percent parens in population: 0.333
Minimum age in population: 63.27193821765377
Maximum age in population: 66.58131854459339
Average age in population: 65.17078787796038
Median age in population: 65.34007801383177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.006
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 16001989
--- Timings ---
Current time: 1559314707907 milliseconds
Total Time:         126.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.8 seconds, 69.5%
Fitness Testing:     22.3 seconds, 17.7%
Report:              16.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 493
Test mean error for best: 0.49300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 boolean_flush exec_s (in4 integer_dup) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) integer_gte integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()) ())) ()))))) ()) () ()))))
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 102
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty boolean_xor boolean_dup print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in1 boolean_flush exec_s (in4 integer_dup) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) integer_gte integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()) ())) ()))))) ()) () ()))))
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 102
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 89 550 676 563 342 383 212 88 708)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (387 89 550 676 563 342 383 212 88 708)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (boolean_yank exec_do*times (exec_s (in1 boolean_flush exec_s (in4 integer_dup) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()) ())) ()))) ()) () ()))))
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 91
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 6.002
Median total errors in population: 5
Error averages by case: (0.613 0.911 0.45 0.324 0.437 0.658 0.617 0.788 0.912 0.292)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.399
Average program size in population (points): 94.251
Average percent parens in population: 0.355
Minimum age in population: 65.08726254769545
Maximum age in population: 68.1864049724536
Average age in population: 66.86292769087935
Median age in population: 66.8531902463892
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.007
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 16401172
--- Timings ---
Current time: 1559314710880 milliseconds
Total Time:         129.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.7 seconds, 69.4%
Fitness Testing:     22.9 seconds, 17.7%
Report:              16.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 502
Test mean error for best: 0.50200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_s (integer_yank boolean_flush exec_s (in4 integer_shove) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_yankdup boolean_dup_times) (boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq)) exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth integer_eq integer_mod exec_flush) integer_fromboolean) () ()) ())) ()))) ()) () ()))))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 102
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_s (integer_yank boolean_flush exec_s (in4 integer_shove) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_yankdup boolean_dup_times) (boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq)) exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add tag_exec_106 (exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth integer_eq integer_mod exec_flush) integer_fromboolean) () ()) ())) ()))) ()) () ()))))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 102
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (632 453 632 632 872 292 128 285 128 25)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (632 453 632 632 872 292 128 285 128 25)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_106} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger})
Best program: (integer_div integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (integer_yank boolean_flush exec_s (in4 integer_shove) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_shove) (integer_mult boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and boolean_shove boolean_not boolean_and) integer_lt boolean_eq integer_empty integer_empty tag_exec_106 (exec_s () (integer_fromboolean integer_empty integer_empty integer_add tag_exec_106 (exec_s () (boolean_invert_first_then_and integer_fromboolean integer_add print_exec (boolean_yankdup in1 boolean_rot boolean_frominteger)) ())) ())))) ()) () ()))))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 68
Size: 104
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 5.921
Median total errors in population: 5
Error averages by case: (0.368 0.547 0.368 0.368 0.128 0.708 0.872 0.715 0.872 0.975)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.167
Average program size in population (points): 98.127
Average percent parens in population: 0.364
Minimum age in population: 66.18676079426041
Maximum age in population: 69.89468514038026
Average age in population: 68.39870082103344
Median age in population: 68.45802560210919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 16794822
--- Timings ---
Current time: 1559314713905 milliseconds
Total Time:         132.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.6 seconds, 69.3%
Fitness Testing:     23.5 seconds, 17.7%
Report:              17.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 492
Test mean error for best: 0.49200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (integer_yank boolean_flush exec_s (in4 in4) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and in1) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot exec_do*range (exec_empty integer_mod exec_flush) integer_fromboolean)) () ()) ()) ()))))) ()) () ()))))
Lexicase best errors: [1 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 101
Percent parens: 0.386
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (integer_yank boolean_flush exec_s (in4 in4) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and in1) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot exec_do*range (exec_empty integer_mod exec_flush) integer_fromboolean)) () ()) ()) ()))))) ()) () ()))))
Zero cases best errors: [1 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 101
Percent parens: 0.386
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 290 278 525 875 852 290 6 875 52)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (2 290 278 525 875 852 290 6 875 52)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (integer_yank boolean_flush exec_s (in4 in4) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and in1) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot exec_do*range (exec_empty integer_mod exec_flush) integer_fromboolean)) () ()) ()) ()))))) ()) () ()))))
Errors: [1 0 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 62
Size: 101
Percent parens: 0.386
--- Population Statistics ---
Average total errors in population: 5.955
Median total errors in population: 5
Error averages by case: (0.998 0.71 0.722 0.475 0.125 0.148 0.71 0.994 0.125 0.948)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.744
Average program size in population (points): 94.773
Average percent parens in population: 0.357
Minimum age in population: 68.0199755203248
Maximum age in population: 71.14721370850395
Average age in population: 70.08850913729987
Median age in population: 69.99959767536927
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 17174579
--- Timings ---
Current time: 1559314716951 milliseconds
Total Time:         135.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.6 seconds, 69.2%
Fitness Testing:     24.0 seconds, 17.7%
Report:              17.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 492
Test mean error for best: 0.49200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (integer_yank boolean_flush exec_s (in4 in4) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and in1) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot exec_do*range (exec_empty integer_mod exec_flush) integer_fromboolean)) () ()) ()) ()))))) ()) () ()))))
Lexicase best errors: [0 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 101
Percent parens: 0.386
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (integer_yank boolean_flush exec_s (in4 in4) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and in1) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot exec_do*range (exec_empty integer_mod exec_flush) integer_fromboolean)) () ()) ()) ()))))) ()) () ()))))
Zero cases best errors: [0 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 101
Percent parens: 0.386
--- Lexicase Population Statistics ---
Count of elite individuals by case: (416 443 501 799 284 799 102 488 190 443)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (416 443 501 799 284 799 102 488 190 443)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (integer_yank boolean_flush exec_s (in4 in4) (print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and in1) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot exec_do*range (exec_empty integer_mod exec_flush) integer_fromboolean)) () ()) ()) ()))))) ()) () ()))))
Errors: [0 0 0 0 1 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 62
Size: 101
Percent parens: 0.386
--- Population Statistics ---
Average total errors in population: 5.535
Median total errors in population: 6
Error averages by case: (0.584 0.557 0.499 0.201 0.716 0.201 0.898 0.512 0.81 0.557)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.757
Average program size in population (points): 91.336
Average percent parens in population: 0.341
Minimum age in population: 70.0199755203248
Maximum age in population: 72.99959767536927
Average age in population: 71.82142983603087
Median age in population: 71.93891002698786
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 17548920
--- Timings ---
Current time: 1559314719995 milliseconds
Total Time:         138.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.6 seconds, 69.1%
Fitness Testing:     24.6 seconds, 17.8%
Report:              18.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 488
Test mean error for best: 0.48800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_eq integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_eq exec_do*times (exec_s () (in1 in2 exec_s (in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_items integer_shove exec_dup_items) boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_not exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()))) ()))))) ()))
Lexicase best errors: [0 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_eq integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_eq exec_do*times (exec_s () (in1 in2 exec_s (in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush boolean_shove boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_items integer_shove exec_dup_items) boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_not exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()))) ()))))) ()))
Zero cases best errors: [0 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (857 25 301 838 800 494 264 484 854 482)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (857 25 301 838 800 494 264 484 854 482)
Population mean number of perfect (error zero) cases: 5.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_eq exec_do*times (exec_s () (in1 in2 exec_s (in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()) ()) ()))) ())))) ()))
Errors: [0 1 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 101
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 4.601
Median total errors in population: 5
Error averages by case: (0.143 0.975 0.699 0.162 0.2 0.506 0.736 0.516 0.146 0.518)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.162
Average program size in population (points): 89.229
Average percent parens in population: 0.330
Minimum age in population: 71.02928409484821
Maximum age in population: 74.93891002698786
Average age in population: 73.37236261350778
Median age in population: 73.45647464848251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.009
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 17904575
--- Timings ---
Current time: 1559314722946 milliseconds
Total Time:         141.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.5 seconds, 69.0%
Fitness Testing:     25.2 seconds, 17.8%
Report:              18.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 488
Test mean error for best: 0.48800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_eq exec_do*times (exec_s () (in1 in2 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty)) () ()) ()) ()))))) ()))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_eq exec_do*times (exec_s () (in1 in2 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty)) () ()) ()) ()))))) ()))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 93 453 493 452 349 92 765 764 4)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (4 93 453 493 452 349 92 765 764 4)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () exec_k_when_autoconstructing (exec_empty integer_mult boolean_dup exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_eq exec_do*times (exec_s () (exec_do*times (integer_rot exec_s_when_autoconstructing () (exec_dup_items) (boolean_eq exec_do*times (exec_s () (in1 in2 exec_s (in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc exec_empty integer_mod exec_flush) (integer_fromboolean) ()) ()) ()))) ())))) ())))) ()))
Errors: [1 1 0 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 70
Size: 111
Percent parens: 0.369
--- Population Statistics ---
Average total errors in population: 6.531
Median total errors in population: 7
Error averages by case: (0.996 0.907 0.547 0.507 0.548 0.651 0.908 0.235 0.236 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.077
Average program size in population (points): 95.178
Average percent parens in population: 0.325
Minimum age in population: 72.02928409484821
Maximum age in population: 76.36894164951178
Average age in population: 74.56764472673218
Median age in population: 74.58744408346345
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 18263393
--- Timings ---
Current time: 1559314725972 milliseconds
Total Time:         144.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.4 seconds, 68.9%
Fitness Testing:     25.7 seconds, 17.8%
Report:              19.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 492
Test mean error for best: 0.49200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_if (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq)) exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_do*count () exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty)) () ()) ()))) ()) ()) ()) () ()) ())))
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 117
Percent parens: 0.376
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_if (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq)) exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_do*count () exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty)) () ()) ()))) ()) ()) ()) () ()) ())))
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 117
Percent parens: 0.376
--- Lexicase Population Statistics ---
Count of elite individuals by case: (546 9 495 129 546 197 259 847 549 466)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (546 9 495 129 546 197 259 847 549 466)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s () (in1 in2 exec_s (in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_yankdup) boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_gte) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ()) ()) ())) ())))) ()) () ()))))
Errors: [0 1 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 73
Size: 116
Percent parens: 0.371
--- Population Statistics ---
Average total errors in population: 5.957
Median total errors in population: 6
Error averages by case: (0.454 0.991 0.505 0.871 0.454 0.803 0.741 0.153 0.451 0.534)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.828
Average program size in population (points): 92.339
Average percent parens in population: 0.315
Minimum age in population: 73.3995408521348
Maximum age in population: 77.82230539100915
Average age in population: 76.21102367806488
Median age in population: 76.32568724390524
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.008
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 18601542
--- Timings ---
Current time: 1559314729069 milliseconds
Total Time:         147.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.4 seconds, 68.8%
Fitness Testing:     26.2 seconds, 17.8%
Report:              19.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 476
Test mean error for best: 0.47600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_gt exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_rot exec_s_when_autoconstructing () (exec_dup_items boolean_yank exec_do*times (exec_s (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () exec_do*range (integer_swap exec_flush boolean_dup_items integer_shove) exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq in1 boolean_not) exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ()))) ()))))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_gt exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_rot exec_s_when_autoconstructing () (exec_dup_items boolean_yank exec_do*times (exec_s (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () exec_do*range (integer_swap exec_flush boolean_dup_items integer_shove) exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq in1 boolean_not) exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ()))) ()))))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 821 9 434 103 821 520 277 275 621)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (622 821 9 434 103 821 520 277 275 621)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_rot exec_s_when_autoconstructing (exec_dup_items boolean_yank exec_do*times (in3 in1 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) exec_flush boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max integer_mult integer_fromboolean boolean_shove integer_max exec_eq)) exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add) () ()) ()) ()))))
Errors: [0 0 1 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 69
Size: 95
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 5.497
Median total errors in population: 4
Error averages by case: (0.378 0.179 0.991 0.566 0.897 0.179 0.48 0.723 0.725 0.379)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.316
Average program size in population (points): 105.657
Average percent parens in population: 0.349
Minimum age in population: 75.96254057399246
Maximum age in population: 79.75233324599442
Average age in population: 77.93946688611096
Median age in population: 77.93807447226929
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.007
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 19034613
--- Timings ---
Current time: 1559314732183 milliseconds
Total Time:         150.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.3 seconds, 68.6%
Fitness Testing:     26.9 seconds, 17.9%
Report:              20.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 492
Test mean error for best: 0.49200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq})
Lexicase best program: (integer_div exec_y (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s () (in1 in2 exec_s (in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_yankdup) boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq)) ())))) ()) () ())))))
Lexicase best errors: [0 0 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 92
Percent parens: 0.380
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq})
Zero cases best program: (integer_div exec_y (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s () (in1 in2 exec_s (in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_yankdup) boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq)) ())))) ()) () ())))))
Zero cases best errors: [0 0 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 92
Percent parens: 0.380
--- Lexicase Population Statistics ---
Count of elite individuals by case: (273 789 366 54 201 229 29 40 31 227)
Population mean number of elite cases: 2.24
Count of perfect (error zero) individuals by case: (273 789 366 54 201 229 29 40 31 227)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank exec_do*times (exec_s () (in1 in2 exec_s (in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_yankdup) boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) (integer_yankdup boolean_dup_times) boolean_and integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_eq integer_gte boolean_not exec_swap (integer_add integer_shove exec_s () (exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot exec_rot (integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) () ())) () ()) ()) ())) ())))) ()) () ()))))
Errors: [0 0 0 1 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 80
Size: 127
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 7.761
Median total errors in population: 8
Error averages by case: (0.727 0.211 0.634 0.946 0.799 0.771 0.971 0.96 0.969 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.402
Average program size in population (points): 100.133
Average percent parens in population: 0.323
Minimum age in population: 76.96254057399246
Maximum age in population: 81.1955991926745
Average age in population: 79.39985443200365
Median age in population: 79.42202735725307
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.006
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 19410437
--- Timings ---
Current time: 1559314735376 milliseconds
Total Time:         153.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.3 seconds, 68.5%
Fitness Testing:     27.5 seconds, 17.9%
Report:              20.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 545
Test mean error for best: 0.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_rot exec_s_when_autoconstructing () (exec_dup_items boolean_yank exec_do*times (exec_s (in3 in2 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) boolean_and) (integer_shove) integer_mult integer_fromboolean boolean_shove boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add integer_inc boolean_dup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ())))) ()))))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 90
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_rot exec_s_when_autoconstructing () (exec_dup_items boolean_yank exec_do*times (exec_s (in3 in2 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove exec_dup_items) boolean_and) (integer_shove) integer_mult integer_fromboolean boolean_shove boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add integer_inc boolean_dup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ())))) ()))))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 90
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (342 402 340 244 37 373 349 340 349 373)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (342 402 340 244 37 373 349 340 349 373)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_87} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty})
Best program: (integer_div exec_yank exec_shove (integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_dup_items) (exec_s_when_autoconstructing () (exec_s (in4) (exec_s_when_autoconstructing () (tag_exec_87 () exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank in3 exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap boolean_invert_first_then_and boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (exec_dup_items) integer_yankdup boolean_dup_times boolean_and integer_fromboolean boolean_shove integer_max exec_eq)) (exec_if () (boolean_eq print_integer boolean_not exec_swap (integer_add integer_shove exec_s () (boolean_rot integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty)) ()) ()))) ()) ())) ()) () ()))))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 70
Size: 113
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 6.851
Median total errors in population: 8
Error averages by case: (0.658 0.598 0.66 0.756 0.963 0.627 0.651 0.66 0.651 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.196
Average program size in population (points): 100.176
Average percent parens in population: 0.336
Minimum age in population: 78.99365190399817
Maximum age in population: 82.78466124874298
Average age in population: 81.06679682546903
Median age in population: 81.10652596899136
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 19829394
--- Timings ---
Current time: 1559314738504 milliseconds
Total Time:         156.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.2 seconds, 68.3%
Fitness Testing:     28.2 seconds, 18.0%
Report:              21.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 522
Test mean error for best: 0.52200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_dup_items tag_boolean_509 exec_do*times (exec_s (in1 in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add integer_inc boolean_dup exec_when (boolean_rot boolean_stackdepth exec_empty exec_yankdup exec_flush) integer_fromboolean) ()) ()))) () ())) ()))))
Lexicase best errors: [0 0 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 96
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_dup_items tag_boolean_509 exec_do*times (exec_s (in1 in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add integer_inc boolean_dup exec_when (boolean_rot boolean_stackdepth exec_empty exec_yankdup exec_flush) integer_fromboolean) ()) ()))) () ())) ()))))
Zero cases best errors: [0 0 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 96
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 170 722 221 318 173 280 25 24 327)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (173 170 722 221 318 173 280 25 24 327)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty})
Best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_dup_items tag_boolean_509 exec_do*times (exec_s (in1 in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) (integer_swap boolean_invert_first_then_and boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (exec_dup_items) (integer_yankdup boolean_dup_times boolean_and integer_fromboolean boolean_shove integer_max exec_eq)) exec_if () (boolean_eq print_integer boolean_not exec_swap (integer_add integer_shove exec_s () (boolean_rot integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty)) ()) ())) ()))))
Errors: [0 0 0 0 1 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 93
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 7.567
Median total errors in population: 7
Error averages by case: (0.827 0.83 0.278 0.779 0.682 0.827 0.72 0.975 0.976 0.673)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.181
Average program size in population (points): 95.606
Average percent parens in population: 0.325
Minimum age in population: 80.70550476840852
Maximum age in population: 84.08180227520457
Average age in population: 82.57776361983638
Median age in population: 82.60212939314403
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.007
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 20200983
--- Timings ---
Current time: 1559314741538 milliseconds
Total Time:         160.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.1 seconds, 68.2%
Fitness Testing:     28.8 seconds, 18.0%
Report:              21.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 522
Test mean error for best: 0.52200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_dup_items tag_boolean_509 exec_do*times (exec_s (in1 in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) (integer_swap boolean_invert_first_then_and boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (exec_dup_items) (integer_yankdup boolean_dup_times boolean_and integer_fromboolean boolean_shove integer_max exec_eq)) exec_if () (boolean_eq print_integer boolean_not exec_swap (integer_add integer_shove exec_s () (boolean_rot integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty)) ()) ())) ()))))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 93
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_dup_items tag_boolean_509 exec_do*times (exec_s (in1 in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) (integer_swap boolean_invert_first_then_and boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (exec_dup_items) (integer_yankdup boolean_dup_times boolean_and integer_fromboolean boolean_shove integer_max exec_eq)) exec_if () (boolean_eq print_integer boolean_not exec_swap (integer_add integer_shove exec_s () (boolean_rot integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty)) ()) ())) ()))))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 93
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 757 183 298 744 155 381 382 209 231)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (332 757 183 298 744 155 381 382 209 231)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty})
Best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_dup_items tag_boolean_509 exec_do*times (exec_s (in1 in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) (integer_swap boolean_invert_first_then_and boolean_dup_items integer_shove exec_dup_items) integer_yankdup boolean_dup_times) (exec_dup_items) (integer_yankdup boolean_dup_times boolean_and integer_fromboolean boolean_shove integer_max exec_eq)) exec_if () (boolean_eq print_integer boolean_not exec_swap (integer_add integer_shove exec_s () (boolean_rot integer_fromboolean integer_add integer_inc boolean_yankdup exec_when (boolean_rot boolean_stackdepth exec_empty)) ()) ())) ()))))
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 66
Size: 93
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 6.328
Median total errors in population: 6
Error averages by case: (0.668 0.243 0.817 0.702 0.256 0.845 0.619 0.618 0.791 0.769)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.685
Average program size in population (points): 91.556
Average percent parens in population: 0.313
Minimum age in population: 81.70550476840852
Maximum age in population: 85.56668863245213
Average age in population: 84.3141160749975
Median age in population: 84.38830206617718
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.007
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 20603529
--- Timings ---
Current time: 1559314744599 milliseconds
Total Time:         163.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.1 seconds, 68.1%
Fitness Testing:     29.4 seconds, 18.0%
Report:              22.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 476
Test mean error for best: 0.47600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_87} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_dup_items tag_boolean_509 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_s (in4) (exec_s_when_autoconstructing () (tag_exec_87 () exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank in3 exec_s (in4) (exec_do*times (print_integer exec_do*while () exec_dup (exec_flush integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) boolean_dup_items integer_shove integer_shove) (integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_rot () () (exec_if () (boolean_xor integer_gte boolean_not) exec_rot (integer_fromboolean integer_add) () ()))) ()) ()) ()) ()) () ())) ()))))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 98
Percent parens: 0.439
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_87} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_dup_items tag_boolean_509 exec_do*times (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_s (in4) (exec_s_when_autoconstructing () (tag_exec_87 () exec_s_when_autoconstructing () (exec_dup_items) (boolean_yank in3 exec_s (in4) (exec_do*times (print_integer exec_do*while () exec_dup (exec_flush integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) boolean_dup_items integer_shove integer_shove) (integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_rot () () (exec_if () (boolean_xor integer_gte boolean_not) exec_rot (integer_fromboolean integer_add) () ()))) ()) ()) ()) ()) () ())) ()))))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 98
Percent parens: 0.439
--- Lexicase Population Statistics ---
Count of elite individuals by case: (718 543 456 214 190 494 182 542 262 455)
Population mean number of elite cases: 4.06
Count of perfect (error zero) individuals by case: (718 543 456 214 190 494 182 542 262 455)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_373} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap) exec_s_when_autoconstructing () (exec_dup_items tag_boolean_373) (exec_do*times (exec_s (in4) (in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush) in4 integer_shove) integer_rot exec_shove () boolean_eq integer_swap exec_flush boolean_dup_items integer_shove integer_shove) (integer_shove) integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_xor integer_gte boolean_not exec_rot (integer_fromboolean integer_add) () ()))))))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 49
Size: 73
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 5.944
Median total errors in population: 6
Error averages by case: (0.282 0.457 0.544 0.786 0.81 0.506 0.818 0.458 0.738 0.545)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.041
Average program size in population (points): 89.686
Average percent parens in population: 0.329
Minimum age in population: 84.10652596899136
Maximum age in population: 87.37556438670883
Average age in population: 85.93134626255947
Median age in population: 85.98648442639772
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.009
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 20979809
--- Timings ---
Current time: 1559314747629 milliseconds
Total Time:         166.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.1 seconds, 68.1%
Fitness Testing:     30.0 seconds, 18.1%
Report:              22.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 478
Test mean error for best: 0.47800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in2 exec_if (exec_s (exec_when (exec_s (in4 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush) in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) (boolean_dup_items integer_shove integer_shove) integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_xor integer_gte boolean_not) exec_rot (integer_fromboolean integer_add) () ())) () ()) ()) ()))
Lexicase best errors: [1 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in2 exec_if (exec_s (exec_when (exec_s (in4 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush exec_flush) in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) (boolean_dup_items integer_shove integer_shove) integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_xor integer_gte boolean_not) exec_rot (integer_fromboolean integer_add) () ())) () ()) ()) ()))
Zero cases best errors: [1 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 826 42 697 78 562 174 249 623 574)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (111 826 42 697 78 562 174 249 623 574)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_boolean_65} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Best program: (tag_boolean_65 exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in2 exec_if (exec_s (exec_s (exec_s (in4 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (integer_min exec_flush) in4 boolean_invert_second_then_and) print_integer exec_shove () boolean_eq integer_swap exec_flush) (boolean_dup_items integer_shove integer_shove) integer_shove) (integer_mult integer_fromboolean boolean_shove integer_max exec_eq) () exec_if () (boolean_xor integer_gte boolean_not) exec_rot (integer_fromboolean integer_add) () ()) () ()) () ()) ()) ()))
Errors: [1 0 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 47
Size: 77
Percent parens: 0.390
--- Population Statistics ---
Average total errors in population: 6.064
Median total errors in population: 6
Error averages by case: (0.889 0.174 0.958 0.303 0.922 0.438 0.826 0.751 0.377 0.426)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.215
Average program size in population (points): 83.622
Average percent parens in population: 0.352
Minimum age in population: 85.34656663485656
Maximum age in population: 89.05609061946411
Average age in population: 87.58646179452337
Median age in population: 87.6695439471505
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.007
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 21335763
--- Timings ---
Current time: 1559314750645 milliseconds
Total Time:         169.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.0 seconds, 68.0%
Fitness Testing:     30.6 seconds, 18.1%
Report:              23.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in2 exec_if (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (in2 exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add integer_inc boolean_dup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ()))) ()) () ()) ()) ()))
Lexicase best errors: [1 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 96
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in2 exec_if (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (in2 exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add integer_inc boolean_dup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ()))) ()) () ()) ()) ()))
Zero cases best errors: [1 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 96
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (71 20 400 279 137 210 844 513 142 444)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (71 20 400 279 137 210 844 513 142 444)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_if (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_s (in4) (in1 in2 exec_s (in4 in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) print_integer exec_shove () boolean_eq integer_swap exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove boolean_shove integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add) ()) ()))) ()) ()) ()) () ()) ())))
Errors: [1 1 0 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 97
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 6.94
Median total errors in population: 7
Error averages by case: (0.929 0.98 0.6 0.721 0.863 0.79 0.156 0.487 0.858 0.556)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.185
Average program size in population (points): 82.352
Average percent parens in population: 0.343
Minimum age in population: 86.8070365692828
Maximum age in population: 90.76799341547729
Average age in population: 89.25597371303839
Median age in population: 89.38004570059815
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.007
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 21667093
--- Timings ---
Current time: 1559314753661 milliseconds
Total Time:         172.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.0 seconds, 68.0%
Fitness Testing:     31.1 seconds, 18.1%
Report:              23.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 475
Test mean error for best: 0.47500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 in2 exec_s (in4) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth integer_gt exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup boolean_dup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ()) ()))) ()) () ()) ()))))
Lexicase best errors: [0 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 99
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 in2 exec_s (in4) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth integer_gt exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup boolean_dup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ()) ()))) ()) () ()) ()))))
Zero cases best errors: [0 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 99
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 313 416 198 380 496 139 382 163 187)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (364 313 416 198 380 496 139 382 163 187)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap) exec_dup_items tag_boolean_509 exec_do*times (exec_s (in1 in2 exec_s (in4) (in2 exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean integer_add integer_inc boolean_dup exec_when (boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ()))) ()) () ()))))
Errors: [0 1 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 64
Size: 93
Percent parens: 0.312
--- Population Statistics ---
Average total errors in population: 6.962
Median total errors in population: 7
Error averages by case: (0.636 0.687 0.584 0.802 0.62 0.504 0.861 0.618 0.837 0.813)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.548
Average program size in population (points): 90.487
Average percent parens in population: 0.341
Minimum age in population: 88.59766931773
Maximum age in population: 92.17829224536689
Average age in population: 90.51308138553988
Median age in population: 90.55716315609445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.007
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 22028062
--- Timings ---
Current time: 1559314756730 milliseconds
Total Time:         175.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.9 seconds, 67.9%
Fitness Testing:     31.7 seconds, 18.1%
Report:              24.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 41                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () integer_mult exec_if (exec_s (in1 in1 exec_s (exec_pop (in2 in4) exec_do*times (in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq)) (boolean_not) (exec_rot (integer_fromboolean integer_add) () ())) () ()) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () integer_mult exec_if (exec_s (in1 in1 exec_s (exec_pop (in2 in4) exec_do*times (in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq)) (boolean_not) (exec_rot (integer_fromboolean integer_add) () ())) () ()) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (386 264 145 735 403 306 101 178 24 328)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (386 264 145 735 403 306 101 178 24 328)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () integer_mult exec_if (exec_s (in1 in1 exec_s (exec_pop (in2 in4) exec_do*times (in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq)) (boolean_not) (exec_rot (integer_fromboolean integer_add) () ())) () ()) ()) ()))
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 45
Size: 71
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 7.13
Median total errors in population: 7
Error averages by case: (0.614 0.736 0.855 0.265 0.597 0.694 0.899 0.822 0.976 0.672)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.354
Average program size in population (points): 93.495
Average percent parens in population: 0.354
Minimum age in population: 89.73661685221941
Maximum age in population: 93.47833746798955
Average age in population: 92.06601760141211
Median age in population: 92.0513092776969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.008
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 22453582
--- Timings ---
Current time: 1559314759749 milliseconds
Total Time:         178.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.9 seconds, 67.8%
Fitness Testing:     32.3 seconds, 18.1%
Report:              24.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 in2 exec_s (in4) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (boolean_not) (exec_rot (integer_fromboolean integer_add) () ())))) ()) () ()) ()))))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 84
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 in2 exec_s (in4) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (boolean_not) (exec_rot (integer_fromboolean integer_add) () ())))) ()) () ()) ()))))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 84
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (728 651 554 757 43 313 273 64 284 303)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (728 651 554 757 43 313 273 64 284 303)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 in2 exec_s (in4) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_when (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ())) ()) () ()) ()))))
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 65
Size: 97
Percent parens: 0.330
--- Population Statistics ---
Average total errors in population: 6.03
Median total errors in population: 5
Error averages by case: (0.272 0.349 0.446 0.243 0.957 0.687 0.727 0.936 0.716 0.697)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.115
Average program size in population (points): 88.647
Average percent parens in population: 0.366
Minimum age in population: 91.90266647406321
Maximum age in population: 95.04986847150722
Average age in population: 93.4186266614383
Median age in population: 93.56617915954143
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.009
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 22881911
--- Timings ---
Current time: 1559314762905 milliseconds
Total Time:         181.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.8 seconds, 67.8%
Fitness Testing:     33.0 seconds, 18.2%
Report:              25.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 478
Test mean error for best: 0.47800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_if (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_s (in4) (in1 integer_rot exec_s (in1 exec_s (exec_pop (in2 in4) exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () boolean_not) exec_rot (integer_fromboolean integer_add) () ()) () ()) () ()) ()) ()) ()) () ()) ())))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 93
Percent parens: 0.419
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_if (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_s (in4) (in1 integer_rot exec_s (in1 exec_s (exec_pop (in2 in4) exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () boolean_not) exec_rot (integer_fromboolean integer_add) () ()) () ()) () ()) ()) ()) ()) () ()) ())))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 93
Percent parens: 0.419
--- Lexicase Population Statistics ---
Count of elite individuals by case: (448 833 58 480 366 286 365 105 646 368)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (448 833 58 480 366 286 365 105 646 368)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_if (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_s (in4) (in1 integer_rot exec_s (in1 exec_s (exec_pop (in2 in4) exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () boolean_not) exec_rot (integer_fromboolean integer_add) () ()) () ()) () ()) ()) ()) ()) () ()) ())))
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 93
Percent parens: 0.419
--- Population Statistics ---
Average total errors in population: 6.045
Median total errors in population: 6
Error averages by case: (0.552 0.167 0.942 0.52 0.634 0.714 0.635 0.895 0.354 0.632)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.387
Average program size in population (points): 85.89
Average percent parens in population: 0.364
Minimum age in population: 93.02116370789695
Maximum age in population: 96.62240010687208
Average age in population: 95.17960794039178
Median age in population: 95.23797997595683
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.009
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 23292696
--- Timings ---
Current time: 1559314766179 milliseconds
Total Time:         184.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.9 seconds, 67.7%
Fitness Testing:     33.6 seconds, 18.2%
Report:              25.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 488
Test mean error for best: 0.48800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (boolean_invert_first_then_and exec_if (exec_s (in1 in2 exec_s (boolean_invert_second_then_and exec_s (in4) (in2 exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove exec_y (integer_max exec_eq)) (exec_if () (boolean_eq integer_gte boolean_empty integer_lte integer_add integer_shove exec_s () (integer_yank) ())) ()) ()) () ()) () ()) ())))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 84
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (boolean_invert_first_then_and exec_if (exec_s (in1 in2 exec_s (boolean_invert_second_then_and exec_s (in4) (in2 exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove exec_y (integer_max exec_eq)) (exec_if () (boolean_eq integer_gte boolean_empty integer_lte integer_add integer_shove exec_s () (integer_yank) ())) ()) ()) () ()) () ()) ())))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 84
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (427 20 22 22 571 65 801 727 571 442)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (427 20 22 22 571 65 801 727 571 442)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (print_integer) (in2 exec_if (exec_s (in1 in2 exec_s (in4) (exec_s_when_autoconstructing () (exec_s (in4) (exec_s (in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup boolean_and boolean_rot boolean_stackdepth exec_empty integer_mod exec_flush) (integer_fromboolean)) ()) ()) ()) ())) ()) ()) ()) () ()) ())))
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 110
Percent parens: 0.382
--- Population Statistics ---
Average total errors in population: 6.332
Median total errors in population: 6
Error averages by case: (0.573 0.98 0.978 0.978 0.429 0.935 0.199 0.273 0.429 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.022
Average program size in population (points): 92.526
Average percent parens in population: 0.382
Minimum age in population: 94.9135864530137
Maximum age in population: 98.11191114028767
Average age in population: 96.35377944894498
Median age in population: 96.52271121639794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.008
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 23727847
--- Timings ---
Current time: 1559314769406 milliseconds
Total Time:         187.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.8 seconds, 67.5%
Fitness Testing:     34.4 seconds, 18.3%
Report:              26.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 511
Test mean error for best: 0.51100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (in4) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean integer_inc integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ())) ()) ()) () ()) ()))))
Lexicase best errors: [1 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 99
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (in4) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean integer_inc integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ())) ()) ()) () ()) ()))))
Zero cases best errors: [1 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 99
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (145 799 232 403 34 397 852 426 516 459)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (145 799 232 403 34 397 852 426 516 459)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap boolean_not) exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (in4) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean boolean_stackdepth exec_empty integer_mod exec_flush) integer_fromboolean) ()) ()) ())) ()) ()) () ())))
Errors: [1 0 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 67
Size: 98
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.737
Median total errors in population: 5
Error averages by case: (0.855 0.201 0.768 0.597 0.966 0.603 0.148 0.574 0.484 0.541)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.653
Average program size in population (points): 87.427
Average percent parens in population: 0.363
Minimum age in population: 96.71881316699285
Maximum age in population: 99.49591496358909
Average age in population: 98.12059224663228
Median age in population: 98.08828222912118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.008
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 24126392
--- Timings ---
Current time: 1559314772522 milliseconds
Total Time:         190.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       128.7 seconds, 67.4%
Fitness Testing:     35.0 seconds, 18.4%
Report:              27.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add})
Lexicase best program: (integer_div exec_y (integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (boolean_invert_second_then_and in1 in2 in3 exec_do*times (in4 boolean_invert_second_then_and exec_s (in4) (in2 exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove exec_y (integer_max exec_eq)) (exec_if () (boolean_eq integer_gte boolean_empty integer_lte integer_add)) ()) ())) ()))))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add})
Zero cases best program: (integer_div exec_y (integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (boolean_invert_second_then_and in1 in2 in3 exec_do*times (in4 boolean_invert_second_then_and exec_s (in4) (in2 exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove exec_y (integer_max exec_eq)) (exec_if () (boolean_eq integer_gte boolean_empty integer_lte integer_add)) ()) ())) ()))))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 619 359 163 792 305 335 653 837 207)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (175 619 359 163 792 305 335 653 837 207)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add})
Best program: (integer_div exec_y (integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (boolean_invert_second_then_and in1 in2 in3 exec_do*times (in4 boolean_invert_second_then_and exec_s (in4) (in2 exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove exec_y (integer_max exec_eq)) (exec_if () (boolean_eq integer_gte boolean_empty integer_lte integer_add)) ()) ())) ()))))
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 52
Size: 77
Percent parens: 0.325
--- Population Statistics ---
Average total errors in population: 5.555
Median total errors in population: 5
Error averages by case: (0.825 0.381 0.641 0.837 0.208 0.695 0.665 0.347 0.163 0.793)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.535
Average program size in population (points): 80.99
Average percent parens in population: 0.338
Minimum age in population: 97.9879780093829
Maximum age in population: 101.0169398651939
Average age in population: 99.60075587412656
Median age in population: 99.71759558433013
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.008
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 24519840
--- Timings ---
Current time: 1559314775543 milliseconds
Total Time:         194.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       130.6 seconds, 67.3%
Fitness Testing:     35.7 seconds, 18.4%
Report:              27.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 511
Test mean error for best: 0.51100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (in4) (exec_eq integer_rot exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove exec_y (integer_max exec_eq)) (exec_if () (boolean_eq integer_gte boolean_empty integer_lte integer_add)) ())) () ()) ()))))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 82
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (in4) (exec_eq integer_rot exec_s (boolean_shove in2 in3 integer_eq boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove exec_y (integer_max exec_eq)) (exec_if () (boolean_eq integer_gte boolean_empty integer_lte integer_add)) ())) () ()) ()))))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 82
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 228 831 832 410 222 409 259 503 357)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (226 228 831 832 410 222 409 259 503 357)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (in4) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove integer_lte integer_add integer_shove integer_fromboolean) ())) ()) ()) () ()) ()))))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 56
Size: 84
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.723
Median total errors in population: 6
Error averages by case: (0.774 0.772 0.169 0.168 0.59 0.778 0.591 0.741 0.497 0.643)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.77
Average program size in population (points): 84.853
Average percent parens in population: 0.342
Minimum age in population: 98.9879780093829
Maximum age in population: 102.5734878861088
Average age in population: 101.1286928246048
Median age in population: 101.2407746409096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.009
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 24983265
--- Timings ---
Current time: 1559314778680 milliseconds
Total Time:         197.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       132.6 seconds, 67.3%
Fitness Testing:     36.3 seconds, 18.4%
Report:              28.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 530
Test mean error for best: 0.53000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap boolean_not) exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (exec_k_when_autoconstructing () (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()))) () ()) ()) () ())))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 98
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap boolean_not) exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (exec_k_when_autoconstructing () (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()))) () ()) ()) () ())))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 98
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (38 273 348 422 46 358 798 381 401 802)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (38 273 348 422 46 358 798 381 401 802)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (in4) exec_do*times (in2 exec_if (exec_s (in1 in2 in3 boolean_invert_second_then_and in4 boolean_invert_second_then_and exec_s (in4) (in2 exec_s (boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (in3 integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean boolean_stackdepth exec_k (integer_mod exec_flush) (integer_fromboolean))) ()) ()) ())) ()) () ()) ())))
Errors: [0 1 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 66
Size: 102
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.133
Median total errors in population: 5
Error averages by case: (0.962 0.727 0.652 0.578 0.954 0.642 0.202 0.619 0.599 0.198)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.269
Average program size in population (points): 86.148
Average percent parens in population: 0.335
Minimum age in population: 99.9879780093829
Maximum age in population: 104.3779397805782
Average age in population: 102.5770825324922
Median age in population: 102.572289483573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.008
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 25403945
--- Timings ---
Current time: 1559314781779 milliseconds
Total Time:         200.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       134.5 seconds, 67.2%
Fitness Testing:     37.0 seconds, 18.5%
Report:              28.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 568
Test mean error for best: 0.56800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output:                    
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output:                    
Correct output: 78                  | Program output:                    
Correct output: 68                  | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 1                   | Program output:                    
Correct output: 20                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: 33                  | Program output:                    
Correct output: 30                  | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: 44                  | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 1                   | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 41                  | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output:                    
Correct output: 10                  | Program output:                    
Correct output: 17                  | Program output:                    
Correct output: 36                  | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output:                    
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (integer_swap integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty integer_max integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_swap boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean integer_max)) ()) ())) ()) ()) () ()) ()))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 95
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot integer_div exec_y (exec_shove (integer_swap exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 exec_s (boolean_shove in2 in3 exec_stackdepth boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (integer_swap integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty integer_max integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_swap boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean integer_max)) ()) ())) ()) ()) () ()) ()))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 95
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (672 669 603 342 467 242 262 262 243 417)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (672 669 603 342 467 242 262 262 243 417)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (exec_if (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (in1 exec_s (exec_pop (in2 in4) exec_do*times (exec_s (exec_pop (in2 in4) exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (exec_do*times () exec_do*times (boolean_invert_second_then_and exec_s (exec_do*times () exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq)) boolean_not) (exec_rot (integer_fromboolean integer_add) () ()) ()) ())) () ())) () ()) () ()) ()) () ()) ()))))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 63
Size: 109
Percent parens: 0.422
--- Population Statistics ---
Average total errors in population: 5.821
Median total errors in population: 5
Error averages by case: (0.328 0.331 0.397 0.658 0.533 0.758 0.738 0.738 0.757 0.583)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.786
Average program size in population (points): 88.931
Average percent parens in population: 0.349
Minimum age in population: 102.274921847728
Maximum age in population: 106.2284034066997
Average age in population: 104.4839277818627
Median age in population: 104.5725703697062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 25939389
--- Timings ---
Current time: 1559314785210 milliseconds
Total Time:         203.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       136.4 seconds, 67.1%
Fitness Testing:     37.7 seconds, 18.5%
Report:              29.1 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 502
Test mean error for best: 0.50200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (exec_s (in1 in2 in4 in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (in1 exec_s (exec_pop (in2 in4) exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (exec_do*times () exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove exec_flush integer_max exec_eq)) (boolean_not) exec_rot (boolean_flush integer_add) () ())) () ()) () ()) ()) () ()) ()))))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 91
Percent parens: 0.396
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (exec_s (in1 in2 in4 in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (in1 exec_s (exec_pop (in2 in4) exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (exec_do*times () exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove exec_flush integer_max exec_eq)) (boolean_not) exec_rot (boolean_flush integer_add) () ())) () ()) () ()) ()) () ()) ()))))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 91
Percent parens: 0.396
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 667 293 760 465 523 808 330 35 730)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (333 667 293 760 465 523 808 330 35 730)
Population mean number of perfect (error zero) cases: 4.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () () (exec_do*times () in4) exec_do*times (in2 exec_if (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s () (in4) (integer_rot) exec_s (in1 exec_s (exec_pop (in2 in4) exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (exec_do*times () exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove exec_flush integer_max exec_eq)) (boolean_not) exec_rot (integer_fromboolean integer_add) () ())) () ()) () ()) () ()) ())))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 91
Percent parens: 0.396
--- Population Statistics ---
Average total errors in population: 5.056
Median total errors in population: 4
Error averages by case: (0.667 0.333 0.707 0.24 0.535 0.477 0.192 0.67 0.965 0.27)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.177
Average program size in population (points): 92.668
Average percent parens in population: 0.349
Minimum age in population: 104.0593420802316
Maximum age in population: 107.585394280121
Average age in population: 106.2656245399785
Median age in population: 106.1209007078364
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 26533310
--- Timings ---
Current time: 1559314788644 milliseconds
Total Time:         206.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       138.4 seconds, 66.9%
Fitness Testing:     38.4 seconds, 18.6%
Report:              29.9 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 520
Test mean error for best: 0.52000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ())) ()) ()) () ()) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 108
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ())) ()) ()) () ()) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 108
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (309 650 320 25 471 717 18 849 605 841)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (309 650 320 25 471 717 18 849 605 841)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (exec_s (in1 integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ())) ()) ()))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 62
Size: 93
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.195
Median total errors in population: 4
Error averages by case: (0.691 0.35 0.68 0.975 0.529 0.283 0.982 0.151 0.395 0.159)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.418
Average program size in population (points): 91.459
Average percent parens in population: 0.361
Minimum age in population: 106.0806374845127
Maximum age in population: 109.5506765322564
Average age in population: 107.8744076974285
Median age in population: 107.9656140871179
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.01
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 27340357
--- Timings ---
Current time: 1559314791937 milliseconds
Total Time:         210.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.3 seconds, 66.7%
Fitness Testing:     39.3 seconds, 18.7%
Report:              30.6 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 497
Test mean error for best: 0.49700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (integer_div exec_y (exec_shove (in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (in1 exec_s (exec_pop (in2 in4) in4) (exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (exec_do*times () exec_do*times (print_integer exec_flush) boolean_dup_items integer_shove integer_shove) (exec_eq) () exec_if () (boolean_eq integer_gte boolean_empty exec_swap (boolean_stackdepth integer_shove exec_s () (in1 integer_shove) (integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq)) (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add exec_yank exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()))) ())) ()) () ()) ())))))
Lexicase best errors: [1 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 115
Percent parens: 0.374
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (integer_div exec_y (exec_shove (in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (in1 exec_s (exec_pop (in2 in4) in4) (exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (exec_do*times () exec_do*times (print_integer exec_flush) boolean_dup_items integer_shove integer_shove) (exec_eq) () exec_if () (boolean_eq integer_gte boolean_empty exec_swap (boolean_stackdepth integer_shove exec_s () (in1 integer_shove) (integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq)) (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add exec_yank exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()))) ())) ()) () ()) ())))))
Zero cases best errors: [1 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 115
Percent parens: 0.374
--- Lexicase Population Statistics ---
Count of elite individuals by case: (595 16 227 712 83 17 210 638 210 716)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (595 16 227 712 83 17 210 638 210 716)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () exec_swap (integer_div exec_y (exec_shove (in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (in1 exec_s (exec_pop (in2) in4) (exec_do*times (in2 exec_k_when_autoconstructing (exec_stackdepth boolean_invert_second_then_and exec_s (exec_do*times () exec_do*times (print_integer exec_flush) boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove integer_empty integer_max exec_eq) () exec_if () (exec_eq)) (exec_if () (boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*range (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ())))) ()) () ()) ()))) ()))
Errors: [1 1 0 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 59
Size: 96
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 6.576
Median total errors in population: 6
Error averages by case: (0.405 0.984 0.773 0.288 0.917 0.983 0.79 0.362 0.79 0.284)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.712
Average program size in population (points): 98.271
Average percent parens in population: 0.351
Minimum age in population: 107.3092060241254
Maximum age in population: 111.0255041836195
Average age in population: 108.9599635110114
Median age in population: 109.0475249147077
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 27830032
--- Timings ---
Current time: 1559314795300 milliseconds
Total Time:         213.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.2 seconds, 66.6%
Fitness Testing:     40.0 seconds, 18.7%
Report:              31.1 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 441
Test mean error for best: 0.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (tagged_628 exec_s_when_autoconstructing () (exec_s (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ())) () ()) () ()) ()) ()))))
Lexicase best errors: [0 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 100
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (tagged_628 exec_s_when_autoconstructing () (exec_s (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ())) () ()) () ()) ()) ()))))
Zero cases best errors: [0 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 100
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 579 135 568 101 261 568 89 596 86)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (340 579 135 568 101 261 568 89 596 86)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (in2 exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte integer_mult exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) ())) ()) () ()) ()) ()))))
Errors: [0 0 1 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 106
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 6.677
Median total errors in population: 6
Error averages by case: (0.66 0.421 0.865 0.432 0.899 0.739 0.432 0.911 0.404 0.914)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.695
Average program size in population (points): 97.004
Average percent parens in population: 0.364
Minimum age in population: 108.3092060241254
Maximum age in population: 112.3274699629585
Average age in population: 110.6533547662842
Median age in population: 110.6699400092901
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.008
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 28424986
--- Timings ---
Current time: 1559314798522 milliseconds
Total Time:         216.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.2 seconds, 66.5%
Fitness Testing:     40.8 seconds, 18.8%
Report:              31.9 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 495
Test mean error for best: 0.49500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () exec_swap (integer_div exec_y (exec_shove (in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean) ()) ())) ()) ()) () ()) () ()) () ()) ()))) ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 100
Percent parens: 0.390
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () exec_swap (integer_div exec_y (exec_shove (in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean) ()) ())) ()) ()) () ()) () ()) () ()) ()))) ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 100
Percent parens: 0.390
--- Lexicase Population Statistics ---
Count of elite individuals by case: (285 516 603 631 115 448 603 139 774 735)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (285 516 603 631 115 448 603 139 774 735)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (exec_dup (exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) () ()) () ()) ()) ()) () ()) ()) ())))))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 69
Size: 109
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 5.151
Median total errors in population: 4
Error averages by case: (0.715 0.484 0.397 0.369 0.885 0.552 0.397 0.861 0.226 0.265)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.533
Average program size in population (points): 105.116
Average percent parens in population: 0.355
Minimum age in population: 110.3794357422975
Maximum age in population: 113.9029614077933
Average age in population: 112.5851703024012
Median age in population: 112.5774699629585
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.009
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 28901169
--- Timings ---
Current time: 1559314801820 milliseconds
Total Time:         220.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.1 seconds, 66.4%
Fitness Testing:     41.6 seconds, 18.9%
Report:              32.4 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 495
Test mean error for best: 0.49500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq)) (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) ()) () ()) ()))
Lexicase best errors: [1 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 92
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq)) (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) ()) () ()) ()))
Zero cases best errors: [1 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 92
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (338 583 480 285 844 818 26 385 667 585)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (338 583 480 285 844 818 26 385 667 585)
Population mean number of perfect (error zero) cases: 5.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () exec_swap (integer_div exec_y (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) () ()) () ()) ()) ()) () ())) ()))
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 63
Size: 95
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 4.989
Median total errors in population: 4
Error averages by case: (0.662 0.417 0.52 0.715 0.156 0.182 0.974 0.615 0.333 0.415)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.111
Average program size in population (points): 101.006
Average percent parens in population: 0.353
Minimum age in population: 111.818337993542
Maximum age in population: 115.5802225543445
Average age in population: 114.3911452170656
Median age in population: 114.5074837008958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.008
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 29323017
--- Timings ---
Current time: 1559314805131 milliseconds
Total Time:         223.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.1 seconds, 66.3%
Fitness Testing:     42.3 seconds, 18.9%
Report:              33.0 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 495
Test mean error for best: 0.49500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (integer_div exec_y (exec_shove () integer_rot in1 in2 in3 exec_s (exec_dup (exec_s (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq)) (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) ()) () ())) () ())))
Lexicase best errors: [0 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 98
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (integer_div exec_y (exec_shove () integer_rot in1 in2 in3 exec_s (exec_dup (exec_s (exec_s (in1 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq)) (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) ()) () ())) () ())))
Zero cases best errors: [0 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 98
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (641 815 263 500 475 373 32 176 172 543)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (641 815 263 500 475 373 32 176 172 543)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (exec_dup (exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add boolean_empty exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) ()) ()) ()) () ()) () ()) ()) ()) () ()) ()) ())))))
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 79
Size: 128
Percent parens: 0.383
--- Population Statistics ---
Average total errors in population: 6.01
Median total errors in population: 5
Error averages by case: (0.359 0.185 0.737 0.5 0.525 0.627 0.968 0.824 0.828 0.457)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.245
Average program size in population (points): 105.731
Average percent parens in population: 0.352
Minimum age in population: 112.9800761693007
Maximum age in population: 117.5216948574374
Average age in population: 116.0758421824223
Median age in population: 116.0914581969588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.008
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 29743499
--- Timings ---
Current time: 1559314808526 milliseconds
Total Time:         226.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.0 seconds, 66.2%
Fitness Testing:     43.1 seconds, 19.0%
Report:              33.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Smallest problem report - generation 76
Test total error for best: 482
Test mean error for best: 0.48200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (exec_dup (exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove exec_dup_items in2 in2 in3 in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) () ()) ()) ()) () ()) ()) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 113
Percent parens: 0.354
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (exec_dup (exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove exec_dup_items in2 in2 in3 in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) () ()) ()) ()) () ()) ()) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 113
Percent parens: 0.354
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 89 574 258 145 844 625 203 556 436)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (88 89 574 258 145 844 625 203 556 436)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_do*times (exec_dup (exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove exec_dup_items in2 in2 in3 in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) () ()) ()) ()) () ()) ()) ())))))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 73
Size: 113
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 6.182
Median total errors in population: 6
Error averages by case: (0.912 0.911 0.426 0.742 0.855 0.156 0.375 0.797 0.444 0.564)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.917
Average program size in population (points): 103.849
Average percent parens in population: 0.354
Minimum age in population: 113.9800761693007
Maximum age in population: 119.0876600310056
Average age in population: 117.428647376295
Median age in population: 117.3362497836548
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.009
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 30188298
--- Timings ---
Current time: 1559314811917 milliseconds
Total Time:         230.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.0 seconds, 66.0%
Fitness Testing:     43.9 seconds, 19.1%
Report:              34.2 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Smallest problem report - generation 77
Test total error for best: 545
Test mean error for best: 0.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if})
Lexicase best program: (integer_div exec_y (exec_shove () exec_swap (integer_div exec_y (exec_shove (in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items exec_s (exec_s (in1 in2 exec_s (integer_shove boolean_invert_second_then_and exec_s (in4 exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove boolean_flush) () integer_mult integer_fromboolean in4 integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove in3) (integer_yank integer_fromboolean exec_if () ()))) () ()) () ()) () ()) ()) () ()) () ()) () ()) ()))) ()))
Lexicase best errors: [0 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 105
Percent parens: 0.419
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if})
Zero cases best program: (integer_div exec_y (exec_shove () exec_swap (integer_div exec_y (exec_shove (in4 boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items exec_s (exec_s (in1 in2 exec_s (integer_shove boolean_invert_second_then_and exec_s (in4 exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove boolean_flush) () integer_mult integer_fromboolean in4 integer_dup_items integer_max exec_eq) () (exec_shove () boolean_eq integer_gte boolean_empty exec_swap (integer_add integer_shove in3) (integer_yank integer_fromboolean exec_if () ()))) () ()) () ()) () ()) ()) () ()) () ()) () ()) ()))) ()))
Zero cases best errors: [0 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 105
Percent parens: 0.419
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 417 107 450 38 605 400 417 642 107)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (248 417 107 450 38 605 400 417 642 107)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove boolean_invert_second_then_and exec_shove (in4) exec_do*times (print_integer exec_shove () exec_dup (exec_flush boolean_and exec_flush) in4 exec_do*count () exec_flush) boolean_dup_items integer_shove integer_shove) (integer_mult integer_fromboolean boolean_shove integer_dup_items integer_max exec_eq) () exec_shove () boolean_eq integer_gte boolean_shove exec_swap (integer_add integer_shove exec_s () (integer_yank integer_fromboolean) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Errors: [0 0 0 0 1 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 101
Percent parens: 0.396
--- Population Statistics ---
Average total errors in population: 6.569
Median total errors in population: 7
Error averages by case: (0.752 0.583 0.893 0.55 0.962 0.395 0.6 0.583 0.358 0.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.337
Average program size in population (points): 106.482
Average percent parens in population: 0.376
Minimum age in population: 115.9177613001299
Maximum age in population: 120.4162282954911
Average age in population: 118.7739109834919
Median age in population: 119.0078602596628
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.008
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 30677381
--- Timings ---
Current time: 1559314815389 milliseconds
Total Time:         233.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.0 seconds, 65.9%
Fitness Testing:     44.7 seconds, 19.1%
Report:              34.8 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Smallest problem report - generation 78
Test total error for best: 502
Test mean error for best: 0.50200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_dup_items exec_dup (exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove exec_dup_items in2 in2 in3 in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth)) ()) ()) ()) () ()) ()) ()) () ()) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 108
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () in4) (exec_dup_items exec_dup (exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove exec_dup_items in2 in2 in3 in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth)) ()) ()) ()) () ()) ()) ()) () ()) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 108
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 579 253 182 591 202 346 132 111 362)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (622 579 253 182 591 202 346 132 111 362)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_628} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot})
Best program: (integer_div exec_y (exec_shove () integer_rot exec_s_when_autoconstructing () (exec_do*times () boolean_not) (exec_do*times (exec_dup (exec_if (tagged_628 exec_s_when_autoconstructing () (exec_eq tag_boolean_509 integer_dup_items exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 in3 in4 boolean_invert_second_then_and exec_s (integer_shove exec_dup_items in2 in2 in3 in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot)) ()) ()) ()) () ()) ()) ()) () ()) ()) ())))))
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 68
Size: 108
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 6.62
Median total errors in population: 6
Error averages by case: (0.378 0.421 0.747 0.818 0.409 0.798 0.654 0.868 0.889 0.638)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.558
Average program size in population (points): 106.468
Average percent parens in population: 0.384
Minimum age in population: 118.7926689275707
Maximum age in population: 121.7428360886766
Average age in population: 120.2014016394869
Median age in population: 120.2036821048389
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.009
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.233
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 31163560
--- Timings ---
Current time: 1559314818755 milliseconds
Total Time:         237.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.0 seconds, 65.8%
Fitness Testing:     45.5 seconds, 19.2%
Report:              35.5 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 497
Test mean error for best: 0.49700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 boolean_eq in3 exec_s (in1 in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean)) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 112
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 boolean_eq in3 exec_s (in1 in1 exec_k_when_autoconstructing (exec_s (integer_yankdup) (in2 in2 boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove () exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean)) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 112
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (71 63 97 293 817 125 348 811 377 810)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (71 63 97 293 817 125 348 811 377 810)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod exec_flush) integer_fromboolean) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 64
Size: 105
Percent parens: 0.390
--- Population Statistics ---
Average total errors in population: 6.188
Median total errors in population: 6
Error averages by case: (0.929 0.937 0.903 0.707 0.183 0.875 0.652 0.189 0.623 0.19)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.289
Average program size in population (points): 111.225
Average percent parens in population: 0.376
Minimum age in population: 120.1069512259286
Maximum age in population: 123.3452269574937
Average age in population: 121.9873408456467
Median age in population: 122.1348626101663
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.009
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 31674051
--- Timings ---
Current time: 1559314822281 milliseconds
Total Time:         240.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.0 seconds, 65.7%
Fitness Testing:     46.4 seconds, 19.3%
Report:              36.1 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Smallest problem report - generation 80
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) integer_mult integer_fromboolean in2) (in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 105
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) integer_mult integer_fromboolean in2) (in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 105
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 574 63 131 659 379 647 68 647 64)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (133 574 63 131 659 379 647 68 647 64)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) integer_mult integer_fromboolean exec_empty print_boolean exec_flush) (in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 67
Size: 107
Percent parens: 0.374
--- Population Statistics ---
Average total errors in population: 6.635
Median total errors in population: 6
Error averages by case: (0.867 0.426 0.937 0.869 0.341 0.621 0.353 0.932 0.353 0.936)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.853
Average program size in population (points): 106.679
Average percent parens in population: 0.373
Minimum age in population: 121.6144085549489
Maximum age in population: 124.9066470186361
Average age in population: 123.634581690352
Median age in population: 123.7605277867925
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.009
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.173
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 32125119
--- Timings ---
Current time: 1559314825682 milliseconds
Total Time:         243.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.9 seconds, 65.6%
Fitness Testing:     47.2 seconds, 19.3%
Report:              36.7 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Smallest problem report - generation 81
Test total error for best: 506
Test mean error for best: 0.50600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 107
Percent parens: 0.402
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 107
Percent parens: 0.402
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 645 33 646 604 733 323 152 160 615)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (158 645 33 646 604 733 323 152 160 615)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_dup (exec_flush print_boolean in2) in4 integer_shove) exec_flush) (boolean_dup_items integer_shove integer_shove) integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean boolean_dup exec_do*count (boolean_rot boolean_stackdepth integer_fromboolean integer_mod integer_pop boolean_rot boolean_stackdepth integer_fromboolean integer_mod)) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 71
Size: 111
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 5.931
Median total errors in population: 5
Error averages by case: (0.842 0.355 0.967 0.354 0.396 0.267 0.677 0.848 0.84 0.385)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.611
Average program size in population (points): 107.36
Average percent parens in population: 0.380
Minimum age in population: 123.8811339456562
Maximum age in population: 126.6502687503911
Average age in population: 124.7864523529412
Median age in population: 124.9515439578432
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.009
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.202
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 32548223
--- Timings ---
Current time: 1559314829142 milliseconds
Total Time:         247.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.9 seconds, 65.4%
Fitness Testing:     48.0 seconds, 19.4%
Report:              37.4 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Smallest problem report - generation 82
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 110
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 110
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 82 528 254 185 395 396 185 468 185)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (239 82 528 254 185 395 396 185 468 185)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 110
Percent parens: 0.391
--- Population Statistics ---
Average total errors in population: 7.083
Median total errors in population: 7
Error averages by case: (0.761 0.918 0.472 0.746 0.815 0.605 0.604 0.815 0.532 0.815)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.876
Average program size in population (points): 110.232
Average percent parens in population: 0.375
Minimum age in population: 124.8811339456562
Maximum age in population: 127.7575441389852
Average age in population: 126.390830994849
Median age in population: 126.2982567503823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.009
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 33002684
--- Timings ---
Current time: 1559314832650 milliseconds
Total Time:         250.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.9 seconds, 65.3%
Fitness Testing:     48.8 seconds, 19.4%
Report:              38.1 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Smallest problem report - generation 83
Test total error for best: 567
Test mean error for best: 0.56700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output:                    
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output:                    
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output:                    
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output:                    
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output:                    
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_swap boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Lexicase best errors: [1 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 110
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_swap boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (in4) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Zero cases best errors: [1 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 110
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (392 416 171 701 56 447 119 501 150 69)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (392 416 171 701 56 447 119 501 150 69)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_yank) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) () ()) ()))
Errors: [0 0 1 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 67
Size: 113
Percent parens: 0.407
--- Population Statistics ---
Average total errors in population: 6.978
Median total errors in population: 6
Error averages by case: (0.608 0.584 0.829 0.299 0.944 0.553 0.881 0.499 0.85 0.931)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.371
Average program size in population (points): 109.567
Average percent parens in population: 0.385
Minimum age in population: 125.8811339456562
Maximum age in population: 129.2511658707402
Average age in population: 127.3752757541694
Median age in population: 127.3885912746765
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.008
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 33454167
--- Timings ---
Current time: 1559314836360 milliseconds
Total Time:         254.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.8 seconds, 65.2%
Fitness Testing:     49.6 seconds, 19.5%
Report:              38.8 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Smallest problem report - generation 84
Test total error for best: 522
Test mean error for best: 0.52200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_eq in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_yank) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 110
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_eq in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_yank) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 110
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (62 155 90 637 541 821 124 229 202 635)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (62 155 90 637 541 821 124 229 202 635)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_s (in1 in2 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_yank) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) ()))
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 63
Size: 106
Percent parens: 0.406
--- Population Statistics ---
Average total errors in population: 6.504
Median total errors in population: 6
Error averages by case: (0.938 0.845 0.91 0.363 0.459 0.179 0.876 0.771 0.798 0.365)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.464
Average program size in population (points): 110.632
Average percent parens in population: 0.390
Minimum age in population: 127.3885912746765
Maximum age in population: 131.0325786270174
Average age in population: 128.6827950427385
Median age in population: 128.7410076436029
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.009
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 33923884
--- Timings ---
Current time: 1559314840070 milliseconds
Total Time:         258.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.8 seconds, 65.0%
Fitness Testing:     50.5 seconds, 19.6%
Report:              39.7 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Smallest problem report - generation 85
Test total error for best: 521
Test mean error for best: 0.52100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 113
Percent parens: 0.407
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 113
Percent parens: 0.407
--- Lexicase Population Statistics ---
Count of elite individuals by case: (439 630 31 621 792 54 45 31 257 411)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (439 630 31 621 792 54 45 31 257 411)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 67
Size: 113
Percent parens: 0.407
--- Population Statistics ---
Average total errors in population: 6.689
Median total errors in population: 6
Error averages by case: (0.561 0.37 0.969 0.379 0.208 0.946 0.955 0.969 0.743 0.589)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.506
Average program size in population (points): 111.426
Average percent parens in population: 0.394
Minimum age in population: 128.3885912746765
Maximum age in population: 131.640547065918
Average age in population: 130.4231166691603
Median age in population: 130.4172158280662
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.01
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 34422487
--- Timings ---
Current time: 1559314843809 milliseconds
Total Time:         262.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.8 seconds, 64.8%
Fitness Testing:     51.5 seconds, 19.7%
Report:              40.6 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Smallest problem report - generation 86
Test total error for best: 497
Test mean error for best: 0.49700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (exec_s (exec_yank) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 boolean_swap) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_dup_times integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [1 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 102
Percent parens: 0.412
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (exec_s (exec_yank) (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 boolean_swap) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_dup_times integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [1 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 102
Percent parens: 0.412
--- Lexicase Population Statistics ---
Count of elite individuals by case: (676 99 65 47 780 56 638 48 99 598)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (676 99 65 47 780 56 638 48 99 598)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush print_boolean exec_flush) (in4 boolean_swap) (exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (exec_flush integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 73
Size: 117
Percent parens: 0.376
--- Population Statistics ---
Average total errors in population: 6.894
Median total errors in population: 6
Error averages by case: (0.324 0.901 0.935 0.953 0.22 0.944 0.362 0.952 0.901 0.402)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.282
Average program size in population (points): 113.263
Average percent parens in population: 0.406
Minimum age in population: 131.0934240125294
Maximum age in population: 133.4407773547605
Average age in population: 131.8135215895481
Median age in population: 132.0934240125294
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 298
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.007
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 34898990
--- Timings ---
Current time: 1559314847411 milliseconds
Total Time:         265.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.8 seconds, 64.7%
Fitness Testing:     52.4 seconds, 19.7%
Report:              41.3 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Smallest problem report - generation 87
Test total error for best: 497
Test mean error for best: 0.49700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush print_boolean exec_flush) (in4 boolean_swap) (exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (exec_flush integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 117
Percent parens: 0.376
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush print_boolean exec_flush) (in4 boolean_swap) (exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (exec_flush integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove integer_add integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 117
Percent parens: 0.376
--- Lexicase Population Statistics ---
Count of elite individuals by case: (409 441 225 555 794 238 222 265 245 467)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (409 441 225 555 794 238 222 265 245 467)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_dup_items) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) integer_shove) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 73
Size: 119
Percent parens: 0.387
--- Population Statistics ---
Average total errors in population: 6.139
Median total errors in population: 6
Error averages by case: (0.591 0.559 0.775 0.445 0.206 0.762 0.778 0.735 0.755 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.766
Average program size in population (points): 109.287
Average percent parens in population: 0.398
Minimum age in population: 132.0934240125294
Maximum age in population: 134.9172158280662
Average age in population: 133.8183396133488
Median age in population: 133.7671006836449
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.01
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 35395464
--- Timings ---
Current time: 1559314851035 milliseconds
Total Time:         269.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.8 seconds, 64.5%
Fitness Testing:     53.4 seconds, 19.8%
Report:              42.0 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean exec_flush exec_do*range (integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ())) ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 122
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean exec_flush exec_do*range (integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ())) ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 122
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (566 815 315 483 670 83 477 552 609 118)
Population mean number of elite cases: 4.69
Count of perfect (error zero) individuals by case: (566 815 315 483 670 83 477 552 609 118)
Population mean number of perfect (error zero) cases: 4.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean exec_flush exec_do*range (integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ())) ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 75
Size: 122
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 5.312
Median total errors in population: 5
Error averages by case: (0.434 0.185 0.685 0.517 0.33 0.917 0.523 0.448 0.391 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.492
Average program size in population (points): 114.057
Average percent parens in population: 0.391
Minimum age in population: 133.0934240125294
Maximum age in population: 136.5707651111346
Average age in population: 135.0348507031193
Median age in population: 134.9975685387741
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.01
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 35873005
--- Timings ---
Current time: 1559314854733 milliseconds
Total Time:         272.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.8 seconds, 64.4%
Fitness Testing:     54.3 seconds, 19.9%
Report:              42.7 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Smallest problem report - generation 89
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean exec_flush exec_do*range (integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ())) ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 122
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean exec_flush exec_do*range (integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ())) ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 122
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (517 698 853 375 822 656 43 299 536 532)
Population mean number of elite cases: 5.33
Count of perfect (error zero) individuals by case: (517 698 853 375 822 656 43 299 536 532)
Population mean number of perfect (error zero) cases: 5.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean exec_flush exec_do*range (integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ())) ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 75
Size: 122
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 4.669
Median total errors in population: 4
Error averages by case: (0.483 0.302 0.147 0.625 0.178 0.344 0.957 0.701 0.464 0.468)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.627
Average program size in population (points): 114.204
Average percent parens in population: 0.390
Minimum age in population: 134.8213979894715
Maximum age in population: 137.9736815158661
Average age in population: 136.1510629487771
Median age in population: 136.0934240125294
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.009
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 36302896
--- Timings ---
Current time: 1559314858357 milliseconds
Total Time:         276.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.9 seconds, 64.3%
Fitness Testing:     55.2 seconds, 19.9%
Report:              43.4 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Smallest problem report - generation 90
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove boolean_dup_items integer_shove) (integer_yank integer_add integer_shove boolean_dup_items integer_shove) integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean exec_flush exec_do*range (integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ())) ()) ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [1 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 127
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) integer_shove) integer_shove) (exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove boolean_dup_items integer_shove) (integer_yank integer_add integer_shove boolean_dup_items integer_shove) integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean exec_flush exec_do*range (integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ())) ()) ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [1 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 127
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 204 187 62 380 88 214 314 124 656)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (345 204 187 62 380 88 214 314 124 656)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_do*while () exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) integer_shove) (integer_shove) (exec_flush) boolean_dup_items boolean_xor) (integer_yank integer_add integer_shove boolean_dup_items integer_shove) integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean exec_flush exec_do*range (integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ())) ()) ()) () ()) () ()) () ())) () ()) ()))
Errors: [1 0 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 75
Size: 121
Percent parens: 0.380
--- Population Statistics ---
Average total errors in population: 7.426
Median total errors in population: 7
Error averages by case: (0.655 0.796 0.813 0.938 0.62 0.912 0.786 0.686 0.876 0.344)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.274
Average program size in population (points): 119.499
Average percent parens in population: 0.387
Minimum age in population: 135.9574110010005
Maximum age in population: 139.7427623480872
Average age in population: 137.866544206505
Median age in population: 137.9023459433557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.008
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 36773872
--- Timings ---
Current time: 1559314862009 milliseconds
Total Time:         280.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.9 seconds, 64.2%
Fitness Testing:     56.1 seconds, 20.0%
Report:              44.1 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Smallest problem report - generation 91
Test total error for best: 571
Test mean error for best: 0.57100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 132
Percent parens: 0.371
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank in1 in2 in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 132
Percent parens: 0.371
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 211 79 388 293 103 834 351 292 242)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (143 211 79 388 293 103 834 351 292 242)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 77
Size: 123
Percent parens: 0.374
--- Population Statistics ---
Average total errors in population: 7.064
Median total errors in population: 7
Error averages by case: (0.857 0.789 0.921 0.612 0.707 0.897 0.166 0.649 0.708 0.758)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.962
Average program size in population (points): 121.228
Average percent parens in population: 0.390
Minimum age in population: 137.0934240125294
Maximum age in population: 140.5118431803083
Average age in population: 138.7983309688172
Median age in population: 138.9234414664885
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.009
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 37248708
--- Timings ---
Current time: 1559314865630 milliseconds
Total Time:         283.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.9 seconds, 64.1%
Fitness Testing:     57.0 seconds, 20.1%
Report:              44.8 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Smallest problem report - generation 92
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (integer_max boolean_eq in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot boolean_empty boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_gt) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 136
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (integer_max boolean_eq in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot boolean_empty boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_gt) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 136
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 477 397 101 620 418 206 236 335 234)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (534 477 397 101 620 418 206 236 335 234)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (integer_max boolean_eq in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot boolean_empty boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_gt) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 87
Size: 136
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 6.442
Median total errors in population: 6
Error averages by case: (0.466 0.523 0.603 0.899 0.38 0.582 0.794 0.764 0.665 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 78.845
Average program size in population (points): 126.745
Average percent parens in population: 0.378
Minimum age in population: 138.1402990125294
Maximum age in population: 141.7662225437981
Average age in population: 139.6903254747658
Median age in population: 139.6460550024603
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.009
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 37729645
--- Timings ---
Current time: 1559314869326 milliseconds
Total Time:         287.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.9 seconds, 64.0%
Fitness Testing:     57.9 seconds, 20.1%
Report:              45.5 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Smallest problem report - generation 93
Test total error for best: 470
Test mean error for best: 0.47000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (integer_max boolean_eq in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot boolean_empty boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_gt) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 153
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (integer_max boolean_eq in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot boolean_empty boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_gt) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 153
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 373 336 182 532 96 363 153 552 536)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (76 373 336 182 532 96 363 153 552 536)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (integer_max boolean_eq in3 exec_s (integer_yank in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 in3 exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot boolean_empty boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_gt) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (integer_inc) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 95
Size: 153
Percent parens: 0.379
--- Population Statistics ---
Average total errors in population: 6.801
Median total errors in population: 6
Error averages by case: (0.924 0.627 0.664 0.818 0.468 0.904 0.637 0.847 0.448 0.464)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.523
Average program size in population (points): 129.109
Average percent parens in population: 0.369
Minimum age in population: 139.9426014085018
Maximum age in population: 142.9085556824606
Average age in population: 141.6878020941643
Median age in population: 141.8627484923912
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.009
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 38209174
--- Timings ---
Current time: 1559314873157 milliseconds
Total Time:         291.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.0 seconds, 63.9%
Fitness Testing:     58.8 seconds, 20.2%
Report:              46.3 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Smallest problem report - generation 94
Test total error for best: 464
Test mean error for best: 0.46400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 134
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 134
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 155 463 236 287 211 487 229 189 235)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (141 155 463 236 287 211 487 229 189 235)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 84
Size: 134
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 7.367
Median total errors in population: 7
Error averages by case: (0.859 0.845 0.537 0.764 0.713 0.789 0.513 0.771 0.811 0.765)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 85.596
Average program size in population (points): 137.895
Average percent parens in population: 0.379
Minimum age in population: 140.9426014085018
Maximum age in population: 144.8627484923912
Average age in population: 143.6479850038488
Median age in population: 143.6966379932137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.009
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 38733063
--- Timings ---
Current time: 1559314877018 milliseconds
Total Time:         295.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.1 seconds, 63.7%
Fitness Testing:     59.8 seconds, 20.3%
Report:              47.1 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Smallest problem report - generation 95
Test total error for best: 517
Test mean error for best: 0.51700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -44                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -10                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_869} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (in3 in3) (exec_s (exec_s (in1 in2 exec_s (exec_rot (exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot tagged_869 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer integer_lte exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove exec_flush) boolean_dup_items) integer_shove exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush boolean_dup_items integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (exec_shove ()) ()) ()) ()) ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 128
Percent parens: 0.398
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_869} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (in3 in3) (exec_s (exec_s (in1 in2 exec_s (exec_rot (exec_s (exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot tagged_869 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer integer_lte exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove exec_flush) boolean_dup_items) integer_shove exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush boolean_dup_items integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (exec_shove ()) ()) ()) ()) ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 128
Percent parens: 0.398
--- Lexicase Population Statistics ---
Count of elite individuals by case: (590 413 597 141 319 570 485 346 279 127)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (590 413 597 141 319 570 485 346 279 127)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and) (integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush in4) integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove exec_flush) (boolean_dup_items integer_shove) integer_shove) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) integer_shove) (exec_flush -75 integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 84
Size: 134
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 6.133
Median total errors in population: 6
Error averages by case: (0.41 0.587 0.403 0.859 0.681 0.43 0.515 0.654 0.721 0.873)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.124
Average program size in population (points): 140.049
Average percent parens in population: 0.371
Minimum age in population: 143.1181758883636
Maximum age in population: 146.635628683231
Average age in population: 145.4907631383406
Median age in population: 145.5243338511499
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.01
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 39240265
--- Timings ---
Current time: 1559314880742 milliseconds
Total Time:         298.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.1 seconds, 63.6%
Fitness Testing:     60.7 seconds, 20.3%
Report:              48.0 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Smallest problem report - generation 96
Test total error for best: 486
Test mean error for best: 0.48600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output:                    
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output:                    
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (exec_rot (exec_s (in1 exec_s (integer_lt in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (exec_shove ()) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 153
Percent parens: 0.405
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (exec_rot (exec_s (in1 exec_s (integer_lt in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult integer_fromboolean boolean_shove boolean_pop integer_shove exec_s () (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_fromboolean exec_if (exec_shove ()) ()) ()) ()) ()) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 153
Percent parens: 0.405
--- Lexicase Population Statistics ---
Count of elite individuals by case: (656 691 628 737 364 841 389 146 369 123)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (656 691 628 737 364 841 389 146 369 123)
Population mean number of perfect (error zero) cases: 4.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 integer_mod exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (in4 integer_dup_times tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (integer_inc integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_shove) (exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 84
Size: 132
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.056
Median total errors in population: 4
Error averages by case: (0.344 0.309 0.372 0.263 0.636 0.159 0.611 0.854 0.631 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.274
Average program size in population (points): 132.045
Average percent parens in population: 0.384
Minimum age in population: 145.40281379605
Maximum age in population: 148.5243338511499
Average age in population: 146.7806088809372
Median age in population: 147.007698995731
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.009
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 39698121
--- Timings ---
Current time: 1559314884514 milliseconds
Total Time:         302.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.2 seconds, 63.5%
Fitness Testing:     61.6 seconds, 20.3%
Report:              48.7 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Smallest problem report - generation 97
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -101               
Correct output: -47                 | Program output: 0                  
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: -22                
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -181               
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -4                 
Correct output: -62                 | Program output: -107               
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -76                
Correct output: -76                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 21                 
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: 38                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -108               
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -70                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (integer_yank exec_s (exec_s (in1 exec_s (exec_rot (exec_s (in1 exec_s (integer_lt in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 180
Percent parens: 0.394
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (integer_yank exec_s (exec_s (in1 exec_s (exec_rot (exec_s (in1 exec_s (integer_lt in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 180
Percent parens: 0.394
--- Lexicase Population Statistics ---
Count of elite individuals by case: (422 423 653 251 405 632 652 396 210 20)
Population mean number of elite cases: 4.06
Count of perfect (error zero) individuals by case: (422 423 653 251 405 632 652 396 210 20)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and) (integer_rot integer_shove boolean_invert_second_then_and integer_min boolean_invert_second_then_and integer_min exec_s (in4 integer_dup_times tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (integer_inc integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 80
Size: 130
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 5.936
Median total errors in population: 5
Error averages by case: (0.578 0.577 0.347 0.749 0.595 0.368 0.348 0.604 0.79 0.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 83.8
Average program size in population (points): 136.319
Average percent parens in population: 0.385
Minimum age in population: 147.507698995731
Maximum age in population: 150.0243338511499
Average age in population: 149.0627822396071
Median age in population: 149.0160164234404
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.01
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 40211888
--- Timings ---
Current time: 1559314888243 milliseconds
Total Time:         306.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.3 seconds, 63.4%
Fitness Testing:     62.5 seconds, 20.4%
Report:              49.6 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Smallest problem report - generation 98
Test total error for best: 351
Test mean error for best: 0.35100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 0                  
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: -22                
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -4                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: -34                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (integer_yank exec_s (exec_s (in1 exec_s (exec_rot (exec_s (in1 exec_s (integer_lt in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank exec_pop (integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ()))) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 180
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (integer_yank exec_s (exec_s (in1 exec_s (exec_rot (exec_s (in1 exec_s (integer_lt in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank exec_pop (integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ()))) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 180
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (669 729 516 701 529 16 140 321 200 512)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (669 729 516 701 529 16 140 321 200 512)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_905} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and) (integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min exec_s (in4 integer_dup_times tagged_905 boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop ()) ()))) () ()) () ()) () ()) () ())) () ()) () ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 104
Size: 158
Percent parens: 0.342
--- Population Statistics ---
Average total errors in population: 5.667
Median total errors in population: 5
Error averages by case: (0.331 0.271 0.484 0.299 0.471 0.984 0.86 0.679 0.8 0.488)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.903
Average program size in population (points): 149.197
Average percent parens in population: 0.378
Minimum age in population: 149.4621500540948
Maximum age in population: 151.7729100816447
Average age in population: 150.8934776277352
Median age in population: 150.7729100816447
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.01
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 40774532
--- Timings ---
Current time: 1559314892194 milliseconds
Total Time:         310.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.3 seconds, 63.3%
Fitness Testing:     63.5 seconds, 20.5%
Report:              50.3 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Smallest problem report - generation 99
Test total error for best: 332
Test mean error for best: 0.33200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_905} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and) (integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min exec_s (in4 integer_dup_times tagged_905 boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ()))) () ()) () ()) () ()) () ())) () ()) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 164
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_905} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and) (integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min exec_s (in4 integer_dup_times tagged_905 boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ()))) () ()) () ()) () ()) () ())) () ()) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 164
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (26 400 395 644 262 417 689 28 692 878)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (26 400 395 644 262 417 689 28 692 878)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_905} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and) (integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min exec_s (in4 integer_dup_times tagged_905 boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and integer_dup integer_shove boolean_pop exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop ()) ()))) () ()) () ()) () ()) () ())) () ()) () ()))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 104
Size: 158
Percent parens: 0.342
--- Population Statistics ---
Average total errors in population: 5.569
Median total errors in population: 5
Error averages by case: (0.974 0.6 0.605 0.356 0.738 0.583 0.311 0.972 0.308 0.122)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.745
Average program size in population (points): 157.201
Average percent parens in population: 0.378
Minimum age in population: 150.4621500540948
Maximum age in population: 153.7694632525426
Average age in population: 152.7864023850482
Median age in population: 152.7677398379915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.009
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 41341834
--- Timings ---
Current time: 1559314896199 milliseconds
Total Time:         314.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.4 seconds, 63.1%
Fitness Testing:     64.4 seconds, 20.5%
Report:              51.2 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Smallest problem report - generation 100
Test total error for best: 353
Test mean error for best: 0.35300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction -8} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (integer_yank exec_s (exec_s (in1 exec_s (exec_rot (exec_s (in1 exec_s (integer_lt in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove -8 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (boolean_dup print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank exec_pop (integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ()))) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 184
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction -8} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (integer_yank exec_s (exec_s (in1 exec_s (exec_rot (exec_s (in1 exec_s (integer_lt in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove -8 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (boolean_dup print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (exec_flush) -75 integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank exec_pop (integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ()))) ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 184
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 331 382 372 757 849 604 248 370 770)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (248 331 382 372 757 849 604 248 370 770)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_905} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in2 in2 in3 exec_s (integer_yank exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min exec_s (in4 integer_dup_times tagged_905 boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) in4 integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup integer_mod) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 104
Size: 158
Percent parens: 0.342
--- Population Statistics ---
Average total errors in population: 5.069
Median total errors in population: 4
Error averages by case: (0.752 0.669 0.618 0.628 0.243 0.151 0.396 0.752 0.63 0.23)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 90.654
Average program size in population (points): 146.029
Average percent parens in population: 0.380
Minimum age in population: 151.4621500540948
Maximum age in population: 155.7686015452671
Average age in population: 154.0847855117655
Median age in population: 154.2461443286469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.01
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 41874801
--- Timings ---
Current time: 1559314900098 milliseconds
Total Time:         318.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.4 seconds, 63.0%
Fitness Testing:     65.4 seconds, 20.6%
Report:              52.2 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Smallest problem report - generation 101
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -29                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (boolean_dup_times exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and) (integer_rot in2 in3 exec_s (in1 in2 exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) () ())) ()) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 152
Percent parens: 0.388
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (boolean_dup_times exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and) (integer_rot in2 in3 exec_s (in1 in2 exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) () ())) ()) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 152
Percent parens: 0.388
--- Lexicase Population Statistics ---
Count of elite individuals by case: (848 317 73 345 345 766 361 232 447 485)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (848 317 73 345 345 766 361 232 447 485)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4 integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (boolean_dup_times exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and) (integer_rot in2 in3 exec_s (in1 in2 exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min exec_s (exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove) exec_flush) (in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) integer_shove) (integer_shove) exec_flush) (boolean_dup_items integer_shove) integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_shove) (integer_yank integer_add integer_shove exec_rot () (boolean_pop integer_mult exec_pop (integer_fromboolean exec_if (integer_inc) ())) ())) () ())) ()) () ()) () ()) () ()) () ()) () ())) () ()) () ()))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 93
Size: 152
Percent parens: 0.388
--- Population Statistics ---
Average total errors in population: 5.781
Median total errors in population: 5
Error averages by case: (0.152 0.683 0.927 0.655 0.655 0.234 0.639 0.768 0.553 0.515)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 98.498
Average program size in population (points): 155.283
Average percent parens in population: 0.366
Minimum age in population: 154.379095274467
Maximum age in population: 156.9806182490988
Average age in population: 155.7635654694936
Median age in population: 155.6909115383796
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.009
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 42448018
--- Timings ---
Current time: 1559314904191 milliseconds
Total Time:         322.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.6 seconds, 62.9%
Fitness Testing:     66.4 seconds, 20.6%
Report:              53.1 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Smallest problem report - generation 102
Test total error for best: 308
Test mean error for best: 0.30800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 173
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 173
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 202 436 310 332 620 508 273 610 330)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (341 202 436 310 332 620 508 273 610 330)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_905} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction -75} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop})
Best program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 113
Size: 173
Percent parens: 0.347
--- Population Statistics ---
Average total errors in population: 6.038
Median total errors in population: 6
Error averages by case: (0.659 0.798 0.564 0.69 0.668 0.38 0.492 0.727 0.39 0.67)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 103.376
Average program size in population (points): 160.643
Average percent parens in population: 0.357
Minimum age in population: 155.6158066533187
Maximum age in population: 158.6039278878905
Average age in population: 157.343658998315
Median age in population: 157.3813358933716
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.011
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 43040775
--- Timings ---
Current time: 1559314908535 milliseconds
Total Time:         326.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.7 seconds, 62.7%
Fitness Testing:     67.5 seconds, 20.7%
Report:              54.1 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 102
Successful program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 173


Auto-simplifying with starting size: 173
step: 0
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 500
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 1000
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 1500
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 2000
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 2500
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 3000
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 3500
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 4000
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 4500
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

step: 5000
program: (integer_div exec_y (exec_shove () boolean_invert_second_then_and exec_s (in4) (integer_rot exec_s (exec_do*range (in1 in2 in3 exec_s (in3 exec_s (integer_yank exec_s (exec_s (exec_s (in1 exec_s (in1 in2 in3 exec_s (in1 exec_k_when_autoconstructing (exec_s (integer_sub) (in4 boolean_invert_second_then_and integer_rot integer_shove boolean_invert_second_then_and integer_min integer_min in4 boolean_invert_second_then_and integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_invert_second_then_and integer_min exec_s (in4 boolean_invert_second_then_and tagged_905 integer_shove boolean_pop exec_s (in4 integer_yankdup tagged_905 integer_shove boolean_invert_second_then_and exec_s (exec_if () (exec_do*times (print_integer exec_shove (exec_dup (exec_flush print_boolean exec_flush) in4 integer_shove) exec_flush) boolean_dup_items integer_shove exec_flush) integer_mod integer_shove) () (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove) exec_flush) (boolean_dup_items in4 integer_shove) (exec_flush) boolean_dup_items integer_shove) (integer_shove) (in4 integer_shove exec_flush) boolean_dup_items integer_shove) (integer_shove) exec_flush) (-75 integer_shove) integer_yank integer_add integer_shove exec_rot (boolean_pop integer_shove) (integer_yank) (integer_add integer_shove exec_rot (boolean_pop integer_mult exec_pop ()) () ())) () ()) () ()) () ()) () ()) () ()) () ()) () ())) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 173

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 102
Test total error for best: 308
Test mean error for best: 0.30800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
