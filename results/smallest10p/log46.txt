Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[58 -73 58 58] -73] [[-82 -82 -4 -82] -82] [[82 53 82 82] 53] [[-28 -29 -28 -28] -29] [[87 -77 87 87] -77] [[43 43 2 43] 2] [[-10 -10 -10 74] -10] [[38 79 79 79] 38] [[83 83 58 83] 58] [[0 0 0 28] 0] [(-73 -73 -73 -73) -73] [(-69 -69 -69 -69) -69] [(-83 -83 -83 -83) -83] [(-65 -65 -65 -65) -65] [(67 67 67 67) 67] [(43 38 30 75) 30] [(85 31 25 1) 1] [(14 55 65 34) 14] [(57 68 7 82) 7] [(86 72 53 62) 53] [(14 85 62 76) 14] [(95 16 76 51) 16] [(63 24 78 28) 24] [(11 19 90 23) 11] [(59 55 66 34) 34] [(62 21 52 10) 10] [(60 79 52 40) 40] [(25 24 42 97) 24] [(17 16 75 8) 8] [(5 39 81 14) 5] [(70 68 93 44) 44] [(52 44 21 28) 21] [(86 11 19 73) 11] [(20 87 92 40) 20] [(41 67 49 25) 25] [(70 23 -91 -98) -98] [(26 -93 -36 63) -93] [(17 66 28 -17) -17] [(-15 70 -89 2) -89] [(44 1 -83 94) -83] [(52 43 -56 -32) -56] [(-81 65 -69 34) -81] [(-71 -94 -7 56) -94] [(-50 -11 92 -34) -50] [(20 34 3 -10) -10] [(7 -13 -68 93) -68] [(45 68 34 36) 34] [(29 28 53 -38) -38] [(-16 -1 73 -5) -16] [(65 -14 14 33) -14] [(-61 -10 -26 96) -61] [(-56 32 3 -99) -99] [(90 93 -19 52) -19] [(24 -23 47 45) -23] [(-58 -98 5 85) -98] [(0 -52 100 100) -52] [(68 -64 47 -90) -90] [(-7 7 60 40) -7] [(50 16 -95 -61) -95] [(75 -39 -34 30) -39] [(-18 40 -90 77) -90] [(84 68 -55 59) -55] [(29 -10 -29 -91) -91] [(-38 -79 -46 -69) -79] [(30 -99 57 89) -99] [(-22 73 48 58) -22] [(37 -59 -57 35) -59] [(-76 10 37 -51) -76] [(-89 -49 97 52) -89] [(87 98 -52 1) -52] [(-62 -52 33 -98) -98] [(63 12 -29 -74) -74] [(-94 -85 -60 89) -94] [(-32 -26 4 -51) -51] [(-14 42 85 51) -14] [(-62 -77 -17 -63) -77] [(-62 -34 -98 -57) -98] [(56 -100 -3 24) -100] [(-62 -40 89 100) -62] [(-70 -11 -55 -75) -75] [(86 -15 -56 33) -56] [(-81 56 -83 -68) -83] [(-94 -60 86 -76) -94] [(81 26 11 -76) -76] [(-42 19 76 91) -42] [(-80 -20 -97 80) -97] [(-96 -15 9 -37) -96] [(-67 4 60 62) -67] [(-87 -80 -5 31) -87] [(100 6 -47 21) -47] [(100 -90 -69 99) -90] [(-81 -85 5 -81) -85] [(6 -1 -43 -95) -95] [(-99 20 99 95) -99] [(49 48 33 35) 33])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[58 -73 58 58] -73]
Train Case:   6 | Input/Output: [[-82 -82 -4 -82] -82]
Train Case:   7 | Input/Output: [[82 53 82 82] 53]
Train Case:   8 | Input/Output: [[-28 -29 -28 -28] -29]
Train Case:   9 | Input/Output: [[87 -77 87 87] -77]
Train Case:  10 | Input/Output: [[43 43 2 43] 2]
Train Case:  11 | Input/Output: [[-10 -10 -10 74] -10]
Train Case:  12 | Input/Output: [[38 79 79 79] 38]
Train Case:  13 | Input/Output: [[83 83 58 83] 58]
Train Case:  14 | Input/Output: [[0 0 0 28] 0]
Train Case:  15 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  16 | Input/Output: [(-69 -69 -69 -69) -69]
Train Case:  17 | Input/Output: [(-83 -83 -83 -83) -83]
Train Case:  18 | Input/Output: [(-65 -65 -65 -65) -65]
Train Case:  19 | Input/Output: [(67 67 67 67) 67]
Train Case:  20 | Input/Output: [(43 38 30 75) 30]
Train Case:  21 | Input/Output: [(85 31 25 1) 1]
Train Case:  22 | Input/Output: [(14 55 65 34) 14]
Train Case:  23 | Input/Output: [(57 68 7 82) 7]
Train Case:  24 | Input/Output: [(86 72 53 62) 53]
Train Case:  25 | Input/Output: [(14 85 62 76) 14]
Train Case:  26 | Input/Output: [(95 16 76 51) 16]
Train Case:  27 | Input/Output: [(63 24 78 28) 24]
Train Case:  28 | Input/Output: [(11 19 90 23) 11]
Train Case:  29 | Input/Output: [(59 55 66 34) 34]
Train Case:  30 | Input/Output: [(62 21 52 10) 10]
Train Case:  31 | Input/Output: [(60 79 52 40) 40]
Train Case:  32 | Input/Output: [(25 24 42 97) 24]
Train Case:  33 | Input/Output: [(17 16 75 8) 8]
Train Case:  34 | Input/Output: [(5 39 81 14) 5]
Train Case:  35 | Input/Output: [(70 68 93 44) 44]
Train Case:  36 | Input/Output: [(52 44 21 28) 21]
Train Case:  37 | Input/Output: [(86 11 19 73) 11]
Train Case:  38 | Input/Output: [(20 87 92 40) 20]
Train Case:  39 | Input/Output: [(41 67 49 25) 25]
Train Case:  40 | Input/Output: [(70 23 -91 -98) -98]
Train Case:  41 | Input/Output: [(26 -93 -36 63) -93]
Train Case:  42 | Input/Output: [(17 66 28 -17) -17]
Train Case:  43 | Input/Output: [(-15 70 -89 2) -89]
Train Case:  44 | Input/Output: [(44 1 -83 94) -83]
Train Case:  45 | Input/Output: [(52 43 -56 -32) -56]
Train Case:  46 | Input/Output: [(-81 65 -69 34) -81]
Train Case:  47 | Input/Output: [(-71 -94 -7 56) -94]
Train Case:  48 | Input/Output: [(-50 -11 92 -34) -50]
Train Case:  49 | Input/Output: [(20 34 3 -10) -10]
Train Case:  50 | Input/Output: [(7 -13 -68 93) -68]
Train Case:  51 | Input/Output: [(45 68 34 36) 34]
Train Case:  52 | Input/Output: [(29 28 53 -38) -38]
Train Case:  53 | Input/Output: [(-16 -1 73 -5) -16]
Train Case:  54 | Input/Output: [(65 -14 14 33) -14]
Train Case:  55 | Input/Output: [(-61 -10 -26 96) -61]
Train Case:  56 | Input/Output: [(-56 32 3 -99) -99]
Train Case:  57 | Input/Output: [(90 93 -19 52) -19]
Train Case:  58 | Input/Output: [(24 -23 47 45) -23]
Train Case:  59 | Input/Output: [(-58 -98 5 85) -98]
Train Case:  60 | Input/Output: [(0 -52 100 100) -52]
Train Case:  61 | Input/Output: [(68 -64 47 -90) -90]
Train Case:  62 | Input/Output: [(-7 7 60 40) -7]
Train Case:  63 | Input/Output: [(50 16 -95 -61) -95]
Train Case:  64 | Input/Output: [(75 -39 -34 30) -39]
Train Case:  65 | Input/Output: [(-18 40 -90 77) -90]
Train Case:  66 | Input/Output: [(84 68 -55 59) -55]
Train Case:  67 | Input/Output: [(29 -10 -29 -91) -91]
Train Case:  68 | Input/Output: [(-38 -79 -46 -69) -79]
Train Case:  69 | Input/Output: [(30 -99 57 89) -99]
Train Case:  70 | Input/Output: [(-22 73 48 58) -22]
Train Case:  71 | Input/Output: [(37 -59 -57 35) -59]
Train Case:  72 | Input/Output: [(-76 10 37 -51) -76]
Train Case:  73 | Input/Output: [(-89 -49 97 52) -89]
Train Case:  74 | Input/Output: [(87 98 -52 1) -52]
Train Case:  75 | Input/Output: [(-62 -52 33 -98) -98]
Train Case:  76 | Input/Output: [(63 12 -29 -74) -74]
Train Case:  77 | Input/Output: [(-94 -85 -60 89) -94]
Train Case:  78 | Input/Output: [(-32 -26 4 -51) -51]
Train Case:  79 | Input/Output: [(-14 42 85 51) -14]
Train Case:  80 | Input/Output: [(-62 -77 -17 -63) -77]
Train Case:  81 | Input/Output: [(-62 -34 -98 -57) -98]
Train Case:  82 | Input/Output: [(56 -100 -3 24) -100]
Train Case:  83 | Input/Output: [(-62 -40 89 100) -62]
Train Case:  84 | Input/Output: [(-70 -11 -55 -75) -75]
Train Case:  85 | Input/Output: [(86 -15 -56 33) -56]
Train Case:  86 | Input/Output: [(-81 56 -83 -68) -83]
Train Case:  87 | Input/Output: [(-94 -60 86 -76) -94]
Train Case:  88 | Input/Output: [(81 26 11 -76) -76]
Train Case:  89 | Input/Output: [(-42 19 76 91) -42]
Train Case:  90 | Input/Output: [(-80 -20 -97 80) -97]
Train Case:  91 | Input/Output: [(-96 -15 9 -37) -96]
Train Case:  92 | Input/Output: [(-67 4 60 62) -67]
Train Case:  93 | Input/Output: [(-87 -80 -5 31) -87]
Train Case:  94 | Input/Output: [(100 6 -47 21) -47]
Train Case:  95 | Input/Output: [(100 -90 -69 99) -90]
Train Case:  96 | Input/Output: [(-81 -85 5 -81) -85]
Train Case:  97 | Input/Output: [(6 -1 -43 -95) -95]
Train Case:  98 | Input/Output: [(-99 20 99 95) -99]
Train Case:  99 | Input/Output: [(49 48 33 35) 33]
Test Case:   0 | Input/Output: [[54 54 54 -26] -26]
Test Case:   1 | Input/Output: [[19 19 19 37] 19]
Test Case:   2 | Input/Output: [[67 67 -49 67] -49]
Test Case:   3 | Input/Output: [[-80 -80 -80 95] -80]
Test Case:   4 | Input/Output: [[-46 -85 -85 -85] -85]
Test Case:   5 | Input/Output: [[31 46 31 31] 31]
Test Case:   6 | Input/Output: [[-13 -59 -13 -13] -59]
Test Case:   7 | Input/Output: [[25 -97 25 25] -97]
Test Case:   8 | Input/Output: [[25 25 25 -50] -50]
Test Case:   9 | Input/Output: [[96 96 96 -91] -91]
Test Case:  10 | Input/Output: [[-36 95 95 95] -36]
Test Case:  11 | Input/Output: [[79 -57 -57 -57] -57]
Test Case:  12 | Input/Output: [[-47 34 34 34] -47]
Test Case:  13 | Input/Output: [[-12 -15 -15 -15] -15]
Test Case:  14 | Input/Output: [[-67 98 98 98] -67]
Test Case:  15 | Input/Output: [[58 58 6 58] 6]
Test Case:  16 | Input/Output: [[81 -94 81 81] -94]
Test Case:  17 | Input/Output: [[4 -31 -31 -31] -31]
Test Case:  18 | Input/Output: [[13 -90 -90 -90] -90]
Test Case:  19 | Input/Output: [[-70 -51 -51 -51] -70]
Test Case:  20 | Input/Output: [[-2 31 31 31] -2]
Test Case:  21 | Input/Output: [[-89 -27 -89 -89] -89]
Test Case:  22 | Input/Output: [[30 30 30 86] 30]
Test Case:  23 | Input/Output: [[-18 -18 -18 67] -18]
Test Case:  24 | Input/Output: [[-67 -23 -23 -23] -67]
Test Case:  25 | Input/Output: [[-94 -94 -94 88] -94]
Test Case:  26 | Input/Output: [[-96 -96 20 -96] -96]
Test Case:  27 | Input/Output: [[-5 -17 -5 -5] -17]
Test Case:  28 | Input/Output: [[20 20 20 -57] -57]
Test Case:  29 | Input/Output: [[32 32 -3 32] -3]
Test Case:  30 | Input/Output: [[83 38 83 83] 38]
Test Case:  31 | Input/Output: [[-67 -43 -67 -67] -67]
Test Case:  32 | Input/Output: [[-18 100 100 100] -18]
Test Case:  33 | Input/Output: [[93 -55 -55 -55] -55]
Test Case:  34 | Input/Output: [[22 51 22 22] 22]
Test Case:  35 | Input/Output: [[55 55 55 48] 48]
Test Case:  36 | Input/Output: [[-7 -7 73 -7] -7]
Test Case:  37 | Input/Output: [[59 59 59 55] 55]
Test Case:  38 | Input/Output: [[-78 -78 -85 -78] -85]
Test Case:  39 | Input/Output: [[1 1 -94 1] -94]
Test Case:  40 | Input/Output: [[40 40 40 -28] -28]
Test Case:  41 | Input/Output: [[12 12 12 74] 12]
Test Case:  42 | Input/Output: [[75 75 -23 75] -23]
Test Case:  43 | Input/Output: [[-80 -80 -80 50] -80]
Test Case:  44 | Input/Output: [[-91 67 -91 -91] -91]
Test Case:  45 | Input/Output: [[65 65 65 -23] -23]
Test Case:  46 | Input/Output: [[54 -86 -86 -86] -86]
Test Case:  47 | Input/Output: [[-35 -35 -21 -35] -35]
Test Case:  48 | Input/Output: [[33 33 64 33] 33]
Test Case:  49 | Input/Output: [[44 44 11 44] 11]
Test Case:  50 | Input/Output: [[52 -66 52 52] -66]
Test Case:  51 | Input/Output: [[97 97 97 -35] -35]
Test Case:  52 | Input/Output: [[-100 -100 -100 -13] -100]
Test Case:  53 | Input/Output: [[-7 -7 81 -7] -7]
Test Case:  54 | Input/Output: [[-34 83 -34 -34] -34]
Test Case:  55 | Input/Output: [[50 -14 50 50] -14]
Test Case:  56 | Input/Output: [[-94 -94 -94 82] -94]
Test Case:  57 | Input/Output: [[20 20 -71 20] -71]
Test Case:  58 | Input/Output: [[-16 -16 52 -16] -16]
Test Case:  59 | Input/Output: [[-78 -78 -78 -83] -83]
Test Case:  60 | Input/Output: [[-78 -78 10 -78] -78]
Test Case:  61 | Input/Output: [[-12 -12 -12 -100] -100]
Test Case:  62 | Input/Output: [[-2 -2 94 -2] -2]
Test Case:  63 | Input/Output: [[96 96 96 -33] -33]
Test Case:  64 | Input/Output: [[-43 -96 -43 -43] -96]
Test Case:  65 | Input/Output: [[17 70 70 70] 17]
Test Case:  66 | Input/Output: [[-21 -21 -21 -24] -24]
Test Case:  67 | Input/Output: [[-67 -67 -67 -1] -67]
Test Case:  68 | Input/Output: [[27 -5 27 27] -5]
Test Case:  69 | Input/Output: [[-56 -89 -89 -89] -89]
Test Case:  70 | Input/Output: [[75 19 75 75] 19]
Test Case:  71 | Input/Output: [[88 53 53 53] 53]
Test Case:  72 | Input/Output: [[-21 57 57 57] -21]
Test Case:  73 | Input/Output: [[-25 -25 32 -25] -25]
Test Case:  74 | Input/Output: [[-60 -60 37 -60] -60]
Test Case:  75 | Input/Output: [[81 62 62 62] 62]
Test Case:  76 | Input/Output: [[-31 82 -31 -31] -31]
Test Case:  77 | Input/Output: [[-87 -87 -87 -21] -87]
Test Case:  78 | Input/Output: [[5 -51 5 5] -51]
Test Case:  79 | Input/Output: [[95 13 95 95] 13]
Test Case:  80 | Input/Output: [[28 28 70 28] 28]
Test Case:  81 | Input/Output: [[-74 -82 -74 -74] -82]
Test Case:  82 | Input/Output: [[11 57 11 11] 11]
Test Case:  83 | Input/Output: [[31 31 -45 31] -45]
Test Case:  84 | Input/Output: [[82 82 82 25] 25]
Test Case:  85 | Input/Output: [[-41 -32 -32 -32] -41]
Test Case:  86 | Input/Output: [[-64 -64 -62 -64] -64]
Test Case:  87 | Input/Output: [[-91 -91 -33 -91] -91]
Test Case:  88 | Input/Output: [[33 33 -29 33] -29]
Test Case:  89 | Input/Output: [[-24 53 53 53] -24]
Test Case:  90 | Input/Output: [[-5 -58 -5 -5] -58]
Test Case:  91 | Input/Output: [[-12 -15 -12 -12] -15]
Test Case:  92 | Input/Output: [[-7 -7 -36 -7] -36]
Test Case:  93 | Input/Output: [[-68 -68 -92 -68] -92]
Test Case:  94 | Input/Output: [[-29 -29 -29 26] -29]
Test Case:  95 | Input/Output: [[79 79 47 79] 47]
Test Case:  96 | Input/Output: [[-42 -72 -42 -42] -72]
Test Case:  97 | Input/Output: [[63 63 26 63] 26]
Test Case:  98 | Input/Output: [[16 16 16 76] 16]
Test Case:  99 | Input/Output: [[92 92 -100 92] -100]
Test Case: 100 | Input/Output: [(10 10 10 10) 10]
Test Case: 101 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 102 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 103 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 104 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 105 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 106 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 107 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 108 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 109 | Input/Output: [(16 16 16 16) 16]
Test Case: 110 | Input/Output: [(3 3 3 3) 3]
Test Case: 111 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 112 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 113 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 114 | Input/Output: [(99 99 99 99) 99]
Test Case: 115 | Input/Output: [(51 51 51 51) 51]
Test Case: 116 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 117 | Input/Output: [(23 23 23 23) 23]
Test Case: 118 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 119 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 120 | Input/Output: [(69 69 69 69) 69]
Test Case: 121 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 122 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 123 | Input/Output: [(13 13 13 13) 13]
Test Case: 124 | Input/Output: [(3 3 3 3) 3]
Test Case: 125 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 126 | Input/Output: [(73 73 73 73) 73]
Test Case: 127 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 128 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 129 | Input/Output: [(99 99 99 99) 99]
Test Case: 130 | Input/Output: [(36 36 36 36) 36]
Test Case: 131 | Input/Output: [(85 85 85 85) 85]
Test Case: 132 | Input/Output: [(94 94 94 94) 94]
Test Case: 133 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 134 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 135 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 136 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 137 | Input/Output: [(32 32 32 32) 32]
Test Case: 138 | Input/Output: [(69 69 69 69) 69]
Test Case: 139 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 140 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 141 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 142 | Input/Output: [(7 7 7 7) 7]
Test Case: 143 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 144 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 145 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 146 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 147 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 148 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 149 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 150 | Input/Output: [(83 83 83 83) 83]
Test Case: 151 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 152 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 153 | Input/Output: [(56 56 56 56) 56]
Test Case: 154 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 155 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 156 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 157 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 158 | Input/Output: [(96 96 96 96) 96]
Test Case: 159 | Input/Output: [(54 54 54 54) 54]
Test Case: 160 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 161 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 162 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 163 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 164 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 165 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 166 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 167 | Input/Output: [(25 25 25 25) 25]
Test Case: 168 | Input/Output: [(1 1 1 1) 1]
Test Case: 169 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 170 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 171 | Input/Output: [(42 42 42 42) 42]
Test Case: 172 | Input/Output: [(22 22 22 22) 22]
Test Case: 173 | Input/Output: [(90 90 90 90) 90]
Test Case: 174 | Input/Output: [(98 98 98 98) 98]
Test Case: 175 | Input/Output: [(71 71 71 71) 71]
Test Case: 176 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 177 | Input/Output: [(95 95 95 95) 95]
Test Case: 178 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 179 | Input/Output: [(97 97 97 97) 97]
Test Case: 180 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 181 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 182 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 183 | Input/Output: [(12 12 12 12) 12]
Test Case: 184 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 185 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 186 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 187 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 188 | Input/Output: [(30 30 30 30) 30]
Test Case: 189 | Input/Output: [(61 61 61 61) 61]
Test Case: 190 | Input/Output: [(44 44 44 44) 44]
Test Case: 191 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 192 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 193 | Input/Output: [(49 49 49 49) 49]
Test Case: 194 | Input/Output: [(46 46 46 46) 46]
Test Case: 195 | Input/Output: [(65 65 65 65) 65]
Test Case: 196 | Input/Output: [(76 76 76 76) 76]
Test Case: 197 | Input/Output: [(10 10 10 10) 10]
Test Case: 198 | Input/Output: [(7 7 7 7) 7]
Test Case: 199 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 200 | Input/Output: [(50 80 16 100) 16]
Test Case: 201 | Input/Output: [(21 48 33 31) 21]
Test Case: 202 | Input/Output: [(53 53 34 86) 34]
Test Case: 203 | Input/Output: [(70 67 52 44) 44]
Test Case: 204 | Input/Output: [(31 48 63 36) 31]
Test Case: 205 | Input/Output: [(35 24 37 37) 24]
Test Case: 206 | Input/Output: [(49 93 25 86) 25]
Test Case: 207 | Input/Output: [(77 14 10 79) 10]
Test Case: 208 | Input/Output: [(14 26 94 49) 14]
Test Case: 209 | Input/Output: [(95 32 58 8) 8]
Test Case: 210 | Input/Output: [(22 9 26 16) 9]
Test Case: 211 | Input/Output: [(99 85 76 46) 46]
Test Case: 212 | Input/Output: [(21 6 13 96) 6]
Test Case: 213 | Input/Output: [(25 67 37 6) 6]
Test Case: 214 | Input/Output: [(3 67 77 39) 3]
Test Case: 215 | Input/Output: [(38 26 73 98) 26]
Test Case: 216 | Input/Output: [(35 30 72 43) 30]
Test Case: 217 | Input/Output: [(26 90 49 20) 20]
Test Case: 218 | Input/Output: [(35 20 68 41) 20]
Test Case: 219 | Input/Output: [(73 92 62 100) 62]
Test Case: 220 | Input/Output: [(38 97 74 39) 38]
Test Case: 221 | Input/Output: [(83 8 93 94) 8]
Test Case: 222 | Input/Output: [(46 77 58 4) 4]
Test Case: 223 | Input/Output: [(60 93 22 13) 13]
Test Case: 224 | Input/Output: [(34 67 5 52) 5]
Test Case: 225 | Input/Output: [(54 24 64 62) 24]
Test Case: 226 | Input/Output: [(57 79 39 83) 39]
Test Case: 227 | Input/Output: [(61 72 15 50) 15]
Test Case: 228 | Input/Output: [(99 5 60 73) 5]
Test Case: 229 | Input/Output: [(67 40 0 8) 0]
Test Case: 230 | Input/Output: [(7 41 36 4) 4]
Test Case: 231 | Input/Output: [(93 95 64 34) 34]
Test Case: 232 | Input/Output: [(32 89 32 11) 11]
Test Case: 233 | Input/Output: [(82 53 7 86) 7]
Test Case: 234 | Input/Output: [(20 64 30 37) 20]
Test Case: 235 | Input/Output: [(87 11 61 65) 11]
Test Case: 236 | Input/Output: [(93 20 33 41) 20]
Test Case: 237 | Input/Output: [(85 19 12 17) 12]
Test Case: 238 | Input/Output: [(70 11 84 7) 7]
Test Case: 239 | Input/Output: [(73 73 46 74) 46]
Test Case: 240 | Input/Output: [(0 65 22 39) 0]
Test Case: 241 | Input/Output: [(30 76 34 6) 6]
Test Case: 242 | Input/Output: [(33 53 0 34) 0]
Test Case: 243 | Input/Output: [(85 99 84 68) 68]
Test Case: 244 | Input/Output: [(81 15 52 89) 15]
Test Case: 245 | Input/Output: [(45 94 22 32) 22]
Test Case: 246 | Input/Output: [(68 41 33 89) 33]
Test Case: 247 | Input/Output: [(44 18 29 19) 18]
Test Case: 248 | Input/Output: [(75 27 15 24) 15]
Test Case: 249 | Input/Output: [(35 57 10 49) 10]
Test Case: 250 | Input/Output: [(64 5 68 21) 5]
Test Case: 251 | Input/Output: [(27 82 82 34) 27]
Test Case: 252 | Input/Output: [(87 20 84 17) 17]
Test Case: 253 | Input/Output: [(78 99 17 71) 17]
Test Case: 254 | Input/Output: [(14 41 10 48) 10]
Test Case: 255 | Input/Output: [(78 95 74 21) 21]
Test Case: 256 | Input/Output: [(42 63 45 82) 42]
Test Case: 257 | Input/Output: [(38 16 6 8) 6]
Test Case: 258 | Input/Output: [(26 31 88 18) 18]
Test Case: 259 | Input/Output: [(16 25 42 35) 16]
Test Case: 260 | Input/Output: [(31 75 63 19) 19]
Test Case: 261 | Input/Output: [(98 3 97 65) 3]
Test Case: 262 | Input/Output: [(60 64 58 46) 46]
Test Case: 263 | Input/Output: [(24 56 77 92) 24]
Test Case: 264 | Input/Output: [(92 42 86 41) 41]
Test Case: 265 | Input/Output: [(65 40 17 55) 17]
Test Case: 266 | Input/Output: [(26 100 9 74) 9]
Test Case: 267 | Input/Output: [(14 49 53 32) 14]
Test Case: 268 | Input/Output: [(33 98 78 64) 33]
Test Case: 269 | Input/Output: [(42 65 24 45) 24]
Test Case: 270 | Input/Output: [(78 60 7 94) 7]
Test Case: 271 | Input/Output: [(56 75 45 78) 45]
Test Case: 272 | Input/Output: [(66 76 55 96) 55]
Test Case: 273 | Input/Output: [(65 8 54 92) 8]
Test Case: 274 | Input/Output: [(19 34 59 73) 19]
Test Case: 275 | Input/Output: [(56 59 0 14) 0]
Test Case: 276 | Input/Output: [(22 16 53 92) 16]
Test Case: 277 | Input/Output: [(4 66 21 27) 4]
Test Case: 278 | Input/Output: [(86 90 19 40) 19]
Test Case: 279 | Input/Output: [(59 2 84 57) 2]
Test Case: 280 | Input/Output: [(100 5 51 28) 5]
Test Case: 281 | Input/Output: [(9 47 29 13) 9]
Test Case: 282 | Input/Output: [(63 63 91 71) 63]
Test Case: 283 | Input/Output: [(56 0 20 62) 0]
Test Case: 284 | Input/Output: [(27 42 54 98) 27]
Test Case: 285 | Input/Output: [(92 61 12 68) 12]
Test Case: 286 | Input/Output: [(36 1 3 33) 1]
Test Case: 287 | Input/Output: [(74 20 10 68) 10]
Test Case: 288 | Input/Output: [(74 78 27 91) 27]
Test Case: 289 | Input/Output: [(51 74 74 77) 51]
Test Case: 290 | Input/Output: [(69 71 74 70) 69]
Test Case: 291 | Input/Output: [(25 88 60 7) 7]
Test Case: 292 | Input/Output: [(52 26 89 37) 26]
Test Case: 293 | Input/Output: [(57 34 12 55) 12]
Test Case: 294 | Input/Output: [(38 20 56 36) 20]
Test Case: 295 | Input/Output: [(38 33 58 15) 15]
Test Case: 296 | Input/Output: [(19 47 1 74) 1]
Test Case: 297 | Input/Output: [(80 90 61 85) 61]
Test Case: 298 | Input/Output: [(72 44 20 38) 20]
Test Case: 299 | Input/Output: [(41 47 6 41) 6]
Test Case: 300 | Input/Output: [(91 77 21 82) 21]
Test Case: 301 | Input/Output: [(15 58 5 77) 5]
Test Case: 302 | Input/Output: [(40 83 99 55) 40]
Test Case: 303 | Input/Output: [(56 5 90 15) 5]
Test Case: 304 | Input/Output: [(95 90 16 21) 16]
Test Case: 305 | Input/Output: [(56 97 82 41) 41]
Test Case: 306 | Input/Output: [(38 17 89 98) 17]
Test Case: 307 | Input/Output: [(20 23 10 8) 8]
Test Case: 308 | Input/Output: [(94 89 88 39) 39]
Test Case: 309 | Input/Output: [(19 29 16 7) 7]
Test Case: 310 | Input/Output: [(77 5 3 79) 3]
Test Case: 311 | Input/Output: [(18 8 100 44) 8]
Test Case: 312 | Input/Output: [(61 0 70 20) 0]
Test Case: 313 | Input/Output: [(62 14 22 7) 7]
Test Case: 314 | Input/Output: [(67 62 94 31) 31]
Test Case: 315 | Input/Output: [(50 18 45 35) 18]
Test Case: 316 | Input/Output: [(95 84 72 34) 34]
Test Case: 317 | Input/Output: [(38 71 36 23) 23]
Test Case: 318 | Input/Output: [(70 45 84 56) 45]
Test Case: 319 | Input/Output: [(52 73 91 14) 14]
Test Case: 320 | Input/Output: [(89 60 79 16) 16]
Test Case: 321 | Input/Output: [(27 43 22 69) 22]
Test Case: 322 | Input/Output: [(23 60 96 8) 8]
Test Case: 323 | Input/Output: [(15 45 19 90) 15]
Test Case: 324 | Input/Output: [(90 65 18 69) 18]
Test Case: 325 | Input/Output: [(85 95 20 98) 20]
Test Case: 326 | Input/Output: [(48 13 14 81) 13]
Test Case: 327 | Input/Output: [(25 62 77 44) 25]
Test Case: 328 | Input/Output: [(6 78 31 58) 6]
Test Case: 329 | Input/Output: [(5 36 37 87) 5]
Test Case: 330 | Input/Output: [(11 3 19 9) 3]
Test Case: 331 | Input/Output: [(38 87 99 35) 35]
Test Case: 332 | Input/Output: [(60 27 11 49) 11]
Test Case: 333 | Input/Output: [(92 5 71 99) 5]
Test Case: 334 | Input/Output: [(94 63 92 37) 37]
Test Case: 335 | Input/Output: [(13 23 31 61) 13]
Test Case: 336 | Input/Output: [(46 57 60 13) 13]
Test Case: 337 | Input/Output: [(32 61 32 95) 32]
Test Case: 338 | Input/Output: [(2 37 6 27) 2]
Test Case: 339 | Input/Output: [(67 23 14 64) 14]
Test Case: 340 | Input/Output: [(57 70 11 75) 11]
Test Case: 341 | Input/Output: [(94 60 95 49) 49]
Test Case: 342 | Input/Output: [(94 56 56 75) 56]
Test Case: 343 | Input/Output: [(37 97 26 8) 8]
Test Case: 344 | Input/Output: [(31 37 94 53) 31]
Test Case: 345 | Input/Output: [(84 92 66 76) 66]
Test Case: 346 | Input/Output: [(87 7 39 32) 7]
Test Case: 347 | Input/Output: [(36 21 7 65) 7]
Test Case: 348 | Input/Output: [(87 59 87 12) 12]
Test Case: 349 | Input/Output: [(2 70 93 54) 2]
Test Case: 350 | Input/Output: [(12 71 33 0) 0]
Test Case: 351 | Input/Output: [(77 27 95 61) 27]
Test Case: 352 | Input/Output: [(36 73 68 93) 36]
Test Case: 353 | Input/Output: [(25 89 47 50) 25]
Test Case: 354 | Input/Output: [(68 39 19 98) 19]
Test Case: 355 | Input/Output: [(50 68 68 40) 40]
Test Case: 356 | Input/Output: [(80 13 20 89) 13]
Test Case: 357 | Input/Output: [(98 65 93 71) 65]
Test Case: 358 | Input/Output: [(95 7 90 28) 7]
Test Case: 359 | Input/Output: [(49 23 55 75) 23]
Test Case: 360 | Input/Output: [(98 52 25 5) 5]
Test Case: 361 | Input/Output: [(62 63 89 29) 29]
Test Case: 362 | Input/Output: [(83 61 81 97) 61]
Test Case: 363 | Input/Output: [(10 97 11 74) 10]
Test Case: 364 | Input/Output: [(99 14 48 14) 14]
Test Case: 365 | Input/Output: [(22 22 98 44) 22]
Test Case: 366 | Input/Output: [(84 82 84 37) 37]
Test Case: 367 | Input/Output: [(47 2 9 37) 2]
Test Case: 368 | Input/Output: [(24 4 15 96) 4]
Test Case: 369 | Input/Output: [(3 15 16 27) 3]
Test Case: 370 | Input/Output: [(57 87 8 12) 8]
Test Case: 371 | Input/Output: [(54 68 18 81) 18]
Test Case: 372 | Input/Output: [(34 99 26 19) 19]
Test Case: 373 | Input/Output: [(100 50 9 73) 9]
Test Case: 374 | Input/Output: [(47 5 69 79) 5]
Test Case: 375 | Input/Output: [(83 29 55 73) 29]
Test Case: 376 | Input/Output: [(37 38 32 84) 32]
Test Case: 377 | Input/Output: [(98 50 22 22) 22]
Test Case: 378 | Input/Output: [(18 94 98 5) 5]
Test Case: 379 | Input/Output: [(67 95 41 64) 41]
Test Case: 380 | Input/Output: [(27 88 62 31) 27]
Test Case: 381 | Input/Output: [(8 93 68 77) 8]
Test Case: 382 | Input/Output: [(19 48 66 18) 18]
Test Case: 383 | Input/Output: [(57 37 94 27) 27]
Test Case: 384 | Input/Output: [(42 24 17 27) 17]
Test Case: 385 | Input/Output: [(68 43 94 84) 43]
Test Case: 386 | Input/Output: [(89 94 9 73) 9]
Test Case: 387 | Input/Output: [(1 7 1 89) 1]
Test Case: 388 | Input/Output: [(59 29 74 3) 3]
Test Case: 389 | Input/Output: [(71 18 78 13) 13]
Test Case: 390 | Input/Output: [(34 12 41 100) 12]
Test Case: 391 | Input/Output: [(70 42 42 83) 42]
Test Case: 392 | Input/Output: [(18 94 26 80) 18]
Test Case: 393 | Input/Output: [(10 12 77 57) 10]
Test Case: 394 | Input/Output: [(16 82 53 67) 16]
Test Case: 395 | Input/Output: [(27 24 32 50) 24]
Test Case: 396 | Input/Output: [(44 5 96 81) 5]
Test Case: 397 | Input/Output: [(75 34 88 5) 5]
Test Case: 398 | Input/Output: [(77 35 14 85) 14]
Test Case: 399 | Input/Output: [(61 46 18 20) 18]
Test Case: 400 | Input/Output: [(-48 -50 -45 89) -50]
Test Case: 401 | Input/Output: [(-28 -18 -11 4) -28]
Test Case: 402 | Input/Output: [(20 89 -13 -9) -13]
Test Case: 403 | Input/Output: [(59 60 -89 -39) -89]
Test Case: 404 | Input/Output: [(36 -5 1 -70) -70]
Test Case: 405 | Input/Output: [(-86 -19 27 -4) -86]
Test Case: 406 | Input/Output: [(-44 92 -65 68) -65]
Test Case: 407 | Input/Output: [(-32 -3 -19 -71) -71]
Test Case: 408 | Input/Output: [(-6 96 78 -38) -38]
Test Case: 409 | Input/Output: [(59 22 34 -99) -99]
Test Case: 410 | Input/Output: [(-50 38 -93 99) -93]
Test Case: 411 | Input/Output: [(-76 -6 64 -28) -76]
Test Case: 412 | Input/Output: [(24 -42 73 -40) -42]
Test Case: 413 | Input/Output: [(18 -42 80 77) -42]
Test Case: 414 | Input/Output: [(-34 88 -61 22) -61]
Test Case: 415 | Input/Output: [(25 85 -3 -67) -67]
Test Case: 416 | Input/Output: [(-42 46 -60 -41) -60]
Test Case: 417 | Input/Output: [(100 12 -80 -79) -80]
Test Case: 418 | Input/Output: [(-87 16 8 -30) -87]
Test Case: 419 | Input/Output: [(34 35 -6 -46) -46]
Test Case: 420 | Input/Output: [(53 19 64 -66) -66]
Test Case: 421 | Input/Output: [(35 -29 -48 50) -48]
Test Case: 422 | Input/Output: [(-100 -66 -52 32) -100]
Test Case: 423 | Input/Output: [(70 -40 -77 22) -77]
Test Case: 424 | Input/Output: [(-20 66 81 7) -20]
Test Case: 425 | Input/Output: [(-65 -12 -22 -50) -65]
Test Case: 426 | Input/Output: [(64 -56 49 -28) -56]
Test Case: 427 | Input/Output: [(-72 -100 97 -23) -100]
Test Case: 428 | Input/Output: [(-32 52 -24 90) -32]
Test Case: 429 | Input/Output: [(34 89 -16 -35) -35]
Test Case: 430 | Input/Output: [(-40 6 -76 -71) -76]
Test Case: 431 | Input/Output: [(92 -31 77 -48) -48]
Test Case: 432 | Input/Output: [(28 45 3 77) 3]
Test Case: 433 | Input/Output: [(9 82 43 73) 9]
Test Case: 434 | Input/Output: [(-90 64 -92 77) -92]
Test Case: 435 | Input/Output: [(15 -36 63 -77) -77]
Test Case: 436 | Input/Output: [(41 95 -9 -91) -91]
Test Case: 437 | Input/Output: [(8 45 -87 -91) -91]
Test Case: 438 | Input/Output: [(-44 -11 -9 1) -44]
Test Case: 439 | Input/Output: [(26 -95 -11 -11) -95]
Test Case: 440 | Input/Output: [(-14 48 -100 37) -100]
Test Case: 441 | Input/Output: [(39 -84 -33 -54) -84]
Test Case: 442 | Input/Output: [(86 -64 65 -22) -64]
Test Case: 443 | Input/Output: [(42 -18 -77 -61) -77]
Test Case: 444 | Input/Output: [(35 -8 4 -100) -100]
Test Case: 445 | Input/Output: [(-15 -91 56 -43) -91]
Test Case: 446 | Input/Output: [(42 -93 96 45) -93]
Test Case: 447 | Input/Output: [(-49 -12 -61 98) -61]
Test Case: 448 | Input/Output: [(-43 -100 -94 -21) -100]
Test Case: 449 | Input/Output: [(-53 -8 -45 -34) -53]
Test Case: 450 | Input/Output: [(-62 -14 12 74) -62]
Test Case: 451 | Input/Output: [(-39 -39 -96 25) -96]
Test Case: 452 | Input/Output: [(-5 12 24 48) -5]
Test Case: 453 | Input/Output: [(14 -35 -23 37) -35]
Test Case: 454 | Input/Output: [(70 1 40 8) 1]
Test Case: 455 | Input/Output: [(-44 62 -84 -27) -84]
Test Case: 456 | Input/Output: [(46 -20 81 -50) -50]
Test Case: 457 | Input/Output: [(19 -99 79 98) -99]
Test Case: 458 | Input/Output: [(-51 -80 -48 -31) -80]
Test Case: 459 | Input/Output: [(83 -68 -7 81) -68]
Test Case: 460 | Input/Output: [(-52 -81 -57 87) -81]
Test Case: 461 | Input/Output: [(77 88 38 -7) -7]
Test Case: 462 | Input/Output: [(97 93 95 -81) -81]
Test Case: 463 | Input/Output: [(77 -50 9 4) -50]
Test Case: 464 | Input/Output: [(54 79 39 87) 39]
Test Case: 465 | Input/Output: [(-8 91 -36 24) -36]
Test Case: 466 | Input/Output: [(20 6 -82 40) -82]
Test Case: 467 | Input/Output: [(3 -65 -93 58) -93]
Test Case: 468 | Input/Output: [(28 -48 -21 83) -48]
Test Case: 469 | Input/Output: [(-100 -17 8 -3) -100]
Test Case: 470 | Input/Output: [(-59 74 -77 -70) -77]
Test Case: 471 | Input/Output: [(-62 80 61 -81) -81]
Test Case: 472 | Input/Output: [(94 91 3 57) 3]
Test Case: 473 | Input/Output: [(33 28 35 -15) -15]
Test Case: 474 | Input/Output: [(-44 -70 74 74) -70]
Test Case: 475 | Input/Output: [(-98 97 68 -72) -98]
Test Case: 476 | Input/Output: [(55 -3 16 51) -3]
Test Case: 477 | Input/Output: [(-29 10 -51 -82) -82]
Test Case: 478 | Input/Output: [(66 22 -20 -14) -20]
Test Case: 479 | Input/Output: [(41 -60 -12 -41) -60]
Test Case: 480 | Input/Output: [(0 39 -40 17) -40]
Test Case: 481 | Input/Output: [(39 -23 -25 -99) -99]
Test Case: 482 | Input/Output: [(64 -29 14 91) -29]
Test Case: 483 | Input/Output: [(37 -85 -77 -96) -96]
Test Case: 484 | Input/Output: [(-88 96 20 15) -88]
Test Case: 485 | Input/Output: [(50 -5 92 14) -5]
Test Case: 486 | Input/Output: [(16 -95 98 16) -95]
Test Case: 487 | Input/Output: [(46 92 15 -8) -8]
Test Case: 488 | Input/Output: [(-60 -58 -60 47) -60]
Test Case: 489 | Input/Output: [(30 -94 -28 -23) -94]
Test Case: 490 | Input/Output: [(-56 -50 -27 48) -56]
Test Case: 491 | Input/Output: [(5 75 29 -77) -77]
Test Case: 492 | Input/Output: [(17 44 -11 -17) -17]
Test Case: 493 | Input/Output: [(82 -25 -94 12) -94]
Test Case: 494 | Input/Output: [(-7 -54 -40 78) -54]
Test Case: 495 | Input/Output: [(-60 -4 -58 -73) -73]
Test Case: 496 | Input/Output: [(50 86 -7 94) -7]
Test Case: 497 | Input/Output: [(37 -9 93 18) -9]
Test Case: 498 | Input/Output: [(-50 50 -93 4) -93]
Test Case: 499 | Input/Output: [(-1 -37 93 19) -37]
Test Case: 500 | Input/Output: [(15 -20 -6 11) -20]
Test Case: 501 | Input/Output: [(18 38 10 -1) -1]
Test Case: 502 | Input/Output: [(-63 25 -56 -73) -73]
Test Case: 503 | Input/Output: [(68 -33 63 -73) -73]
Test Case: 504 | Input/Output: [(-90 -30 -63 -18) -90]
Test Case: 505 | Input/Output: [(-36 4 44 86) -36]
Test Case: 506 | Input/Output: [(40 28 16 -35) -35]
Test Case: 507 | Input/Output: [(6 10 -90 3) -90]
Test Case: 508 | Input/Output: [(89 -92 -22 -61) -92]
Test Case: 509 | Input/Output: [(-23 10 -59 -39) -59]
Test Case: 510 | Input/Output: [(74 83 -50 28) -50]
Test Case: 511 | Input/Output: [(39 -89 -33 -26) -89]
Test Case: 512 | Input/Output: [(33 -5 -22 -43) -43]
Test Case: 513 | Input/Output: [(-48 76 94 50) -48]
Test Case: 514 | Input/Output: [(81 -61 58 -92) -92]
Test Case: 515 | Input/Output: [(-93 82 -59 16) -93]
Test Case: 516 | Input/Output: [(-99 51 -76 -60) -99]
Test Case: 517 | Input/Output: [(-75 -58 41 69) -75]
Test Case: 518 | Input/Output: [(-79 62 -38 -56) -79]
Test Case: 519 | Input/Output: [(69 -41 -93 7) -93]
Test Case: 520 | Input/Output: [(-95 93 -25 -43) -95]
Test Case: 521 | Input/Output: [(-96 -8 96 70) -96]
Test Case: 522 | Input/Output: [(24 -93 12 -55) -93]
Test Case: 523 | Input/Output: [(-31 -65 -26 -18) -65]
Test Case: 524 | Input/Output: [(-94 -17 -55 -4) -94]
Test Case: 525 | Input/Output: [(-28 -38 95 -78) -78]
Test Case: 526 | Input/Output: [(-15 -70 -32 29) -70]
Test Case: 527 | Input/Output: [(76 39 -16 20) -16]
Test Case: 528 | Input/Output: [(67 60 74 7) 7]
Test Case: 529 | Input/Output: [(20 -93 -54 25) -93]
Test Case: 530 | Input/Output: [(92 97 100 -63) -63]
Test Case: 531 | Input/Output: [(7 62 -41 -93) -93]
Test Case: 532 | Input/Output: [(-45 -5 87 45) -45]
Test Case: 533 | Input/Output: [(-34 43 19 84) -34]
Test Case: 534 | Input/Output: [(65 -87 87 34) -87]
Test Case: 535 | Input/Output: [(-45 32 69 -26) -45]
Test Case: 536 | Input/Output: [(-5 -87 -59 -98) -98]
Test Case: 537 | Input/Output: [(39 -61 -78 88) -78]
Test Case: 538 | Input/Output: [(37 76 -35 88) -35]
Test Case: 539 | Input/Output: [(94 18 53 33) 18]
Test Case: 540 | Input/Output: [(88 -87 50 -4) -87]
Test Case: 541 | Input/Output: [(24 -27 -68 62) -68]
Test Case: 542 | Input/Output: [(26 58 28 22) 22]
Test Case: 543 | Input/Output: [(45 -27 15 -62) -62]
Test Case: 544 | Input/Output: [(-7 -49 -50 -65) -65]
Test Case: 545 | Input/Output: [(95 -39 71 44) -39]
Test Case: 546 | Input/Output: [(16 29 23 43) 16]
Test Case: 547 | Input/Output: [(-4 38 32 5) -4]
Test Case: 548 | Input/Output: [(39 -72 -90 41) -90]
Test Case: 549 | Input/Output: [(72 36 89 -49) -49]
Test Case: 550 | Input/Output: [(10 45 -45 30) -45]
Test Case: 551 | Input/Output: [(35 -3 58 -18) -18]
Test Case: 552 | Input/Output: [(-98 16 -12 97) -98]
Test Case: 553 | Input/Output: [(-68 60 59 -92) -92]
Test Case: 554 | Input/Output: [(-9 -80 16 37) -80]
Test Case: 555 | Input/Output: [(-88 16 64 59) -88]
Test Case: 556 | Input/Output: [(-7 -14 -98 19) -98]
Test Case: 557 | Input/Output: [(-1 22 -78 53) -78]
Test Case: 558 | Input/Output: [(6 -90 -7 73) -90]
Test Case: 559 | Input/Output: [(93 -29 -86 70) -86]
Test Case: 560 | Input/Output: [(32 57 -72 32) -72]
Test Case: 561 | Input/Output: [(2 66 -52 96) -52]
Test Case: 562 | Input/Output: [(42 -54 48 78) -54]
Test Case: 563 | Input/Output: [(-58 -49 46 -71) -71]
Test Case: 564 | Input/Output: [(53 78 6 63) 6]
Test Case: 565 | Input/Output: [(41 -18 -75 -31) -75]
Test Case: 566 | Input/Output: [(63 76 -97 51) -97]
Test Case: 567 | Input/Output: [(-93 -7 -74 -19) -93]
Test Case: 568 | Input/Output: [(35 -33 47 -61) -61]
Test Case: 569 | Input/Output: [(-20 86 -40 -20) -40]
Test Case: 570 | Input/Output: [(67 19 -93 -61) -93]
Test Case: 571 | Input/Output: [(-83 -82 -18 5) -83]
Test Case: 572 | Input/Output: [(-100 -9 16 -34) -100]
Test Case: 573 | Input/Output: [(25 -1 78 82) -1]
Test Case: 574 | Input/Output: [(-99 3 -13 -92) -99]
Test Case: 575 | Input/Output: [(65 -85 18 -50) -85]
Test Case: 576 | Input/Output: [(13 -85 -45 -55) -85]
Test Case: 577 | Input/Output: [(-30 -73 72 -39) -73]
Test Case: 578 | Input/Output: [(-19 85 47 -52) -52]
Test Case: 579 | Input/Output: [(-64 -22 63 12) -64]
Test Case: 580 | Input/Output: [(-29 81 7 20) -29]
Test Case: 581 | Input/Output: [(73 -30 99 -74) -74]
Test Case: 582 | Input/Output: [(62 -49 -19 -97) -97]
Test Case: 583 | Input/Output: [(71 35 49 -22) -22]
Test Case: 584 | Input/Output: [(-96 -18 97 12) -96]
Test Case: 585 | Input/Output: [(63 -5 9 66) -5]
Test Case: 586 | Input/Output: [(-40 76 -69 9) -69]
Test Case: 587 | Input/Output: [(-50 -59 -25 -2) -59]
Test Case: 588 | Input/Output: [(-98 99 -24 -43) -98]
Test Case: 589 | Input/Output: [(-40 67 -21 19) -40]
Test Case: 590 | Input/Output: [(88 -12 12 87) -12]
Test Case: 591 | Input/Output: [(-94 -37 35 -41) -94]
Test Case: 592 | Input/Output: [(-35 89 -72 -98) -98]
Test Case: 593 | Input/Output: [(-92 55 22 64) -92]
Test Case: 594 | Input/Output: [(75 64 -2 90) -2]
Test Case: 595 | Input/Output: [(-60 32 -8 -99) -99]
Test Case: 596 | Input/Output: [(-69 -42 49 -63) -69]
Test Case: 597 | Input/Output: [(79 -89 56 9) -89]
Test Case: 598 | Input/Output: [(92 29 28 -1) -1]
Test Case: 599 | Input/Output: [(78 -57 11 -62) -62]
Test Case: 600 | Input/Output: [(22 -81 -26 -23) -81]
Test Case: 601 | Input/Output: [(-80 -40 -86 -38) -86]
Test Case: 602 | Input/Output: [(-70 -46 2 -52) -70]
Test Case: 603 | Input/Output: [(30 38 -12 49) -12]
Test Case: 604 | Input/Output: [(20 32 -66 -47) -66]
Test Case: 605 | Input/Output: [(29 83 55 8) 8]
Test Case: 606 | Input/Output: [(50 19 10 83) 10]
Test Case: 607 | Input/Output: [(49 52 95 65) 49]
Test Case: 608 | Input/Output: [(-29 -9 71 85) -29]
Test Case: 609 | Input/Output: [(-97 -89 -85 21) -97]
Test Case: 610 | Input/Output: [(-31 -93 45 59) -93]
Test Case: 611 | Input/Output: [(-60 -64 15 21) -64]
Test Case: 612 | Input/Output: [(-43 -60 -37 62) -60]
Test Case: 613 | Input/Output: [(-51 24 10 38) -51]
Test Case: 614 | Input/Output: [(-49 53 22 -95) -95]
Test Case: 615 | Input/Output: [(-69 -87 -99 80) -99]
Test Case: 616 | Input/Output: [(65 4 57 -92) -92]
Test Case: 617 | Input/Output: [(-85 -87 -32 -15) -87]
Test Case: 618 | Input/Output: [(-58 -54 10 -12) -58]
Test Case: 619 | Input/Output: [(-11 -9 46 -66) -66]
Test Case: 620 | Input/Output: [(84 -29 70 67) -29]
Test Case: 621 | Input/Output: [(-34 71 -93 -52) -93]
Test Case: 622 | Input/Output: [(45 -55 38 -3) -55]
Test Case: 623 | Input/Output: [(1 31 -18 66) -18]
Test Case: 624 | Input/Output: [(-79 93 87 75) -79]
Test Case: 625 | Input/Output: [(-84 -94 -28 -79) -94]
Test Case: 626 | Input/Output: [(38 -45 61 -29) -45]
Test Case: 627 | Input/Output: [(49 76 38 42) 38]
Test Case: 628 | Input/Output: [(36 -74 -8 -15) -74]
Test Case: 629 | Input/Output: [(-20 92 87 -20) -20]
Test Case: 630 | Input/Output: [(-54 87 -47 -29) -54]
Test Case: 631 | Input/Output: [(-14 -20 -67 60) -67]
Test Case: 632 | Input/Output: [(-49 -85 -17 78) -85]
Test Case: 633 | Input/Output: [(-36 -47 83 -89) -89]
Test Case: 634 | Input/Output: [(-48 -30 82 -33) -48]
Test Case: 635 | Input/Output: [(-11 72 67 86) -11]
Test Case: 636 | Input/Output: [(1 32 50 40) 1]
Test Case: 637 | Input/Output: [(-16 60 -41 73) -41]
Test Case: 638 | Input/Output: [(58 32 78 85) 32]
Test Case: 639 | Input/Output: [(88 46 -21 88) -21]
Test Case: 640 | Input/Output: [(-59 95 -32 -52) -59]
Test Case: 641 | Input/Output: [(30 -29 30 -73) -73]
Test Case: 642 | Input/Output: [(-58 -96 83 90) -96]
Test Case: 643 | Input/Output: [(-27 -7 -11 -19) -27]
Test Case: 644 | Input/Output: [(71 42 11 -9) -9]
Test Case: 645 | Input/Output: [(9 -87 33 13) -87]
Test Case: 646 | Input/Output: [(82 -10 79 71) -10]
Test Case: 647 | Input/Output: [(67 -68 -25 55) -68]
Test Case: 648 | Input/Output: [(-19 13 -3 -97) -97]
Test Case: 649 | Input/Output: [(-50 33 -34 88) -50]
Test Case: 650 | Input/Output: [(99 -71 -74 96) -74]
Test Case: 651 | Input/Output: [(-41 -1 -60 -58) -60]
Test Case: 652 | Input/Output: [(79 0 91 95) 0]
Test Case: 653 | Input/Output: [(96 -89 -2 -97) -97]
Test Case: 654 | Input/Output: [(-82 52 -91 71) -91]
Test Case: 655 | Input/Output: [(58 86 -21 83) -21]
Test Case: 656 | Input/Output: [(-43 -34 -57 12) -57]
Test Case: 657 | Input/Output: [(-73 13 41 -29) -73]
Test Case: 658 | Input/Output: [(-50 -97 -41 -31) -97]
Test Case: 659 | Input/Output: [(72 -3 41 29) -3]
Test Case: 660 | Input/Output: [(57 5 -40 -74) -74]
Test Case: 661 | Input/Output: [(14 8 -8 -82) -82]
Test Case: 662 | Input/Output: [(-77 86 -97 -66) -97]
Test Case: 663 | Input/Output: [(-10 -94 -63 16) -94]
Test Case: 664 | Input/Output: [(98 -90 -55 -22) -90]
Test Case: 665 | Input/Output: [(-61 -84 20 70) -84]
Test Case: 666 | Input/Output: [(58 50 -15 45) -15]
Test Case: 667 | Input/Output: [(73 -13 21 -35) -35]
Test Case: 668 | Input/Output: [(-42 13 -40 -90) -90]
Test Case: 669 | Input/Output: [(49 -55 -55 -57) -57]
Test Case: 670 | Input/Output: [(-6 -80 -72 -47) -80]
Test Case: 671 | Input/Output: [(2 29 -53 80) -53]
Test Case: 672 | Input/Output: [(54 -70 88 35) -70]
Test Case: 673 | Input/Output: [(-12 -45 -84 69) -84]
Test Case: 674 | Input/Output: [(-11 -15 -69 29) -69]
Test Case: 675 | Input/Output: [(96 -71 59 26) -71]
Test Case: 676 | Input/Output: [(-95 37 21 -92) -95]
Test Case: 677 | Input/Output: [(-72 -78 2 52) -78]
Test Case: 678 | Input/Output: [(-93 64 -53 53) -93]
Test Case: 679 | Input/Output: [(4 -71 -40 -94) -94]
Test Case: 680 | Input/Output: [(61 87 -24 33) -24]
Test Case: 681 | Input/Output: [(-43 -7 49 24) -43]
Test Case: 682 | Input/Output: [(61 13 -88 1) -88]
Test Case: 683 | Input/Output: [(-74 78 -38 -91) -91]
Test Case: 684 | Input/Output: [(-43 37 -1 -99) -99]
Test Case: 685 | Input/Output: [(60 84 -90 92) -90]
Test Case: 686 | Input/Output: [(-6 77 55 71) -6]
Test Case: 687 | Input/Output: [(-1 59 -8 -71) -71]
Test Case: 688 | Input/Output: [(1 -45 -60 -24) -60]
Test Case: 689 | Input/Output: [(42 -10 73 -91) -91]
Test Case: 690 | Input/Output: [(-95 -17 -46 49) -95]
Test Case: 691 | Input/Output: [(-45 -47 -4 18) -47]
Test Case: 692 | Input/Output: [(-96 74 -32 -39) -96]
Test Case: 693 | Input/Output: [(17 -20 -16 31) -20]
Test Case: 694 | Input/Output: [(-44 4 92 -69) -69]
Test Case: 695 | Input/Output: [(-23 -16 88 66) -23]
Test Case: 696 | Input/Output: [(-96 -99 -35 -64) -99]
Test Case: 697 | Input/Output: [(-77 38 -78 -18) -78]
Test Case: 698 | Input/Output: [(-78 97 58 75) -78]
Test Case: 699 | Input/Output: [(18 -16 44 72) -16]
Test Case: 700 | Input/Output: [(-28 22 -59 -37) -59]
Test Case: 701 | Input/Output: [(-13 -81 -8 -30) -81]
Test Case: 702 | Input/Output: [(-62 38 -96 -87) -96]
Test Case: 703 | Input/Output: [(82 -21 -7 -38) -38]
Test Case: 704 | Input/Output: [(-64 47 34 47) -64]
Test Case: 705 | Input/Output: [(53 -26 73 -58) -58]
Test Case: 706 | Input/Output: [(-41 84 42 -8) -41]
Test Case: 707 | Input/Output: [(10 50 79 67) 10]
Test Case: 708 | Input/Output: [(11 65 -38 21) -38]
Test Case: 709 | Input/Output: [(-94 22 25 31) -94]
Test Case: 710 | Input/Output: [(-83 -71 73 -81) -83]
Test Case: 711 | Input/Output: [(50 -37 17 -60) -60]
Test Case: 712 | Input/Output: [(-76 54 19 97) -76]
Test Case: 713 | Input/Output: [(38 89 50 50) 38]
Test Case: 714 | Input/Output: [(-67 -100 -72 -5) -100]
Test Case: 715 | Input/Output: [(-4 5 -70 -83) -83]
Test Case: 716 | Input/Output: [(44 -64 -70 22) -70]
Test Case: 717 | Input/Output: [(-33 21 55 -28) -33]
Test Case: 718 | Input/Output: [(5 -74 38 65) -74]
Test Case: 719 | Input/Output: [(5 61 10 -4) -4]
Test Case: 720 | Input/Output: [(-7 -5 -100 -72) -100]
Test Case: 721 | Input/Output: [(10 69 -63 -8) -63]
Test Case: 722 | Input/Output: [(72 10 43 -73) -73]
Test Case: 723 | Input/Output: [(91 -50 -100 1) -100]
Test Case: 724 | Input/Output: [(47 -78 65 -74) -78]
Test Case: 725 | Input/Output: [(99 -42 68 100) -42]
Test Case: 726 | Input/Output: [(76 78 -35 88) -35]
Test Case: 727 | Input/Output: [(-56 38 62 -7) -56]
Test Case: 728 | Input/Output: [(-49 -2 -73 -16) -73]
Test Case: 729 | Input/Output: [(-75 76 47 79) -75]
Test Case: 730 | Input/Output: [(28 33 -43 22) -43]
Test Case: 731 | Input/Output: [(-45 21 36 -78) -78]
Test Case: 732 | Input/Output: [(87 22 -64 5) -64]
Test Case: 733 | Input/Output: [(23 -68 26 -71) -71]
Test Case: 734 | Input/Output: [(-76 -67 63 60) -76]
Test Case: 735 | Input/Output: [(79 82 -41 -82) -82]
Test Case: 736 | Input/Output: [(-35 -12 64 -1) -35]
Test Case: 737 | Input/Output: [(63 -33 -16 84) -33]
Test Case: 738 | Input/Output: [(-54 25 -71 11) -71]
Test Case: 739 | Input/Output: [(97 -32 -23 62) -32]
Test Case: 740 | Input/Output: [(-2 48 -25 74) -25]
Test Case: 741 | Input/Output: [(-85 93 -69 68) -85]
Test Case: 742 | Input/Output: [(-24 78 28 81) -24]
Test Case: 743 | Input/Output: [(-100 23 -65 -4) -100]
Test Case: 744 | Input/Output: [(-6 0 45 43) -6]
Test Case: 745 | Input/Output: [(-41 -88 49 96) -88]
Test Case: 746 | Input/Output: [(98 49 67 62) 49]
Test Case: 747 | Input/Output: [(64 34 87 33) 33]
Test Case: 748 | Input/Output: [(-19 84 -19 68) -19]
Test Case: 749 | Input/Output: [(87 -76 -55 84) -76]
Test Case: 750 | Input/Output: [(44 29 -1 -64) -64]
Test Case: 751 | Input/Output: [(75 65 -50 -70) -70]
Test Case: 752 | Input/Output: [(-99 62 47 -100) -100]
Test Case: 753 | Input/Output: [(31 -18 10 -77) -77]
Test Case: 754 | Input/Output: [(71 -68 -29 13) -68]
Test Case: 755 | Input/Output: [(67 -8 61 -33) -33]
Test Case: 756 | Input/Output: [(-31 6 78 95) -31]
Test Case: 757 | Input/Output: [(50 -62 70 22) -62]
Test Case: 758 | Input/Output: [(-58 -27 -5 46) -58]
Test Case: 759 | Input/Output: [(-87 23 100 60) -87]
Test Case: 760 | Input/Output: [(24 -44 -17 -95) -95]
Test Case: 761 | Input/Output: [(-19 -17 30 78) -19]
Test Case: 762 | Input/Output: [(30 -100 -10 -29) -100]
Test Case: 763 | Input/Output: [(-93 -13 13 -49) -93]
Test Case: 764 | Input/Output: [(75 -4 40 -19) -19]
Test Case: 765 | Input/Output: [(-63 -94 -47 -64) -94]
Test Case: 766 | Input/Output: [(-77 63 17 -85) -85]
Test Case: 767 | Input/Output: [(-73 61 -4 2) -73]
Test Case: 768 | Input/Output: [(54 -20 -21 11) -21]
Test Case: 769 | Input/Output: [(6 2 -98 -14) -98]
Test Case: 770 | Input/Output: [(11 -42 -4 -8) -42]
Test Case: 771 | Input/Output: [(41 -82 -29 -54) -82]
Test Case: 772 | Input/Output: [(8 -71 -45 86) -71]
Test Case: 773 | Input/Output: [(-21 -59 99 -8) -59]
Test Case: 774 | Input/Output: [(-29 -36 29 97) -36]
Test Case: 775 | Input/Output: [(55 -43 26 -95) -95]
Test Case: 776 | Input/Output: [(-18 -47 -61 -93) -93]
Test Case: 777 | Input/Output: [(-27 24 23 -33) -33]
Test Case: 778 | Input/Output: [(90 3 91 80) 3]
Test Case: 779 | Input/Output: [(-76 48 17 2) -76]
Test Case: 780 | Input/Output: [(-48 97 -60 -16) -60]
Test Case: 781 | Input/Output: [(-63 -63 -33 -28) -63]
Test Case: 782 | Input/Output: [(25 55 83 -55) -55]
Test Case: 783 | Input/Output: [(-76 -56 78 48) -76]
Test Case: 784 | Input/Output: [(12 61 56 -83) -83]
Test Case: 785 | Input/Output: [(17 11 -43 45) -43]
Test Case: 786 | Input/Output: [(-85 -71 15 87) -85]
Test Case: 787 | Input/Output: [(-13 -85 85 -13) -85]
Test Case: 788 | Input/Output: [(40 37 9 -59) -59]
Test Case: 789 | Input/Output: [(46 -18 -90 82) -90]
Test Case: 790 | Input/Output: [(16 74 -75 -51) -75]
Test Case: 791 | Input/Output: [(62 -31 65 23) -31]
Test Case: 792 | Input/Output: [(62 9 -15 -33) -33]
Test Case: 793 | Input/Output: [(75 -23 44 7) -23]
Test Case: 794 | Input/Output: [(79 -23 -93 -35) -93]
Test Case: 795 | Input/Output: [(64 -81 -29 98) -81]
Test Case: 796 | Input/Output: [(-29 -60 65 -32) -60]
Test Case: 797 | Input/Output: [(44 -21 -49 82) -49]
Test Case: 798 | Input/Output: [(22 -48 -85 -47) -85]
Test Case: 799 | Input/Output: [(52 88 -72 -6) -72]
Test Case: 800 | Input/Output: [(-90 12 -36 -68) -90]
Test Case: 801 | Input/Output: [(-16 -6 85 8) -16]
Test Case: 802 | Input/Output: [(-20 -66 16 97) -66]
Test Case: 803 | Input/Output: [(50 78 39 -32) -32]
Test Case: 804 | Input/Output: [(14 80 -85 94) -85]
Test Case: 805 | Input/Output: [(4 83 41 30) 4]
Test Case: 806 | Input/Output: [(20 36 14 54) 14]
Test Case: 807 | Input/Output: [(-74 -15 52 21) -74]
Test Case: 808 | Input/Output: [(-63 76 -18 49) -63]
Test Case: 809 | Input/Output: [(9 -60 73 -30) -60]
Test Case: 810 | Input/Output: [(90 40 -39 9) -39]
Test Case: 811 | Input/Output: [(40 -96 -13 66) -96]
Test Case: 812 | Input/Output: [(-82 -28 -23 31) -82]
Test Case: 813 | Input/Output: [(51 -98 -4 10) -98]
Test Case: 814 | Input/Output: [(58 6 -75 -35) -75]
Test Case: 815 | Input/Output: [(90 60 9 99) 9]
Test Case: 816 | Input/Output: [(16 -34 -99 74) -99]
Test Case: 817 | Input/Output: [(-100 -80 56 -68) -100]
Test Case: 818 | Input/Output: [(-34 -47 -17 79) -47]
Test Case: 819 | Input/Output: [(-72 -13 -16 -51) -72]
Test Case: 820 | Input/Output: [(-22 42 -24 50) -24]
Test Case: 821 | Input/Output: [(-74 -34 -68 7) -74]
Test Case: 822 | Input/Output: [(17 -77 -95 35) -95]
Test Case: 823 | Input/Output: [(43 -8 32 -28) -28]
Test Case: 824 | Input/Output: [(-38 3 -86 -40) -86]
Test Case: 825 | Input/Output: [(19 -47 -25 54) -47]
Test Case: 826 | Input/Output: [(7 56 -60 5) -60]
Test Case: 827 | Input/Output: [(-58 -66 -1 25) -66]
Test Case: 828 | Input/Output: [(67 48 -88 -77) -88]
Test Case: 829 | Input/Output: [(-57 -44 78 45) -57]
Test Case: 830 | Input/Output: [(-55 -61 21 16) -61]
Test Case: 831 | Input/Output: [(-54 72 36 -81) -81]
Test Case: 832 | Input/Output: [(-95 4 -24 -92) -95]
Test Case: 833 | Input/Output: [(-76 -77 -71 4) -77]
Test Case: 834 | Input/Output: [(-62 -16 96 16) -62]
Test Case: 835 | Input/Output: [(-75 44 88 8) -75]
Test Case: 836 | Input/Output: [(-31 -31 -32 -44) -44]
Test Case: 837 | Input/Output: [(-28 68 81 26) -28]
Test Case: 838 | Input/Output: [(-97 -63 -85 96) -97]
Test Case: 839 | Input/Output: [(6 47 26 -99) -99]
Test Case: 840 | Input/Output: [(64 15 74 -5) -5]
Test Case: 841 | Input/Output: [(-81 -80 45 -98) -98]
Test Case: 842 | Input/Output: [(-20 -26 -50 -59) -59]
Test Case: 843 | Input/Output: [(-24 16 96 8) -24]
Test Case: 844 | Input/Output: [(48 57 -97 58) -97]
Test Case: 845 | Input/Output: [(66 -21 -11 52) -21]
Test Case: 846 | Input/Output: [(-77 -22 -77 -10) -77]
Test Case: 847 | Input/Output: [(86 14 -23 33) -23]
Test Case: 848 | Input/Output: [(-65 75 27 -25) -65]
Test Case: 849 | Input/Output: [(-67 -8 13 60) -67]
Test Case: 850 | Input/Output: [(-77 73 89 -2) -77]
Test Case: 851 | Input/Output: [(-6 69 53 -53) -53]
Test Case: 852 | Input/Output: [(24 -72 -33 55) -72]
Test Case: 853 | Input/Output: [(-3 -87 11 -51) -87]
Test Case: 854 | Input/Output: [(82 -91 11 -79) -91]
Test Case: 855 | Input/Output: [(-31 48 -97 -55) -97]
Test Case: 856 | Input/Output: [(-46 -89 -41 83) -89]
Test Case: 857 | Input/Output: [(-41 29 -82 51) -82]
Test Case: 858 | Input/Output: [(-13 -61 -63 58) -63]
Test Case: 859 | Input/Output: [(21 -59 56 76) -59]
Test Case: 860 | Input/Output: [(1 -86 -86 89) -86]
Test Case: 861 | Input/Output: [(-77 45 -74 13) -77]
Test Case: 862 | Input/Output: [(21 -22 47 70) -22]
Test Case: 863 | Input/Output: [(43 90 54 -98) -98]
Test Case: 864 | Input/Output: [(-85 -72 -97 53) -97]
Test Case: 865 | Input/Output: [(19 18 14 -14) -14]
Test Case: 866 | Input/Output: [(17 58 -40 27) -40]
Test Case: 867 | Input/Output: [(42 -2 -6 32) -6]
Test Case: 868 | Input/Output: [(-89 -56 -25 83) -89]
Test Case: 869 | Input/Output: [(49 -11 -74 -98) -98]
Test Case: 870 | Input/Output: [(-70 35 -25 15) -70]
Test Case: 871 | Input/Output: [(-92 -93 60 77) -93]
Test Case: 872 | Input/Output: [(-63 1 -73 -25) -73]
Test Case: 873 | Input/Output: [(66 -85 94 -14) -85]
Test Case: 874 | Input/Output: [(39 25 42 -60) -60]
Test Case: 875 | Input/Output: [(-91 9 -74 83) -91]
Test Case: 876 | Input/Output: [(-72 -57 -45 -17) -72]
Test Case: 877 | Input/Output: [(-48 -80 -79 92) -80]
Test Case: 878 | Input/Output: [(-97 26 65 -44) -97]
Test Case: 879 | Input/Output: [(5 6 -61 -17) -61]
Test Case: 880 | Input/Output: [(79 45 -91 12) -91]
Test Case: 881 | Input/Output: [(55 -99 31 84) -99]
Test Case: 882 | Input/Output: [(69 48 74 78) 48]
Test Case: 883 | Input/Output: [(-67 90 -49 81) -67]
Test Case: 884 | Input/Output: [(10 75 -58 -18) -58]
Test Case: 885 | Input/Output: [(-49 81 -28 64) -49]
Test Case: 886 | Input/Output: [(-21 50 97 88) -21]
Test Case: 887 | Input/Output: [(42 -36 50 -14) -36]
Test Case: 888 | Input/Output: [(62 4 44 74) 4]
Test Case: 889 | Input/Output: [(-88 84 23 -31) -88]
Test Case: 890 | Input/Output: [(-76 -56 93 37) -76]
Test Case: 891 | Input/Output: [(53 2 48 -90) -90]
Test Case: 892 | Input/Output: [(-79 -27 90 2) -79]
Test Case: 893 | Input/Output: [(-15 19 -48 73) -48]
Test Case: 894 | Input/Output: [(-85 -3 -85 39) -85]
Test Case: 895 | Input/Output: [(4 -92 50 -11) -92]
Test Case: 896 | Input/Output: [(-9 73 77 24) -9]
Test Case: 897 | Input/Output: [(-18 19 9 98) -18]
Test Case: 898 | Input/Output: [(-3 19 21 -5) -5]
Test Case: 899 | Input/Output: [(-86 83 -81 75) -86]
Test Case: 900 | Input/Output: [(-57 -34 -87 -37) -87]
Test Case: 901 | Input/Output: [(17 -20 76 -98) -98]
Test Case: 902 | Input/Output: [(-87 83 91 -5) -87]
Test Case: 903 | Input/Output: [(-14 -43 25 74) -43]
Test Case: 904 | Input/Output: [(-24 8 -70 -12) -70]
Test Case: 905 | Input/Output: [(69 -57 12 -91) -91]
Test Case: 906 | Input/Output: [(-3 30 -43 13) -43]
Test Case: 907 | Input/Output: [(-94 55 -17 84) -94]
Test Case: 908 | Input/Output: [(25 9 23 -96) -96]
Test Case: 909 | Input/Output: [(-57 -5 -59 -5) -59]
Test Case: 910 | Input/Output: [(-66 -56 -36 28) -66]
Test Case: 911 | Input/Output: [(-93 -91 -73 63) -93]
Test Case: 912 | Input/Output: [(34 37 -91 83) -91]
Test Case: 913 | Input/Output: [(91 80 69 -77) -77]
Test Case: 914 | Input/Output: [(-4 27 26 -31) -31]
Test Case: 915 | Input/Output: [(-19 -69 -17 55) -69]
Test Case: 916 | Input/Output: [(0 9 -9 22) -9]
Test Case: 917 | Input/Output: [(-60 37 71 -49) -60]
Test Case: 918 | Input/Output: [(-52 -42 -51 -4) -52]
Test Case: 919 | Input/Output: [(-57 25 15 -33) -57]
Test Case: 920 | Input/Output: [(-34 53 -98 -40) -98]
Test Case: 921 | Input/Output: [(3 23 -69 -25) -69]
Test Case: 922 | Input/Output: [(1 26 43 -41) -41]
Test Case: 923 | Input/Output: [(-83 -61 -35 5) -83]
Test Case: 924 | Input/Output: [(63 77 -8 56) -8]
Test Case: 925 | Input/Output: [(3 -94 -2 -46) -94]
Test Case: 926 | Input/Output: [(19 47 27 -30) -30]
Test Case: 927 | Input/Output: [(69 74 5 25) 5]
Test Case: 928 | Input/Output: [(44 100 -36 -76) -76]
Test Case: 929 | Input/Output: [(97 73 -35 0) -35]
Test Case: 930 | Input/Output: [(-42 -71 -98 -46) -98]
Test Case: 931 | Input/Output: [(47 -16 33 -33) -33]
Test Case: 932 | Input/Output: [(14 -15 -3 33) -15]
Test Case: 933 | Input/Output: [(99 44 6 63) 6]
Test Case: 934 | Input/Output: [(80 86 27 -86) -86]
Test Case: 935 | Input/Output: [(-27 -86 64 86) -86]
Test Case: 936 | Input/Output: [(1 2 -76 33) -76]
Test Case: 937 | Input/Output: [(88 68 59 -83) -83]
Test Case: 938 | Input/Output: [(-32 52 55 -28) -32]
Test Case: 939 | Input/Output: [(10 61 65 -64) -64]
Test Case: 940 | Input/Output: [(-10 99 26 36) -10]
Test Case: 941 | Input/Output: [(9 45 65 -39) -39]
Test Case: 942 | Input/Output: [(-94 72 89 83) -94]
Test Case: 943 | Input/Output: [(-35 -27 94 -66) -66]
Test Case: 944 | Input/Output: [(71 -1 -4 32) -4]
Test Case: 945 | Input/Output: [(-50 59 86 1) -50]
Test Case: 946 | Input/Output: [(71 -100 47 -1) -100]
Test Case: 947 | Input/Output: [(33 71 60 93) 33]
Test Case: 948 | Input/Output: [(60 -27 -1 49) -27]
Test Case: 949 | Input/Output: [(92 21 38 -3) -3]
Test Case: 950 | Input/Output: [(40 80 72 27) 27]
Test Case: 951 | Input/Output: [(73 84 -63 97) -63]
Test Case: 952 | Input/Output: [(9 -34 98 94) -34]
Test Case: 953 | Input/Output: [(59 33 -66 16) -66]
Test Case: 954 | Input/Output: [(-66 -16 -40 -49) -66]
Test Case: 955 | Input/Output: [(22 23 -87 -42) -87]
Test Case: 956 | Input/Output: [(35 -93 -14 10) -93]
Test Case: 957 | Input/Output: [(-70 33 -86 28) -86]
Test Case: 958 | Input/Output: [(45 -51 -84 -96) -96]
Test Case: 959 | Input/Output: [(100 -85 33 -43) -85]
Test Case: 960 | Input/Output: [(-26 64 27 98) -26]
Test Case: 961 | Input/Output: [(-46 -68 68 39) -68]
Test Case: 962 | Input/Output: [(25 -64 77 -98) -98]
Test Case: 963 | Input/Output: [(97 -79 59 99) -79]
Test Case: 964 | Input/Output: [(-46 -91 84 24) -91]
Test Case: 965 | Input/Output: [(17 91 80 27) 17]
Test Case: 966 | Input/Output: [(11 26 98 -42) -42]
Test Case: 967 | Input/Output: [(-70 -36 78 91) -70]
Test Case: 968 | Input/Output: [(96 14 66 -99) -99]
Test Case: 969 | Input/Output: [(43 -41 -59 -19) -59]
Test Case: 970 | Input/Output: [(-73 -57 29 -35) -73]
Test Case: 971 | Input/Output: [(-67 43 -43 -40) -67]
Test Case: 972 | Input/Output: [(9 1 -16 -31) -31]
Test Case: 973 | Input/Output: [(-27 14 92 -32) -32]
Test Case: 974 | Input/Output: [(-37 11 -58 -9) -58]
Test Case: 975 | Input/Output: [(89 9 26 -51) -51]
Test Case: 976 | Input/Output: [(-25 -91 10 55) -91]
Test Case: 977 | Input/Output: [(-81 42 80 -77) -81]
Test Case: 978 | Input/Output: [(96 -76 46 -27) -76]
Test Case: 979 | Input/Output: [(-81 -82 -78 -77) -82]
Test Case: 980 | Input/Output: [(83 29 0 9) 0]
Test Case: 981 | Input/Output: [(94 91 98 45) 45]
Test Case: 982 | Input/Output: [(-35 4 -95 55) -95]
Test Case: 983 | Input/Output: [(17 23 34 28) 17]
Test Case: 984 | Input/Output: [(5 81 9 90) 5]
Test Case: 985 | Input/Output: [(-83 15 76 -89) -89]
Test Case: 986 | Input/Output: [(0 96 21 -59) -59]
Test Case: 987 | Input/Output: [(0 13 75 3) 0]
Test Case: 988 | Input/Output: [(91 -71 72 -30) -71]
Test Case: 989 | Input/Output: [(-65 -80 -78 57) -80]
Test Case: 990 | Input/Output: [(4 53 42 93) 4]
Test Case: 991 | Input/Output: [(-100 61 53 70) -100]
Test Case: 992 | Input/Output: [(46 84 -4 52) -4]
Test Case: 993 | Input/Output: [(70 14 -60 17) -60]
Test Case: 994 | Input/Output: [(51 -41 -71 -86) -86]
Test Case: 995 | Input/Output: [(-88 -50 3 -74) -88]
Test Case: 996 | Input/Output: [(-27 -47 -40 -13) -47]
Test Case: 997 | Input/Output: [(53 -91 28 79) -91]
Test Case: 998 | Input/Output: [(79 -86 27 -69) -86]
Test Case: 999 | Input/Output: [(71 -1 39 -36) -36]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 62 64 -13 -17 -61 -117 120 -67 100 -47 -96 -43 90 3 102 -71
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[58 -73 58 58] -73] [[-82 -82 -4 -82] -82] [[82 53 82 82] 53] [[-28 -29 -28 -28] -29] [[87 -77 87 87] -77] [[43 43 2 43] 2] [[-10 -10 -10 74] -10] [[38 79 79 79] 38] [[83 83 58 83] 58] [[0 0 0 28] 0] [(-73 -73 -73 -73) -73] [(-69 -69 -69 -69) -69] [(-83 -83 -83 -83) -83] [(-65 -65 -65 -65) -65] [(67 67 67 67) 67] [(43 38 30 75) 30] [(85 31 25 1) 1] [(14 55 65 34) 14] [(57 68 7 82) 7] [(86 72 53 62) 53] [(14 85 62 76) 14] [(95 16 76 51) 16] [(63 24 78 28) 24] [(11 19 90 23) 11] [(59 55 66 34) 34] [(62 21 52 10) 10] [(60 79 52 40) 40] [(25 24 42 97) 24] [(17 16 75 8) 8] [(5 39 81 14) 5] [(70 68 93 44) 44] [(52 44 21 28) 21] [(86 11 19 73) 11] [(20 87 92 40) 20] [(41 67 49 25) 25] [(70 23 -91 -98) -98] [(26 -93 -36 63) -93] [(17 66 28 -17) -17] [(-15 70 -89 2) -89] [(44 1 -83 94) -83] [(52 43 -56 -32) -56] [(-81 65 -69 34) -81] [(-71 -94 -7 56) -94] [(-50 -11 92 -34) -50] [(20 34 3 -10) -10] [(7 -13 -68 93) -68] [(45 68 34 36) 34] [(29 28 53 -38) -38] [(-16 -1 73 -5) -16] [(65 -14 14 33) -14] [(-61 -10 -26 96) -61] [(-56 32 3 -99) -99] [(90 93 -19 52) -19] [(24 -23 47 45) -23] [(-58 -98 5 85) -98] [(0 -52 100 100) -52] [(68 -64 47 -90) -90] [(-7 7 60 40) -7] [(50 16 -95 -61) -95] [(75 -39 -34 30) -39] [(-18 40 -90 77) -90] [(84 68 -55 59) -55] [(29 -10 -29 -91) -91] [(-38 -79 -46 -69) -79] [(30 -99 57 89) -99] [(-22 73 48 58) -22] [(37 -59 -57 35) -59] [(-76 10 37 -51) -76] [(-89 -49 97 52) -89] [(87 98 -52 1) -52] [(-62 -52 33 -98) -98] [(63 12 -29 -74) -74] [(-94 -85 -60 89) -94] [(-32 -26 4 -51) -51] [(-14 42 85 51) -14] [(-62 -77 -17 -63) -77] [(-62 -34 -98 -57) -98] [(56 -100 -3 24) -100] [(-62 -40 89 100) -62] [(-70 -11 -55 -75) -75] [(86 -15 -56 33) -56] [(-81 56 -83 -68) -83] [(-94 -60 86 -76) -94] [(81 26 11 -76) -76] [(-42 19 76 91) -42] [(-80 -20 -97 80) -97] [(-96 -15 9 -37) -96] [(-67 4 60 62) -67] [(-87 -80 -5 31) -87] [(100 6 -47 21) -47] [(100 -90 -69 99) -90] [(-81 -85 5 -81) -85] [(6 -1 -43 -95) -95] [(-99 20 99 95) -99] [(49 48 33 35) 33])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 82                 
Correct output: -29                 | Program output: -28                
Correct output: -77                 | Program output: 87                 
Correct output: 2                   | Program output: 43                 
Correct output: -10                 | Program output: 74                 
Correct output: 38                  | Program output: 79                 
Correct output: 58                  | Program output: 83                 
Correct output: 0                   | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 34                 
Correct output: 7                   | Program output: 82                 
Correct output: 53                  | Program output: 62                 
Correct output: 14                  | Program output: 76                 
Correct output: 16                  | Program output: 51                 
Correct output: 24                  | Program output: 28                 
Correct output: 11                  | Program output: 23                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 24                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 5                   | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 28                 
Correct output: 11                  | Program output: 73                 
Correct output: 20                  | Program output: 40                 
Correct output: 25                  | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: 63                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: 2                  
Correct output: -83                 | Program output: 94                 
Correct output: -56                 | Program output: -32                
Correct output: -81                 | Program output: 34                 
Correct output: -94                 | Program output: 56                 
Correct output: -50                 | Program output: -34                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: 93                 
Correct output: 34                  | Program output: 36                 
Correct output: -38                 | Program output: -38                
Correct output: -16                 | Program output: -5                 
Correct output: -14                 | Program output: 33                 
Correct output: -61                 | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: 52                 
Correct output: -23                 | Program output: 45                 
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -7                  | Program output: 40                 
Correct output: -95                 | Program output: -61                
Correct output: -39                 | Program output: 30                 
Correct output: -90                 | Program output: 77                 
Correct output: -55                 | Program output: 59                 
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -69                
Correct output: -99                 | Program output: 89                 
Correct output: -22                 | Program output: 58                 
Correct output: -59                 | Program output: 35                 
Correct output: -76                 | Program output: -51                
Correct output: -89                 | Program output: 52                 
Correct output: -52                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 89                 
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 51                 
Correct output: -77                 | Program output: -63                
Correct output: -98                 | Program output: -57                
Correct output: -100                | Program output: 24                 
Correct output: -62                 | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: 33                 
Correct output: -83                 | Program output: -68                
Correct output: -94                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: 91                 
Correct output: -97                 | Program output: 80                 
Correct output: -96                 | Program output: -37                
Correct output: -67                 | Program output: 62                 
Correct output: -87                 | Program output: 31                 
Correct output: -47                 | Program output: 21                 
Correct output: -90                 | Program output: 99                 
Correct output: -85                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 95                 
Correct output: 33                  | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) (exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub integer_rot integer_sub integer_dup_items print_boolean) (exec_do*count (boolean_rot boolean_empty exec_while (exec_dup_items integer_gte exec_dup (in4) integer_dup_times boolean_invert_first_then_and) exec_dup_times (in4 boolean_and exec_dup (print_integer exec_do*times (exec_noop integer_eq exec_yankdup exec_if (integer_sub exec_flush boolean_rot boolean_stackdepth exec_y_when_autoconstructing (integer_inc exec_k_when_autoconstructing () (integer_lte exec_yankdup integer_lt integer_add) exec_do*range (exec_s_when_autoconstructing (print_integer exec_yank integer_gte exec_y_when_autoconstructing (boolean_xor boolean_pop integer_min exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (boolean_xor) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) () ()))) ()))))))))) ())
Lexicase best errors: [1 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 127
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) (exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub integer_rot integer_sub integer_dup_items print_boolean) (exec_do*count (boolean_rot boolean_empty exec_while (exec_dup_items integer_gte exec_dup (in4) integer_dup_times boolean_invert_first_then_and) exec_dup_times (in4 boolean_and exec_dup (print_integer exec_do*times (exec_noop integer_eq exec_yankdup exec_if (integer_sub exec_flush boolean_rot boolean_stackdepth exec_y_when_autoconstructing (integer_inc exec_k_when_autoconstructing () (integer_lte exec_yankdup integer_lt integer_add) exec_do*range (exec_s_when_autoconstructing (print_integer exec_yank integer_gte exec_y_when_autoconstructing (boolean_xor boolean_pop integer_min exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (boolean_xor) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) () ()))) ()))))))))) ())
Zero cases best errors: [1 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 127
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 3 2 4 11 2 3 3 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 2 3 2 4 11 2 3 3 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*while})
Best program: (exec_rot (exec_while () boolean_not exec_yank integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup integer_rot boolean_pop integer_dec exec_k (exec_flush exec_do*while ()) ())) ())
Errors: [1 0 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 40
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 9.965
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.997 0.998 0.996 0.989 0.998 0.997 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.839
Average program size in population (points): 71.254
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 458833
--- Timings ---
Current time: 1559314476470 milliseconds
Total Time:           2.3 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.9 seconds, 37.3%
Fitness Testing:      1.3 seconds, 58.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 53                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 79                 
Correct output: 58                  | Program output: 83                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 38                 
Correct output: 1                   | Program output: 31                 
Correct output: 14                  | Program output: 55                 
Correct output: 7                   | Program output: 68                 
Correct output: 53                  | Program output: 72                 
Correct output: 14                  | Program output: 85                 
Correct output: 16                  | Program output: 16                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 19                 
Correct output: 34                  | Program output: 55                 
Correct output: 10                  | Program output: 21                 
Correct output: 40                  | Program output: 79                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 16                 
Correct output: 5                   | Program output: 39                 
Correct output: 44                  | Program output: 68                 
Correct output: 21                  | Program output: 44                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 87                 
Correct output: 25                  | Program output: 67                 
Correct output: -98                 | Program output: 23                 
Correct output: -93                 | Program output: -93                
Correct output: -17                 | Program output: 66                 
Correct output: -89                 | Program output: 70                 
Correct output: -83                 | Program output: 1                  
Correct output: -56                 | Program output: 43                 
Correct output: -81                 | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -11                
Correct output: -10                 | Program output: 34                 
Correct output: -68                 | Program output: -13                
Correct output: 34                  | Program output: 68                 
Correct output: -38                 | Program output: 28                 
Correct output: -16                 | Program output: -1                 
Correct output: -14                 | Program output: -14                
Correct output: -61                 | Program output: -10                
Correct output: -99                 | Program output: 32                 
Correct output: -19                 | Program output: 93                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -64                
Correct output: -7                  | Program output: 7                  
Correct output: -95                 | Program output: 16                 
Correct output: -39                 | Program output: -39                
Correct output: -90                 | Program output: 40                 
Correct output: -55                 | Program output: 68                 
Correct output: -91                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: 10                 
Correct output: -89                 | Program output: -49                
Correct output: -52                 | Program output: 98                 
Correct output: -98                 | Program output: -52                
Correct output: -74                 | Program output: 12                 
Correct output: -94                 | Program output: -85                
Correct output: -51                 | Program output: -26                
Correct output: -14                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -40                
Correct output: -75                 | Program output: -11                
Correct output: -56                 | Program output: -15                
Correct output: -83                 | Program output: 56                 
Correct output: -94                 | Program output: -60                
Correct output: -76                 | Program output: 26                 
Correct output: -42                 | Program output: 19                 
Correct output: -97                 | Program output: -20                
Correct output: -96                 | Program output: -15                
Correct output: -67                 | Program output: 4                  
Correct output: -87                 | Program output: -80                
Correct output: -47                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -95                 | Program output: -1                 
Correct output: -99                 | Program output: 20                 
Correct output: 33                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 boolean_invert_second_then_and print_integer boolean_yankdup exec_k_when_autoconstructing () (integer_mult) integer_min exec_flush integer_max exec_when (integer_max) boolean_dup exec_k_when_autoconstructing (integer_max boolean_dup_items in3 exec_k (integer_sub) (integer_add)) (integer_min boolean_flush boolean_swap integer_eq integer_dup_times boolean_and boolean_frominteger exec_if () (exec_dup_times (exec_when (boolean_pop integer_rot) boolean_dup exec_when (print_integer) integer_min exec_while (exec_s (boolean_yank) (boolean_frominteger) (exec_dup_times (integer_stackdepth) print_exec (boolean_dup_items in3 integer_lt exec_flush) integer_shove exec_y (boolean_or boolean_eq integer_lte exec_y_when_autoconstructing (boolean_or exec_do*times (exec_empty boolean_dup_items integer_gte integer_yankdup print_exec (exec_dup_times (boolean_pop) boolean_frominteger integer_flush exec_empty exec_do*range ()))))))))))
Lexicase best errors: [0 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 91
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 boolean_invert_second_then_and print_integer boolean_yankdup exec_k_when_autoconstructing () (integer_mult) integer_min exec_flush integer_max exec_when (integer_max) boolean_dup exec_k_when_autoconstructing (integer_max boolean_dup_items in3 exec_k (integer_sub) (integer_add)) (integer_min boolean_flush boolean_swap integer_eq integer_dup_times boolean_and boolean_frominteger exec_if () (exec_dup_times (exec_when (boolean_pop integer_rot) boolean_dup exec_when (print_integer) integer_min exec_while (exec_s (boolean_yank) (boolean_frominteger) (exec_dup_times (integer_stackdepth) print_exec (boolean_dup_items in3 integer_lt exec_flush) integer_shove exec_y (boolean_or boolean_eq integer_lte exec_y_when_autoconstructing (boolean_or exec_do*times (exec_empty boolean_dup_items integer_gte integer_yankdup print_exec (exec_dup_times (boolean_pop) boolean_frominteger integer_flush exec_empty exec_do*range ()))))))))))
Zero cases best errors: [0 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 91
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 160 190 394 160 390 191 184 740 160)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (160 160 190 394 160 390 191 184 740 160)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 2, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 boolean_invert_second_then_and print_integer boolean_yankdup exec_k_when_autoconstructing () (integer_mult) integer_min exec_flush integer_max exec_when (integer_max) boolean_dup exec_k_when_autoconstructing (integer_max boolean_dup_items in3 exec_k (integer_sub) (integer_add)) (integer_min boolean_flush boolean_swap integer_eq integer_dup_times boolean_and boolean_frominteger exec_if () (exec_dup_times () exec_when (boolean_pop integer_rot) boolean_dup exec_when (print_integer)) integer_min exec_while (exec_s (boolean_yank) (boolean_frominteger) (exec_dup_times (integer_stackdepth) print_exec (boolean_dup_items in3 integer_lt exec_flush) integer_shove exec_y (boolean_or boolean_eq integer_lte exec_y_when_autoconstructing (boolean_or exec_do*times (exec_empty boolean_dup_items integer_gte integer_yankdup print_exec (exec_dup_times (boolean_pop) boolean_frominteger integer_flush exec_empty exec_do*range ()))))))))
Errors: [0 0 1 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 66
Size: 91
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.271
Median total errors in population: 7
Error averages by case: (0.84 0.84 0.81 0.606 0.84 0.61 0.809 0.816 0.26 0.84)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.613
Average program size in population (points): 86.113
Average percent parens in population: 0.315
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.518
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1017088
--- Timings ---
Current time: 1559314478970 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.4 seconds, 48.4%
Fitness Testing:      2.0 seconds, 40.1%
Report:               0.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 82                 
Correct output: -29                 | Program output: -28                
Correct output: -77                 | Program output: 87                 
Correct output: 2                   | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 38                 
Correct output: 58                  | Program output: 83                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 43                 
Correct output: 1                   | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 57                 
Correct output: 53                  | Program output: 86                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 95                 
Correct output: 24                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 34                  | Program output: 59                 
Correct output: 10                  | Program output: 62                 
Correct output: 40                  | Program output: 60                 
Correct output: 24                  | Program output: 25                 
Correct output: 8                   | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 70                 
Correct output: 21                  | Program output: 52                 
Correct output: 11                  | Program output: 86                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 41                 
Correct output: -98                 | Program output: 70                 
Correct output: -93                 | Program output: 26                 
Correct output: -17                 | Program output: 17                 
Correct output: -89                 | Program output: -15                
Correct output: -83                 | Program output: 44                 
Correct output: -56                 | Program output: 52                 
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -10                 | Program output: 20                 
Correct output: -68                 | Program output: 7                  
Correct output: 34                  | Program output: 45                 
Correct output: -38                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: -14                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -56                
Correct output: -19                 | Program output: 90                 
Correct output: -23                 | Program output: 24                 
Correct output: -98                 | Program output: -58                
Correct output: -52                 | Program output: 0                  
Correct output: -90                 | Program output: 68                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: 50                 
Correct output: -39                 | Program output: 75                 
Correct output: -90                 | Program output: -18                
Correct output: -55                 | Program output: 84                 
Correct output: -91                 | Program output: 29                 
Correct output: -79                 | Program output: -38                
Correct output: -99                 | Program output: 30                 
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: 87                 
Correct output: -98                 | Program output: -62                
Correct output: -74                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -51                 | Program output: -32                
Correct output: -14                 | Program output: -14                
Correct output: -77                 | Program output: -62                
Correct output: -98                 | Program output: -62                
Correct output: -100                | Program output: 56                 
Correct output: -62                 | Program output: -62                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: 86                 
Correct output: -83                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 81                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 100                
Correct output: -90                 | Program output: 100                
Correct output: -85                 | Program output: -81                
Correct output: -95                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: 33                  | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 2, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_372} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div})
Lexicase best program: (exec_rot () (exec_k (integer_add) () print_integer tagged_372) (integer_lte in1) exec_dup_items boolean_dup_items exec_s_when_autoconstructing (exec_while (integer_div)) () ())
Lexicase best errors: [1 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 22
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 2, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_372} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div})
Zero cases best program: (exec_rot () (exec_k (integer_add) () print_integer tagged_372) (integer_lte in1) exec_dup_items boolean_dup_items exec_s_when_autoconstructing (exec_while (integer_div)) () ())
Zero cases best errors: [1 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 22
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 1000 146 268 149 1000 268 193 142 268)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (398 0 146 268 149 0 268 193 142 268)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_372} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div})
Best program: (exec_rot () (exec_swap (integer_add) () print_integer tagged_372) (integer_lte in1) exec_dup_items boolean_dup_items exec_s_when_autoconstructing (exec_while (integer_div)) () ())
Errors: [1 1 0 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 22
Percent parens: 0.455
--- Population Statistics ---
Average total errors in population: 8.168
Median total errors in population: 9
Error averages by case: (0.602 1.0 0.854 0.732 0.851 1.0 0.732 0.807 0.858 0.732)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 66.0
Average program size in population (points): 92.506
Average percent parens in population: 0.303
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.026
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1517009
--- Timings ---
Current time: 1559314481892 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.5 seconds, 57.5%
Fitness Testing:      2.5 seconds, 31.8%
Report:               0.7 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 82                 
Correct output: -29                 | Program output: -28                
Correct output: -77                 | Program output: 87                 
Correct output: 2                   | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 38                 
Correct output: 58                  | Program output: 83                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 43                 
Correct output: 1                   | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 57                 
Correct output: 53                  | Program output: 86                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 95                 
Correct output: 24                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 34                  | Program output: 59                 
Correct output: 10                  | Program output: 62                 
Correct output: 40                  | Program output: 60                 
Correct output: 24                  | Program output: 25                 
Correct output: 8                   | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 70                 
Correct output: 21                  | Program output: 52                 
Correct output: 11                  | Program output: 86                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 41                 
Correct output: -98                 | Program output: 70                 
Correct output: -93                 | Program output: 26                 
Correct output: -17                 | Program output: 17                 
Correct output: -89                 | Program output: -15                
Correct output: -83                 | Program output: 44                 
Correct output: -56                 | Program output: 52                 
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -10                 | Program output: 20                 
Correct output: -68                 | Program output: 7                  
Correct output: 34                  | Program output: 45                 
Correct output: -38                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: -14                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -56                
Correct output: -19                 | Program output: 90                 
Correct output: -23                 | Program output: 24                 
Correct output: -98                 | Program output: -58                
Correct output: -52                 | Program output: 0                  
Correct output: -90                 | Program output: 68                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: 50                 
Correct output: -39                 | Program output: 75                 
Correct output: -90                 | Program output: -18                
Correct output: -55                 | Program output: 84                 
Correct output: -91                 | Program output: 29                 
Correct output: -79                 | Program output: -38                
Correct output: -99                 | Program output: 30                 
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: 87                 
Correct output: -98                 | Program output: -62                
Correct output: -74                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -51                 | Program output: -32                
Correct output: -14                 | Program output: -14                
Correct output: -77                 | Program output: -62                
Correct output: -98                 | Program output: -62                
Correct output: -100                | Program output: 56                 
Correct output: -62                 | Program output: -62                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: 86                 
Correct output: -83                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 81                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 100                
Correct output: -90                 | Program output: 100                
Correct output: -85                 | Program output: -81                
Correct output: -95                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: 33                  | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_97} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction -52} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_747} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times})
Lexicase best program: (exec_yankdup in2 boolean_invert_second_then_and print_integer boolean_yankdup exec_k_when_autoconstructing () (integer_mult) integer_min exec_flush integer_max exec_when (integer_max) boolean_dup exec_k_when_autoconstructing (integer_max boolean_dup_items in3 exec_k (integer_sub) (integer_add)) (integer_min boolean_flush exec_dup (print_integer exec_do*times (exec_noop integer_eq exec_yankdup exec_if (integer_sub exec_flush boolean_rot boolean_stackdepth exec_y_when_autoconstructing (integer_inc exec_k_when_autoconstructing () (integer_lte exec_yankdup integer_lt integer_add) exec_do*range (exec_s_when_autoconstructing (print_integer exec_yank integer_gte exec_y_when_autoconstructing (boolean_xor boolean_pop integer_min exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (boolean_xor) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot boolean_yank exec_empty boolean_frominteger print_exec (exec_rot (boolean_and exec_do*count (tag_boolean_97 exec_k (boolean_frominteger exec_empty boolean_eq integer_stackdepth integer_gte -52 integer_shove exec_dup_times (exec_dup (in1 exec_when (integer_inc) boolean_stackdepth boolean_invert_second_then_and) exec_y_when_autoconstructing () exec_shove (boolean_pop) integer_lt boolean_dup exec_noop) integer_fromboolean) (exec_do*while (tagged_747) exec_do*count (integer_dup_times)))) () ()))))) () ())) () ()))) ()))))
Lexicase best errors: [1 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 147
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_97} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction -52} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_747} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times})
Zero cases best program: (exec_yankdup in2 boolean_invert_second_then_and print_integer boolean_yankdup exec_k_when_autoconstructing () (integer_mult) integer_min exec_flush integer_max exec_when (integer_max) boolean_dup exec_k_when_autoconstructing (integer_max boolean_dup_items in3 exec_k (integer_sub) (integer_add)) (integer_min boolean_flush exec_dup (print_integer exec_do*times (exec_noop integer_eq exec_yankdup exec_if (integer_sub exec_flush boolean_rot boolean_stackdepth exec_y_when_autoconstructing (integer_inc exec_k_when_autoconstructing () (integer_lte exec_yankdup integer_lt integer_add) exec_do*range (exec_s_when_autoconstructing (print_integer exec_yank integer_gte exec_y_when_autoconstructing (boolean_xor boolean_pop integer_min exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (boolean_xor) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot boolean_yank exec_empty boolean_frominteger print_exec (exec_rot (boolean_and exec_do*count (tag_boolean_97 exec_k (boolean_frominteger exec_empty boolean_eq integer_stackdepth integer_gte -52 integer_shove exec_dup_times (exec_dup (in1 exec_when (integer_inc) boolean_stackdepth boolean_invert_second_then_and) exec_y_when_autoconstructing () exec_shove (boolean_pop) integer_lt boolean_dup exec_noop) integer_fromboolean) (exec_do*while (tagged_747) exec_do*count (integer_dup_times)))) () ()))))) () ())) () ()))) ()))))
Zero cases best errors: [1 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 147
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (258 1000 100 818 818 455 267 1000 1000 98)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (258 0 100 818 818 455 267 0 0 98)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction exec_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction tagged_722} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_dup_times})
Best program: (exec_rot (exec_while () boolean_not exec_yank integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () exec_dup_times ()) boolean_xor) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup integer_rot boolean_pop print_integer integer_rot exec_yankdup) (integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (boolean_eq) (integer_add tag_exec_246 () exec_eq boolean_and integer_gt) exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (exec_if (integer_yankdup) (in1 in2 exec_yankdup boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop exec_yankdup integer_min) integer_yank) boolean_invert_second_then_and boolean_xor boolean_invert_second_then_and exec_do*while (exec_while (boolean_flush) exec_do*range (exec_dup_items exec_flush tagged_722) exec_dup_items exec_do*range ()) exec_noop exec_noop boolean_yank exec_do*while (integer_gte exec_yank boolean_or) integer_add integer_fromboolean boolean_rot) (integer_dup_times boolean_shove boolean_and integer_dec boolean_stackdepth exec_yankdup integer_add) boolean_pop integer_max boolean_dup integer_max boolean_pop integer_gt) () exec_dup_times ()))) () ())) ())
Errors: [0 1 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 98
Size: 139
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 7.186
Median total errors in population: 7
Error averages by case: (0.742 1.0 0.9 0.182 0.182 0.545 0.733 1.0 1.0 0.902)
Error minima by case: (0 1 0 0 0 0 0 1 1 0)
Average genome size in population (length): 58.817
Average program size in population (points): 83.888
Average percent parens in population: 0.330
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.524
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2139489
--- Timings ---
Current time: 1559314485288 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.4 seconds, 60.3%
Fitness Testing:      3.1 seconds, 29.1%
Report:               1.0 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 53                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 38                 
Correct output: 58                  | Program output: 83                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 38                 
Correct output: 1                   | Program output: 31                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 57                 
Correct output: 53                  | Program output: 72                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 34                  | Program output: 55                 
Correct output: 10                  | Program output: 21                 
Correct output: 40                  | Program output: 60                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 68                 
Correct output: 21                  | Program output: 44                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 41                 
Correct output: -98                 | Program output: 23                 
Correct output: -93                 | Program output: -93                
Correct output: -17                 | Program output: 17                 
Correct output: -89                 | Program output: -15                
Correct output: -83                 | Program output: 1                  
Correct output: -56                 | Program output: 43                 
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -10                 | Program output: 20                 
Correct output: -68                 | Program output: -13                
Correct output: 34                  | Program output: 45                 
Correct output: -38                 | Program output: 28                 
Correct output: -16                 | Program output: -16                
Correct output: -14                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -56                
Correct output: -19                 | Program output: 90                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -64                
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: 16                 
Correct output: -39                 | Program output: -39                
Correct output: -90                 | Program output: -18                
Correct output: -55                 | Program output: 68                 
Correct output: -91                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: 87                 
Correct output: -98                 | Program output: -62                
Correct output: -74                 | Program output: 12                 
Correct output: -94                 | Program output: -94                
Correct output: -51                 | Program output: -32                
Correct output: -14                 | Program output: -14                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -15                
Correct output: -83                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 26                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -95                 | Program output: -1                 
Correct output: -99                 | Program output: -99                
Correct output: 33                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction tagged_722} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_dup_times})
Lexicase best program: (exec_rot (exec_while () boolean_not exec_yank integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup integer_rot boolean_pop print_integer integer_rot exec_yankdup) integer_gt) (in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 exec_yankdup boolean_pop exec_if () (print_integer exec_if () (integer_flush) boolean_frominteger integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop exec_yankdup integer_min) integer_yank) boolean_invert_second_then_and boolean_xor boolean_invert_second_then_and exec_do*while (exec_while (boolean_flush) exec_do*range (exec_dup_items exec_flush tagged_722) exec_dup_items exec_do*range ()) exec_noop exec_noop boolean_yank integer_yank integer_gte exec_yank boolean_or) (integer_add integer_fromboolean boolean_rot) boolean_and boolean_shove boolean_and integer_dec boolean_stackdepth exec_yankdup integer_add) boolean_pop integer_max boolean_dup integer_max boolean_pop integer_gt) () exec_dup_times ()))))
Lexicase best errors: [0 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 129
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction tagged_722} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_dup_times})
Zero cases best program: (exec_rot (exec_while () boolean_not exec_yank integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup integer_rot boolean_pop print_integer integer_rot exec_yankdup) integer_gt) (in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 exec_yankdup boolean_pop exec_if () (print_integer exec_if () (integer_flush) boolean_frominteger integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop exec_yankdup integer_min) integer_yank) boolean_invert_second_then_and boolean_xor boolean_invert_second_then_and exec_do*while (exec_while (boolean_flush) exec_do*range (exec_dup_items exec_flush tagged_722) exec_dup_items exec_do*range ()) exec_noop exec_noop boolean_yank integer_yank integer_gte exec_yank boolean_or) (integer_add integer_fromboolean boolean_rot) boolean_and boolean_shove boolean_and integer_dec boolean_stackdepth exec_yankdup integer_add) boolean_pop integer_max boolean_dup integer_max boolean_pop integer_gt) () exec_dup_times ()))))
Zero cases best errors: [0 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 129
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 393 278 812 1000 517 517 191 393 53)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (189 393 278 812 0 517 517 191 393 53)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_585} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Best program: (exec_rot (exec_while () boolean_not exec_yank integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup integer_rot boolean_pop print_integer integer_rot exec_yankdup) integer_gt) (in1 exec_do*range (tagged_585 exec_rot (integer_div 74 boolean_not) (boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop exec_yankdup integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ())) ())))))
Errors: [1 0 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 85
Size: 131
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 6.657
Median total errors in population: 6
Error averages by case: (0.811 0.607 0.722 0.188 1.0 0.483 0.483 0.809 0.607 0.947)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 70.987
Average program size in population (points): 100.753
Average percent parens in population: 0.313
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.887375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2896252
--- Timings ---
Current time: 1559314488921 milliseconds
Total Time:          14.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.4 seconds, 59.2%
Fitness Testing:      3.8 seconds, 26.6%
Report:               1.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 82                 
Correct output: -29                 | Program output: -28                
Correct output: -77                 | Program output: 87                 
Correct output: 2                   | Program output: 2                  
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 38                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 25                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 53                  | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 76                 
Correct output: 24                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 34                  | Program output: 59                 
Correct output: 10                  | Program output: 52                 
Correct output: 40                  | Program output: 52                 
Correct output: 24                  | Program output: 25                 
Correct output: 8                   | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 70                 
Correct output: 21                  | Program output: 21                 
Correct output: 11                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 41                 
Correct output: -98                 | Program output: -91                
Correct output: -93                 | Program output: -36                
Correct output: -17                 | Program output: 17                 
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -10                 | Program output: 3                  
Correct output: -68                 | Program output: -68                
Correct output: 34                  | Program output: 34                 
Correct output: -38                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: -14                 | Program output: 14                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -56                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 24                 
Correct output: -98                 | Program output: -58                
Correct output: -52                 | Program output: 0                  
Correct output: -90                 | Program output: 47                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -29                
Correct output: -79                 | Program output: -46                
Correct output: -99                 | Program output: 30                 
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -62                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -51                 | Program output: -32                
Correct output: -14                 | Program output: -14                
Correct output: -77                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -69                
Correct output: -85                 | Program output: -81                
Correct output: -95                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: 33                  | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) (exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub) (integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (boolean_eq) (integer_add tag_exec_246 () exec_rot (integer_div 74 boolean_not) (boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in3 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ())) ()))))))) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 139
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) (exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub) (integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (boolean_eq) (integer_add tag_exec_246 () exec_rot (integer_div 74 boolean_not) (boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in3 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ())) ()))))))) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 139
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 380 401 367 2 739 2 2 766 23)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (2 380 401 367 2 739 2 2 766 23)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) (exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub) (integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (boolean_eq) (integer_add tag_exec_246 () exec_rot (integer_div 74 boolean_not) (boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in3 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ())) ()))))))) ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 90
Size: 139
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.316
Median total errors in population: 8
Error averages by case: (0.998 0.62 0.599 0.633 0.998 0.261 0.998 0.998 0.234 0.977)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.514
Average program size in population (points): 132.055
Average percent parens in population: 0.307
Minimum age in population: 5.875
Maximum age in population: 8.8125
Average age in population: 7.3843125
Median age in population: 7.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4219711
--- Timings ---
Current time: 1559314492992 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.2 seconds, 56.3%
Fitness Testing:      4.9 seconds, 26.9%
Report:               3.0 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 82                 
Correct output: -29                 | Program output: -28                
Correct output: -77                 | Program output: 87                 
Correct output: 2                   | Program output: 2                  
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 38                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 25                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 53                  | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 76                 
Correct output: 24                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 34                  | Program output: 59                 
Correct output: 10                  | Program output: 52                 
Correct output: 40                  | Program output: 52                 
Correct output: 24                  | Program output: 25                 
Correct output: 8                   | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 70                 
Correct output: 21                  | Program output: 21                 
Correct output: 11                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 41                 
Correct output: -98                 | Program output: -91                
Correct output: -93                 | Program output: -36                
Correct output: -17                 | Program output: 17                 
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -10                 | Program output: 3                  
Correct output: -68                 | Program output: -68                
Correct output: 34                  | Program output: 34                 
Correct output: -38                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: -14                 | Program output: 14                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -56                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 24                 
Correct output: -98                 | Program output: -58                
Correct output: -52                 | Program output: 0                  
Correct output: -90                 | Program output: 47                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -29                
Correct output: -79                 | Program output: -46                
Correct output: -99                 | Program output: 30                 
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -62                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -51                 | Program output: -32                
Correct output: -14                 | Program output: -14                
Correct output: -77                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -69                
Correct output: -85                 | Program output: -81                
Correct output: -95                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: 33                  | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) (exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub) (integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (boolean_eq) (integer_add tag_exec_246 () exec_rot (integer_div 74 boolean_not) (boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in3 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ())) ()))))))) ())
Lexicase best errors: [1 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 139
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) (exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub) (integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (boolean_eq) (integer_add tag_exec_246 () exec_rot (integer_div 74 boolean_not) (boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in3 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ())) ()))))))) ())
Zero cases best errors: [1 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 139
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (23 563 25 541 273 565 27 809 563 840)
Population mean number of elite cases: 4.23
Count of perfect (error zero) individuals by case: (23 563 25 541 273 565 27 809 563 840)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) (exec_when (integer_dup exec_k_when_autoconstructing () (exec_noop integer_sub) integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not boolean_eq) (integer_add tag_exec_246 () exec_rot (integer_div 74 boolean_not) (boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in3 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range (exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items) integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ())) ()))) ()))) ())
Errors: [1 0 1 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 90
Size: 139
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 5.771
Median total errors in population: 4
Error averages by case: (0.977 0.437 0.975 0.459 0.727 0.435 0.973 0.191 0.437 0.16)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.728
Average program size in population (points): 134.114
Average percent parens in population: 0.345
Minimum age in population: 8.375
Maximum age in population: 9.75
Average age in population: 9.14625
Median age in population: 9.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5551196
--- Timings ---
Current time: 1559314497090 milliseconds
Total Time:          22.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.0 seconds, 54.2%
Fitness Testing:      6.0 seconds, 27.0%
Report:               4.1 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 82                 
Correct output: -29                 | Program output: -28                
Correct output: -77                 | Program output: 87                 
Correct output: 2                   | Program output: 2                  
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 38                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 25                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 53                  | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 76                 
Correct output: 24                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 34                  | Program output: 59                 
Correct output: 10                  | Program output: 52                 
Correct output: 40                  | Program output: 52                 
Correct output: 24                  | Program output: 25                 
Correct output: 8                   | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 70                 
Correct output: 21                  | Program output: 21                 
Correct output: 11                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 41                 
Correct output: -98                 | Program output: -91                
Correct output: -93                 | Program output: -36                
Correct output: -17                 | Program output: 17                 
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -10                 | Program output: 3                  
Correct output: -68                 | Program output: -68                
Correct output: 34                  | Program output: 34                 
Correct output: -38                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: -14                 | Program output: 14                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -56                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 24                 
Correct output: -98                 | Program output: -58                
Correct output: -52                 | Program output: 0                  
Correct output: -90                 | Program output: 47                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -29                
Correct output: -79                 | Program output: -46                
Correct output: -99                 | Program output: 30                 
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -62                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -51                 | Program output: -32                
Correct output: -14                 | Program output: -14                
Correct output: -77                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -69                
Correct output: -85                 | Program output: -81                
Correct output: -95                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: 33                  | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) () exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub) (integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (boolean_eq) (integer_add tag_exec_246 () exec_rot (integer_div 74 boolean_not) (boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in3 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop in4 integer_min) exec_s (exec_noop) (boolean_eq print_boolean) (print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ()))) ()) ())) ())))))) ())
Lexicase best errors: [0 0 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 139
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) () exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub) (integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (boolean_eq) (integer_add tag_exec_246 () exec_rot (integer_div 74 boolean_not) (boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in3 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (integer_yankdup exec_noop in4 integer_min) exec_s (exec_noop) (boolean_eq print_boolean) (print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ()))) ()) ())) ())))))) ())
Zero cases best errors: [0 0 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 139
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (670 447 237 173 215 288 172 288 290 289)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (670 447 237 173 215 288 172 288 290 289)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction -59} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_246} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Best program: (exec_shove (exec_noop exec_noop -59 exec_empty integer_div boolean_dup_times integer_pop boolean_swap boolean_and) boolean_dup_times exec_swap (exec_when (exec_s_when_autoconstructing () (print_integer) (exec_when (integer_dup exec_k_when_autoconstructing (exec_noop integer_sub) (integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank exec_rot (integer_div 74 boolean_not) (boolean_eq) (integer_add tag_exec_246 () boolean_not) boolean_eq) integer_add tag_exec_246 () boolean_not) boolean_eq) exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in3 integer_min boolean_pop exec_if () (print_integer exec_if () (integer_flush) exec_if (integer_min in2 exec_y (exec_y (integer_yankdup exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ())) ())) ())
Errors: [0 0 1 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 91
Size: 136
Percent parens: 0.331
--- Population Statistics ---
Average total errors in population: 6.931
Median total errors in population: 7
Error averages by case: (0.33 0.553 0.763 0.827 0.785 0.712 0.828 0.712 0.71 0.711)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.803
Average program size in population (points): 133.142
Average percent parens in population: 0.340
Minimum age in population: 9.375
Maximum age in population: 11.75
Average age in population: 10.70415625
Median age in population: 10.65625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.007
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6912851
--- Timings ---
Current time: 1559314501113 milliseconds
Total Time:          26.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.8 seconds, 52.5%
Fitness Testing:      7.1 seconds, 27.1%
Report:               5.2 seconds, 20.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 212
Test mean error for best: 0.21200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 53                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 38                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 25                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 53                  | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 34                  | Program output: 55                 
Correct output: 10                  | Program output: 21                 
Correct output: 40                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 41                 
Correct output: -98                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -17                 | Program output: 17                 
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -68                
Correct output: 34                  | Program output: 34                 
Correct output: -38                 | Program output: 28                 
Correct output: -16                 | Program output: -16                
Correct output: -14                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -64                
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -29                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -62                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -51                 | Program output: -32                
Correct output: -14                 | Program output: -14                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -95                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: 33                  | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 132
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 132
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 434 425 251 675 251 425 125 674 426)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (174 434 425 251 675 251 425 125 674 426)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Best program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 88
Size: 132
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.14
Median total errors in population: 5
Error averages by case: (0.826 0.566 0.575 0.749 0.325 0.749 0.575 0.875 0.326 0.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.07
Average program size in population (points): 134.058
Average percent parens in population: 0.342
Minimum age in population: 10.375
Maximum age in population: 13.703125
Average age in population: 12.240234375
Median age in population: 12.3828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8256955
--- Timings ---
Current time: 1559314505227 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.6 seconds, 51.5%
Fitness Testing:      8.2 seconds, 27.1%
Report:               6.4 seconds, 21.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 212
Test mean error for best: 0.21200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 53                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 38                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 25                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 53                  | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 34                  | Program output: 55                 
Correct output: 10                  | Program output: 21                 
Correct output: 40                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 41                 
Correct output: -98                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -17                 | Program output: 17                 
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -68                
Correct output: 34                  | Program output: 34                 
Correct output: -38                 | Program output: 28                 
Correct output: -16                 | Program output: -16                
Correct output: -14                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -64                
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -29                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -62                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -51                 | Program output: -32                
Correct output: -14                 | Program output: -14                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -95                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: 33                  | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 134
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 134
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (682 684 680 712 681 636 731 631 684 685)
Population mean number of elite cases: 6.81
Count of perfect (error zero) individuals by case: (682 684 680 712 681 636 731 631 684 685)
Population mean number of perfect (error zero) cases: 6.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 2, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction 74} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_246} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Best program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 88
Size: 132
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 3.194
Median total errors in population: 0
Error averages by case: (0.318 0.316 0.32 0.288 0.319 0.364 0.269 0.369 0.316 0.315)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.369
Average program size in population (points): 131.274
Average percent parens in population: 0.334
Minimum age in population: 12.5625
Maximum age in population: 15.5625
Average age in population: 13.2955
Median age in population: 13.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 225
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.011
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9641518
--- Timings ---
Current time: 1559314509412 milliseconds
Total Time:          34.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 50.5%
Fitness Testing:      9.4 seconds, 27.2%
Report:               7.6 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 9
Successful program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 132


Auto-simplifying with starting size: 132
step: 0
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 500
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 1000
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 1500
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 2000
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 2500
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 3000
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 3500
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 4000
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 4500
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 5000
program: (in3 exec_while () boolean_not exec_yank integer_yankdup exec_s (exec_yankdup integer_yankdup) (exec_s (exec_yankdup exec_do*range (integer_lt integer_yank in4 integer_yankdup exec_dup () print_integer)) (exec_yankdup) (exec_k_when_autoconstructing (boolean_xor) () integer_eq boolean_dup exec_y (boolean_pop print_integer integer_rot exec_yankdup) integer_gt) in1 exec_do*range (exec_yank 74 boolean_not) boolean_eq) (exec_if (tag_exec_246 () exec_eq boolean_and integer_gt) (exec_pop () integer_div exec_do*while () exec_s_when_autoconstructing (integer_rot integer_yankdup) (in1 in2 integer_min in3 integer_min boolean_pop exec_if () () print_integer exec_if () (integer_flush) exec_if (integer_min exec_k (exec_y (exec_y (boolean_frominteger exec_noop in4 integer_min) exec_s (exec_noop) () (boolean_eq print_boolean) print_newline integer_yankdup exec_rot (exec_do*while (in3 exec_stackdepth exec_do*count (exec_do*range () exec_shove (integer_mod) integer_dup_times print_exec (exec_dup_items integer_sub boolean_rot exec_pop () boolean_eq integer_dup_times) integer_dup_items integer_stackdepth))) () ())) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 212
Test mean error for best: 0.21200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: 53                  | Program output: 53                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 43                 
Correct output: -10                 | Program output: -10                
Correct output: 38                  | Program output: 38                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: 67                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 25                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 53                  | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 34                  | Program output: 55                 
Correct output: 10                  | Program output: 21                 
Correct output: 40                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 41                 
Correct output: -98                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -17                 | Program output: 17                 
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -10                 | Program output: -10                
Correct output: -68                 | Program output: -68                
Correct output: 34                  | Program output: 34                 
Correct output: -38                 | Program output: 28                 
Correct output: -16                 | Program output: -16                
Correct output: -14                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -64                
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -29                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -62                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -51                 | Program output: -32                
Correct output: -14                 | Program output: -14                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -95                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: 33                  | Program output: 33                 
;;******************************
