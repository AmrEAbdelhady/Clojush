Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[4 4 4 2] 2] [[69 69 -52 69] -52] [[35 35 35 -76] -76] [[-62 41 -62 -62] -62] [[13 13 82 13] 13] [[-73 -33 -73 -73] -73] [[-5 11 11 11] -5] [[16 -46 16 16] -46] [[-50 -13 -50 -50] -50] [[85 85 -6 85] -6] [(-50 -50 -50 -50) -50] [(46 46 46 46) 46] [(7 7 7 7) 7] [(-10 -10 -10 -10) -10] [(1 1 1 1) 1] [(75 89 78 81) 75] [(87 66 32 47) 32] [(11 1 31 19) 1] [(82 80 54 38) 38] [(75 48 5 88) 5] [(2 33 52 28) 2] [(86 51 62 49) 49] [(61 37 53 98) 37] [(87 0 40 31) 0] [(91 60 42 96) 42] [(98 37 78 7) 7] [(82 33 4 67) 4] [(71 78 21 54) 21] [(87 13 39 88) 13] [(88 96 12 47) 12] [(88 32 49 88) 32] [(96 15 24 93) 15] [(42 25 50 61) 25] [(56 16 97 86) 16] [(31 81 65 10) 10] [(18 -30 -64 95) -64] [(21 32 -33 47) -33] [(-2 -72 0 -77) -77] [(52 4 -73 11) -73] [(64 -85 39 -16) -85] [(-72 82 -32 -40) -72] [(16 -83 -79 -95) -95] [(-7 -39 35 76) -39] [(50 -97 -64 -9) -97] [(100 54 -65 -2) -65] [(51 -49 100 53) -49] [(70 -33 9 -24) -33] [(92 -12 98 -34) -34] [(59 -58 22 -83) -83] [(-33 94 -63 -72) -72] [(19 79 -68 -38) -68] [(75 80 -37 -23) -37] [(-73 -72 52 -53) -73] [(-16 92 -100 -8) -100] [(-31 -84 -57 -44) -84] [(-20 -8 61 -74) -74] [(-78 -62 -51 37) -78] [(-27 -80 16 39) -80] [(6 -27 69 -48) -48] [(66 -51 10 -31) -51] [(-96 10 -53 -21) -96] [(31 -22 -4 -15) -22] [(-99 -10 -93 -64) -99] [(-60 -51 -6 -7) -60] [(57 30 -99 -1) -99] [(60 -71 25 39) -71] [(14 -13 -21 65) -21] [(-49 82 34 84) -49] [(-52 73 30 -99) -99] [(0 -85 2 59) -85] [(58 -74 -76 -91) -91] [(-5 57 56 70) -5] [(-93 -5 -37 -56) -93] [(-37 -61 -99 76) -99] [(11 17 46 -1) -1] [(-93 -6 -21 34) -93] [(-98 75 -29 26) -98] [(-12 -70 46 55) -70] [(-95 14 71 24) -95] [(44 -6 88 -95) -95] [(2 -21 -32 -47) -47] [(85 -95 59 -77) -95] [(79 49 72 20) 20] [(66 55 73 -34) -34] [(-6 36 -20 17) -20] [(-14 -75 55 -95) -95] [(-94 66 18 -83) -94] [(92 92 4 -61) -61] [(-69 -94 -32 -79) -94] [(-22 24 2 -57) -57] [(-20 78 64 -56) -56] [(-39 6 -21 80) -39] [(83 -92 49 99) -92] [(54 42 -56 55) -56] [(5 92 -29 55) -29])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[4 4 4 2] 2]
Train Case:   6 | Input/Output: [[69 69 -52 69] -52]
Train Case:   7 | Input/Output: [[35 35 35 -76] -76]
Train Case:   8 | Input/Output: [[-62 41 -62 -62] -62]
Train Case:   9 | Input/Output: [[13 13 82 13] 13]
Train Case:  10 | Input/Output: [[-73 -33 -73 -73] -73]
Train Case:  11 | Input/Output: [[-5 11 11 11] -5]
Train Case:  12 | Input/Output: [[16 -46 16 16] -46]
Train Case:  13 | Input/Output: [[-50 -13 -50 -50] -50]
Train Case:  14 | Input/Output: [[85 85 -6 85] -6]
Train Case:  15 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  16 | Input/Output: [(46 46 46 46) 46]
Train Case:  17 | Input/Output: [(7 7 7 7) 7]
Train Case:  18 | Input/Output: [(-10 -10 -10 -10) -10]
Train Case:  19 | Input/Output: [(1 1 1 1) 1]
Train Case:  20 | Input/Output: [(75 89 78 81) 75]
Train Case:  21 | Input/Output: [(87 66 32 47) 32]
Train Case:  22 | Input/Output: [(11 1 31 19) 1]
Train Case:  23 | Input/Output: [(82 80 54 38) 38]
Train Case:  24 | Input/Output: [(75 48 5 88) 5]
Train Case:  25 | Input/Output: [(2 33 52 28) 2]
Train Case:  26 | Input/Output: [(86 51 62 49) 49]
Train Case:  27 | Input/Output: [(61 37 53 98) 37]
Train Case:  28 | Input/Output: [(87 0 40 31) 0]
Train Case:  29 | Input/Output: [(91 60 42 96) 42]
Train Case:  30 | Input/Output: [(98 37 78 7) 7]
Train Case:  31 | Input/Output: [(82 33 4 67) 4]
Train Case:  32 | Input/Output: [(71 78 21 54) 21]
Train Case:  33 | Input/Output: [(87 13 39 88) 13]
Train Case:  34 | Input/Output: [(88 96 12 47) 12]
Train Case:  35 | Input/Output: [(88 32 49 88) 32]
Train Case:  36 | Input/Output: [(96 15 24 93) 15]
Train Case:  37 | Input/Output: [(42 25 50 61) 25]
Train Case:  38 | Input/Output: [(56 16 97 86) 16]
Train Case:  39 | Input/Output: [(31 81 65 10) 10]
Train Case:  40 | Input/Output: [(18 -30 -64 95) -64]
Train Case:  41 | Input/Output: [(21 32 -33 47) -33]
Train Case:  42 | Input/Output: [(-2 -72 0 -77) -77]
Train Case:  43 | Input/Output: [(52 4 -73 11) -73]
Train Case:  44 | Input/Output: [(64 -85 39 -16) -85]
Train Case:  45 | Input/Output: [(-72 82 -32 -40) -72]
Train Case:  46 | Input/Output: [(16 -83 -79 -95) -95]
Train Case:  47 | Input/Output: [(-7 -39 35 76) -39]
Train Case:  48 | Input/Output: [(50 -97 -64 -9) -97]
Train Case:  49 | Input/Output: [(100 54 -65 -2) -65]
Train Case:  50 | Input/Output: [(51 -49 100 53) -49]
Train Case:  51 | Input/Output: [(70 -33 9 -24) -33]
Train Case:  52 | Input/Output: [(92 -12 98 -34) -34]
Train Case:  53 | Input/Output: [(59 -58 22 -83) -83]
Train Case:  54 | Input/Output: [(-33 94 -63 -72) -72]
Train Case:  55 | Input/Output: [(19 79 -68 -38) -68]
Train Case:  56 | Input/Output: [(75 80 -37 -23) -37]
Train Case:  57 | Input/Output: [(-73 -72 52 -53) -73]
Train Case:  58 | Input/Output: [(-16 92 -100 -8) -100]
Train Case:  59 | Input/Output: [(-31 -84 -57 -44) -84]
Train Case:  60 | Input/Output: [(-20 -8 61 -74) -74]
Train Case:  61 | Input/Output: [(-78 -62 -51 37) -78]
Train Case:  62 | Input/Output: [(-27 -80 16 39) -80]
Train Case:  63 | Input/Output: [(6 -27 69 -48) -48]
Train Case:  64 | Input/Output: [(66 -51 10 -31) -51]
Train Case:  65 | Input/Output: [(-96 10 -53 -21) -96]
Train Case:  66 | Input/Output: [(31 -22 -4 -15) -22]
Train Case:  67 | Input/Output: [(-99 -10 -93 -64) -99]
Train Case:  68 | Input/Output: [(-60 -51 -6 -7) -60]
Train Case:  69 | Input/Output: [(57 30 -99 -1) -99]
Train Case:  70 | Input/Output: [(60 -71 25 39) -71]
Train Case:  71 | Input/Output: [(14 -13 -21 65) -21]
Train Case:  72 | Input/Output: [(-49 82 34 84) -49]
Train Case:  73 | Input/Output: [(-52 73 30 -99) -99]
Train Case:  74 | Input/Output: [(0 -85 2 59) -85]
Train Case:  75 | Input/Output: [(58 -74 -76 -91) -91]
Train Case:  76 | Input/Output: [(-5 57 56 70) -5]
Train Case:  77 | Input/Output: [(-93 -5 -37 -56) -93]
Train Case:  78 | Input/Output: [(-37 -61 -99 76) -99]
Train Case:  79 | Input/Output: [(11 17 46 -1) -1]
Train Case:  80 | Input/Output: [(-93 -6 -21 34) -93]
Train Case:  81 | Input/Output: [(-98 75 -29 26) -98]
Train Case:  82 | Input/Output: [(-12 -70 46 55) -70]
Train Case:  83 | Input/Output: [(-95 14 71 24) -95]
Train Case:  84 | Input/Output: [(44 -6 88 -95) -95]
Train Case:  85 | Input/Output: [(2 -21 -32 -47) -47]
Train Case:  86 | Input/Output: [(85 -95 59 -77) -95]
Train Case:  87 | Input/Output: [(79 49 72 20) 20]
Train Case:  88 | Input/Output: [(66 55 73 -34) -34]
Train Case:  89 | Input/Output: [(-6 36 -20 17) -20]
Train Case:  90 | Input/Output: [(-14 -75 55 -95) -95]
Train Case:  91 | Input/Output: [(-94 66 18 -83) -94]
Train Case:  92 | Input/Output: [(92 92 4 -61) -61]
Train Case:  93 | Input/Output: [(-69 -94 -32 -79) -94]
Train Case:  94 | Input/Output: [(-22 24 2 -57) -57]
Train Case:  95 | Input/Output: [(-20 78 64 -56) -56]
Train Case:  96 | Input/Output: [(-39 6 -21 80) -39]
Train Case:  97 | Input/Output: [(83 -92 49 99) -92]
Train Case:  98 | Input/Output: [(54 42 -56 55) -56]
Train Case:  99 | Input/Output: [(5 92 -29 55) -29]
Test Case:   0 | Input/Output: [[-77 -77 -30 -77] -77]
Test Case:   1 | Input/Output: [[-10 -10 31 -10] -10]
Test Case:   2 | Input/Output: [[-36 -36 18 -36] -36]
Test Case:   3 | Input/Output: [[45 0 45 45] 0]
Test Case:   4 | Input/Output: [[82 92 92 92] 82]
Test Case:   5 | Input/Output: [[-86 -86 -78 -86] -86]
Test Case:   6 | Input/Output: [[-7 10 -7 -7] -7]
Test Case:   7 | Input/Output: [[13 13 13 -53] -53]
Test Case:   8 | Input/Output: [[64 64 5 64] 5]
Test Case:   9 | Input/Output: [[96 96 -20 96] -20]
Test Case:  10 | Input/Output: [[-54 -54 -54 3] -54]
Test Case:  11 | Input/Output: [[13 13 13 53] 13]
Test Case:  12 | Input/Output: [[69 69 -71 69] -71]
Test Case:  13 | Input/Output: [[75 -34 75 75] -34]
Test Case:  14 | Input/Output: [[43 -82 -82 -82] -82]
Test Case:  15 | Input/Output: [[-66 -66 78 -66] -66]
Test Case:  16 | Input/Output: [[62 -57 -57 -57] -57]
Test Case:  17 | Input/Output: [[-69 -74 -69 -69] -74]
Test Case:  18 | Input/Output: [[53 -29 53 53] -29]
Test Case:  19 | Input/Output: [[19 19 -33 19] -33]
Test Case:  20 | Input/Output: [[34 93 93 93] 34]
Test Case:  21 | Input/Output: [[-51 -28 -51 -51] -51]
Test Case:  22 | Input/Output: [[-7 -7 -75 -7] -75]
Test Case:  23 | Input/Output: [[55 -59 55 55] -59]
Test Case:  24 | Input/Output: [[24 24 86 24] 24]
Test Case:  25 | Input/Output: [[-13 -13 -51 -13] -51]
Test Case:  26 | Input/Output: [[-46 8 -46 -46] -46]
Test Case:  27 | Input/Output: [[-28 70 70 70] -28]
Test Case:  28 | Input/Output: [[-72 -2 -2 -2] -72]
Test Case:  29 | Input/Output: [[43 -71 -71 -71] -71]
Test Case:  30 | Input/Output: [[-90 -90 -90 -53] -90]
Test Case:  31 | Input/Output: [[32 -89 32 32] -89]
Test Case:  32 | Input/Output: [[-90 -90 -74 -90] -90]
Test Case:  33 | Input/Output: [[46 46 46 -68] -68]
Test Case:  34 | Input/Output: [[75 75 75 42] 42]
Test Case:  35 | Input/Output: [[46 46 46 -20] -20]
Test Case:  36 | Input/Output: [[35 55 35 35] 35]
Test Case:  37 | Input/Output: [[100 100 100 -84] -84]
Test Case:  38 | Input/Output: [[-28 74 74 74] -28]
Test Case:  39 | Input/Output: [[99 99 99 -46] -46]
Test Case:  40 | Input/Output: [[58 -78 58 58] -78]
Test Case:  41 | Input/Output: [[27 -95 -95 -95] -95]
Test Case:  42 | Input/Output: [[-59 58 58 58] -59]
Test Case:  43 | Input/Output: [[-100 -100 50 -100] -100]
Test Case:  44 | Input/Output: [[-21 -88 -21 -21] -88]
Test Case:  45 | Input/Output: [[-21 -21 75 -21] -21]
Test Case:  46 | Input/Output: [[-49 77 -49 -49] -49]
Test Case:  47 | Input/Output: [[-5 -5 -5 71] -5]
Test Case:  48 | Input/Output: [[-3 16 -3 -3] -3]
Test Case:  49 | Input/Output: [[-34 20 20 20] -34]
Test Case:  50 | Input/Output: [[-97 -75 -97 -97] -97]
Test Case:  51 | Input/Output: [[46 -40 46 46] -40]
Test Case:  52 | Input/Output: [[-28 -66 -66 -66] -66]
Test Case:  53 | Input/Output: [[-89 -7 -89 -89] -89]
Test Case:  54 | Input/Output: [[63 63 63 -56] -56]
Test Case:  55 | Input/Output: [[-49 8 8 8] -49]
Test Case:  56 | Input/Output: [[13 -79 -79 -79] -79]
Test Case:  57 | Input/Output: [[19 19 19 -56] -56]
Test Case:  58 | Input/Output: [[-95 -95 29 -95] -95]
Test Case:  59 | Input/Output: [[90 90 90 -86] -86]
Test Case:  60 | Input/Output: [[79 79 38 79] 38]
Test Case:  61 | Input/Output: [[-29 -30 -30 -30] -30]
Test Case:  62 | Input/Output: [[-40 -40 -79 -40] -79]
Test Case:  63 | Input/Output: [[-72 -36 -72 -72] -72]
Test Case:  64 | Input/Output: [[3 3 3 -67] -67]
Test Case:  65 | Input/Output: [[-90 -90 -40 -90] -90]
Test Case:  66 | Input/Output: [[42 -81 -81 -81] -81]
Test Case:  67 | Input/Output: [[32 35 32 32] 32]
Test Case:  68 | Input/Output: [[-5 -5 -5 -41] -41]
Test Case:  69 | Input/Output: [[66 66 66 -28] -28]
Test Case:  70 | Input/Output: [[-14 -36 -14 -14] -36]
Test Case:  71 | Input/Output: [[85 54 85 85] 54]
Test Case:  72 | Input/Output: [[-4 -4 57 -4] -4]
Test Case:  73 | Input/Output: [[38 6 38 38] 6]
Test Case:  74 | Input/Output: [[-44 -44 57 -44] -44]
Test Case:  75 | Input/Output: [[46 -47 -47 -47] -47]
Test Case:  76 | Input/Output: [[-72 15 15 15] -72]
Test Case:  77 | Input/Output: [[-47 -47 34 -47] -47]
Test Case:  78 | Input/Output: [[-100 -100 -100 -100] -100]
Test Case:  79 | Input/Output: [[7 23 23 23] 7]
Test Case:  80 | Input/Output: [[74 74 88 74] 74]
Test Case:  81 | Input/Output: [[97 97 44 97] 44]
Test Case:  82 | Input/Output: [[79 79 -66 79] -66]
Test Case:  83 | Input/Output: [[-33 -33 -62 -33] -62]
Test Case:  84 | Input/Output: [[20 20 -66 20] -66]
Test Case:  85 | Input/Output: [[-67 17 -67 -67] -67]
Test Case:  86 | Input/Output: [[-62 29 -62 -62] -62]
Test Case:  87 | Input/Output: [[-16 -33 -16 -16] -33]
Test Case:  88 | Input/Output: [[-7 81 -7 -7] -7]
Test Case:  89 | Input/Output: [[-5 3 -5 -5] -5]
Test Case:  90 | Input/Output: [[37 37 37 -18] -18]
Test Case:  91 | Input/Output: [[-67 -67 17 -67] -67]
Test Case:  92 | Input/Output: [[-16 -47 -47 -47] -47]
Test Case:  93 | Input/Output: [[31 -99 31 31] -99]
Test Case:  94 | Input/Output: [[64 64 64 60] 60]
Test Case:  95 | Input/Output: [[-11 96 -11 -11] -11]
Test Case:  96 | Input/Output: [[92 62 92 92] 62]
Test Case:  97 | Input/Output: [[-59 73 -59 -59] -59]
Test Case:  98 | Input/Output: [[74 -48 74 74] -48]
Test Case:  99 | Input/Output: [[-59 -2 -2 -2] -59]
Test Case: 100 | Input/Output: [(34 34 34 34) 34]
Test Case: 101 | Input/Output: [(74 74 74 74) 74]
Test Case: 102 | Input/Output: [(9 9 9 9) 9]
Test Case: 103 | Input/Output: [(80 80 80 80) 80]
Test Case: 104 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 105 | Input/Output: [(20 20 20 20) 20]
Test Case: 106 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 107 | Input/Output: [(42 42 42 42) 42]
Test Case: 108 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 109 | Input/Output: [(5 5 5 5) 5]
Test Case: 110 | Input/Output: [(33 33 33 33) 33]
Test Case: 111 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 112 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 113 | Input/Output: [(77 77 77 77) 77]
Test Case: 114 | Input/Output: [(11 11 11 11) 11]
Test Case: 115 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 116 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 117 | Input/Output: [(61 61 61 61) 61]
Test Case: 118 | Input/Output: [(65 65 65 65) 65]
Test Case: 119 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 120 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 121 | Input/Output: [(90 90 90 90) 90]
Test Case: 122 | Input/Output: [(25 25 25 25) 25]
Test Case: 123 | Input/Output: [(63 63 63 63) 63]
Test Case: 124 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 125 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 126 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 127 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 128 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 129 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 130 | Input/Output: [(90 90 90 90) 90]
Test Case: 131 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 132 | Input/Output: [(45 45 45 45) 45]
Test Case: 133 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 134 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 135 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 136 | Input/Output: [(6 6 6 6) 6]
Test Case: 137 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 138 | Input/Output: [(94 94 94 94) 94]
Test Case: 139 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 140 | Input/Output: [(25 25 25 25) 25]
Test Case: 141 | Input/Output: [(83 83 83 83) 83]
Test Case: 142 | Input/Output: [(10 10 10 10) 10]
Test Case: 143 | Input/Output: [(29 29 29 29) 29]
Test Case: 144 | Input/Output: [(9 9 9 9) 9]
Test Case: 145 | Input/Output: [(80 80 80 80) 80]
Test Case: 146 | Input/Output: [(16 16 16 16) 16]
Test Case: 147 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 148 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 149 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 150 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 151 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 152 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 153 | Input/Output: [(72 72 72 72) 72]
Test Case: 154 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 155 | Input/Output: [(4 4 4 4) 4]
Test Case: 156 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 157 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 158 | Input/Output: [(83 83 83 83) 83]
Test Case: 159 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 160 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 161 | Input/Output: [(30 30 30 30) 30]
Test Case: 162 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 163 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 164 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 165 | Input/Output: [(75 75 75 75) 75]
Test Case: 166 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 167 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 168 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 169 | Input/Output: [(18 18 18 18) 18]
Test Case: 170 | Input/Output: [(32 32 32 32) 32]
Test Case: 171 | Input/Output: [(42 42 42 42) 42]
Test Case: 172 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 173 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 174 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 175 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 176 | Input/Output: [(81 81 81 81) 81]
Test Case: 177 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 178 | Input/Output: [(30 30 30 30) 30]
Test Case: 179 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 180 | Input/Output: [(32 32 32 32) 32]
Test Case: 181 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 182 | Input/Output: [(75 75 75 75) 75]
Test Case: 183 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 184 | Input/Output: [(97 97 97 97) 97]
Test Case: 185 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 186 | Input/Output: [(64 64 64 64) 64]
Test Case: 187 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 188 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 189 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 190 | Input/Output: [(34 34 34 34) 34]
Test Case: 191 | Input/Output: [(54 54 54 54) 54]
Test Case: 192 | Input/Output: [(67 67 67 67) 67]
Test Case: 193 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 194 | Input/Output: [(45 45 45 45) 45]
Test Case: 195 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 196 | Input/Output: [(60 60 60 60) 60]
Test Case: 197 | Input/Output: [(6 6 6 6) 6]
Test Case: 198 | Input/Output: [(16 16 16 16) 16]
Test Case: 199 | Input/Output: [(40 40 40 40) 40]
Test Case: 200 | Input/Output: [(17 40 48 21) 17]
Test Case: 201 | Input/Output: [(34 74 67 8) 8]
Test Case: 202 | Input/Output: [(63 14 20 1) 1]
Test Case: 203 | Input/Output: [(93 41 6 94) 6]
Test Case: 204 | Input/Output: [(61 60 21 67) 21]
Test Case: 205 | Input/Output: [(82 82 73 49) 49]
Test Case: 206 | Input/Output: [(18 2 4 31) 2]
Test Case: 207 | Input/Output: [(0 88 46 68) 0]
Test Case: 208 | Input/Output: [(6 23 40 62) 6]
Test Case: 209 | Input/Output: [(1 37 16 36) 1]
Test Case: 210 | Input/Output: [(33 72 4 23) 4]
Test Case: 211 | Input/Output: [(23 16 47 5) 5]
Test Case: 212 | Input/Output: [(60 82 61 54) 54]
Test Case: 213 | Input/Output: [(86 74 18 36) 18]
Test Case: 214 | Input/Output: [(97 19 32 42) 19]
Test Case: 215 | Input/Output: [(19 30 40 55) 19]
Test Case: 216 | Input/Output: [(41 68 16 54) 16]
Test Case: 217 | Input/Output: [(34 75 74 86) 34]
Test Case: 218 | Input/Output: [(88 15 72 8) 8]
Test Case: 219 | Input/Output: [(58 19 80 6) 6]
Test Case: 220 | Input/Output: [(28 21 25 20) 20]
Test Case: 221 | Input/Output: [(80 45 1 57) 1]
Test Case: 222 | Input/Output: [(70 7 63 62) 7]
Test Case: 223 | Input/Output: [(86 35 59 33) 33]
Test Case: 224 | Input/Output: [(7 44 14 0) 0]
Test Case: 225 | Input/Output: [(76 70 86 85) 70]
Test Case: 226 | Input/Output: [(39 80 15 0) 0]
Test Case: 227 | Input/Output: [(80 75 68 97) 68]
Test Case: 228 | Input/Output: [(41 81 66 1) 1]
Test Case: 229 | Input/Output: [(65 41 38 25) 25]
Test Case: 230 | Input/Output: [(3 16 13 41) 3]
Test Case: 231 | Input/Output: [(99 50 17 61) 17]
Test Case: 232 | Input/Output: [(0 75 25 26) 0]
Test Case: 233 | Input/Output: [(76 69 13 77) 13]
Test Case: 234 | Input/Output: [(24 26 67 23) 23]
Test Case: 235 | Input/Output: [(62 61 18 85) 18]
Test Case: 236 | Input/Output: [(27 93 85 43) 27]
Test Case: 237 | Input/Output: [(74 87 54 96) 54]
Test Case: 238 | Input/Output: [(38 2 23 62) 2]
Test Case: 239 | Input/Output: [(62 25 32 78) 25]
Test Case: 240 | Input/Output: [(34 21 43 34) 21]
Test Case: 241 | Input/Output: [(100 14 24 60) 14]
Test Case: 242 | Input/Output: [(21 99 36 15) 15]
Test Case: 243 | Input/Output: [(37 93 86 77) 37]
Test Case: 244 | Input/Output: [(25 85 13 16) 13]
Test Case: 245 | Input/Output: [(34 97 51 12) 12]
Test Case: 246 | Input/Output: [(80 74 65 100) 65]
Test Case: 247 | Input/Output: [(66 32 50 71) 32]
Test Case: 248 | Input/Output: [(43 8 84 82) 8]
Test Case: 249 | Input/Output: [(14 79 11 34) 11]
Test Case: 250 | Input/Output: [(73 40 9 28) 9]
Test Case: 251 | Input/Output: [(98 10 32 6) 6]
Test Case: 252 | Input/Output: [(41 74 16 30) 16]
Test Case: 253 | Input/Output: [(81 56 98 71) 56]
Test Case: 254 | Input/Output: [(5 9 82 18) 5]
Test Case: 255 | Input/Output: [(20 55 29 58) 20]
Test Case: 256 | Input/Output: [(96 15 30 71) 15]
Test Case: 257 | Input/Output: [(68 22 35 19) 19]
Test Case: 258 | Input/Output: [(89 32 33 31) 31]
Test Case: 259 | Input/Output: [(22 70 85 2) 2]
Test Case: 260 | Input/Output: [(47 77 70 86) 47]
Test Case: 261 | Input/Output: [(79 66 82 96) 66]
Test Case: 262 | Input/Output: [(28 20 13 97) 13]
Test Case: 263 | Input/Output: [(65 97 80 71) 65]
Test Case: 264 | Input/Output: [(54 27 68 75) 27]
Test Case: 265 | Input/Output: [(23 2 93 56) 2]
Test Case: 266 | Input/Output: [(21 33 21 80) 21]
Test Case: 267 | Input/Output: [(60 65 82 92) 60]
Test Case: 268 | Input/Output: [(3 24 15 76) 3]
Test Case: 269 | Input/Output: [(94 77 80 83) 77]
Test Case: 270 | Input/Output: [(35 73 13 9) 9]
Test Case: 271 | Input/Output: [(85 4 82 85) 4]
Test Case: 272 | Input/Output: [(92 19 54 79) 19]
Test Case: 273 | Input/Output: [(67 46 23 43) 23]
Test Case: 274 | Input/Output: [(56 21 48 5) 5]
Test Case: 275 | Input/Output: [(91 10 52 66) 10]
Test Case: 276 | Input/Output: [(73 38 4 72) 4]
Test Case: 277 | Input/Output: [(98 28 46 62) 28]
Test Case: 278 | Input/Output: [(52 86 51 10) 10]
Test Case: 279 | Input/Output: [(94 33 38 8) 8]
Test Case: 280 | Input/Output: [(82 63 65 83) 63]
Test Case: 281 | Input/Output: [(60 17 52 52) 17]
Test Case: 282 | Input/Output: [(98 51 78 78) 51]
Test Case: 283 | Input/Output: [(15 72 26 66) 15]
Test Case: 284 | Input/Output: [(27 3 49 86) 3]
Test Case: 285 | Input/Output: [(87 84 38 99) 38]
Test Case: 286 | Input/Output: [(39 57 21 65) 21]
Test Case: 287 | Input/Output: [(18 8 45 53) 8]
Test Case: 288 | Input/Output: [(52 43 26 38) 26]
Test Case: 289 | Input/Output: [(63 29 58 47) 29]
Test Case: 290 | Input/Output: [(34 54 36 71) 34]
Test Case: 291 | Input/Output: [(9 69 84 2) 2]
Test Case: 292 | Input/Output: [(75 94 65 17) 17]
Test Case: 293 | Input/Output: [(11 29 85 35) 11]
Test Case: 294 | Input/Output: [(25 2 61 82) 2]
Test Case: 295 | Input/Output: [(17 55 22 86) 17]
Test Case: 296 | Input/Output: [(12 42 78 81) 12]
Test Case: 297 | Input/Output: [(41 36 52 35) 35]
Test Case: 298 | Input/Output: [(57 31 79 29) 29]
Test Case: 299 | Input/Output: [(41 70 8 21) 8]
Test Case: 300 | Input/Output: [(29 12 25 35) 12]
Test Case: 301 | Input/Output: [(86 33 13 39) 13]
Test Case: 302 | Input/Output: [(36 88 29 27) 27]
Test Case: 303 | Input/Output: [(87 57 38 95) 38]
Test Case: 304 | Input/Output: [(40 1 71 98) 1]
Test Case: 305 | Input/Output: [(46 90 50 92) 46]
Test Case: 306 | Input/Output: [(79 82 22 77) 22]
Test Case: 307 | Input/Output: [(50 13 96 25) 13]
Test Case: 308 | Input/Output: [(16 15 37 34) 15]
Test Case: 309 | Input/Output: [(54 48 81 70) 48]
Test Case: 310 | Input/Output: [(96 57 80 15) 15]
Test Case: 311 | Input/Output: [(1 24 63 58) 1]
Test Case: 312 | Input/Output: [(21 4 21 83) 4]
Test Case: 313 | Input/Output: [(88 71 22 70) 22]
Test Case: 314 | Input/Output: [(60 86 62 44) 44]
Test Case: 315 | Input/Output: [(0 41 78 8) 0]
Test Case: 316 | Input/Output: [(22 59 78 8) 8]
Test Case: 317 | Input/Output: [(86 100 92 24) 24]
Test Case: 318 | Input/Output: [(89 95 46 67) 46]
Test Case: 319 | Input/Output: [(31 64 83 37) 31]
Test Case: 320 | Input/Output: [(30 39 73 70) 30]
Test Case: 321 | Input/Output: [(28 23 97 25) 23]
Test Case: 322 | Input/Output: [(10 57 87 88) 10]
Test Case: 323 | Input/Output: [(45 26 85 27) 26]
Test Case: 324 | Input/Output: [(8 72 73 37) 8]
Test Case: 325 | Input/Output: [(83 27 59 69) 27]
Test Case: 326 | Input/Output: [(25 48 26 62) 25]
Test Case: 327 | Input/Output: [(22 75 57 97) 22]
Test Case: 328 | Input/Output: [(59 61 54 28) 28]
Test Case: 329 | Input/Output: [(69 94 97 56) 56]
Test Case: 330 | Input/Output: [(46 27 62 70) 27]
Test Case: 331 | Input/Output: [(44 53 76 92) 44]
Test Case: 332 | Input/Output: [(37 50 67 57) 37]
Test Case: 333 | Input/Output: [(59 86 51 8) 8]
Test Case: 334 | Input/Output: [(27 72 62 38) 27]
Test Case: 335 | Input/Output: [(40 68 56 70) 40]
Test Case: 336 | Input/Output: [(33 67 100 76) 33]
Test Case: 337 | Input/Output: [(11 74 82 76) 11]
Test Case: 338 | Input/Output: [(43 64 34 44) 34]
Test Case: 339 | Input/Output: [(37 30 7 95) 7]
Test Case: 340 | Input/Output: [(40 22 75 32) 22]
Test Case: 341 | Input/Output: [(21 85 92 40) 21]
Test Case: 342 | Input/Output: [(99 81 92 56) 56]
Test Case: 343 | Input/Output: [(36 76 19 43) 19]
Test Case: 344 | Input/Output: [(71 1 39 93) 1]
Test Case: 345 | Input/Output: [(79 80 54 24) 24]
Test Case: 346 | Input/Output: [(57 8 63 45) 8]
Test Case: 347 | Input/Output: [(36 81 34 90) 34]
Test Case: 348 | Input/Output: [(38 95 88 58) 38]
Test Case: 349 | Input/Output: [(93 74 43 11) 11]
Test Case: 350 | Input/Output: [(46 42 37 56) 37]
Test Case: 351 | Input/Output: [(77 94 53 100) 53]
Test Case: 352 | Input/Output: [(83 9 96 91) 9]
Test Case: 353 | Input/Output: [(15 22 76 68) 15]
Test Case: 354 | Input/Output: [(58 55 46 5) 5]
Test Case: 355 | Input/Output: [(93 23 76 11) 11]
Test Case: 356 | Input/Output: [(14 34 11 12) 11]
Test Case: 357 | Input/Output: [(17 2 57 15) 2]
Test Case: 358 | Input/Output: [(31 86 46 67) 31]
Test Case: 359 | Input/Output: [(57 49 30 11) 11]
Test Case: 360 | Input/Output: [(58 5 50 77) 5]
Test Case: 361 | Input/Output: [(50 7 38 11) 7]
Test Case: 362 | Input/Output: [(3 86 13 81) 3]
Test Case: 363 | Input/Output: [(96 26 100 15) 15]
Test Case: 364 | Input/Output: [(9 13 3 41) 3]
Test Case: 365 | Input/Output: [(30 0 95 77) 0]
Test Case: 366 | Input/Output: [(63 34 93 47) 34]
Test Case: 367 | Input/Output: [(40 24 25 3) 3]
Test Case: 368 | Input/Output: [(56 96 63 37) 37]
Test Case: 369 | Input/Output: [(45 34 20 89) 20]
Test Case: 370 | Input/Output: [(92 96 43 48) 43]
Test Case: 371 | Input/Output: [(87 11 57 58) 11]
Test Case: 372 | Input/Output: [(83 95 60 38) 38]
Test Case: 373 | Input/Output: [(89 78 57 59) 57]
Test Case: 374 | Input/Output: [(2 59 30 8) 2]
Test Case: 375 | Input/Output: [(25 81 73 69) 25]
Test Case: 376 | Input/Output: [(8 48 57 24) 8]
Test Case: 377 | Input/Output: [(57 0 64 66) 0]
Test Case: 378 | Input/Output: [(87 91 59 24) 24]
Test Case: 379 | Input/Output: [(1 41 91 41) 1]
Test Case: 380 | Input/Output: [(62 82 57 41) 41]
Test Case: 381 | Input/Output: [(3 20 5 99) 3]
Test Case: 382 | Input/Output: [(76 41 59 5) 5]
Test Case: 383 | Input/Output: [(6 81 51 66) 6]
Test Case: 384 | Input/Output: [(31 53 38 75) 31]
Test Case: 385 | Input/Output: [(86 34 7 24) 7]
Test Case: 386 | Input/Output: [(64 94 75 2) 2]
Test Case: 387 | Input/Output: [(64 5 38 11) 5]
Test Case: 388 | Input/Output: [(44 94 88 44) 44]
Test Case: 389 | Input/Output: [(97 87 79 0) 0]
Test Case: 390 | Input/Output: [(31 45 18 8) 8]
Test Case: 391 | Input/Output: [(14 21 35 22) 14]
Test Case: 392 | Input/Output: [(57 66 4 33) 4]
Test Case: 393 | Input/Output: [(61 98 71 56) 56]
Test Case: 394 | Input/Output: [(93 21 25 75) 21]
Test Case: 395 | Input/Output: [(82 16 63 93) 16]
Test Case: 396 | Input/Output: [(10 48 86 97) 10]
Test Case: 397 | Input/Output: [(17 100 96 58) 17]
Test Case: 398 | Input/Output: [(13 4 17 3) 3]
Test Case: 399 | Input/Output: [(53 25 85 53) 25]
Test Case: 400 | Input/Output: [(31 -8 15 -95) -95]
Test Case: 401 | Input/Output: [(90 -78 -97 7) -97]
Test Case: 402 | Input/Output: [(6 -15 53 3) -15]
Test Case: 403 | Input/Output: [(-41 -47 24 79) -47]
Test Case: 404 | Input/Output: [(12 -100 -13 -70) -100]
Test Case: 405 | Input/Output: [(74 -13 -61 -18) -61]
Test Case: 406 | Input/Output: [(-2 -48 -39 -35) -48]
Test Case: 407 | Input/Output: [(89 -83 9 95) -83]
Test Case: 408 | Input/Output: [(-22 -4 -62 46) -62]
Test Case: 409 | Input/Output: [(73 -17 -45 -11) -45]
Test Case: 410 | Input/Output: [(59 52 81 -67) -67]
Test Case: 411 | Input/Output: [(-58 54 4 -35) -58]
Test Case: 412 | Input/Output: [(-82 -36 -64 -67) -82]
Test Case: 413 | Input/Output: [(2 65 -81 57) -81]
Test Case: 414 | Input/Output: [(3 -87 -62 85) -87]
Test Case: 415 | Input/Output: [(-19 98 -20 0) -20]
Test Case: 416 | Input/Output: [(76 -82 -21 40) -82]
Test Case: 417 | Input/Output: [(-12 40 -74 30) -74]
Test Case: 418 | Input/Output: [(-14 9 -67 -15) -67]
Test Case: 419 | Input/Output: [(24 100 3 -78) -78]
Test Case: 420 | Input/Output: [(89 41 -9 60) -9]
Test Case: 421 | Input/Output: [(93 -55 -11 -36) -55]
Test Case: 422 | Input/Output: [(100 91 38 49) 38]
Test Case: 423 | Input/Output: [(-70 -32 -13 -60) -70]
Test Case: 424 | Input/Output: [(-59 15 -10 -34) -59]
Test Case: 425 | Input/Output: [(58 -82 -26 92) -82]
Test Case: 426 | Input/Output: [(2 42 93 -100) -100]
Test Case: 427 | Input/Output: [(-22 -34 31 -21) -34]
Test Case: 428 | Input/Output: [(100 -53 67 -49) -53]
Test Case: 429 | Input/Output: [(-31 -88 -13 -53) -88]
Test Case: 430 | Input/Output: [(42 40 -30 4) -30]
Test Case: 431 | Input/Output: [(-26 -23 -21 7) -26]
Test Case: 432 | Input/Output: [(-100 -56 -99 84) -100]
Test Case: 433 | Input/Output: [(-24 14 38 46) -24]
Test Case: 434 | Input/Output: [(50 84 98 100) 50]
Test Case: 435 | Input/Output: [(40 1 58 9) 1]
Test Case: 436 | Input/Output: [(-71 74 -55 92) -71]
Test Case: 437 | Input/Output: [(97 16 40 93) 16]
Test Case: 438 | Input/Output: [(59 -78 71 -89) -89]
Test Case: 439 | Input/Output: [(92 -94 65 -28) -94]
Test Case: 440 | Input/Output: [(19 -46 53 90) -46]
Test Case: 441 | Input/Output: [(-75 46 3 -52) -75]
Test Case: 442 | Input/Output: [(-65 34 42 52) -65]
Test Case: 443 | Input/Output: [(47 98 38 -53) -53]
Test Case: 444 | Input/Output: [(54 -41 51 19) -41]
Test Case: 445 | Input/Output: [(64 -37 57 -55) -55]
Test Case: 446 | Input/Output: [(48 38 -97 -7) -97]
Test Case: 447 | Input/Output: [(56 -70 56 49) -70]
Test Case: 448 | Input/Output: [(-10 -6 -69 61) -69]
Test Case: 449 | Input/Output: [(32 -7 -83 17) -83]
Test Case: 450 | Input/Output: [(-86 25 -95 -47) -95]
Test Case: 451 | Input/Output: [(47 -63 -62 -83) -83]
Test Case: 452 | Input/Output: [(-59 85 -9 42) -59]
Test Case: 453 | Input/Output: [(80 -53 -65 -95) -95]
Test Case: 454 | Input/Output: [(89 26 -59 -20) -59]
Test Case: 455 | Input/Output: [(86 19 26 27) 19]
Test Case: 456 | Input/Output: [(-7 4 37 42) -7]
Test Case: 457 | Input/Output: [(-46 14 22 -66) -66]
Test Case: 458 | Input/Output: [(2 -1 -32 26) -32]
Test Case: 459 | Input/Output: [(-52 89 -74 25) -74]
Test Case: 460 | Input/Output: [(91 9 14 78) 9]
Test Case: 461 | Input/Output: [(79 76 -40 58) -40]
Test Case: 462 | Input/Output: [(0 -56 4 15) -56]
Test Case: 463 | Input/Output: [(-25 14 -14 -16) -25]
Test Case: 464 | Input/Output: [(-69 67 81 95) -69]
Test Case: 465 | Input/Output: [(-6 15 67 75) -6]
Test Case: 466 | Input/Output: [(-2 26 75 98) -2]
Test Case: 467 | Input/Output: [(-60 81 -47 16) -60]
Test Case: 468 | Input/Output: [(73 29 -90 -50) -90]
Test Case: 469 | Input/Output: [(-87 -87 21 -98) -98]
Test Case: 470 | Input/Output: [(22 -76 49 25) -76]
Test Case: 471 | Input/Output: [(-81 -26 42 -54) -81]
Test Case: 472 | Input/Output: [(100 -79 95 -67) -79]
Test Case: 473 | Input/Output: [(60 -26 -78 -78) -78]
Test Case: 474 | Input/Output: [(-31 28 85 -76) -76]
Test Case: 475 | Input/Output: [(-76 -64 12 -67) -76]
Test Case: 476 | Input/Output: [(-76 -5 31 -82) -82]
Test Case: 477 | Input/Output: [(65 52 25 52) 25]
Test Case: 478 | Input/Output: [(47 8 -66 98) -66]
Test Case: 479 | Input/Output: [(14 81 -25 94) -25]
Test Case: 480 | Input/Output: [(92 -13 49 30) -13]
Test Case: 481 | Input/Output: [(-76 -22 15 -53) -76]
Test Case: 482 | Input/Output: [(-83 -70 38 -41) -83]
Test Case: 483 | Input/Output: [(95 -80 66 -39) -80]
Test Case: 484 | Input/Output: [(75 -37 -44 55) -44]
Test Case: 485 | Input/Output: [(82 72 28 -78) -78]
Test Case: 486 | Input/Output: [(-89 24 48 8) -89]
Test Case: 487 | Input/Output: [(40 -46 -67 61) -67]
Test Case: 488 | Input/Output: [(37 57 -50 -91) -91]
Test Case: 489 | Input/Output: [(11 91 59 10) 10]
Test Case: 490 | Input/Output: [(92 -27 71 13) -27]
Test Case: 491 | Input/Output: [(35 84 -61 69) -61]
Test Case: 492 | Input/Output: [(69 5 27 97) 5]
Test Case: 493 | Input/Output: [(17 -2 -85 75) -85]
Test Case: 494 | Input/Output: [(0 90 -14 91) -14]
Test Case: 495 | Input/Output: [(44 -86 43 -90) -90]
Test Case: 496 | Input/Output: [(6 31 9 75) 6]
Test Case: 497 | Input/Output: [(-24 -77 65 42) -77]
Test Case: 498 | Input/Output: [(27 -52 -85 11) -85]
Test Case: 499 | Input/Output: [(-48 12 -32 -27) -48]
Test Case: 500 | Input/Output: [(64 80 -13 28) -13]
Test Case: 501 | Input/Output: [(-48 -76 53 -44) -76]
Test Case: 502 | Input/Output: [(20 -69 -3 -82) -82]
Test Case: 503 | Input/Output: [(79 26 16 -9) -9]
Test Case: 504 | Input/Output: [(-6 58 17 -59) -59]
Test Case: 505 | Input/Output: [(-88 -93 -100 -79) -100]
Test Case: 506 | Input/Output: [(-97 -28 39 63) -97]
Test Case: 507 | Input/Output: [(0 59 28 33) 0]
Test Case: 508 | Input/Output: [(-69 -43 -5 -8) -69]
Test Case: 509 | Input/Output: [(-23 6 -90 84) -90]
Test Case: 510 | Input/Output: [(9 89 -100 82) -100]
Test Case: 511 | Input/Output: [(-74 -20 98 -39) -74]
Test Case: 512 | Input/Output: [(-22 85 -32 -99) -99]
Test Case: 513 | Input/Output: [(52 -97 86 -17) -97]
Test Case: 514 | Input/Output: [(29 5 19 -81) -81]
Test Case: 515 | Input/Output: [(-96 -79 -28 36) -96]
Test Case: 516 | Input/Output: [(23 -52 -33 -53) -53]
Test Case: 517 | Input/Output: [(16 23 91 -90) -90]
Test Case: 518 | Input/Output: [(79 -9 -56 -69) -69]
Test Case: 519 | Input/Output: [(-96 60 2 98) -96]
Test Case: 520 | Input/Output: [(-66 10 -61 -18) -66]
Test Case: 521 | Input/Output: [(63 -76 90 63) -76]
Test Case: 522 | Input/Output: [(56 51 52 -24) -24]
Test Case: 523 | Input/Output: [(34 -9 -56 16) -56]
Test Case: 524 | Input/Output: [(-30 92 49 -71) -71]
Test Case: 525 | Input/Output: [(-29 -39 -10 39) -39]
Test Case: 526 | Input/Output: [(-84 79 -68 95) -84]
Test Case: 527 | Input/Output: [(56 -81 -80 8) -81]
Test Case: 528 | Input/Output: [(-49 7 27 75) -49]
Test Case: 529 | Input/Output: [(-49 -56 -81 51) -81]
Test Case: 530 | Input/Output: [(-3 75 46 -84) -84]
Test Case: 531 | Input/Output: [(-23 -28 21 47) -28]
Test Case: 532 | Input/Output: [(99 11 -60 -77) -77]
Test Case: 533 | Input/Output: [(24 22 43 2) 2]
Test Case: 534 | Input/Output: [(94 90 69 24) 24]
Test Case: 535 | Input/Output: [(89 -5 -33 -6) -33]
Test Case: 536 | Input/Output: [(13 34 -70 99) -70]
Test Case: 537 | Input/Output: [(71 -64 5 -20) -64]
Test Case: 538 | Input/Output: [(-98 97 36 -25) -98]
Test Case: 539 | Input/Output: [(-65 98 18 -11) -65]
Test Case: 540 | Input/Output: [(31 -90 -12 -28) -90]
Test Case: 541 | Input/Output: [(-47 23 -73 97) -73]
Test Case: 542 | Input/Output: [(20 59 37 22) 20]
Test Case: 543 | Input/Output: [(-91 -88 -81 -32) -91]
Test Case: 544 | Input/Output: [(-69 -90 16 -29) -90]
Test Case: 545 | Input/Output: [(48 94 2 -78) -78]
Test Case: 546 | Input/Output: [(-41 -49 49 39) -49]
Test Case: 547 | Input/Output: [(73 83 23 0) 0]
Test Case: 548 | Input/Output: [(-56 -3 -32 67) -56]
Test Case: 549 | Input/Output: [(20 1 -31 -73) -73]
Test Case: 550 | Input/Output: [(-9 63 43 -20) -20]
Test Case: 551 | Input/Output: [(-55 36 -49 87) -55]
Test Case: 552 | Input/Output: [(79 -81 5 24) -81]
Test Case: 553 | Input/Output: [(41 30 -9 57) -9]
Test Case: 554 | Input/Output: [(58 91 20 -95) -95]
Test Case: 555 | Input/Output: [(29 26 -40 10) -40]
Test Case: 556 | Input/Output: [(-15 -31 -7 16) -31]
Test Case: 557 | Input/Output: [(26 95 -88 -56) -88]
Test Case: 558 | Input/Output: [(-36 -65 -14 -98) -98]
Test Case: 559 | Input/Output: [(-30 75 21 -14) -30]
Test Case: 560 | Input/Output: [(49 37 60 -13) -13]
Test Case: 561 | Input/Output: [(64 -50 -77 87) -77]
Test Case: 562 | Input/Output: [(-88 -28 -30 0) -88]
Test Case: 563 | Input/Output: [(-94 98 42 87) -94]
Test Case: 564 | Input/Output: [(71 76 36 -16) -16]
Test Case: 565 | Input/Output: [(8 -31 -5 -85) -85]
Test Case: 566 | Input/Output: [(37 -64 -28 -61) -64]
Test Case: 567 | Input/Output: [(3 -80 -15 -59) -80]
Test Case: 568 | Input/Output: [(-47 97 96 -6) -47]
Test Case: 569 | Input/Output: [(53 64 -35 -64) -64]
Test Case: 570 | Input/Output: [(79 10 38 22) 10]
Test Case: 571 | Input/Output: [(63 -18 -19 13) -19]
Test Case: 572 | Input/Output: [(-21 25 28 39) -21]
Test Case: 573 | Input/Output: [(58 14 -53 -67) -67]
Test Case: 574 | Input/Output: [(-10 77 14 -8) -10]
Test Case: 575 | Input/Output: [(30 40 -43 52) -43]
Test Case: 576 | Input/Output: [(-40 88 -100 57) -100]
Test Case: 577 | Input/Output: [(-84 -49 -58 -14) -84]
Test Case: 578 | Input/Output: [(-2 49 56 -16) -16]
Test Case: 579 | Input/Output: [(-66 -5 84 -80) -80]
Test Case: 580 | Input/Output: [(53 -48 -59 -45) -59]
Test Case: 581 | Input/Output: [(-18 -64 -83 78) -83]
Test Case: 582 | Input/Output: [(-90 -99 -69 96) -99]
Test Case: 583 | Input/Output: [(7 59 61 -9) -9]
Test Case: 584 | Input/Output: [(-38 14 -62 86) -62]
Test Case: 585 | Input/Output: [(-25 -13 24 20) -25]
Test Case: 586 | Input/Output: [(-17 -80 -95 21) -95]
Test Case: 587 | Input/Output: [(-31 13 -21 5) -31]
Test Case: 588 | Input/Output: [(0 -64 -15 59) -64]
Test Case: 589 | Input/Output: [(-82 31 -51 15) -82]
Test Case: 590 | Input/Output: [(-9 48 -49 -39) -49]
Test Case: 591 | Input/Output: [(-94 40 -48 -29) -94]
Test Case: 592 | Input/Output: [(-76 -79 77 88) -79]
Test Case: 593 | Input/Output: [(73 -77 -77 30) -77]
Test Case: 594 | Input/Output: [(-24 92 -96 -41) -96]
Test Case: 595 | Input/Output: [(64 92 -60 62) -60]
Test Case: 596 | Input/Output: [(-32 35 74 -35) -35]
Test Case: 597 | Input/Output: [(81 -97 53 60) -97]
Test Case: 598 | Input/Output: [(97 39 -27 42) -27]
Test Case: 599 | Input/Output: [(86 67 -46 -83) -83]
Test Case: 600 | Input/Output: [(-28 89 56 -12) -28]
Test Case: 601 | Input/Output: [(64 44 13 -97) -97]
Test Case: 602 | Input/Output: [(-100 49 73 -90) -100]
Test Case: 603 | Input/Output: [(-92 15 -20 45) -92]
Test Case: 604 | Input/Output: [(-20 -70 20 -20) -70]
Test Case: 605 | Input/Output: [(-54 8 -16 27) -54]
Test Case: 606 | Input/Output: [(-29 54 27 -71) -71]
Test Case: 607 | Input/Output: [(83 38 -3 -64) -64]
Test Case: 608 | Input/Output: [(66 -59 -35 -86) -86]
Test Case: 609 | Input/Output: [(-18 46 27 -46) -46]
Test Case: 610 | Input/Output: [(97 90 -35 16) -35]
Test Case: 611 | Input/Output: [(-57 -53 97 72) -57]
Test Case: 612 | Input/Output: [(28 -70 72 94) -70]
Test Case: 613 | Input/Output: [(33 84 98 18) 18]
Test Case: 614 | Input/Output: [(-28 63 -53 -51) -53]
Test Case: 615 | Input/Output: [(98 80 -37 57) -37]
Test Case: 616 | Input/Output: [(-49 12 -27 -38) -49]
Test Case: 617 | Input/Output: [(43 64 34 -62) -62]
Test Case: 618 | Input/Output: [(83 21 78 36) 21]
Test Case: 619 | Input/Output: [(-85 -52 50 -5) -85]
Test Case: 620 | Input/Output: [(-74 63 69 -72) -74]
Test Case: 621 | Input/Output: [(80 -9 -1 64) -9]
Test Case: 622 | Input/Output: [(-19 -84 49 -99) -99]
Test Case: 623 | Input/Output: [(-29 -13 -24 34) -29]
Test Case: 624 | Input/Output: [(28 81 63 18) 18]
Test Case: 625 | Input/Output: [(-14 -15 -95 -92) -95]
Test Case: 626 | Input/Output: [(75 33 43 92) 33]
Test Case: 627 | Input/Output: [(1 1 -32 4) -32]
Test Case: 628 | Input/Output: [(7 -78 98 49) -78]
Test Case: 629 | Input/Output: [(80 -89 -69 -85) -89]
Test Case: 630 | Input/Output: [(67 86 98 31) 31]
Test Case: 631 | Input/Output: [(83 -62 -53 -45) -62]
Test Case: 632 | Input/Output: [(87 93 29 -70) -70]
Test Case: 633 | Input/Output: [(5 -95 -22 33) -95]
Test Case: 634 | Input/Output: [(-65 88 99 -1) -65]
Test Case: 635 | Input/Output: [(-97 87 -11 69) -97]
Test Case: 636 | Input/Output: [(33 -22 80 25) -22]
Test Case: 637 | Input/Output: [(-37 -83 -96 19) -96]
Test Case: 638 | Input/Output: [(-41 -41 -77 48) -77]
Test Case: 639 | Input/Output: [(7 -46 -99 70) -99]
Test Case: 640 | Input/Output: [(94 49 22 -73) -73]
Test Case: 641 | Input/Output: [(-56 -85 -63 -48) -85]
Test Case: 642 | Input/Output: [(-22 -71 -42 -61) -71]
Test Case: 643 | Input/Output: [(-71 87 74 -61) -71]
Test Case: 644 | Input/Output: [(-92 88 29 23) -92]
Test Case: 645 | Input/Output: [(20 79 27 75) 20]
Test Case: 646 | Input/Output: [(-15 -54 -9 -63) -63]
Test Case: 647 | Input/Output: [(19 46 10 -35) -35]
Test Case: 648 | Input/Output: [(34 -84 36 16) -84]
Test Case: 649 | Input/Output: [(7 25 20 -62) -62]
Test Case: 650 | Input/Output: [(-20 44 21 99) -20]
Test Case: 651 | Input/Output: [(-82 -49 -35 -45) -82]
Test Case: 652 | Input/Output: [(44 7 -80 42) -80]
Test Case: 653 | Input/Output: [(6 -31 -45 24) -45]
Test Case: 654 | Input/Output: [(-1 -74 39 -14) -74]
Test Case: 655 | Input/Output: [(-87 -65 -90 53) -90]
Test Case: 656 | Input/Output: [(-64 -35 -47 17) -64]
Test Case: 657 | Input/Output: [(57 -65 66 53) -65]
Test Case: 658 | Input/Output: [(-65 -31 -14 68) -65]
Test Case: 659 | Input/Output: [(83 2 45 54) 2]
Test Case: 660 | Input/Output: [(-28 91 -4 63) -28]
Test Case: 661 | Input/Output: [(68 44 -86 38) -86]
Test Case: 662 | Input/Output: [(-53 -94 -99 -29) -99]
Test Case: 663 | Input/Output: [(75 -29 -41 -37) -41]
Test Case: 664 | Input/Output: [(80 -33 -62 36) -62]
Test Case: 665 | Input/Output: [(-79 -12 -96 50) -96]
Test Case: 666 | Input/Output: [(53 29 49 74) 29]
Test Case: 667 | Input/Output: [(-67 -68 -36 -61) -68]
Test Case: 668 | Input/Output: [(33 -2 -24 -84) -84]
Test Case: 669 | Input/Output: [(-39 -31 -66 53) -66]
Test Case: 670 | Input/Output: [(32 -13 -93 -39) -93]
Test Case: 671 | Input/Output: [(-31 27 -73 13) -73]
Test Case: 672 | Input/Output: [(11 -52 4 -16) -52]
Test Case: 673 | Input/Output: [(97 -21 -100 39) -100]
Test Case: 674 | Input/Output: [(-57 -56 -66 14) -66]
Test Case: 675 | Input/Output: [(90 61 32 25) 25]
Test Case: 676 | Input/Output: [(21 24 1 -26) -26]
Test Case: 677 | Input/Output: [(-76 -89 -57 -1) -89]
Test Case: 678 | Input/Output: [(42 78 5 -53) -53]
Test Case: 679 | Input/Output: [(7 13 19 55) 7]
Test Case: 680 | Input/Output: [(78 56 -48 91) -48]
Test Case: 681 | Input/Output: [(83 59 30 -96) -96]
Test Case: 682 | Input/Output: [(30 27 -98 -90) -98]
Test Case: 683 | Input/Output: [(58 -89 -29 -64) -89]
Test Case: 684 | Input/Output: [(-16 -56 -67 87) -67]
Test Case: 685 | Input/Output: [(-33 2 -50 -17) -50]
Test Case: 686 | Input/Output: [(18 -12 -2 -53) -53]
Test Case: 687 | Input/Output: [(-50 -1 19 -42) -50]
Test Case: 688 | Input/Output: [(-8 -36 46 -53) -53]
Test Case: 689 | Input/Output: [(-30 -2 3 -57) -57]
Test Case: 690 | Input/Output: [(-79 21 28 84) -79]
Test Case: 691 | Input/Output: [(76 -44 34 68) -44]
Test Case: 692 | Input/Output: [(76 -48 -84 -24) -84]
Test Case: 693 | Input/Output: [(13 -8 -78 33) -78]
Test Case: 694 | Input/Output: [(-54 48 -35 -72) -72]
Test Case: 695 | Input/Output: [(-56 23 92 -33) -56]
Test Case: 696 | Input/Output: [(78 43 -96 -79) -96]
Test Case: 697 | Input/Output: [(70 53 -74 5) -74]
Test Case: 698 | Input/Output: [(-46 1 40 -11) -46]
Test Case: 699 | Input/Output: [(-15 46 -33 56) -33]
Test Case: 700 | Input/Output: [(49 93 -97 94) -97]
Test Case: 701 | Input/Output: [(6 28 18 89) 6]
Test Case: 702 | Input/Output: [(-55 81 18 23) -55]
Test Case: 703 | Input/Output: [(-26 -9 -72 -97) -97]
Test Case: 704 | Input/Output: [(-66 -91 20 44) -91]
Test Case: 705 | Input/Output: [(100 -45 -8 -27) -45]
Test Case: 706 | Input/Output: [(-65 -7 71 24) -65]
Test Case: 707 | Input/Output: [(67 -29 -34 -47) -47]
Test Case: 708 | Input/Output: [(92 -24 85 -71) -71]
Test Case: 709 | Input/Output: [(-12 67 5 -80) -80]
Test Case: 710 | Input/Output: [(100 -13 81 -18) -18]
Test Case: 711 | Input/Output: [(87 -13 18 -85) -85]
Test Case: 712 | Input/Output: [(34 -39 79 47) -39]
Test Case: 713 | Input/Output: [(-34 -3 -91 -9) -91]
Test Case: 714 | Input/Output: [(-15 54 6 -80) -80]
Test Case: 715 | Input/Output: [(-63 -62 1 21) -63]
Test Case: 716 | Input/Output: [(-97 56 56 -52) -97]
Test Case: 717 | Input/Output: [(65 88 8 -97) -97]
Test Case: 718 | Input/Output: [(-13 -87 28 -33) -87]
Test Case: 719 | Input/Output: [(-98 -76 -21 99) -98]
Test Case: 720 | Input/Output: [(17 1 76 1) 1]
Test Case: 721 | Input/Output: [(79 64 -19 22) -19]
Test Case: 722 | Input/Output: [(80 7 43 -100) -100]
Test Case: 723 | Input/Output: [(-15 -61 -58 59) -61]
Test Case: 724 | Input/Output: [(86 51 -81 95) -81]
Test Case: 725 | Input/Output: [(-68 -70 -65 36) -70]
Test Case: 726 | Input/Output: [(-100 -46 29 55) -100]
Test Case: 727 | Input/Output: [(4 95 43 -96) -96]
Test Case: 728 | Input/Output: [(98 -16 -45 -7) -45]
Test Case: 729 | Input/Output: [(-43 -44 -25 86) -44]
Test Case: 730 | Input/Output: [(41 -41 -41 -46) -46]
Test Case: 731 | Input/Output: [(27 -96 -52 67) -96]
Test Case: 732 | Input/Output: [(62 81 20 -78) -78]
Test Case: 733 | Input/Output: [(22 -27 39 96) -27]
Test Case: 734 | Input/Output: [(8 -62 67 -42) -62]
Test Case: 735 | Input/Output: [(47 -25 -32 -8) -32]
Test Case: 736 | Input/Output: [(-40 -38 60 -85) -85]
Test Case: 737 | Input/Output: [(-50 62 47 22) -50]
Test Case: 738 | Input/Output: [(99 -75 64 0) -75]
Test Case: 739 | Input/Output: [(78 39 7 -73) -73]
Test Case: 740 | Input/Output: [(84 97 -38 79) -38]
Test Case: 741 | Input/Output: [(54 100 5 45) 5]
Test Case: 742 | Input/Output: [(5 92 23 38) 5]
Test Case: 743 | Input/Output: [(-44 58 73 -80) -80]
Test Case: 744 | Input/Output: [(77 56 65 59) 56]
Test Case: 745 | Input/Output: [(60 -15 49 1) -15]
Test Case: 746 | Input/Output: [(86 -13 -24 -69) -69]
Test Case: 747 | Input/Output: [(74 -27 71 -11) -27]
Test Case: 748 | Input/Output: [(24 16 -12 -6) -12]
Test Case: 749 | Input/Output: [(-49 12 -38 94) -49]
Test Case: 750 | Input/Output: [(2 87 -37 4) -37]
Test Case: 751 | Input/Output: [(70 4 88 -45) -45]
Test Case: 752 | Input/Output: [(-87 77 27 -19) -87]
Test Case: 753 | Input/Output: [(-33 44 73 -83) -83]
Test Case: 754 | Input/Output: [(-52 -83 -44 73) -83]
Test Case: 755 | Input/Output: [(-28 58 -63 -82) -82]
Test Case: 756 | Input/Output: [(22 50 5 35) 5]
Test Case: 757 | Input/Output: [(82 -47 -95 -15) -95]
Test Case: 758 | Input/Output: [(-47 87 -96 -1) -96]
Test Case: 759 | Input/Output: [(-14 -60 48 77) -60]
Test Case: 760 | Input/Output: [(19 29 79 40) 19]
Test Case: 761 | Input/Output: [(35 53 -80 80) -80]
Test Case: 762 | Input/Output: [(-91 -36 -27 29) -91]
Test Case: 763 | Input/Output: [(-79 96 -42 -97) -97]
Test Case: 764 | Input/Output: [(29 66 69 -50) -50]
Test Case: 765 | Input/Output: [(-14 -82 -96 31) -96]
Test Case: 766 | Input/Output: [(14 -29 41 2) -29]
Test Case: 767 | Input/Output: [(36 -90 89 81) -90]
Test Case: 768 | Input/Output: [(-4 30 -46 -22) -46]
Test Case: 769 | Input/Output: [(-56 -36 -10 18) -56]
Test Case: 770 | Input/Output: [(19 -90 -80 -36) -90]
Test Case: 771 | Input/Output: [(27 -18 -27 -23) -27]
Test Case: 772 | Input/Output: [(-93 66 69 32) -93]
Test Case: 773 | Input/Output: [(84 70 23 10) 10]
Test Case: 774 | Input/Output: [(-50 -75 -14 -90) -90]
Test Case: 775 | Input/Output: [(-66 82 -88 90) -88]
Test Case: 776 | Input/Output: [(-31 74 -66 89) -66]
Test Case: 777 | Input/Output: [(70 41 -21 -71) -71]
Test Case: 778 | Input/Output: [(39 8 82 93) 8]
Test Case: 779 | Input/Output: [(20 -10 -38 65) -38]
Test Case: 780 | Input/Output: [(21 -2 -53 10) -53]
Test Case: 781 | Input/Output: [(96 -43 61 89) -43]
Test Case: 782 | Input/Output: [(-27 62 -11 -17) -27]
Test Case: 783 | Input/Output: [(-22 42 88 54) -22]
Test Case: 784 | Input/Output: [(-50 -94 -53 1) -94]
Test Case: 785 | Input/Output: [(-30 60 30 57) -30]
Test Case: 786 | Input/Output: [(-66 -41 -28 -23) -66]
Test Case: 787 | Input/Output: [(-68 -54 7 42) -68]
Test Case: 788 | Input/Output: [(33 64 13 -36) -36]
Test Case: 789 | Input/Output: [(58 -42 52 70) -42]
Test Case: 790 | Input/Output: [(55 -34 67 73) -34]
Test Case: 791 | Input/Output: [(-10 67 64 -42) -42]
Test Case: 792 | Input/Output: [(-88 -45 18 -78) -88]
Test Case: 793 | Input/Output: [(31 82 38 -47) -47]
Test Case: 794 | Input/Output: [(-60 18 -3 93) -60]
Test Case: 795 | Input/Output: [(58 -25 33 64) -25]
Test Case: 796 | Input/Output: [(-69 37 32 -67) -69]
Test Case: 797 | Input/Output: [(53 -31 -59 -82) -82]
Test Case: 798 | Input/Output: [(3 78 -6 -35) -35]
Test Case: 799 | Input/Output: [(-74 -87 -35 -71) -87]
Test Case: 800 | Input/Output: [(16 -27 11 -86) -86]
Test Case: 801 | Input/Output: [(54 86 86 95) 54]
Test Case: 802 | Input/Output: [(-31 -70 -63 91) -70]
Test Case: 803 | Input/Output: [(68 -87 -60 38) -87]
Test Case: 804 | Input/Output: [(-2 -38 66 4) -38]
Test Case: 805 | Input/Output: [(-34 -27 58 68) -34]
Test Case: 806 | Input/Output: [(89 8 -98 53) -98]
Test Case: 807 | Input/Output: [(83 -8 -63 42) -63]
Test Case: 808 | Input/Output: [(-41 -77 -98 41) -98]
Test Case: 809 | Input/Output: [(-31 42 -91 59) -91]
Test Case: 810 | Input/Output: [(-98 -61 57 73) -98]
Test Case: 811 | Input/Output: [(54 -14 -30 -51) -51]
Test Case: 812 | Input/Output: [(-93 -99 51 21) -99]
Test Case: 813 | Input/Output: [(45 8 -26 -75) -75]
Test Case: 814 | Input/Output: [(-48 93 66 -51) -51]
Test Case: 815 | Input/Output: [(49 -92 -90 11) -92]
Test Case: 816 | Input/Output: [(48 38 -39 21) -39]
Test Case: 817 | Input/Output: [(49 -69 -58 10) -69]
Test Case: 818 | Input/Output: [(92 -4 -60 100) -60]
Test Case: 819 | Input/Output: [(-34 -20 -28 6) -34]
Test Case: 820 | Input/Output: [(6 -19 93 66) -19]
Test Case: 821 | Input/Output: [(91 42 -10 89) -10]
Test Case: 822 | Input/Output: [(31 -27 -58 15) -58]
Test Case: 823 | Input/Output: [(79 -40 21 25) -40]
Test Case: 824 | Input/Output: [(-18 -28 -37 -70) -70]
Test Case: 825 | Input/Output: [(-82 55 -19 62) -82]
Test Case: 826 | Input/Output: [(-53 -84 -82 39) -84]
Test Case: 827 | Input/Output: [(73 80 -76 -50) -76]
Test Case: 828 | Input/Output: [(-95 -47 15 -8) -95]
Test Case: 829 | Input/Output: [(-42 69 21 67) -42]
Test Case: 830 | Input/Output: [(-53 -51 -48 61) -53]
Test Case: 831 | Input/Output: [(6 18 12 -5) -5]
Test Case: 832 | Input/Output: [(74 -32 -89 3) -89]
Test Case: 833 | Input/Output: [(94 -51 -65 78) -65]
Test Case: 834 | Input/Output: [(83 62 85 9) 9]
Test Case: 835 | Input/Output: [(-39 41 -43 -60) -60]
Test Case: 836 | Input/Output: [(28 -76 -24 73) -76]
Test Case: 837 | Input/Output: [(66 -25 -38 -1) -38]
Test Case: 838 | Input/Output: [(100 -9 -67 47) -67]
Test Case: 839 | Input/Output: [(54 -75 -73 -75) -75]
Test Case: 840 | Input/Output: [(38 -79 -28 83) -79]
Test Case: 841 | Input/Output: [(17 16 42 7) 7]
Test Case: 842 | Input/Output: [(-49 -67 36 -37) -67]
Test Case: 843 | Input/Output: [(-19 81 -78 -86) -86]
Test Case: 844 | Input/Output: [(-72 -26 98 91) -72]
Test Case: 845 | Input/Output: [(4 52 42 -82) -82]
Test Case: 846 | Input/Output: [(-62 55 72 76) -62]
Test Case: 847 | Input/Output: [(20 -42 -59 -99) -99]
Test Case: 848 | Input/Output: [(7 32 16 -7) -7]
Test Case: 849 | Input/Output: [(65 -97 36 19) -97]
Test Case: 850 | Input/Output: [(45 -46 44 -46) -46]
Test Case: 851 | Input/Output: [(-89 43 -33 99) -89]
Test Case: 852 | Input/Output: [(-91 99 -78 -25) -91]
Test Case: 853 | Input/Output: [(56 58 -64 95) -64]
Test Case: 854 | Input/Output: [(-17 42 -96 36) -96]
Test Case: 855 | Input/Output: [(72 65 73 -3) -3]
Test Case: 856 | Input/Output: [(-69 4 -73 -68) -73]
Test Case: 857 | Input/Output: [(-48 -30 -7 28) -48]
Test Case: 858 | Input/Output: [(49 -37 -76 -6) -76]
Test Case: 859 | Input/Output: [(-92 5 -97 -90) -97]
Test Case: 860 | Input/Output: [(-32 97 -83 18) -83]
Test Case: 861 | Input/Output: [(-46 57 -25 65) -46]
Test Case: 862 | Input/Output: [(34 36 -97 -90) -97]
Test Case: 863 | Input/Output: [(-4 -79 -83 -29) -83]
Test Case: 864 | Input/Output: [(22 -33 -11 -6) -33]
Test Case: 865 | Input/Output: [(14 -27 -68 -43) -68]
Test Case: 866 | Input/Output: [(-30 -14 -21 -91) -91]
Test Case: 867 | Input/Output: [(-34 -64 50 45) -64]
Test Case: 868 | Input/Output: [(25 63 -34 -3) -34]
Test Case: 869 | Input/Output: [(48 70 -52 66) -52]
Test Case: 870 | Input/Output: [(60 -25 90 28) -25]
Test Case: 871 | Input/Output: [(-43 32 69 -40) -43]
Test Case: 872 | Input/Output: [(78 -73 -85 49) -85]
Test Case: 873 | Input/Output: [(-90 -8 59 22) -90]
Test Case: 874 | Input/Output: [(-8 98 -16 64) -16]
Test Case: 875 | Input/Output: [(76 7 22 -17) -17]
Test Case: 876 | Input/Output: [(-12 -5 -7 -49) -49]
Test Case: 877 | Input/Output: [(-11 -37 64 33) -37]
Test Case: 878 | Input/Output: [(-95 23 37 73) -95]
Test Case: 879 | Input/Output: [(85 85 95 -88) -88]
Test Case: 880 | Input/Output: [(-71 -19 76 -13) -71]
Test Case: 881 | Input/Output: [(30 58 77 -70) -70]
Test Case: 882 | Input/Output: [(15 -23 93 -45) -45]
Test Case: 883 | Input/Output: [(78 4 39 -13) -13]
Test Case: 884 | Input/Output: [(50 57 40 -80) -80]
Test Case: 885 | Input/Output: [(59 -48 -78 85) -78]
Test Case: 886 | Input/Output: [(-97 -1 -29 11) -97]
Test Case: 887 | Input/Output: [(69 66 68 47) 47]
Test Case: 888 | Input/Output: [(-25 58 -12 -57) -57]
Test Case: 889 | Input/Output: [(87 71 16 -63) -63]
Test Case: 890 | Input/Output: [(57 15 -100 -94) -100]
Test Case: 891 | Input/Output: [(-35 77 97 1) -35]
Test Case: 892 | Input/Output: [(-33 77 100 75) -33]
Test Case: 893 | Input/Output: [(57 28 11 8) 8]
Test Case: 894 | Input/Output: [(98 -6 -36 34) -36]
Test Case: 895 | Input/Output: [(1 -73 96 -19) -73]
Test Case: 896 | Input/Output: [(-20 16 83 -52) -52]
Test Case: 897 | Input/Output: [(-93 -80 -65 -12) -93]
Test Case: 898 | Input/Output: [(-23 -23 -11 80) -23]
Test Case: 899 | Input/Output: [(71 11 9 62) 9]
Test Case: 900 | Input/Output: [(-21 67 74 1) -21]
Test Case: 901 | Input/Output: [(96 -73 51 -14) -73]
Test Case: 902 | Input/Output: [(67 -24 13 85) -24]
Test Case: 903 | Input/Output: [(-86 58 16 -98) -98]
Test Case: 904 | Input/Output: [(72 90 62 -60) -60]
Test Case: 905 | Input/Output: [(9 48 66 90) 9]
Test Case: 906 | Input/Output: [(87 -84 86 37) -84]
Test Case: 907 | Input/Output: [(49 -33 9 23) -33]
Test Case: 908 | Input/Output: [(-15 8 -12 0) -15]
Test Case: 909 | Input/Output: [(-87 -67 -17 72) -87]
Test Case: 910 | Input/Output: [(58 92 -80 80) -80]
Test Case: 911 | Input/Output: [(-57 -62 -61 -82) -82]
Test Case: 912 | Input/Output: [(-26 -71 69 -86) -86]
Test Case: 913 | Input/Output: [(-68 -71 26 73) -71]
Test Case: 914 | Input/Output: [(69 47 -6 71) -6]
Test Case: 915 | Input/Output: [(-58 -85 -94 -97) -97]
Test Case: 916 | Input/Output: [(-5 -57 -55 39) -57]
Test Case: 917 | Input/Output: [(-80 70 -51 19) -80]
Test Case: 918 | Input/Output: [(-85 80 -97 32) -97]
Test Case: 919 | Input/Output: [(54 15 -25 -52) -52]
Test Case: 920 | Input/Output: [(18 22 3 41) 3]
Test Case: 921 | Input/Output: [(-3 -99 -32 72) -99]
Test Case: 922 | Input/Output: [(5 -76 65 97) -76]
Test Case: 923 | Input/Output: [(86 -58 -3 -76) -76]
Test Case: 924 | Input/Output: [(22 -12 64 79) -12]
Test Case: 925 | Input/Output: [(55 30 -7 -51) -51]
Test Case: 926 | Input/Output: [(-88 -57 -88 8) -88]
Test Case: 927 | Input/Output: [(58 98 -78 3) -78]
Test Case: 928 | Input/Output: [(72 71 -79 -18) -79]
Test Case: 929 | Input/Output: [(88 25 -40 -42) -42]
Test Case: 930 | Input/Output: [(-29 93 47 -34) -34]
Test Case: 931 | Input/Output: [(45 -76 -7 -95) -95]
Test Case: 932 | Input/Output: [(94 -96 85 -42) -96]
Test Case: 933 | Input/Output: [(41 -32 73 92) -32]
Test Case: 934 | Input/Output: [(-1 85 -44 -17) -44]
Test Case: 935 | Input/Output: [(-34 63 84 -48) -48]
Test Case: 936 | Input/Output: [(-81 -89 -95 -18) -95]
Test Case: 937 | Input/Output: [(1 34 -86 -50) -86]
Test Case: 938 | Input/Output: [(-72 -21 -97 31) -97]
Test Case: 939 | Input/Output: [(-30 -20 -5 -98) -98]
Test Case: 940 | Input/Output: [(-62 68 45 -73) -73]
Test Case: 941 | Input/Output: [(11 -84 43 88) -84]
Test Case: 942 | Input/Output: [(47 -55 19 36) -55]
Test Case: 943 | Input/Output: [(-16 -47 -93 -25) -93]
Test Case: 944 | Input/Output: [(61 29 -54 -29) -54]
Test Case: 945 | Input/Output: [(-56 16 92 -7) -56]
Test Case: 946 | Input/Output: [(11 -37 -27 28) -37]
Test Case: 947 | Input/Output: [(46 -57 -56 15) -57]
Test Case: 948 | Input/Output: [(84 76 -40 -25) -40]
Test Case: 949 | Input/Output: [(66 -42 31 -32) -42]
Test Case: 950 | Input/Output: [(32 32 43 30) 30]
Test Case: 951 | Input/Output: [(36 -43 2 -42) -43]
Test Case: 952 | Input/Output: [(85 -72 -66 -11) -72]
Test Case: 953 | Input/Output: [(65 76 5 -44) -44]
Test Case: 954 | Input/Output: [(-61 98 85 17) -61]
Test Case: 955 | Input/Output: [(39 6 -73 79) -73]
Test Case: 956 | Input/Output: [(-11 66 87 69) -11]
Test Case: 957 | Input/Output: [(15 -67 -31 -40) -67]
Test Case: 958 | Input/Output: [(-46 94 -30 -9) -46]
Test Case: 959 | Input/Output: [(-63 72 -75 -80) -80]
Test Case: 960 | Input/Output: [(-82 75 -34 -52) -82]
Test Case: 961 | Input/Output: [(7 29 66 72) 7]
Test Case: 962 | Input/Output: [(-89 -22 -21 -24) -89]
Test Case: 963 | Input/Output: [(-47 -28 -38 -96) -96]
Test Case: 964 | Input/Output: [(-27 27 52 3) -27]
Test Case: 965 | Input/Output: [(-19 -5 97 -13) -19]
Test Case: 966 | Input/Output: [(-75 -65 65 -25) -75]
Test Case: 967 | Input/Output: [(81 38 -86 -50) -86]
Test Case: 968 | Input/Output: [(74 11 87 63) 11]
Test Case: 969 | Input/Output: [(-13 -90 -95 -37) -95]
Test Case: 970 | Input/Output: [(-29 -100 90 -38) -100]
Test Case: 971 | Input/Output: [(-25 -79 -39 -90) -90]
Test Case: 972 | Input/Output: [(-82 1 -66 32) -82]
Test Case: 973 | Input/Output: [(-26 -51 -4 86) -51]
Test Case: 974 | Input/Output: [(17 62 89 -92) -92]
Test Case: 975 | Input/Output: [(48 98 69 83) 48]
Test Case: 976 | Input/Output: [(75 52 84 -84) -84]
Test Case: 977 | Input/Output: [(84 -46 58 40) -46]
Test Case: 978 | Input/Output: [(8 31 -65 48) -65]
Test Case: 979 | Input/Output: [(-91 -36 -82 29) -91]
Test Case: 980 | Input/Output: [(25 6 79 -81) -81]
Test Case: 981 | Input/Output: [(64 -46 -100 -42) -100]
Test Case: 982 | Input/Output: [(-23 63 -88 73) -88]
Test Case: 983 | Input/Output: [(-58 -10 -7 -7) -58]
Test Case: 984 | Input/Output: [(10 50 -41 -93) -93]
Test Case: 985 | Input/Output: [(38 -23 -66 -62) -66]
Test Case: 986 | Input/Output: [(76 -7 48 -20) -20]
Test Case: 987 | Input/Output: [(59 -78 -89 -93) -93]
Test Case: 988 | Input/Output: [(-17 72 -97 9) -97]
Test Case: 989 | Input/Output: [(-74 -42 88 22) -74]
Test Case: 990 | Input/Output: [(-37 96 46 39) -37]
Test Case: 991 | Input/Output: [(-34 8 37 79) -34]
Test Case: 992 | Input/Output: [(53 -61 -31 99) -61]
Test Case: 993 | Input/Output: [(87 -35 -27 71) -35]
Test Case: 994 | Input/Output: [(-33 -70 4 -64) -70]
Test Case: 995 | Input/Output: [(2 -66 -20 41) -66]
Test Case: 996 | Input/Output: [(71 -15 -20 -3) -20]
Test Case: 997 | Input/Output: [(-87 -45 -55 75) -87]
Test Case: 998 | Input/Output: [(88 60 28 -13) -13]
Test Case: 999 | Input/Output: [(-7 81 58 90) -7]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 90 -89 4 48 125 47 -76 -85 19 6 89 -74 -128 42 -119 -100
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[4 4 4 2] 2] [[69 69 -52 69] -52] [[35 35 35 -76] -76] [[-62 41 -62 -62] -62] [[13 13 82 13] 13] [[-73 -33 -73 -73] -73] [[-5 11 11 11] -5] [[16 -46 16 16] -46] [[-50 -13 -50 -50] -50] [[85 85 -6 85] -6] [(-50 -50 -50 -50) -50] [(46 46 46 46) 46] [(7 7 7 7) 7] [(-10 -10 -10 -10) -10] [(1 1 1 1) 1] [(75 89 78 81) 75] [(87 66 32 47) 32] [(11 1 31 19) 1] [(82 80 54 38) 38] [(75 48 5 88) 5] [(2 33 52 28) 2] [(86 51 62 49) 49] [(61 37 53 98) 37] [(87 0 40 31) 0] [(91 60 42 96) 42] [(98 37 78 7) 7] [(82 33 4 67) 4] [(71 78 21 54) 21] [(87 13 39 88) 13] [(88 96 12 47) 12] [(88 32 49 88) 32] [(96 15 24 93) 15] [(42 25 50 61) 25] [(56 16 97 86) 16] [(31 81 65 10) 10] [(18 -30 -64 95) -64] [(21 32 -33 47) -33] [(-2 -72 0 -77) -77] [(52 4 -73 11) -73] [(64 -85 39 -16) -85] [(-72 82 -32 -40) -72] [(16 -83 -79 -95) -95] [(-7 -39 35 76) -39] [(50 -97 -64 -9) -97] [(100 54 -65 -2) -65] [(51 -49 100 53) -49] [(70 -33 9 -24) -33] [(92 -12 98 -34) -34] [(59 -58 22 -83) -83] [(-33 94 -63 -72) -72] [(19 79 -68 -38) -68] [(75 80 -37 -23) -37] [(-73 -72 52 -53) -73] [(-16 92 -100 -8) -100] [(-31 -84 -57 -44) -84] [(-20 -8 61 -74) -74] [(-78 -62 -51 37) -78] [(-27 -80 16 39) -80] [(6 -27 69 -48) -48] [(66 -51 10 -31) -51] [(-96 10 -53 -21) -96] [(31 -22 -4 -15) -22] [(-99 -10 -93 -64) -99] [(-60 -51 -6 -7) -60] [(57 30 -99 -1) -99] [(60 -71 25 39) -71] [(14 -13 -21 65) -21] [(-49 82 34 84) -49] [(-52 73 30 -99) -99] [(0 -85 2 59) -85] [(58 -74 -76 -91) -91] [(-5 57 56 70) -5] [(-93 -5 -37 -56) -93] [(-37 -61 -99 76) -99] [(11 17 46 -1) -1] [(-93 -6 -21 34) -93] [(-98 75 -29 26) -98] [(-12 -70 46 55) -70] [(-95 14 71 24) -95] [(44 -6 88 -95) -95] [(2 -21 -32 -47) -47] [(85 -95 59 -77) -95] [(79 49 72 20) 20] [(66 55 73 -34) -34] [(-6 36 -20 17) -20] [(-14 -75 55 -95) -95] [(-94 66 18 -83) -94] [(92 92 4 -61) -61] [(-69 -94 -32 -79) -94] [(-22 24 2 -57) -57] [(-20 78 64 -56) -56] [(-39 6 -21 80) -39] [(83 -92 49 99) -92] [(54 42 -56 55) -56] [(5 92 -29 55) -29])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Lexicase best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))) ())))) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 150
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Zero cases best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))) ())))) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 150
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 6 11 1 5 7 3 6 1 1)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (4 6 11 1 5 7 3 6 1 1)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))) ())))) ())
Errors: [0 0 0 1 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 100
Size: 150
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 9.955
Median total errors in population: 10
Error averages by case: (0.996 0.994 0.989 0.999 0.995 0.993 0.997 0.994 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.407
Average program size in population (points): 69.259
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 489180
--- Timings ---
Current time: 1559314689175 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 30.8%
Fitness Testing:      1.7 seconds, 65.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Lexicase best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty boolean_rot exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))) ())))) ())
Lexicase best errors: [1 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 150
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Zero cases best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty boolean_rot exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))) ())))) ())
Zero cases best errors: [1 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 150
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 820 600 590 599 600 103 229 599 935)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (229 820 600 590 599 600 103 229 599 935)
Population mean number of perfect (error zero) cases: 5.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean integer_dup) integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) exec_dup_items) (integer_max integer_gte) (exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())))))) ())))) ())
Errors: [1 0 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 100
Size: 147
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 4.696
Median total errors in population: 3
Error averages by case: (0.771 0.18 0.4 0.41 0.401 0.4 0.897 0.771 0.401 0.065)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.91
Average program size in population (points): 102.654
Average percent parens in population: 0.294
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.478
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 873311
--- Timings ---
Current time: 1559314691829 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.6 seconds, 48.5%
Fitness Testing:      2.2 seconds, 42.6%
Report:               0.4 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Lexicase best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))) ())))) ())
Lexicase best errors: [1 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 150
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Zero cases best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))) ())))) ())
Zero cases best errors: [1 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 150
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 907 610 98 606 98 610 900 606 610)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (97 907 610 98 606 98 610 900 606 610)
Population mean number of perfect (error zero) cases: 5.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean})
Best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (boolean_invert_second_then_and) exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean) ())))))) ())) ())
Errors: [1 0 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 71
Size: 103
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 4.858
Median total errors in population: 3
Error averages by case: (0.903 0.093 0.39 0.902 0.394 0.902 0.39 0.1 0.394 0.39)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.964
Average program size in population (points): 99.504
Average percent parens in population: 0.294
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9735
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1305047
--- Timings ---
Current time: 1559314694693 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.6 seconds, 56.3%
Fitness Testing:      2.8 seconds, 33.8%
Report:               0.7 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k})
Lexicase best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k () ())))) ())))) ())
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 64
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k})
Zero cases best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k () ())))) ())))) ())
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 64
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 614 344 966 614 614 614 614 966 614)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (1 614 344 966 614 614 614 614 966 614)
Population mean number of perfect (error zero) cases: 5.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_stackdepth in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) in2) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ())))) ())))) ())
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 100
Size: 149
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 4.039
Median total errors in population: 2
Error averages by case: (0.999 0.386 0.656 0.034 0.386 0.386 0.386 0.386 0.034 0.386)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.235
Average program size in population (points): 91.566
Average percent parens in population: 0.302
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.44075
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1952665
--- Timings ---
Current time: 1559314697760 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 59.5%
Fitness Testing:      3.4 seconds, 30.5%
Report:               1.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_empty integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup boolean_empty in3 exec_empty exec_when (in1 integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer boolean_dup_times) (boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_k_when_autoconstructing () ()) ()))) ()))) ())) () ())) ()))) ())))) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 150
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_empty integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup boolean_empty in3 exec_empty exec_when (in1 integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer boolean_dup_times) (boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_k_when_autoconstructing () ()) ()))) ()))) ())) () ())) ()))) ())))) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 150
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 832 661 832 832 832 109 661 173 943)
Population mean number of elite cases: 5.98
Count of perfect (error zero) individuals by case: (109 832 661 832 832 832 109 661 173 943)
Population mean number of perfect (error zero) cases: 5.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 1, :instruction tagged_132} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while () boolean_empty) exec_shove (exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) () boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (exec_y (tagged_132) exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean exec_dup_items exec_dup_items) integer_max integer_gte) (exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ()) ()))))) ())))) ())
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 101
Size: 150
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 4.016
Median total errors in population: 3
Error averages by case: (0.891 0.168 0.339 0.168 0.168 0.168 0.891 0.339 0.827 0.057)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.627
Average program size in population (points): 114.53
Average percent parens in population: 0.313
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.8115
Median age in population: 5.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2542784
--- Timings ---
Current time: 1559314700596 milliseconds
Total Time:          14.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.7 seconds, 61.5%
Fitness Testing:      4.0 seconds, 28.6%
Report:               1.3 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 47                 
Correct output: 1                   | Program output: 11                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 61                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 91                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 67                 
Correct output: 21                  | Program output: 54                 
Correct output: 13                  | Program output: 87                 
Correct output: 12                  | Program output: 47                 
Correct output: 32                  | Program output: 88                 
Correct output: 15                  | Program output: 93                 
Correct output: 25                  | Program output: 42                 
Correct output: 16                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: 18                 
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: 11                 
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -7                 
Correct output: -97                 | Program output: -9                 
Correct output: -65                 | Program output: -2                 
Correct output: -49                 | Program output: 51                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -38                
Correct output: -37                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -44                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -1                 
Correct output: -71                 | Program output: 39                 
Correct output: -21                 | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -37                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: 83                 
Correct output: -56                 | Program output: 54                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Lexicase best program: (boolean_dup_times integer_div in4 integer_eq integer_sub in1 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (integer_stackdepth boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () integer_dup_times integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_pop (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 149
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Zero cases best program: (boolean_dup_times integer_div in4 integer_eq integer_sub in1 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (integer_stackdepth boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () integer_dup_times integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_pop (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 149
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (231 231 218 959 967 231 218 218 742 512)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (231 231 218 959 967 231 218 218 742 512)
Population mean number of perfect (error zero) cases: 4.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Best program: (boolean_dup_times integer_div in4 integer_eq integer_sub in1 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (integer_stackdepth boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () integer_dup_times integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_pop (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ())) () ()))))))) ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 102
Size: 149
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 5.473
Median total errors in population: 6
Error averages by case: (0.769 0.769 0.782 0.041 0.033 0.769 0.782 0.782 0.258 0.488)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.233
Average program size in population (points): 101.468
Average percent parens in population: 0.304
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.2636875
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3239189
--- Timings ---
Current time: 1559314703643 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 62.2%
Fitness Testing:      4.7 seconds, 27.8%
Report:               1.6 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Lexicase best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_when (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_do*times () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_dup_items exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) boolean_or) boolean_dup_times boolean_eq exec_k (boolean_rot print_boolean print_integer integer_stackdepth) (exec_stackdepth integer_lte)) (integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult) boolean_invert_first_then_and exec_when (boolean_not exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ()) () ()) ())))) ())))) ())
Lexicase best errors: [0 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 149
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction exec_shove})
Zero cases best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range () boolean_not in3 exec_eq exec_when (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (integer_sub) (exec_do*times () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_dup_items exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) boolean_or) boolean_dup_times boolean_eq exec_k (boolean_rot print_boolean print_integer integer_stackdepth) (exec_stackdepth integer_lte)) (integer_fromboolean exec_dup_items) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult) boolean_invert_first_then_and exec_when (boolean_not exec_when (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 exec_k (exec_shove ()) ()))) ())) ()) () ()) ())))) ())))) ())
Zero cases best errors: [0 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 149
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 234 234 549 963 549 234 898 220 234)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (221 234 234 549 963 549 234 898 220 234)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte})
Best program: (integer_eq exec_empty in2 in3 integer_min print_integer integer_dup integer_gte boolean_xor in2 exec_do*range () boolean_not in3 exec_eq exec_y (boolean_rot -54 exec_stackdepth exec_s_when_autoconstructing (in1) (integer_sub) (exec_dup () exec_if (integer_flush exec_empty integer_rot boolean_flush boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_dup_items) exec_dup_items) (integer_max integer_gte) ()))) () ()))))) ())))
Errors: [0 0 0 1 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 89
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 5.664
Median total errors in population: 6
Error averages by case: (0.779 0.766 0.766 0.451 0.037 0.451 0.766 0.102 0.78 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 90.374
Average program size in population (points): 132.409
Average percent parens in population: 0.316
Minimum age in population: 6.5
Maximum age in population: 9.96875
Average age in population: 8.3374375
Median age in population: 8.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4039107
--- Timings ---
Current time: 1559314706600 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 62.4%
Fitness Testing:      5.3 seconds, 26.6%
Report:               2.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 11                 
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 62                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 42                 
Correct output: 16                  | Program output: 56                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: 39                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -79                
Correct output: -39                 | Program output: -7                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 51                 
Correct output: -33                 | Program output: 9                  
Correct output: -34                 | Program output: 92                 
Correct output: -83                 | Program output: 22                 
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -48                 | Program output: 6                  
Correct output: -51                 | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: 0                  
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: 44                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: 59                 
Correct output: 20                  | Program output: 72                 
Correct output: -34                 | Program output: 66                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -69                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_rot})
Lexicase best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte integer_stackdepth boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (integer_dup_times) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and integer_gt boolean_rot) ()))) () ()))))) ()))) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 98
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_rot})
Zero cases best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte integer_stackdepth boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (integer_dup_times) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and integer_gt boolean_rot) ()))) () ()))))) ()))) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 98
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 957 673 484 481 674 674 213 957 673)
Population mean number of elite cases: 6.00
Count of perfect (error zero) individuals by case: (215 957 673 484 481 674 674 213 957 673)
Population mean number of perfect (error zero) cases: 6.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) ()) ()))) () ()))))) ()))) ())
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 100
Percent parens: 0.330
--- Population Statistics ---
Average total errors in population: 3.999
Median total errors in population: 4
Error averages by case: (0.785 0.043 0.327 0.516 0.519 0.326 0.326 0.787 0.043 0.327)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.265
Average program size in population (points): 116.738
Average percent parens in population: 0.317
Minimum age in population: 7.5
Maximum age in population: 11.8125
Average age in population: 9.916609375
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4615604
--- Timings ---
Current time: 1559314709451 milliseconds
Total Time:          22.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.5 seconds, 63.4%
Fitness Testing:      5.9 seconds, 25.6%
Report:               2.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 11                 
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 62                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 42                 
Correct output: 16                  | Program output: 56                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: 39                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -79                
Correct output: -39                 | Program output: -7                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 51                 
Correct output: -33                 | Program output: 9                  
Correct output: -34                 | Program output: 92                 
Correct output: -83                 | Program output: 22                 
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -48                 | Program output: 6                  
Correct output: -51                 | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: 0                  
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: 44                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: 59                 
Correct output: 20                  | Program output: 72                 
Correct output: -34                 | Program output: 66                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -69                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Lexicase best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing () (integer_flush) exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) ()) ()))) () ())))))) ())))) ())
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 102
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Zero cases best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing () (integer_flush) exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) ()) ()))) () ())))))) ())))) ())
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 102
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (784 1000 961 786 1000 958 787 1000 787 568)
Population mean number of elite cases: 8.63
Count of perfect (error zero) individuals by case: (784 0 961 786 0 958 787 0 787 568)
Population mean number of perfect (error zero) cases: 5.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) ()) ()))) () ()))))) ()))) ())
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 66
Size: 99
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.369
Median total errors in population: 4
Error averages by case: (0.216 1.0 0.039 0.214 1.0 0.042 0.213 1.0 0.213 0.432)
Error minima by case: (0 1 0 0 1 0 0 1 0 0)
Average genome size in population (length): 86.765
Average program size in population (points): 128.38
Average percent parens in population: 0.324
Minimum age in population: 9.5625
Maximum age in population: 13.09375
Average age in population: 11.2629296875
Median age in population: 11.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5028483
--- Timings ---
Current time: 1559314712190 milliseconds
Total Time:          25.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 64.5%
Fitness Testing:      6.3 seconds, 24.5%
Report:               2.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -33                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -13                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 89                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 81                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 32                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 82                 
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: 94                 
Correct output: -68                 | Program output: 79                 
Correct output: -37                 | Program output: 80                 
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -10                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: 82                 
Correct output: -99                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: 57                 
Correct output: -93                 | Program output: -5                 
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -6                 
Correct output: -98                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: 36                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 66                 
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 24                 
Correct output: -56                 | Program output: 78                 
Correct output: -39                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 92                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Lexicase best program: (integer_eq exec_empty in1 in3 in2 print_integer integer_dup integer_pop boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) ()) () ()))))))) ()) ()))) ())
Lexicase best errors: [0 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 98
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Zero cases best program: (integer_eq exec_empty in1 in3 in2 print_integer integer_dup integer_pop boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) ()) () ()))))))) ()) ()))) ())
Zero cases best errors: [0 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 98
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (963 1000 1 1 956 1000 1 955 956 2)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (963 0 1 1 956 0 1 955 956 2)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Best program: (integer_eq exec_empty in1 in3 in2 print_integer integer_dup integer_pop boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) ()) () ()))))))) ()) ()))) ())
Errors: [0 1 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 66
Size: 98
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 6.165
Median total errors in population: 6
Error averages by case: (0.037 1.0 0.999 0.999 0.044 1.0 0.999 0.045 0.044 0.998)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 77.662
Average program size in population (points): 115.167
Average percent parens in population: 0.325
Minimum age in population: 11.0
Maximum age in population: 14.73828125
Average age in population: 12.92230078125
Median age in population: 12.958984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5453004
--- Timings ---
Current time: 1559314715503 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 65.6%
Fitness Testing:      6.7 seconds, 23.4%
Report:               3.1 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 11                 
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 62                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 42                 
Correct output: 16                  | Program output: 56                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: 39                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -79                
Correct output: -39                 | Program output: -7                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 51                 
Correct output: -33                 | Program output: 9                  
Correct output: -34                 | Program output: 92                 
Correct output: -83                 | Program output: 22                 
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -48                 | Program output: 6                  
Correct output: -51                 | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: 0                  
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: 44                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: 59                 
Correct output: 20                  | Program output: 72                 
Correct output: -34                 | Program output: 66                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -69                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (exec_yankdup in3 exec_eq exec_y (boolean_rot boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) () (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1)) integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) (exec_k_when_autoconstructing () ())) () ())))))))))) ())
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 121
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (exec_yankdup in3 exec_eq exec_y (boolean_rot boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) () (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1)) integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) (exec_k_when_autoconstructing () ())) () ())))))))))) ())
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 121
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 415 409 409 965 409 1000 546 965)
Population mean number of elite cases: 7.12
Count of perfect (error zero) individuals by case: (0 0 415 409 409 965 409 0 546 965)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_shove})
Best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_do*while (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range () integer_yank boolean_invert_second_then_and exec_k (boolean_rot) (print_boolean exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) exec_dup_items) (integer_max integer_max integer_gte) (exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and integer_mult boolean_invert_first_then_and exec_pop (boolean_not boolean_frominteger) exec_k_when_autoconstructing (exec_while (print_exec (integer_gte boolean_pop in1 integer_gte exec_shove ()))) ())) ())))) () ()))))))) ()))) ())
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 106
Size: 157
Percent parens: 0.325
--- Population Statistics ---
Average total errors in population: 5.882
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.585 0.591 0.591 0.035 0.591 1.0 0.454 0.035)
Error minima by case: (1 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 70.586
Average program size in population (points): 104.67
Average percent parens in population: 0.325
Minimum age in population: 12.0
Maximum age in population: 16.013671875
Average age in population: 14.139509765625
Median age in population: 14.275390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 221
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6267278
--- Timings ---
Current time: 1559314718043 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.4 seconds, 64.7%
Fitness Testing:      7.4 seconds, 23.5%
Report:               3.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 11                 
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 62                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 42                 
Correct output: 16                  | Program output: 56                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: 39                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -79                
Correct output: -39                 | Program output: -7                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 51                 
Correct output: -33                 | Program output: 9                  
Correct output: -34                 | Program output: 92                 
Correct output: -83                 | Program output: 22                 
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -48                 | Program output: 6                  
Correct output: -51                 | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: 0                  
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: 44                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: 59                 
Correct output: 20                  | Program output: 72                 
Correct output: -34                 | Program output: 66                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -69                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Lexicase best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and boolean_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop () exec_k (integer_yankdup boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) exec_k (boolean_rot) ())) () ())) ()) () ()) ()))) ()))) ())
Lexicase best errors: [0 1 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Zero cases best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and boolean_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (exec_while (boolean_empty) exec_shove () exec_pop () exec_k (integer_yankdup boolean_empty in3 exec_empty exec_when (in1) integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) exec_k (boolean_rot) ())) () ())) ()) () ()) ()))) ()))) ())
Zero cases best errors: [0 1 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (768 187 187 761 768 768 772 1 187 762)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (768 187 187 761 768 768 772 1 187 762)
Population mean number of perfect (error zero) cases: 5.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 2, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot})
Best program: (integer_eq exec_empty in1 in3 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_empty boolean_rot -54 exec_pop (exec_k (integer_yankdup boolean_empty in3 exec_empty exec_when (in1 integer_flush exec_flush print_boolean print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2)) exec_s (exec_y (exec_do*range () exec_eq) print_integer) (boolean_dup_times) (boolean_invert_second_then_and exec_k (boolean_rot) ()))) () ())) ()))) ())
Errors: [0 1 1 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 54
Size: 79
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 4.839
Median total errors in population: 4
Error averages by case: (0.232 0.813 0.813 0.239 0.232 0.232 0.228 0.999 0.813 0.238)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.615
Average program size in population (points): 107.427
Average percent parens in population: 0.323
Minimum age in population: 13.0
Maximum age in population: 17.525390625
Average age in population: 15.7736435546875
Median age in population: 15.83984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6854263
--- Timings ---
Current time: 1559314720699 milliseconds
Total Time:          34.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.2 seconds, 64.9%
Fitness Testing:      8.0 seconds, 23.4%
Report:               3.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_eq exec_empty in1 in3 in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ()))))) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 106
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_eq exec_empty in1 in3 in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ()))))) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 106
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (659 283 212 658 283 948 666 658 283 212)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (659 283 212 658 283 948 666 658 283 212)
Population mean number of perfect (error zero) cases: 4.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and})
Best program: (integer_eq exec_empty in1 in3 in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ()))))) ())
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 72
Size: 106
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.138
Median total errors in population: 5
Error averages by case: (0.341 0.717 0.788 0.342 0.717 0.052 0.334 0.342 0.717 0.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.648
Average program size in population (points): 102.383
Average percent parens in population: 0.319
Minimum age in population: 14.328125
Maximum age in population: 19.04541015625
Average age in population: 17.1009521484375
Median age in population: 17.16943359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7450835
--- Timings ---
Current time: 1559314723197 milliseconds
Total Time:          36.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.8 seconds, 64.8%
Fitness Testing:      8.6 seconds, 23.4%
Report:               4.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 81                 
Correct output: 32                  | Program output: 47                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 47                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 32                 
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -2                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -38                
Correct output: -37                 | Program output: -23                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -8                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -21                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -64                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 57                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -6                 
Correct output: -98                 | Program output: 26                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_dup_times boolean_yank in4 integer_eq) integer_eq) exec_empty boolean_xor in3 integer_min) (print_integer) integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ()) ())) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 123
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_dup_times boolean_yank in4 integer_eq) integer_eq) exec_empty boolean_xor in3 integer_min) (print_integer) integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ()) ())) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 123
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (567 938 567 360 567 360 360 360 358 938)
Population mean number of elite cases: 5.38
Count of perfect (error zero) individuals by case: (567 938 567 360 567 360 360 360 358 938)
Population mean number of perfect (error zero) cases: 5.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and})
Best program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_dup_times boolean_yank in4 integer_eq) integer_eq) exec_empty boolean_xor in3 integer_min) (print_integer) integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ()) ())) ())
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 87
Size: 123
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 4.625
Median total errors in population: 5
Error averages by case: (0.433 0.062 0.433 0.64 0.433 0.64 0.64 0.64 0.642 0.062)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.794
Average program size in population (points): 101.653
Average percent parens in population: 0.313
Minimum age in population: 16.62109375
Maximum age in population: 19.73583984375
Average age in population: 18.496873046875
Median age in population: 18.5177001953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7762247
--- Timings ---
Current time: 1559314725951 milliseconds
Total Time:          39.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.9 seconds, 65.7%
Fitness Testing:      8.9 seconds, 22.7%
Report:               4.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 50                 
Correct output: 16                  | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 53                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 2                  
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Lexicase best program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min print_integer integer_dup integer_gte boolean_and exec_when (exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1 boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_y (exec_do*range (exec_eq)) print_integer) boolean_dup_times boolean_invert_second_then_and exec_dup (boolean_rot))) () ()))))))))))) () ())) ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 109
Percent parens: 0.330
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Zero cases best program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min print_integer integer_dup integer_gte boolean_and exec_when (exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1 boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_y (exec_do*range (exec_eq)) print_integer) boolean_dup_times boolean_invert_second_then_and exec_dup (boolean_rot))) () ()))))))))))) () ())) ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 109
Percent parens: 0.330
--- Lexicase Population Statistics ---
Count of elite individuals by case: (851 862 448 687 454 5 685 567 677 451)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (851 862 448 687 454 5 685 567 677 451)
Population mean number of perfect (error zero) cases: 5.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Best program: (boolean_dup_times boolean_invert_second_then_and in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min print_integer boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_pop) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_dup (boolean_rot)) () ()))))))) ()))) ())
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 96
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 4.313
Median total errors in population: 4
Error averages by case: (0.149 0.138 0.552 0.313 0.546 0.995 0.315 0.433 0.323 0.549)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.73
Average program size in population (points): 110.855
Average percent parens in population: 0.299
Minimum age in population: 18.34765625
Maximum age in population: 21.4351806640625
Average age in population: 20.12656420898438
Median age in population: 20.127197265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8223470
--- Timings ---
Current time: 1559314728703 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.8 seconds, 66.0%
Fitness Testing:      9.4 seconds, 22.2%
Report:               4.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -33                
Correct output: -68                 | Program output: 19                 
Correct output: -37                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Lexicase best program: (integer_eq exec_empty in1 boolean_rot in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (print_integer) integer_dup integer_gte boolean_and) () boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) exec_dup_items boolean_invert_second_then_and exec_dup (boolean_rot)) () ()))))))) ()))))) ())
Lexicase best errors: [0 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 109
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Zero cases best program: (integer_eq exec_empty in1 boolean_rot in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (print_integer) integer_dup integer_gte boolean_and) () boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (in1) (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) exec_dup_items boolean_invert_second_then_and exec_dup (boolean_rot)) () ()))))))) ()))))) ())
Zero cases best errors: [0 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 109
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 922 139 615 643 407 616 139 645 139)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (139 922 139 615 643 407 616 139 645 139)
Population mean number of perfect (error zero) cases: 4.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Best program: (integer_eq exec_empty in1 boolean_rot in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in3 exec_eq exec_y (exec_s_when_autoconstructing (integer_lte boolean_empty) (exec_shove () exec_pop (boolean_frominteger integer_yankdup) boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div in2) boolean_yank exec_y (exec_do*range (exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_dup (boolean_rot))))) ()))))) ())
Errors: [0 0 0 1 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 53
Size: 75
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 5.596
Median total errors in population: 5
Error averages by case: (0.861 0.078 0.861 0.385 0.357 0.593 0.384 0.861 0.355 0.861)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.791
Average program size in population (points): 104.785
Average percent parens in population: 0.305
Minimum age in population: 19.34765625
Maximum age in population: 23.032958984375
Average age in population: 21.51036804199219
Median age in population: 21.5843505859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 8672214
--- Timings ---
Current time: 1559314731411 milliseconds
Total Time:          44.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 66.4%
Fitness Testing:      9.8 seconds, 21.9%
Report:               5.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Lexicase best program: (integer_eq exec_empty in1 boolean_rot in2 integer_min integer_eq exec_empty boolean_xor in3 integer_min print_integer integer_dup integer_rot boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_flush exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_dup (boolean_rot)) () ()))))))))) () ())) ())
Lexicase best errors: [0 0 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 101
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Zero cases best program: (integer_eq exec_empty in1 boolean_rot in2 integer_min integer_eq exec_empty boolean_xor in3 integer_min print_integer integer_dup integer_rot boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (boolean_xor) in2 exec_do*range ()) boolean_not in3 in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_flush exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_dup (boolean_rot)) () ()))))))))) () ())) ())
Zero cases best errors: [0 0 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 101
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (456 923 645 375 455 377 377 375 455 373)
Population mean number of elite cases: 4.81
Count of perfect (error zero) individuals by case: (456 923 645 375 455 377 377 375 455 373)
Population mean number of perfect (error zero) cases: 4.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and})
Best program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 77
Size: 110
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.189
Median total errors in population: 5
Error averages by case: (0.544 0.077 0.355 0.625 0.545 0.623 0.623 0.625 0.545 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.138
Average program size in population (points): 104.657
Average percent parens in population: 0.310
Minimum age in population: 20.73779296875
Maximum age in population: 24.58038330078125
Average age in population: 22.90282632446289
Median age in population: 22.9652099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 9076331
--- Timings ---
Current time: 1559314734097 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.8 seconds, 66.8%
Fitness Testing:     10.3 seconds, 21.6%
Report:               5.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 206
Test mean error for best: 0.20600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Lexicase best program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*range ()) boolean_not in3 in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_flush exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_dup (boolean_rot)) () ()))))))))) () ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 97
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot})
Zero cases best program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*range ()) boolean_not in3 in3 exec_eq exec_y (boolean_rot in3 exec_eq exec_y (in1) boolean_invert_second_then_and -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_flush exec_do*while (integer_yankdup boolean_eq boolean_flush exec_dup_times (integer_lte boolean_empty) exec_shove () exec_pop (exec_k (integer_yankdup) (boolean_empty in3 exec_empty exec_when (exec_k_when_autoconstructing (integer_stackdepth) (exec_do*times (exec_shove (integer_div exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) boolean_dup_times boolean_invert_second_then_and exec_dup (boolean_rot)) () ()))))))))) () ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 97
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (927 453 945 453 928 908 945 909 927 453)
Population mean number of elite cases: 7.85
Count of perfect (error zero) individuals by case: (927 453 945 453 928 908 945 909 927 453)
Population mean number of perfect (error zero) cases: 7.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction -54} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and})
Best program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 77
Size: 110
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 2.152
Median total errors in population: 3
Error averages by case: (0.073 0.547 0.055 0.547 0.072 0.092 0.055 0.091 0.073 0.547)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.076
Average program size in population (points): 105.576
Average percent parens in population: 0.298
Minimum age in population: 23.8902587890625
Maximum age in population: 25.8017578125
Average age in population: 24.85538879394531
Median age in population: 24.8902587890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9397529
--- Timings ---
Current time: 1559314736708 milliseconds
Total Time:          50.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.7 seconds, 67.2%
Fitness Testing:     10.6 seconds, 21.1%
Report:               5.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 110


Auto-simplifying with starting size: 110
step: 0
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 500
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 1000
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 1500
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 2000
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 2500
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 3000
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 3500
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 4000
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 4500
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 5000
program: (boolean_dup_times boolean_yank in4 integer_eq integer_eq exec_empty boolean_xor in3 integer_min in2 integer_min print_integer integer_dup integer_gte boolean_and boolean_invert_first_then_and exec_swap (exec_do*while (exec_do*times (in2 exec_do*range ()) boolean_not in3 exec_eq exec_y (boolean_rot in3 exec_eq integer_mod in3 exec_eq exec_y (boolean_rot -54 exec_noop exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty exec_do*while (integer_yankdup boolean_eq print_boolean exec_rot (exec_k_when_autoconstructing (integer_stackdepth exec_do*times (exec_shove (integer_div in2) exec_s (exec_y (exec_do*range (exec_eq) print_integer) print_integer) (boolean_dup_times boolean_invert_second_then_and exec_k (boolean_rot) (integer_dup_times exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth integer_lte)) integer_fromboolean integer_dup_times) (exec_dup_items) integer_max integer_gte) exec_k_when_autoconstructing (print_exec (integer_mult print_integer) exec_flush integer_mult exec_when (boolean_and)) ()) ()) () ())) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 206
Test mean error for best: 0.20600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
