Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-2 -2 -2 -2] -2] [[-95 -95 -95 -76] -95] [[4 4 4 -41] -41] [[21 11 21 21] 11] [[-17 -17 29 -17] -17] [[-8 61 61 61] -8] [[-48 -48 83 -48] -48] [[97 -70 -70 -70] -70] [[7 44 7 7] 7] [[30 30 30 -40] -40] [(-64 -64 -64 -64) -64] [(72 72 72 72) 72] [(-96 -96 -96 -96) -96] [(-92 -92 -92 -92) -92] [(-74 -74 -74 -74) -74] [(58 28 82 54) 28] [(23 69 93 79) 23] [(74 27 2 57) 2] [(14 14 59 4) 4] [(61 4 97 31) 4] [(46 66 21 69) 21] [(85 19 38 58) 19] [(24 3 95 22) 3] [(20 16 41 59) 16] [(89 4 100 40) 4] [(13 8 35 18) 8] [(70 19 3 32) 3] [(46 76 93 28) 28] [(0 26 18 43) 0] [(89 63 4 76) 4] [(14 4 86 100) 4] [(6 30 65 4) 4] [(70 22 60 87) 22] [(70 77 47 43) 43] [(20 61 91 2) 2] [(-98 62 7 -48) -98] [(-94 43 -22 -99) -99] [(-70 37 -75 -82) -82] [(32 -13 37 69) -13] [(16 94 -49 71) -49] [(91 -83 -26 24) -83] [(-84 73 -56 46) -84] [(-57 -90 -57 -13) -90] [(-24 96 69 78) -24] [(-49 -68 75 93) -68] [(-10 39 1 84) -10] [(-72 -80 -11 -5) -80] [(-57 39 39 -22) -57] [(26 35 43 -10) -10] [(-50 -53 91 49) -53] [(18 -26 97 7) -26] [(70 -30 -64 85) -64] [(46 -22 -42 -38) -42] [(-34 74 -38 18) -38] [(55 68 -3 -2) -3] [(99 100 76 44) 44] [(-8 -60 86 -47) -60] [(-14 83 -15 41) -15] [(-45 49 22 78) -45] [(58 -34 55 -86) -86] [(-67 31 -56 5) -67] [(-32 25 -84 -71) -84] [(-47 59 -42 51) -47] [(-7 -26 77 84) -26] [(98 5 98 -16) -16] [(-65 -44 17 -86) -86] [(-67 83 26 8) -67] [(-24 -84 86 31) -84] [(-7 -41 86 -10) -41] [(-58 -78 -84 66) -84] [(93 52 -32 -35) -35] [(13 82 -16 9) -16] [(-1 81 -34 23) -34] [(98 67 -21 47) -21] [(-65 -69 -81 -71) -81] [(100 -51 82 65) -51] [(80 60 -11 -14) -14] [(26 -42 -97 -73) -97] [(-73 -41 83 93) -73] [(-56 -3 -76 -70) -76] [(85 -34 -69 89) -69] [(20 31 86 88) 20] [(65 76 1 39) 1] [(-86 -57 -62 -37) -86] [(10 -41 30 33) -41] [(71 -96 -1 -28) -96] [(60 -100 24 -50) -100] [(-90 -78 -23 -71) -90] [(60 -25 3 41) -25] [(96 -48 -54 -99) -99] [(-96 -74 96 -70) -96] [(37 95 77 1) 1] [(55 77 28 23) 23] [(-43 -89 -31 72) -89] [(62 91 15 88) 15])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-2 -2 -2 -2] -2]
Train Case:   6 | Input/Output: [[-95 -95 -95 -76] -95]
Train Case:   7 | Input/Output: [[4 4 4 -41] -41]
Train Case:   8 | Input/Output: [[21 11 21 21] 11]
Train Case:   9 | Input/Output: [[-17 -17 29 -17] -17]
Train Case:  10 | Input/Output: [[-8 61 61 61] -8]
Train Case:  11 | Input/Output: [[-48 -48 83 -48] -48]
Train Case:  12 | Input/Output: [[97 -70 -70 -70] -70]
Train Case:  13 | Input/Output: [[7 44 7 7] 7]
Train Case:  14 | Input/Output: [[30 30 30 -40] -40]
Train Case:  15 | Input/Output: [(-64 -64 -64 -64) -64]
Train Case:  16 | Input/Output: [(72 72 72 72) 72]
Train Case:  17 | Input/Output: [(-96 -96 -96 -96) -96]
Train Case:  18 | Input/Output: [(-92 -92 -92 -92) -92]
Train Case:  19 | Input/Output: [(-74 -74 -74 -74) -74]
Train Case:  20 | Input/Output: [(58 28 82 54) 28]
Train Case:  21 | Input/Output: [(23 69 93 79) 23]
Train Case:  22 | Input/Output: [(74 27 2 57) 2]
Train Case:  23 | Input/Output: [(14 14 59 4) 4]
Train Case:  24 | Input/Output: [(61 4 97 31) 4]
Train Case:  25 | Input/Output: [(46 66 21 69) 21]
Train Case:  26 | Input/Output: [(85 19 38 58) 19]
Train Case:  27 | Input/Output: [(24 3 95 22) 3]
Train Case:  28 | Input/Output: [(20 16 41 59) 16]
Train Case:  29 | Input/Output: [(89 4 100 40) 4]
Train Case:  30 | Input/Output: [(13 8 35 18) 8]
Train Case:  31 | Input/Output: [(70 19 3 32) 3]
Train Case:  32 | Input/Output: [(46 76 93 28) 28]
Train Case:  33 | Input/Output: [(0 26 18 43) 0]
Train Case:  34 | Input/Output: [(89 63 4 76) 4]
Train Case:  35 | Input/Output: [(14 4 86 100) 4]
Train Case:  36 | Input/Output: [(6 30 65 4) 4]
Train Case:  37 | Input/Output: [(70 22 60 87) 22]
Train Case:  38 | Input/Output: [(70 77 47 43) 43]
Train Case:  39 | Input/Output: [(20 61 91 2) 2]
Train Case:  40 | Input/Output: [(-98 62 7 -48) -98]
Train Case:  41 | Input/Output: [(-94 43 -22 -99) -99]
Train Case:  42 | Input/Output: [(-70 37 -75 -82) -82]
Train Case:  43 | Input/Output: [(32 -13 37 69) -13]
Train Case:  44 | Input/Output: [(16 94 -49 71) -49]
Train Case:  45 | Input/Output: [(91 -83 -26 24) -83]
Train Case:  46 | Input/Output: [(-84 73 -56 46) -84]
Train Case:  47 | Input/Output: [(-57 -90 -57 -13) -90]
Train Case:  48 | Input/Output: [(-24 96 69 78) -24]
Train Case:  49 | Input/Output: [(-49 -68 75 93) -68]
Train Case:  50 | Input/Output: [(-10 39 1 84) -10]
Train Case:  51 | Input/Output: [(-72 -80 -11 -5) -80]
Train Case:  52 | Input/Output: [(-57 39 39 -22) -57]
Train Case:  53 | Input/Output: [(26 35 43 -10) -10]
Train Case:  54 | Input/Output: [(-50 -53 91 49) -53]
Train Case:  55 | Input/Output: [(18 -26 97 7) -26]
Train Case:  56 | Input/Output: [(70 -30 -64 85) -64]
Train Case:  57 | Input/Output: [(46 -22 -42 -38) -42]
Train Case:  58 | Input/Output: [(-34 74 -38 18) -38]
Train Case:  59 | Input/Output: [(55 68 -3 -2) -3]
Train Case:  60 | Input/Output: [(99 100 76 44) 44]
Train Case:  61 | Input/Output: [(-8 -60 86 -47) -60]
Train Case:  62 | Input/Output: [(-14 83 -15 41) -15]
Train Case:  63 | Input/Output: [(-45 49 22 78) -45]
Train Case:  64 | Input/Output: [(58 -34 55 -86) -86]
Train Case:  65 | Input/Output: [(-67 31 -56 5) -67]
Train Case:  66 | Input/Output: [(-32 25 -84 -71) -84]
Train Case:  67 | Input/Output: [(-47 59 -42 51) -47]
Train Case:  68 | Input/Output: [(-7 -26 77 84) -26]
Train Case:  69 | Input/Output: [(98 5 98 -16) -16]
Train Case:  70 | Input/Output: [(-65 -44 17 -86) -86]
Train Case:  71 | Input/Output: [(-67 83 26 8) -67]
Train Case:  72 | Input/Output: [(-24 -84 86 31) -84]
Train Case:  73 | Input/Output: [(-7 -41 86 -10) -41]
Train Case:  74 | Input/Output: [(-58 -78 -84 66) -84]
Train Case:  75 | Input/Output: [(93 52 -32 -35) -35]
Train Case:  76 | Input/Output: [(13 82 -16 9) -16]
Train Case:  77 | Input/Output: [(-1 81 -34 23) -34]
Train Case:  78 | Input/Output: [(98 67 -21 47) -21]
Train Case:  79 | Input/Output: [(-65 -69 -81 -71) -81]
Train Case:  80 | Input/Output: [(100 -51 82 65) -51]
Train Case:  81 | Input/Output: [(80 60 -11 -14) -14]
Train Case:  82 | Input/Output: [(26 -42 -97 -73) -97]
Train Case:  83 | Input/Output: [(-73 -41 83 93) -73]
Train Case:  84 | Input/Output: [(-56 -3 -76 -70) -76]
Train Case:  85 | Input/Output: [(85 -34 -69 89) -69]
Train Case:  86 | Input/Output: [(20 31 86 88) 20]
Train Case:  87 | Input/Output: [(65 76 1 39) 1]
Train Case:  88 | Input/Output: [(-86 -57 -62 -37) -86]
Train Case:  89 | Input/Output: [(10 -41 30 33) -41]
Train Case:  90 | Input/Output: [(71 -96 -1 -28) -96]
Train Case:  91 | Input/Output: [(60 -100 24 -50) -100]
Train Case:  92 | Input/Output: [(-90 -78 -23 -71) -90]
Train Case:  93 | Input/Output: [(60 -25 3 41) -25]
Train Case:  94 | Input/Output: [(96 -48 -54 -99) -99]
Train Case:  95 | Input/Output: [(-96 -74 96 -70) -96]
Train Case:  96 | Input/Output: [(37 95 77 1) 1]
Train Case:  97 | Input/Output: [(55 77 28 23) 23]
Train Case:  98 | Input/Output: [(-43 -89 -31 72) -89]
Train Case:  99 | Input/Output: [(62 91 15 88) 15]
Test Case:   0 | Input/Output: [[6 -28 -28 -28] -28]
Test Case:   1 | Input/Output: [[45 100 45 45] 45]
Test Case:   2 | Input/Output: [[79 -16 79 79] -16]
Test Case:   3 | Input/Output: [[2 2 2 12] 2]
Test Case:   4 | Input/Output: [[14 -42 -42 -42] -42]
Test Case:   5 | Input/Output: [[40 -73 -73 -73] -73]
Test Case:   6 | Input/Output: [[-79 -79 -70 -79] -79]
Test Case:   7 | Input/Output: [[35 35 36 35] 35]
Test Case:   8 | Input/Output: [[73 73 49 73] 49]
Test Case:   9 | Input/Output: [[-10 -10 97 -10] -10]
Test Case:  10 | Input/Output: [[-61 12 -61 -61] -61]
Test Case:  11 | Input/Output: [[9 -39 -39 -39] -39]
Test Case:  12 | Input/Output: [[-99 -99 -43 -99] -99]
Test Case:  13 | Input/Output: [[-91 -62 -91 -91] -91]
Test Case:  14 | Input/Output: [[70 70 70 -91] -91]
Test Case:  15 | Input/Output: [[-11 -11 61 -11] -11]
Test Case:  16 | Input/Output: [[18 18 18 88] 18]
Test Case:  17 | Input/Output: [[-6 5 5 5] -6]
Test Case:  18 | Input/Output: [[69 -83 -83 -83] -83]
Test Case:  19 | Input/Output: [[64 64 46 64] 46]
Test Case:  20 | Input/Output: [[15 15 15 -17] -17]
Test Case:  21 | Input/Output: [[-94 16 16 16] -94]
Test Case:  22 | Input/Output: [[-74 -19 -19 -19] -74]
Test Case:  23 | Input/Output: [[80 80 80 71] 71]
Test Case:  24 | Input/Output: [[19 19 19 -37] -37]
Test Case:  25 | Input/Output: [[-37 81 -37 -37] -37]
Test Case:  26 | Input/Output: [[86 -5 86 86] -5]
Test Case:  27 | Input/Output: [[37 37 44 37] 37]
Test Case:  28 | Input/Output: [[21 -62 -62 -62] -62]
Test Case:  29 | Input/Output: [[26 26 -2 26] -2]
Test Case:  30 | Input/Output: [[-7 -3 -3 -3] -7]
Test Case:  31 | Input/Output: [[-54 -82 -54 -54] -82]
Test Case:  32 | Input/Output: [[80 80 38 80] 38]
Test Case:  33 | Input/Output: [[-18 -34 -18 -18] -34]
Test Case:  34 | Input/Output: [[-95 -95 -95 95] -95]
Test Case:  35 | Input/Output: [[95 -12 95 95] -12]
Test Case:  36 | Input/Output: [[77 77 77 -59] -59]
Test Case:  37 | Input/Output: [[86 89 89 89] 86]
Test Case:  38 | Input/Output: [[-64 -64 -8 -64] -64]
Test Case:  39 | Input/Output: [[-78 -78 -78 -50] -78]
Test Case:  40 | Input/Output: [[-10 0 -10 -10] -10]
Test Case:  41 | Input/Output: [[-49 -42 -42 -42] -49]
Test Case:  42 | Input/Output: [[47 47 47 61] 47]
Test Case:  43 | Input/Output: [[-87 -87 -1 -87] -87]
Test Case:  44 | Input/Output: [[54 54 54 -95] -95]
Test Case:  45 | Input/Output: [[-70 -70 -43 -70] -70]
Test Case:  46 | Input/Output: [[47 47 47 47] 47]
Test Case:  47 | Input/Output: [[34 66 34 34] 34]
Test Case:  48 | Input/Output: [[38 -34 38 38] -34]
Test Case:  49 | Input/Output: [[88 88 88 -29] -29]
Test Case:  50 | Input/Output: [[-18 -18 -58 -18] -58]
Test Case:  51 | Input/Output: [[-87 -87 -87 -49] -87]
Test Case:  52 | Input/Output: [[9 -93 9 9] -93]
Test Case:  53 | Input/Output: [[17 -71 -71 -71] -71]
Test Case:  54 | Input/Output: [[80 50 80 80] 50]
Test Case:  55 | Input/Output: [[87 87 87 27] 27]
Test Case:  56 | Input/Output: [[-73 -93 -93 -93] -93]
Test Case:  57 | Input/Output: [[-84 86 86 86] -84]
Test Case:  58 | Input/Output: [[-84 -84 -38 -84] -84]
Test Case:  59 | Input/Output: [[46 46 36 46] 36]
Test Case:  60 | Input/Output: [[49 49 49 -70] -70]
Test Case:  61 | Input/Output: [[-18 -18 -25 -18] -25]
Test Case:  62 | Input/Output: [[-66 -66 -66 96] -66]
Test Case:  63 | Input/Output: [[-67 -99 -67 -67] -99]
Test Case:  64 | Input/Output: [[78 78 78 -37] -37]
Test Case:  65 | Input/Output: [[35 35 -75 35] -75]
Test Case:  66 | Input/Output: [[55 55 -93 55] -93]
Test Case:  67 | Input/Output: [[4 34 34 34] 4]
Test Case:  68 | Input/Output: [[-11 -11 -11 -99] -99]
Test Case:  69 | Input/Output: [[-35 -35 -98 -35] -98]
Test Case:  70 | Input/Output: [[22 -14 22 22] -14]
Test Case:  71 | Input/Output: [[-96 -96 -96 -96] -96]
Test Case:  72 | Input/Output: [[-86 25 25 25] -86]
Test Case:  73 | Input/Output: [[-19 -7 -19 -19] -19]
Test Case:  74 | Input/Output: [[64 64 40 64] 40]
Test Case:  75 | Input/Output: [[27 27 -10 27] -10]
Test Case:  76 | Input/Output: [[-53 100 100 100] -53]
Test Case:  77 | Input/Output: [[39 -30 -30 -30] -30]
Test Case:  78 | Input/Output: [[-18 -52 -18 -18] -52]
Test Case:  79 | Input/Output: [[-42 -54 -54 -54] -54]
Test Case:  80 | Input/Output: [[54 -69 54 54] -69]
Test Case:  81 | Input/Output: [[58 58 -50 58] -50]
Test Case:  82 | Input/Output: [[-81 -40 -40 -40] -81]
Test Case:  83 | Input/Output: [[-54 60 -54 -54] -54]
Test Case:  84 | Input/Output: [[4 4 6 4] 4]
Test Case:  85 | Input/Output: [[78 -38 -38 -38] -38]
Test Case:  86 | Input/Output: [[-77 -22 -22 -22] -77]
Test Case:  87 | Input/Output: [[-43 26 26 26] -43]
Test Case:  88 | Input/Output: [[98 98 -24 98] -24]
Test Case:  89 | Input/Output: [[53 99 53 53] 53]
Test Case:  90 | Input/Output: [[96 -40 96 96] -40]
Test Case:  91 | Input/Output: [[-15 -18 -18 -18] -18]
Test Case:  92 | Input/Output: [[64 64 64 62] 62]
Test Case:  93 | Input/Output: [[58 63 58 58] 58]
Test Case:  94 | Input/Output: [[65 -62 -62 -62] -62]
Test Case:  95 | Input/Output: [[23 23 23 14] 14]
Test Case:  96 | Input/Output: [[95 95 95 0] 0]
Test Case:  97 | Input/Output: [[1 1 1 75] 1]
Test Case:  98 | Input/Output: [[-49 -49 -49 -64] -64]
Test Case:  99 | Input/Output: [[76 6 6 6] 6]
Test Case: 100 | Input/Output: [(77 77 77 77) 77]
Test Case: 101 | Input/Output: [(20 20 20 20) 20]
Test Case: 102 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 103 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 104 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 105 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 106 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 107 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 108 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 109 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 110 | Input/Output: [(33 33 33 33) 33]
Test Case: 111 | Input/Output: [(51 51 51 51) 51]
Test Case: 112 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 113 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 114 | Input/Output: [(4 4 4 4) 4]
Test Case: 115 | Input/Output: [(51 51 51 51) 51]
Test Case: 116 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 117 | Input/Output: [(11 11 11 11) 11]
Test Case: 118 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 119 | Input/Output: [(93 93 93 93) 93]
Test Case: 120 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 121 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 122 | Input/Output: [(77 77 77 77) 77]
Test Case: 123 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 124 | Input/Output: [(91 91 91 91) 91]
Test Case: 125 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 126 | Input/Output: [(77 77 77 77) 77]
Test Case: 127 | Input/Output: [(53 53 53 53) 53]
Test Case: 128 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 129 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 130 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 131 | Input/Output: [(83 83 83 83) 83]
Test Case: 132 | Input/Output: [(82 82 82 82) 82]
Test Case: 133 | Input/Output: [(29 29 29 29) 29]
Test Case: 134 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 135 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 136 | Input/Output: [(12 12 12 12) 12]
Test Case: 137 | Input/Output: [(26 26 26 26) 26]
Test Case: 138 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 139 | Input/Output: [(97 97 97 97) 97]
Test Case: 140 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 141 | Input/Output: [(77 77 77 77) 77]
Test Case: 142 | Input/Output: [(40 40 40 40) 40]
Test Case: 143 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 144 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 145 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 146 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 147 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 148 | Input/Output: [(32 32 32 32) 32]
Test Case: 149 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 150 | Input/Output: [(60 60 60 60) 60]
Test Case: 151 | Input/Output: [(61 61 61 61) 61]
Test Case: 152 | Input/Output: [(95 95 95 95) 95]
Test Case: 153 | Input/Output: [(6 6 6 6) 6]
Test Case: 154 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 155 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 156 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 157 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 158 | Input/Output: [(83 83 83 83) 83]
Test Case: 159 | Input/Output: [(30 30 30 30) 30]
Test Case: 160 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 161 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 162 | Input/Output: [(90 90 90 90) 90]
Test Case: 163 | Input/Output: [(73 73 73 73) 73]
Test Case: 164 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 165 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 166 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 167 | Input/Output: [(0 0 0 0) 0]
Test Case: 168 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 169 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 170 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 171 | Input/Output: [(16 16 16 16) 16]
Test Case: 172 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 173 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 174 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 175 | Input/Output: [(1 1 1 1) 1]
Test Case: 176 | Input/Output: [(94 94 94 94) 94]
Test Case: 177 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 178 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 179 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 180 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 181 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 182 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 183 | Input/Output: [(56 56 56 56) 56]
Test Case: 184 | Input/Output: [(96 96 96 96) 96]
Test Case: 185 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 186 | Input/Output: [(35 35 35 35) 35]
Test Case: 187 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 188 | Input/Output: [(49 49 49 49) 49]
Test Case: 189 | Input/Output: [(68 68 68 68) 68]
Test Case: 190 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 191 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 192 | Input/Output: [(12 12 12 12) 12]
Test Case: 193 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 194 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 195 | Input/Output: [(25 25 25 25) 25]
Test Case: 196 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 197 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 198 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 199 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 200 | Input/Output: [(78 67 55 26) 26]
Test Case: 201 | Input/Output: [(96 10 96 49) 10]
Test Case: 202 | Input/Output: [(100 52 87 95) 52]
Test Case: 203 | Input/Output: [(11 6 62 46) 6]
Test Case: 204 | Input/Output: [(51 60 77 9) 9]
Test Case: 205 | Input/Output: [(56 99 46 55) 46]
Test Case: 206 | Input/Output: [(52 5 0 70) 0]
Test Case: 207 | Input/Output: [(7 10 18 22) 7]
Test Case: 208 | Input/Output: [(66 4 36 98) 4]
Test Case: 209 | Input/Output: [(71 52 7 71) 7]
Test Case: 210 | Input/Output: [(45 16 10 58) 10]
Test Case: 211 | Input/Output: [(98 43 6 26) 6]
Test Case: 212 | Input/Output: [(77 50 25 5) 5]
Test Case: 213 | Input/Output: [(17 35 56 12) 12]
Test Case: 214 | Input/Output: [(24 78 61 92) 24]
Test Case: 215 | Input/Output: [(74 75 37 22) 22]
Test Case: 216 | Input/Output: [(12 89 27 93) 12]
Test Case: 217 | Input/Output: [(97 28 64 80) 28]
Test Case: 218 | Input/Output: [(80 12 65 29) 12]
Test Case: 219 | Input/Output: [(7 40 33 99) 7]
Test Case: 220 | Input/Output: [(86 82 16 83) 16]
Test Case: 221 | Input/Output: [(44 56 13 5) 5]
Test Case: 222 | Input/Output: [(7 97 40 70) 7]
Test Case: 223 | Input/Output: [(94 59 79 76) 59]
Test Case: 224 | Input/Output: [(91 97 31 50) 31]
Test Case: 225 | Input/Output: [(11 48 50 25) 11]
Test Case: 226 | Input/Output: [(30 12 91 23) 12]
Test Case: 227 | Input/Output: [(27 43 78 97) 27]
Test Case: 228 | Input/Output: [(56 37 32 1) 1]
Test Case: 229 | Input/Output: [(58 66 7 70) 7]
Test Case: 230 | Input/Output: [(75 68 11 81) 11]
Test Case: 231 | Input/Output: [(36 46 43 25) 25]
Test Case: 232 | Input/Output: [(0 98 22 40) 0]
Test Case: 233 | Input/Output: [(85 50 86 82) 50]
Test Case: 234 | Input/Output: [(34 40 17 15) 15]
Test Case: 235 | Input/Output: [(59 98 17 70) 17]
Test Case: 236 | Input/Output: [(29 81 14 25) 14]
Test Case: 237 | Input/Output: [(69 6 47 72) 6]
Test Case: 238 | Input/Output: [(3 86 16 74) 3]
Test Case: 239 | Input/Output: [(23 63 17 61) 17]
Test Case: 240 | Input/Output: [(88 70 38 52) 38]
Test Case: 241 | Input/Output: [(23 2 49 86) 2]
Test Case: 242 | Input/Output: [(65 0 1 80) 0]
Test Case: 243 | Input/Output: [(39 89 68 94) 39]
Test Case: 244 | Input/Output: [(15 26 91 25) 15]
Test Case: 245 | Input/Output: [(51 27 56 66) 27]
Test Case: 246 | Input/Output: [(3 84 89 97) 3]
Test Case: 247 | Input/Output: [(8 6 16 61) 6]
Test Case: 248 | Input/Output: [(38 61 72 10) 10]
Test Case: 249 | Input/Output: [(43 100 99 63) 43]
Test Case: 250 | Input/Output: [(62 60 62 58) 58]
Test Case: 251 | Input/Output: [(86 30 100 25) 25]
Test Case: 252 | Input/Output: [(33 77 7 2) 2]
Test Case: 253 | Input/Output: [(53 4 50 3) 3]
Test Case: 254 | Input/Output: [(37 65 47 14) 14]
Test Case: 255 | Input/Output: [(28 40 96 75) 28]
Test Case: 256 | Input/Output: [(46 56 20 51) 20]
Test Case: 257 | Input/Output: [(85 41 19 1) 1]
Test Case: 258 | Input/Output: [(24 6 88 11) 6]
Test Case: 259 | Input/Output: [(17 42 83 13) 13]
Test Case: 260 | Input/Output: [(15 74 0 46) 0]
Test Case: 261 | Input/Output: [(52 9 64 56) 9]
Test Case: 262 | Input/Output: [(89 17 28 42) 17]
Test Case: 263 | Input/Output: [(67 87 55 66) 55]
Test Case: 264 | Input/Output: [(67 91 10 25) 10]
Test Case: 265 | Input/Output: [(64 43 73 97) 43]
Test Case: 266 | Input/Output: [(38 81 75 3) 3]
Test Case: 267 | Input/Output: [(4 35 4 62) 4]
Test Case: 268 | Input/Output: [(16 93 87 92) 16]
Test Case: 269 | Input/Output: [(92 83 99 52) 52]
Test Case: 270 | Input/Output: [(73 28 22 48) 22]
Test Case: 271 | Input/Output: [(84 13 73 6) 6]
Test Case: 272 | Input/Output: [(44 88 55 84) 44]
Test Case: 273 | Input/Output: [(89 98 54 50) 50]
Test Case: 274 | Input/Output: [(60 99 54 4) 4]
Test Case: 275 | Input/Output: [(28 20 64 95) 20]
Test Case: 276 | Input/Output: [(37 64 90 88) 37]
Test Case: 277 | Input/Output: [(35 34 19 18) 18]
Test Case: 278 | Input/Output: [(22 40 30 54) 22]
Test Case: 279 | Input/Output: [(75 58 2 5) 2]
Test Case: 280 | Input/Output: [(4 18 93 95) 4]
Test Case: 281 | Input/Output: [(15 29 77 75) 15]
Test Case: 282 | Input/Output: [(93 88 4 47) 4]
Test Case: 283 | Input/Output: [(24 73 89 31) 24]
Test Case: 284 | Input/Output: [(42 84 64 84) 42]
Test Case: 285 | Input/Output: [(10 70 74 30) 10]
Test Case: 286 | Input/Output: [(15 48 0 38) 0]
Test Case: 287 | Input/Output: [(66 27 49 77) 27]
Test Case: 288 | Input/Output: [(15 42 16 17) 15]
Test Case: 289 | Input/Output: [(60 21 50 60) 21]
Test Case: 290 | Input/Output: [(99 1 11 14) 1]
Test Case: 291 | Input/Output: [(27 22 56 16) 16]
Test Case: 292 | Input/Output: [(28 90 51 85) 28]
Test Case: 293 | Input/Output: [(80 85 46 36) 36]
Test Case: 294 | Input/Output: [(57 8 33 10) 8]
Test Case: 295 | Input/Output: [(52 55 9 32) 9]
Test Case: 296 | Input/Output: [(79 0 98 20) 0]
Test Case: 297 | Input/Output: [(78 79 35 70) 35]
Test Case: 298 | Input/Output: [(31 46 30 83) 30]
Test Case: 299 | Input/Output: [(47 67 97 52) 47]
Test Case: 300 | Input/Output: [(14 85 26 90) 14]
Test Case: 301 | Input/Output: [(95 70 7 28) 7]
Test Case: 302 | Input/Output: [(65 35 77 60) 35]
Test Case: 303 | Input/Output: [(68 100 70 95) 68]
Test Case: 304 | Input/Output: [(89 40 96 33) 33]
Test Case: 305 | Input/Output: [(12 82 46 50) 12]
Test Case: 306 | Input/Output: [(5 96 69 3) 3]
Test Case: 307 | Input/Output: [(99 27 11 8) 8]
Test Case: 308 | Input/Output: [(32 91 30 52) 30]
Test Case: 309 | Input/Output: [(24 10 24 93) 10]
Test Case: 310 | Input/Output: [(51 92 24 37) 24]
Test Case: 311 | Input/Output: [(13 70 91 36) 13]
Test Case: 312 | Input/Output: [(14 69 32 31) 14]
Test Case: 313 | Input/Output: [(85 48 34 45) 34]
Test Case: 314 | Input/Output: [(14 24 33 18) 14]
Test Case: 315 | Input/Output: [(2 93 39 54) 2]
Test Case: 316 | Input/Output: [(78 87 39 37) 37]
Test Case: 317 | Input/Output: [(96 15 93 80) 15]
Test Case: 318 | Input/Output: [(20 27 82 62) 20]
Test Case: 319 | Input/Output: [(54 32 89 74) 32]
Test Case: 320 | Input/Output: [(77 9 30 89) 9]
Test Case: 321 | Input/Output: [(92 36 95 13) 13]
Test Case: 322 | Input/Output: [(81 78 50 5) 5]
Test Case: 323 | Input/Output: [(73 46 64 7) 7]
Test Case: 324 | Input/Output: [(17 77 97 51) 17]
Test Case: 325 | Input/Output: [(82 71 58 49) 49]
Test Case: 326 | Input/Output: [(17 59 53 22) 17]
Test Case: 327 | Input/Output: [(4 62 71 5) 4]
Test Case: 328 | Input/Output: [(15 66 71 33) 15]
Test Case: 329 | Input/Output: [(83 47 94 30) 30]
Test Case: 330 | Input/Output: [(100 8 29 3) 3]
Test Case: 331 | Input/Output: [(26 21 92 100) 21]
Test Case: 332 | Input/Output: [(21 76 47 34) 21]
Test Case: 333 | Input/Output: [(64 67 86 85) 64]
Test Case: 334 | Input/Output: [(15 1 5 1) 1]
Test Case: 335 | Input/Output: [(59 73 7 81) 7]
Test Case: 336 | Input/Output: [(19 34 85 91) 19]
Test Case: 337 | Input/Output: [(1 94 52 92) 1]
Test Case: 338 | Input/Output: [(78 7 32 28) 7]
Test Case: 339 | Input/Output: [(43 93 87 94) 43]
Test Case: 340 | Input/Output: [(20 25 68 53) 20]
Test Case: 341 | Input/Output: [(51 27 31 21) 21]
Test Case: 342 | Input/Output: [(20 26 68 42) 20]
Test Case: 343 | Input/Output: [(47 68 83 20) 20]
Test Case: 344 | Input/Output: [(93 21 53 48) 21]
Test Case: 345 | Input/Output: [(73 53 56 5) 5]
Test Case: 346 | Input/Output: [(90 9 21 63) 9]
Test Case: 347 | Input/Output: [(33 71 22 5) 5]
Test Case: 348 | Input/Output: [(8 59 76 77) 8]
Test Case: 349 | Input/Output: [(60 40 54 30) 30]
Test Case: 350 | Input/Output: [(2 40 39 74) 2]
Test Case: 351 | Input/Output: [(58 37 90 44) 37]
Test Case: 352 | Input/Output: [(94 53 37 29) 29]
Test Case: 353 | Input/Output: [(57 16 94 2) 2]
Test Case: 354 | Input/Output: [(31 10 97 76) 10]
Test Case: 355 | Input/Output: [(8 41 52 32) 8]
Test Case: 356 | Input/Output: [(66 84 20 71) 20]
Test Case: 357 | Input/Output: [(16 72 68 43) 16]
Test Case: 358 | Input/Output: [(23 74 40 98) 23]
Test Case: 359 | Input/Output: [(95 0 41 43) 0]
Test Case: 360 | Input/Output: [(21 28 66 42) 21]
Test Case: 361 | Input/Output: [(90 61 57 39) 39]
Test Case: 362 | Input/Output: [(94 24 64 90) 24]
Test Case: 363 | Input/Output: [(62 22 26 25) 22]
Test Case: 364 | Input/Output: [(77 95 64 24) 24]
Test Case: 365 | Input/Output: [(74 51 59 3) 3]
Test Case: 366 | Input/Output: [(48 13 61 90) 13]
Test Case: 367 | Input/Output: [(29 16 95 89) 16]
Test Case: 368 | Input/Output: [(13 61 34 94) 13]
Test Case: 369 | Input/Output: [(92 58 18 5) 5]
Test Case: 370 | Input/Output: [(23 62 20 85) 20]
Test Case: 371 | Input/Output: [(37 77 92 22) 22]
Test Case: 372 | Input/Output: [(1 16 50 99) 1]
Test Case: 373 | Input/Output: [(67 43 85 63) 43]
Test Case: 374 | Input/Output: [(33 49 19 18) 18]
Test Case: 375 | Input/Output: [(74 12 75 16) 12]
Test Case: 376 | Input/Output: [(2 48 5 62) 2]
Test Case: 377 | Input/Output: [(52 97 23 56) 23]
Test Case: 378 | Input/Output: [(6 27 69 71) 6]
Test Case: 379 | Input/Output: [(33 95 97 62) 33]
Test Case: 380 | Input/Output: [(28 59 24 51) 24]
Test Case: 381 | Input/Output: [(10 71 92 66) 10]
Test Case: 382 | Input/Output: [(74 55 57 17) 17]
Test Case: 383 | Input/Output: [(21 43 9 76) 9]
Test Case: 384 | Input/Output: [(97 16 50 50) 16]
Test Case: 385 | Input/Output: [(85 72 84 69) 69]
Test Case: 386 | Input/Output: [(41 20 81 83) 20]
Test Case: 387 | Input/Output: [(79 49 86 41) 41]
Test Case: 388 | Input/Output: [(3 43 68 44) 3]
Test Case: 389 | Input/Output: [(36 55 8 4) 4]
Test Case: 390 | Input/Output: [(1 78 74 8) 1]
Test Case: 391 | Input/Output: [(91 36 77 38) 36]
Test Case: 392 | Input/Output: [(99 75 80 88) 75]
Test Case: 393 | Input/Output: [(82 15 70 73) 15]
Test Case: 394 | Input/Output: [(53 42 28 44) 28]
Test Case: 395 | Input/Output: [(0 70 62 9) 0]
Test Case: 396 | Input/Output: [(35 22 28 16) 16]
Test Case: 397 | Input/Output: [(1 78 75 57) 1]
Test Case: 398 | Input/Output: [(94 61 99 33) 33]
Test Case: 399 | Input/Output: [(7 24 45 9) 7]
Test Case: 400 | Input/Output: [(-18 3 -93 -58) -93]
Test Case: 401 | Input/Output: [(40 83 -68 -56) -68]
Test Case: 402 | Input/Output: [(83 31 80 -10) -10]
Test Case: 403 | Input/Output: [(70 84 -97 -79) -97]
Test Case: 404 | Input/Output: [(-5 -29 -16 49) -29]
Test Case: 405 | Input/Output: [(-57 -62 -51 -26) -62]
Test Case: 406 | Input/Output: [(0 -73 -17 35) -73]
Test Case: 407 | Input/Output: [(6 99 52 25) 6]
Test Case: 408 | Input/Output: [(5 -22 43 -24) -24]
Test Case: 409 | Input/Output: [(43 62 -34 -1) -34]
Test Case: 410 | Input/Output: [(97 6 -100 -16) -100]
Test Case: 411 | Input/Output: [(-41 -75 -85 83) -85]
Test Case: 412 | Input/Output: [(-25 63 -6 90) -25]
Test Case: 413 | Input/Output: [(-66 5 -66 57) -66]
Test Case: 414 | Input/Output: [(46 -91 96 85) -91]
Test Case: 415 | Input/Output: [(-6 71 -1 -42) -42]
Test Case: 416 | Input/Output: [(40 18 -12 42) -12]
Test Case: 417 | Input/Output: [(-14 -43 10 65) -43]
Test Case: 418 | Input/Output: [(-98 -5 -4 72) -98]
Test Case: 419 | Input/Output: [(4 36 61 -6) -6]
Test Case: 420 | Input/Output: [(-27 81 -6 -22) -27]
Test Case: 421 | Input/Output: [(-60 -69 99 5) -69]
Test Case: 422 | Input/Output: [(-2 10 -68 -67) -68]
Test Case: 423 | Input/Output: [(2 98 -51 -86) -86]
Test Case: 424 | Input/Output: [(-69 28 46 86) -69]
Test Case: 425 | Input/Output: [(23 38 -45 -13) -45]
Test Case: 426 | Input/Output: [(-48 -49 -22 15) -49]
Test Case: 427 | Input/Output: [(-46 -5 -2 53) -46]
Test Case: 428 | Input/Output: [(-32 -80 67 71) -80]
Test Case: 429 | Input/Output: [(20 -62 -51 16) -62]
Test Case: 430 | Input/Output: [(71 73 -91 21) -91]
Test Case: 431 | Input/Output: [(-29 62 -54 -1) -54]
Test Case: 432 | Input/Output: [(20 -31 66 -11) -31]
Test Case: 433 | Input/Output: [(56 34 -81 -86) -86]
Test Case: 434 | Input/Output: [(-56 -80 13 70) -80]
Test Case: 435 | Input/Output: [(67 -99 53 62) -99]
Test Case: 436 | Input/Output: [(-23 -92 -6 95) -92]
Test Case: 437 | Input/Output: [(-25 41 -43 -44) -44]
Test Case: 438 | Input/Output: [(51 92 -47 21) -47]
Test Case: 439 | Input/Output: [(49 -36 9 -91) -91]
Test Case: 440 | Input/Output: [(-95 -38 -48 47) -95]
Test Case: 441 | Input/Output: [(18 -60 32 -77) -77]
Test Case: 442 | Input/Output: [(69 -35 -79 -91) -91]
Test Case: 443 | Input/Output: [(38 -3 55 -95) -95]
Test Case: 444 | Input/Output: [(-36 60 -54 49) -54]
Test Case: 445 | Input/Output: [(83 -88 100 -74) -88]
Test Case: 446 | Input/Output: [(15 -62 7 -100) -100]
Test Case: 447 | Input/Output: [(-38 27 -48 34) -48]
Test Case: 448 | Input/Output: [(-75 -54 -21 -41) -75]
Test Case: 449 | Input/Output: [(32 57 -64 81) -64]
Test Case: 450 | Input/Output: [(25 -58 -88 54) -88]
Test Case: 451 | Input/Output: [(-74 40 87 -67) -74]
Test Case: 452 | Input/Output: [(-68 -9 55 -67) -68]
Test Case: 453 | Input/Output: [(17 97 -8 -96) -96]
Test Case: 454 | Input/Output: [(75 58 28 -57) -57]
Test Case: 455 | Input/Output: [(-7 31 -71 58) -71]
Test Case: 456 | Input/Output: [(13 -100 27 28) -100]
Test Case: 457 | Input/Output: [(97 54 70 -47) -47]
Test Case: 458 | Input/Output: [(33 18 8 -1) -1]
Test Case: 459 | Input/Output: [(59 -69 -18 -70) -70]
Test Case: 460 | Input/Output: [(-17 47 46 44) -17]
Test Case: 461 | Input/Output: [(6 -14 14 -57) -57]
Test Case: 462 | Input/Output: [(-17 95 100 54) -17]
Test Case: 463 | Input/Output: [(-79 95 81 -91) -91]
Test Case: 464 | Input/Output: [(-22 65 -42 75) -42]
Test Case: 465 | Input/Output: [(-40 88 -9 94) -40]
Test Case: 466 | Input/Output: [(-35 -12 3 49) -35]
Test Case: 467 | Input/Output: [(-13 -81 -77 62) -81]
Test Case: 468 | Input/Output: [(-11 -91 -82 7) -91]
Test Case: 469 | Input/Output: [(-24 -14 7 35) -24]
Test Case: 470 | Input/Output: [(69 95 -63 -22) -63]
Test Case: 471 | Input/Output: [(37 76 -84 27) -84]
Test Case: 472 | Input/Output: [(-3 -96 52 24) -96]
Test Case: 473 | Input/Output: [(-39 -56 -98 43) -98]
Test Case: 474 | Input/Output: [(63 -9 -56 40) -56]
Test Case: 475 | Input/Output: [(23 -4 40 -43) -43]
Test Case: 476 | Input/Output: [(13 56 -49 29) -49]
Test Case: 477 | Input/Output: [(80 0 -20 -39) -39]
Test Case: 478 | Input/Output: [(96 -38 -36 -9) -38]
Test Case: 479 | Input/Output: [(-12 -4 -84 59) -84]
Test Case: 480 | Input/Output: [(31 63 76 -14) -14]
Test Case: 481 | Input/Output: [(58 92 -46 -20) -46]
Test Case: 482 | Input/Output: [(90 47 -58 -23) -58]
Test Case: 483 | Input/Output: [(-65 -12 10 23) -65]
Test Case: 484 | Input/Output: [(15 41 16 -14) -14]
Test Case: 485 | Input/Output: [(40 5 -84 62) -84]
Test Case: 486 | Input/Output: [(-12 20 29 80) -12]
Test Case: 487 | Input/Output: [(-28 77 -24 8) -28]
Test Case: 488 | Input/Output: [(-48 21 18 87) -48]
Test Case: 489 | Input/Output: [(-95 42 -13 61) -95]
Test Case: 490 | Input/Output: [(-79 38 -26 86) -79]
Test Case: 491 | Input/Output: [(30 82 -69 -74) -74]
Test Case: 492 | Input/Output: [(17 -16 56 89) -16]
Test Case: 493 | Input/Output: [(28 -28 45 -52) -52]
Test Case: 494 | Input/Output: [(49 44 95 3) 3]
Test Case: 495 | Input/Output: [(95 90 53 -61) -61]
Test Case: 496 | Input/Output: [(85 36 93 26) 26]
Test Case: 497 | Input/Output: [(41 -2 10 -68) -68]
Test Case: 498 | Input/Output: [(57 -4 20 73) -4]
Test Case: 499 | Input/Output: [(83 -55 -67 -67) -67]
Test Case: 500 | Input/Output: [(84 76 72 -42) -42]
Test Case: 501 | Input/Output: [(20 32 -85 -45) -85]
Test Case: 502 | Input/Output: [(95 -97 39 -22) -97]
Test Case: 503 | Input/Output: [(19 -58 4 29) -58]
Test Case: 504 | Input/Output: [(-78 -81 -94 15) -94]
Test Case: 505 | Input/Output: [(-55 -66 -62 43) -66]
Test Case: 506 | Input/Output: [(-46 -87 -52 13) -87]
Test Case: 507 | Input/Output: [(-35 89 -58 30) -58]
Test Case: 508 | Input/Output: [(-39 31 -27 -1) -39]
Test Case: 509 | Input/Output: [(34 -39 37 76) -39]
Test Case: 510 | Input/Output: [(63 -24 -94 -18) -94]
Test Case: 511 | Input/Output: [(70 -41 -72 -52) -72]
Test Case: 512 | Input/Output: [(95 17 88 8) 8]
Test Case: 513 | Input/Output: [(-20 25 23 -11) -20]
Test Case: 514 | Input/Output: [(82 -4 66 -83) -83]
Test Case: 515 | Input/Output: [(30 -12 -62 55) -62]
Test Case: 516 | Input/Output: [(28 -27 94 -14) -27]
Test Case: 517 | Input/Output: [(47 -17 0 48) -17]
Test Case: 518 | Input/Output: [(-69 19 94 -8) -69]
Test Case: 519 | Input/Output: [(-6 88 22 -56) -56]
Test Case: 520 | Input/Output: [(43 91 -65 -79) -79]
Test Case: 521 | Input/Output: [(22 -23 -26 -30) -30]
Test Case: 522 | Input/Output: [(-68 67 -64 -61) -68]
Test Case: 523 | Input/Output: [(35 -60 6 100) -60]
Test Case: 524 | Input/Output: [(80 -38 69 -35) -38]
Test Case: 525 | Input/Output: [(16 -60 -69 80) -69]
Test Case: 526 | Input/Output: [(4 56 -67 61) -67]
Test Case: 527 | Input/Output: [(79 72 24 -20) -20]
Test Case: 528 | Input/Output: [(-18 -68 -49 -51) -68]
Test Case: 529 | Input/Output: [(90 -47 -44 -81) -81]
Test Case: 530 | Input/Output: [(40 87 -8 -16) -16]
Test Case: 531 | Input/Output: [(-28 5 61 60) -28]
Test Case: 532 | Input/Output: [(25 85 -47 85) -47]
Test Case: 533 | Input/Output: [(-100 -91 69 100) -100]
Test Case: 534 | Input/Output: [(79 7 -16 -18) -18]
Test Case: 535 | Input/Output: [(19 -64 1 16) -64]
Test Case: 536 | Input/Output: [(16 -68 -57 -96) -96]
Test Case: 537 | Input/Output: [(-32 70 -86 31) -86]
Test Case: 538 | Input/Output: [(7 89 32 -49) -49]
Test Case: 539 | Input/Output: [(-65 -87 59 14) -87]
Test Case: 540 | Input/Output: [(37 43 98 88) 37]
Test Case: 541 | Input/Output: [(57 88 48 -53) -53]
Test Case: 542 | Input/Output: [(-67 57 89 -97) -97]
Test Case: 543 | Input/Output: [(-89 89 -60 29) -89]
Test Case: 544 | Input/Output: [(30 -87 -12 72) -87]
Test Case: 545 | Input/Output: [(12 -92 -59 18) -92]
Test Case: 546 | Input/Output: [(79 77 42 -89) -89]
Test Case: 547 | Input/Output: [(-56 40 -54 5) -56]
Test Case: 548 | Input/Output: [(54 -67 38 58) -67]
Test Case: 549 | Input/Output: [(53 -15 -28 -84) -84]
Test Case: 550 | Input/Output: [(-57 -42 -56 -80) -80]
Test Case: 551 | Input/Output: [(43 -92 64 20) -92]
Test Case: 552 | Input/Output: [(85 95 58 98) 58]
Test Case: 553 | Input/Output: [(26 19 94 53) 19]
Test Case: 554 | Input/Output: [(-90 51 72 -51) -90]
Test Case: 555 | Input/Output: [(-5 97 -78 -67) -78]
Test Case: 556 | Input/Output: [(9 74 -10 -16) -16]
Test Case: 557 | Input/Output: [(-61 -67 82 -98) -98]
Test Case: 558 | Input/Output: [(-62 20 -51 78) -62]
Test Case: 559 | Input/Output: [(-79 -92 87 13) -92]
Test Case: 560 | Input/Output: [(26 54 -68 -37) -68]
Test Case: 561 | Input/Output: [(68 39 -97 -22) -97]
Test Case: 562 | Input/Output: [(9 -88 93 -100) -100]
Test Case: 563 | Input/Output: [(95 39 31 -48) -48]
Test Case: 564 | Input/Output: [(-68 -13 -61 -27) -68]
Test Case: 565 | Input/Output: [(-38 6 30 29) -38]
Test Case: 566 | Input/Output: [(68 52 -37 87) -37]
Test Case: 567 | Input/Output: [(46 -52 3 26) -52]
Test Case: 568 | Input/Output: [(88 31 -73 95) -73]
Test Case: 569 | Input/Output: [(-40 97 -84 -8) -84]
Test Case: 570 | Input/Output: [(72 80 -95 9) -95]
Test Case: 571 | Input/Output: [(66 98 24 -39) -39]
Test Case: 572 | Input/Output: [(62 5 10 -79) -79]
Test Case: 573 | Input/Output: [(83 33 -16 96) -16]
Test Case: 574 | Input/Output: [(80 32 -94 72) -94]
Test Case: 575 | Input/Output: [(98 8 5 -86) -86]
Test Case: 576 | Input/Output: [(32 -63 -3 -51) -63]
Test Case: 577 | Input/Output: [(-72 98 -47 71) -72]
Test Case: 578 | Input/Output: [(2 -25 87 33) -25]
Test Case: 579 | Input/Output: [(32 81 -36 44) -36]
Test Case: 580 | Input/Output: [(-3 -19 21 63) -19]
Test Case: 581 | Input/Output: [(93 16 92 -4) -4]
Test Case: 582 | Input/Output: [(14 45 64 -35) -35]
Test Case: 583 | Input/Output: [(-85 49 -57 -21) -85]
Test Case: 584 | Input/Output: [(32 66 -75 -70) -75]
Test Case: 585 | Input/Output: [(85 67 48 19) 19]
Test Case: 586 | Input/Output: [(24 -71 58 4) -71]
Test Case: 587 | Input/Output: [(0 -33 -44 -10) -44]
Test Case: 588 | Input/Output: [(34 90 38 56) 34]
Test Case: 589 | Input/Output: [(33 11 -52 23) -52]
Test Case: 590 | Input/Output: [(-4 45 75 -61) -61]
Test Case: 591 | Input/Output: [(-50 -59 -26 67) -59]
Test Case: 592 | Input/Output: [(-44 46 -76 6) -76]
Test Case: 593 | Input/Output: [(68 -17 -27 96) -27]
Test Case: 594 | Input/Output: [(48 16 98 -47) -47]
Test Case: 595 | Input/Output: [(-75 -35 -97 -26) -97]
Test Case: 596 | Input/Output: [(90 -74 -72 24) -74]
Test Case: 597 | Input/Output: [(30 -12 22 26) -12]
Test Case: 598 | Input/Output: [(-38 16 -82 5) -82]
Test Case: 599 | Input/Output: [(68 36 -25 -63) -63]
Test Case: 600 | Input/Output: [(-77 -23 -89 -72) -89]
Test Case: 601 | Input/Output: [(-36 90 75 76) -36]
Test Case: 602 | Input/Output: [(-73 -40 -53 -22) -73]
Test Case: 603 | Input/Output: [(51 14 -22 34) -22]
Test Case: 604 | Input/Output: [(79 -46 -37 -26) -46]
Test Case: 605 | Input/Output: [(8 -48 99 -70) -70]
Test Case: 606 | Input/Output: [(-26 13 26 -47) -47]
Test Case: 607 | Input/Output: [(-83 -5 -84 -45) -84]
Test Case: 608 | Input/Output: [(-25 -19 21 -83) -83]
Test Case: 609 | Input/Output: [(-69 -74 93 -91) -91]
Test Case: 610 | Input/Output: [(-85 6 4 -88) -88]
Test Case: 611 | Input/Output: [(-58 -91 61 15) -91]
Test Case: 612 | Input/Output: [(-67 -37 53 44) -67]
Test Case: 613 | Input/Output: [(71 -59 -53 -31) -59]
Test Case: 614 | Input/Output: [(-46 -7 83 42) -46]
Test Case: 615 | Input/Output: [(29 -25 -65 2) -65]
Test Case: 616 | Input/Output: [(33 3 -79 51) -79]
Test Case: 617 | Input/Output: [(-95 -32 81 -41) -95]
Test Case: 618 | Input/Output: [(-38 86 13 24) -38]
Test Case: 619 | Input/Output: [(-9 26 63 100) -9]
Test Case: 620 | Input/Output: [(-40 75 85 12) -40]
Test Case: 621 | Input/Output: [(56 58 -64 40) -64]
Test Case: 622 | Input/Output: [(-40 71 27 20) -40]
Test Case: 623 | Input/Output: [(-74 18 95 -94) -94]
Test Case: 624 | Input/Output: [(55 -91 -77 26) -91]
Test Case: 625 | Input/Output: [(65 -89 99 11) -89]
Test Case: 626 | Input/Output: [(-92 82 36 28) -92]
Test Case: 627 | Input/Output: [(42 -31 -45 -13) -45]
Test Case: 628 | Input/Output: [(-6 -52 9 -37) -52]
Test Case: 629 | Input/Output: [(99 -82 91 -21) -82]
Test Case: 630 | Input/Output: [(-26 96 -44 -8) -44]
Test Case: 631 | Input/Output: [(21 98 58 -59) -59]
Test Case: 632 | Input/Output: [(-38 14 60 -9) -38]
Test Case: 633 | Input/Output: [(-97 -76 -84 86) -97]
Test Case: 634 | Input/Output: [(14 -41 -79 99) -79]
Test Case: 635 | Input/Output: [(58 -71 91 2) -71]
Test Case: 636 | Input/Output: [(-57 93 -24 25) -57]
Test Case: 637 | Input/Output: [(-40 16 91 6) -40]
Test Case: 638 | Input/Output: [(21 33 28 -27) -27]
Test Case: 639 | Input/Output: [(-58 37 50 77) -58]
Test Case: 640 | Input/Output: [(-6 -71 39 4) -71]
Test Case: 641 | Input/Output: [(-42 16 -68 -23) -68]
Test Case: 642 | Input/Output: [(100 97 -50 -88) -88]
Test Case: 643 | Input/Output: [(-80 -45 18 -61) -80]
Test Case: 644 | Input/Output: [(-56 52 55 9) -56]
Test Case: 645 | Input/Output: [(-62 -55 58 49) -62]
Test Case: 646 | Input/Output: [(31 -53 18 50) -53]
Test Case: 647 | Input/Output: [(6 -35 -53 -5) -53]
Test Case: 648 | Input/Output: [(100 -83 -78 -31) -83]
Test Case: 649 | Input/Output: [(43 -4 77 80) -4]
Test Case: 650 | Input/Output: [(22 6 -14 -39) -39]
Test Case: 651 | Input/Output: [(60 -26 17 19) -26]
Test Case: 652 | Input/Output: [(88 0 -7 -40) -40]
Test Case: 653 | Input/Output: [(-21 33 77 76) -21]
Test Case: 654 | Input/Output: [(-41 -48 -85 64) -85]
Test Case: 655 | Input/Output: [(-41 77 -98 38) -98]
Test Case: 656 | Input/Output: [(-49 69 -73 6) -73]
Test Case: 657 | Input/Output: [(-44 -62 -85 -51) -85]
Test Case: 658 | Input/Output: [(-76 66 34 -63) -76]
Test Case: 659 | Input/Output: [(95 66 -41 -95) -95]
Test Case: 660 | Input/Output: [(-55 -2 -28 -57) -57]
Test Case: 661 | Input/Output: [(54 41 8 20) 8]
Test Case: 662 | Input/Output: [(17 -36 41 -75) -75]
Test Case: 663 | Input/Output: [(-66 -40 29 -50) -66]
Test Case: 664 | Input/Output: [(-99 -63 -8 37) -99]
Test Case: 665 | Input/Output: [(32 43 29 -96) -96]
Test Case: 666 | Input/Output: [(60 73 5 -6) -6]
Test Case: 667 | Input/Output: [(18 53 52 -73) -73]
Test Case: 668 | Input/Output: [(62 48 -2 80) -2]
Test Case: 669 | Input/Output: [(-19 24 11 -57) -57]
Test Case: 670 | Input/Output: [(8 26 -19 -55) -55]
Test Case: 671 | Input/Output: [(32 -45 97 -94) -94]
Test Case: 672 | Input/Output: [(-83 -32 -87 -53) -87]
Test Case: 673 | Input/Output: [(-51 41 -10 68) -51]
Test Case: 674 | Input/Output: [(-99 32 95 68) -99]
Test Case: 675 | Input/Output: [(-3 -54 50 69) -54]
Test Case: 676 | Input/Output: [(44 -73 36 85) -73]
Test Case: 677 | Input/Output: [(-17 -30 -18 -25) -30]
Test Case: 678 | Input/Output: [(69 23 -36 5) -36]
Test Case: 679 | Input/Output: [(-32 -6 -72 -4) -72]
Test Case: 680 | Input/Output: [(100 -71 -100 -89) -100]
Test Case: 681 | Input/Output: [(-33 97 70 -21) -33]
Test Case: 682 | Input/Output: [(-45 -100 -39 56) -100]
Test Case: 683 | Input/Output: [(-79 28 65 -81) -81]
Test Case: 684 | Input/Output: [(-12 14 46 -74) -74]
Test Case: 685 | Input/Output: [(39 3 -6 -1) -6]
Test Case: 686 | Input/Output: [(-5 -84 -93 15) -93]
Test Case: 687 | Input/Output: [(-29 30 -48 -42) -48]
Test Case: 688 | Input/Output: [(-29 -40 84 -6) -40]
Test Case: 689 | Input/Output: [(96 -32 -87 -87) -87]
Test Case: 690 | Input/Output: [(35 3 55 10) 3]
Test Case: 691 | Input/Output: [(-33 79 26 68) -33]
Test Case: 692 | Input/Output: [(56 -46 60 86) -46]
Test Case: 693 | Input/Output: [(63 4 65 -4) -4]
Test Case: 694 | Input/Output: [(-28 -50 -8 -73) -73]
Test Case: 695 | Input/Output: [(9 77 -9 85) -9]
Test Case: 696 | Input/Output: [(-96 50 3 19) -96]
Test Case: 697 | Input/Output: [(-13 5 4 63) -13]
Test Case: 698 | Input/Output: [(72 -14 -1 71) -14]
Test Case: 699 | Input/Output: [(31 97 -43 22) -43]
Test Case: 700 | Input/Output: [(-31 16 48 13) -31]
Test Case: 701 | Input/Output: [(-46 34 80 -75) -75]
Test Case: 702 | Input/Output: [(-46 97 67 -77) -77]
Test Case: 703 | Input/Output: [(-56 44 -58 36) -58]
Test Case: 704 | Input/Output: [(-97 -92 15 40) -97]
Test Case: 705 | Input/Output: [(88 91 77 -17) -17]
Test Case: 706 | Input/Output: [(56 -95 -27 -52) -95]
Test Case: 707 | Input/Output: [(-76 -40 -54 -38) -76]
Test Case: 708 | Input/Output: [(36 36 88 42) 36]
Test Case: 709 | Input/Output: [(-70 0 -45 -57) -70]
Test Case: 710 | Input/Output: [(51 63 81 5) 5]
Test Case: 711 | Input/Output: [(21 -45 -88 -77) -88]
Test Case: 712 | Input/Output: [(12 4 45 54) 4]
Test Case: 713 | Input/Output: [(-28 -99 -64 26) -99]
Test Case: 714 | Input/Output: [(48 34 -37 -56) -56]
Test Case: 715 | Input/Output: [(45 -48 -33 9) -48]
Test Case: 716 | Input/Output: [(-87 -67 70 29) -87]
Test Case: 717 | Input/Output: [(18 -56 -92 45) -92]
Test Case: 718 | Input/Output: [(35 -37 46 37) -37]
Test Case: 719 | Input/Output: [(-55 -81 18 61) -81]
Test Case: 720 | Input/Output: [(32 -41 87 61) -41]
Test Case: 721 | Input/Output: [(92 -35 -11 43) -35]
Test Case: 722 | Input/Output: [(15 -19 -1 -37) -37]
Test Case: 723 | Input/Output: [(25 85 46 52) 25]
Test Case: 724 | Input/Output: [(40 79 75 67) 40]
Test Case: 725 | Input/Output: [(62 -68 -6 -33) -68]
Test Case: 726 | Input/Output: [(23 -87 75 51) -87]
Test Case: 727 | Input/Output: [(66 -94 26 85) -94]
Test Case: 728 | Input/Output: [(28 82 40 14) 14]
Test Case: 729 | Input/Output: [(-49 -66 -56 85) -66]
Test Case: 730 | Input/Output: [(-22 62 74 17) -22]
Test Case: 731 | Input/Output: [(22 -55 -28 -38) -55]
Test Case: 732 | Input/Output: [(-4 20 88 34) -4]
Test Case: 733 | Input/Output: [(-23 -59 79 -49) -59]
Test Case: 734 | Input/Output: [(45 8 -90 31) -90]
Test Case: 735 | Input/Output: [(-99 -7 88 -91) -99]
Test Case: 736 | Input/Output: [(-42 -40 79 87) -42]
Test Case: 737 | Input/Output: [(67 88 3 92) 3]
Test Case: 738 | Input/Output: [(28 37 70 38) 28]
Test Case: 739 | Input/Output: [(75 68 -67 -6) -67]
Test Case: 740 | Input/Output: [(91 -25 0 29) -25]
Test Case: 741 | Input/Output: [(70 -14 -65 -78) -78]
Test Case: 742 | Input/Output: [(18 -21 -68 5) -68]
Test Case: 743 | Input/Output: [(-27 84 28 -63) -63]
Test Case: 744 | Input/Output: [(75 60 -12 57) -12]
Test Case: 745 | Input/Output: [(90 85 45 -68) -68]
Test Case: 746 | Input/Output: [(21 -38 52 -93) -93]
Test Case: 747 | Input/Output: [(11 -46 81 67) -46]
Test Case: 748 | Input/Output: [(-22 87 -82 -40) -82]
Test Case: 749 | Input/Output: [(-33 10 97 41) -33]
Test Case: 750 | Input/Output: [(-10 49 26 36) -10]
Test Case: 751 | Input/Output: [(-6 -17 -39 -93) -93]
Test Case: 752 | Input/Output: [(-13 -1 -67 5) -67]
Test Case: 753 | Input/Output: [(85 57 -62 -5) -62]
Test Case: 754 | Input/Output: [(-92 -20 80 -96) -96]
Test Case: 755 | Input/Output: [(-17 47 -5 79) -17]
Test Case: 756 | Input/Output: [(-7 80 -36 -50) -50]
Test Case: 757 | Input/Output: [(22 -85 92 76) -85]
Test Case: 758 | Input/Output: [(-42 -52 -31 -81) -81]
Test Case: 759 | Input/Output: [(-25 -85 -51 -19) -85]
Test Case: 760 | Input/Output: [(70 87 -12 24) -12]
Test Case: 761 | Input/Output: [(31 -11 55 62) -11]
Test Case: 762 | Input/Output: [(-99 -58 -79 -24) -99]
Test Case: 763 | Input/Output: [(17 92 83 -72) -72]
Test Case: 764 | Input/Output: [(36 64 -77 -36) -77]
Test Case: 765 | Input/Output: [(46 -36 16 -50) -50]
Test Case: 766 | Input/Output: [(55 98 -45 53) -45]
Test Case: 767 | Input/Output: [(90 -94 59 35) -94]
Test Case: 768 | Input/Output: [(45 32 -57 -62) -62]
Test Case: 769 | Input/Output: [(-58 -62 89 -99) -99]
Test Case: 770 | Input/Output: [(39 -34 -36 59) -36]
Test Case: 771 | Input/Output: [(-32 -71 64 29) -71]
Test Case: 772 | Input/Output: [(-67 -9 81 70) -67]
Test Case: 773 | Input/Output: [(-88 -54 77 67) -88]
Test Case: 774 | Input/Output: [(-62 -10 83 54) -62]
Test Case: 775 | Input/Output: [(-75 -91 24 12) -91]
Test Case: 776 | Input/Output: [(6 48 69 -5) -5]
Test Case: 777 | Input/Output: [(74 -14 40 54) -14]
Test Case: 778 | Input/Output: [(-92 48 90 -55) -92]
Test Case: 779 | Input/Output: [(-36 -13 80 25) -36]
Test Case: 780 | Input/Output: [(27 -92 48 55) -92]
Test Case: 781 | Input/Output: [(-11 49 62 -78) -78]
Test Case: 782 | Input/Output: [(-3 92 19 42) -3]
Test Case: 783 | Input/Output: [(27 15 -79 -14) -79]
Test Case: 784 | Input/Output: [(50 -86 99 26) -86]
Test Case: 785 | Input/Output: [(-68 -10 64 94) -68]
Test Case: 786 | Input/Output: [(37 -58 11 -70) -70]
Test Case: 787 | Input/Output: [(-7 16 22 47) -7]
Test Case: 788 | Input/Output: [(18 -36 100 56) -36]
Test Case: 789 | Input/Output: [(-54 -57 38 31) -57]
Test Case: 790 | Input/Output: [(-53 -76 -74 -47) -76]
Test Case: 791 | Input/Output: [(-37 -10 -99 -30) -99]
Test Case: 792 | Input/Output: [(-12 -41 -83 73) -83]
Test Case: 793 | Input/Output: [(-20 47 85 -86) -86]
Test Case: 794 | Input/Output: [(-49 -31 -27 -28) -49]
Test Case: 795 | Input/Output: [(96 51 -9 65) -9]
Test Case: 796 | Input/Output: [(100 28 83 -37) -37]
Test Case: 797 | Input/Output: [(-3 66 -15 61) -15]
Test Case: 798 | Input/Output: [(93 -7 43 46) -7]
Test Case: 799 | Input/Output: [(-49 -76 -29 -87) -87]
Test Case: 800 | Input/Output: [(-90 -68 28 -69) -90]
Test Case: 801 | Input/Output: [(-99 67 37 38) -99]
Test Case: 802 | Input/Output: [(-90 -73 -72 -9) -90]
Test Case: 803 | Input/Output: [(36 39 -12 92) -12]
Test Case: 804 | Input/Output: [(68 -61 -88 -80) -88]
Test Case: 805 | Input/Output: [(77 18 -60 78) -60]
Test Case: 806 | Input/Output: [(-16 -99 -13 73) -99]
Test Case: 807 | Input/Output: [(-3 73 -32 -39) -39]
Test Case: 808 | Input/Output: [(93 -97 50 91) -97]
Test Case: 809 | Input/Output: [(-91 -100 -93 -88) -100]
Test Case: 810 | Input/Output: [(18 -92 -96 -20) -96]
Test Case: 811 | Input/Output: [(50 5 -62 -13) -62]
Test Case: 812 | Input/Output: [(-92 76 99 68) -92]
Test Case: 813 | Input/Output: [(93 27 88 -74) -74]
Test Case: 814 | Input/Output: [(35 46 -1 21) -1]
Test Case: 815 | Input/Output: [(85 94 76 -50) -50]
Test Case: 816 | Input/Output: [(-59 46 55 -44) -59]
Test Case: 817 | Input/Output: [(12 5 1 -19) -19]
Test Case: 818 | Input/Output: [(75 14 22 -96) -96]
Test Case: 819 | Input/Output: [(-61 -8 -55 -61) -61]
Test Case: 820 | Input/Output: [(-64 -2 -10 -86) -86]
Test Case: 821 | Input/Output: [(-43 -28 12 -95) -95]
Test Case: 822 | Input/Output: [(-42 5 72 -16) -42]
Test Case: 823 | Input/Output: [(-57 7 20 -70) -70]
Test Case: 824 | Input/Output: [(-54 -100 -26 56) -100]
Test Case: 825 | Input/Output: [(-29 31 -42 5) -42]
Test Case: 826 | Input/Output: [(34 -17 -20 -97) -97]
Test Case: 827 | Input/Output: [(83 -32 -18 83) -32]
Test Case: 828 | Input/Output: [(-90 -17 98 -55) -90]
Test Case: 829 | Input/Output: [(-99 -82 -80 82) -99]
Test Case: 830 | Input/Output: [(71 23 -64 12) -64]
Test Case: 831 | Input/Output: [(-53 -4 -76 -80) -80]
Test Case: 832 | Input/Output: [(-88 -87 49 91) -88]
Test Case: 833 | Input/Output: [(57 -77 -12 48) -77]
Test Case: 834 | Input/Output: [(-26 -14 -41 24) -41]
Test Case: 835 | Input/Output: [(44 83 22 -38) -38]
Test Case: 836 | Input/Output: [(37 -81 33 -37) -81]
Test Case: 837 | Input/Output: [(-30 93 -64 59) -64]
Test Case: 838 | Input/Output: [(96 -22 83 85) -22]
Test Case: 839 | Input/Output: [(-15 -10 85 40) -15]
Test Case: 840 | Input/Output: [(-85 100 -61 63) -85]
Test Case: 841 | Input/Output: [(6 -87 71 -30) -87]
Test Case: 842 | Input/Output: [(-57 -17 98 -11) -57]
Test Case: 843 | Input/Output: [(57 54 86 -100) -100]
Test Case: 844 | Input/Output: [(-77 3 67 -8) -77]
Test Case: 845 | Input/Output: [(-63 -88 -85 -98) -98]
Test Case: 846 | Input/Output: [(67 54 97 61) 54]
Test Case: 847 | Input/Output: [(29 -88 25 -100) -100]
Test Case: 848 | Input/Output: [(-46 -18 24 57) -46]
Test Case: 849 | Input/Output: [(64 37 -92 -6) -92]
Test Case: 850 | Input/Output: [(-2 -43 47 -7) -43]
Test Case: 851 | Input/Output: [(-7 -71 -20 -8) -71]
Test Case: 852 | Input/Output: [(-79 21 91 -25) -79]
Test Case: 853 | Input/Output: [(81 -78 -38 33) -78]
Test Case: 854 | Input/Output: [(-15 -75 5 -53) -75]
Test Case: 855 | Input/Output: [(4 -83 -97 -69) -97]
Test Case: 856 | Input/Output: [(-98 -93 -26 97) -98]
Test Case: 857 | Input/Output: [(-12 14 0 27) -12]
Test Case: 858 | Input/Output: [(-100 -98 93 -60) -100]
Test Case: 859 | Input/Output: [(-72 -2 86 83) -72]
Test Case: 860 | Input/Output: [(49 -48 -35 11) -48]
Test Case: 861 | Input/Output: [(60 -24 63 84) -24]
Test Case: 862 | Input/Output: [(-72 -31 -9 73) -72]
Test Case: 863 | Input/Output: [(-32 -77 -48 -58) -77]
Test Case: 864 | Input/Output: [(68 -9 -36 81) -36]
Test Case: 865 | Input/Output: [(-84 67 -22 25) -84]
Test Case: 866 | Input/Output: [(-55 -14 13 66) -55]
Test Case: 867 | Input/Output: [(-86 -57 -15 92) -86]
Test Case: 868 | Input/Output: [(-68 -26 33 -95) -95]
Test Case: 869 | Input/Output: [(39 -65 49 12) -65]
Test Case: 870 | Input/Output: [(33 -15 -64 -65) -65]
Test Case: 871 | Input/Output: [(31 47 -70 54) -70]
Test Case: 872 | Input/Output: [(-56 22 -13 68) -56]
Test Case: 873 | Input/Output: [(-41 47 -25 79) -41]
Test Case: 874 | Input/Output: [(29 -62 -15 -51) -62]
Test Case: 875 | Input/Output: [(10 -33 -57 72) -57]
Test Case: 876 | Input/Output: [(-33 -39 -76 -55) -76]
Test Case: 877 | Input/Output: [(-99 19 -61 -75) -99]
Test Case: 878 | Input/Output: [(37 86 41 50) 37]
Test Case: 879 | Input/Output: [(14 91 -17 35) -17]
Test Case: 880 | Input/Output: [(-25 -19 -88 41) -88]
Test Case: 881 | Input/Output: [(93 -97 -16 -35) -97]
Test Case: 882 | Input/Output: [(-10 -36 -66 -30) -66]
Test Case: 883 | Input/Output: [(26 -36 -51 49) -51]
Test Case: 884 | Input/Output: [(42 67 81 -44) -44]
Test Case: 885 | Input/Output: [(-90 -22 15 -71) -90]
Test Case: 886 | Input/Output: [(20 -85 60 -83) -85]
Test Case: 887 | Input/Output: [(91 -50 -56 22) -56]
Test Case: 888 | Input/Output: [(-21 80 90 8) -21]
Test Case: 889 | Input/Output: [(-42 -94 -50 31) -94]
Test Case: 890 | Input/Output: [(-21 -68 -96 78) -96]
Test Case: 891 | Input/Output: [(2 -44 -60 24) -60]
Test Case: 892 | Input/Output: [(-3 -89 -60 -2) -89]
Test Case: 893 | Input/Output: [(-93 -5 92 7) -93]
Test Case: 894 | Input/Output: [(-34 27 -94 91) -94]
Test Case: 895 | Input/Output: [(13 -10 92 89) -10]
Test Case: 896 | Input/Output: [(-67 -5 92 -91) -91]
Test Case: 897 | Input/Output: [(13 44 100 27) 13]
Test Case: 898 | Input/Output: [(69 -37 -49 44) -49]
Test Case: 899 | Input/Output: [(-58 -85 84 45) -85]
Test Case: 900 | Input/Output: [(51 72 28 13) 13]
Test Case: 901 | Input/Output: [(-97 -56 -78 34) -97]
Test Case: 902 | Input/Output: [(6 -75 46 -4) -75]
Test Case: 903 | Input/Output: [(-37 -74 78 -60) -74]
Test Case: 904 | Input/Output: [(92 -92 88 3) -92]
Test Case: 905 | Input/Output: [(51 80 99 -91) -91]
Test Case: 906 | Input/Output: [(-49 -5 50 58) -49]
Test Case: 907 | Input/Output: [(6 82 -76 -47) -76]
Test Case: 908 | Input/Output: [(54 5 73 -74) -74]
Test Case: 909 | Input/Output: [(26 5 22 84) 5]
Test Case: 910 | Input/Output: [(-2 33 8 -92) -92]
Test Case: 911 | Input/Output: [(-26 25 -26 -11) -26]
Test Case: 912 | Input/Output: [(-56 2 70 15) -56]
Test Case: 913 | Input/Output: [(-35 -7 58 90) -35]
Test Case: 914 | Input/Output: [(-96 37 55 27) -96]
Test Case: 915 | Input/Output: [(12 -30 37 -29) -30]
Test Case: 916 | Input/Output: [(88 -79 22 -73) -79]
Test Case: 917 | Input/Output: [(-29 -22 -20 -47) -47]
Test Case: 918 | Input/Output: [(-69 -81 98 8) -81]
Test Case: 919 | Input/Output: [(-97 18 24 21) -97]
Test Case: 920 | Input/Output: [(50 12 -37 99) -37]
Test Case: 921 | Input/Output: [(-78 -14 59 -62) -78]
Test Case: 922 | Input/Output: [(58 18 -82 12) -82]
Test Case: 923 | Input/Output: [(-52 14 -47 74) -52]
Test Case: 924 | Input/Output: [(61 12 -16 -30) -30]
Test Case: 925 | Input/Output: [(-47 -76 46 -27) -76]
Test Case: 926 | Input/Output: [(44 9 -14 -9) -14]
Test Case: 927 | Input/Output: [(19 -78 -31 2) -78]
Test Case: 928 | Input/Output: [(-85 -8 93 84) -85]
Test Case: 929 | Input/Output: [(33 60 91 -8) -8]
Test Case: 930 | Input/Output: [(10 -65 -100 63) -100]
Test Case: 931 | Input/Output: [(-88 40 9 -78) -88]
Test Case: 932 | Input/Output: [(0 45 61 67) 0]
Test Case: 933 | Input/Output: [(93 53 -24 94) -24]
Test Case: 934 | Input/Output: [(45 11 -80 -31) -80]
Test Case: 935 | Input/Output: [(98 89 4 -10) -10]
Test Case: 936 | Input/Output: [(-11 55 -11 -11) -11]
Test Case: 937 | Input/Output: [(59 -8 -25 -85) -85]
Test Case: 938 | Input/Output: [(59 -57 -100 49) -100]
Test Case: 939 | Input/Output: [(66 -66 -29 87) -66]
Test Case: 940 | Input/Output: [(100 -43 91 70) -43]
Test Case: 941 | Input/Output: [(-47 -12 -15 -1) -47]
Test Case: 942 | Input/Output: [(-91 57 36 4) -91]
Test Case: 943 | Input/Output: [(57 -66 -26 -3) -66]
Test Case: 944 | Input/Output: [(-71 -79 6 30) -79]
Test Case: 945 | Input/Output: [(93 86 49 1) 1]
Test Case: 946 | Input/Output: [(-1 97 -79 36) -79]
Test Case: 947 | Input/Output: [(61 9 -72 -10) -72]
Test Case: 948 | Input/Output: [(-77 -63 -79 58) -79]
Test Case: 949 | Input/Output: [(85 67 -16 -39) -39]
Test Case: 950 | Input/Output: [(59 -90 17 34) -90]
Test Case: 951 | Input/Output: [(-40 -52 45 5) -52]
Test Case: 952 | Input/Output: [(-32 -19 -13 68) -32]
Test Case: 953 | Input/Output: [(-22 -49 98 -80) -80]
Test Case: 954 | Input/Output: [(-56 -24 10 29) -56]
Test Case: 955 | Input/Output: [(38 -98 17 7) -98]
Test Case: 956 | Input/Output: [(-62 58 31 13) -62]
Test Case: 957 | Input/Output: [(-60 33 -71 -55) -71]
Test Case: 958 | Input/Output: [(52 -1 -23 18) -23]
Test Case: 959 | Input/Output: [(76 88 -81 88) -81]
Test Case: 960 | Input/Output: [(96 54 -48 43) -48]
Test Case: 961 | Input/Output: [(-100 -85 72 79) -100]
Test Case: 962 | Input/Output: [(-49 -70 -84 -26) -84]
Test Case: 963 | Input/Output: [(-57 -89 74 0) -89]
Test Case: 964 | Input/Output: [(-73 -13 -2 62) -73]
Test Case: 965 | Input/Output: [(23 -78 -69 59) -78]
Test Case: 966 | Input/Output: [(30 -2 -21 13) -21]
Test Case: 967 | Input/Output: [(-89 -69 -65 -97) -97]
Test Case: 968 | Input/Output: [(15 -51 -80 41) -80]
Test Case: 969 | Input/Output: [(20 76 37 70) 20]
Test Case: 970 | Input/Output: [(63 -71 -89 70) -89]
Test Case: 971 | Input/Output: [(79 59 -36 -23) -36]
Test Case: 972 | Input/Output: [(-57 -46 -85 24) -85]
Test Case: 973 | Input/Output: [(-21 -89 -36 -7) -89]
Test Case: 974 | Input/Output: [(62 35 -63 -56) -63]
Test Case: 975 | Input/Output: [(-41 -12 79 35) -41]
Test Case: 976 | Input/Output: [(-44 45 -52 39) -52]
Test Case: 977 | Input/Output: [(61 3 83 2) 2]
Test Case: 978 | Input/Output: [(29 3 54 -72) -72]
Test Case: 979 | Input/Output: [(0 -79 98 -3) -79]
Test Case: 980 | Input/Output: [(5 -70 62 -62) -70]
Test Case: 981 | Input/Output: [(25 -29 99 40) -29]
Test Case: 982 | Input/Output: [(95 -2 -61 2) -61]
Test Case: 983 | Input/Output: [(-61 80 51 -51) -61]
Test Case: 984 | Input/Output: [(-14 50 40 22) -14]
Test Case: 985 | Input/Output: [(-22 25 -26 -23) -26]
Test Case: 986 | Input/Output: [(-51 -13 79 51) -51]
Test Case: 987 | Input/Output: [(-5 -57 10 -25) -57]
Test Case: 988 | Input/Output: [(-6 96 -73 -56) -73]
Test Case: 989 | Input/Output: [(-74 33 -86 90) -86]
Test Case: 990 | Input/Output: [(-94 99 -26 44) -94]
Test Case: 991 | Input/Output: [(-91 -84 -79 -30) -91]
Test Case: 992 | Input/Output: [(98 59 -84 16) -84]
Test Case: 993 | Input/Output: [(73 -34 -27 22) -34]
Test Case: 994 | Input/Output: [(85 -91 -85 -75) -91]
Test Case: 995 | Input/Output: [(18 -64 67 21) -64]
Test Case: 996 | Input/Output: [(-16 -28 -18 48) -28]
Test Case: 997 | Input/Output: [(23 13 1 -94) -94]
Test Case: 998 | Input/Output: [(89 -8 -69 -52) -69]
Test Case: 999 | Input/Output: [(77 -80 53 -60) -80]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -60 -100 115 65 74 -39 -29 -34 -37 -89 90 -107 -9 -6 -54 113
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-2 -2 -2 -2] -2] [[-95 -95 -95 -76] -95] [[4 4 4 -41] -41] [[21 11 21 21] 11] [[-17 -17 29 -17] -17] [[-8 61 61 61] -8] [[-48 -48 83 -48] -48] [[97 -70 -70 -70] -70] [[7 44 7 7] 7] [[30 30 30 -40] -40] [(-64 -64 -64 -64) -64] [(72 72 72 72) 72] [(-96 -96 -96 -96) -96] [(-92 -92 -92 -92) -92] [(-74 -74 -74 -74) -74] [(58 28 82 54) 28] [(23 69 93 79) 23] [(74 27 2 57) 2] [(14 14 59 4) 4] [(61 4 97 31) 4] [(46 66 21 69) 21] [(85 19 38 58) 19] [(24 3 95 22) 3] [(20 16 41 59) 16] [(89 4 100 40) 4] [(13 8 35 18) 8] [(70 19 3 32) 3] [(46 76 93 28) 28] [(0 26 18 43) 0] [(89 63 4 76) 4] [(14 4 86 100) 4] [(6 30 65 4) 4] [(70 22 60 87) 22] [(70 77 47 43) 43] [(20 61 91 2) 2] [(-98 62 7 -48) -98] [(-94 43 -22 -99) -99] [(-70 37 -75 -82) -82] [(32 -13 37 69) -13] [(16 94 -49 71) -49] [(91 -83 -26 24) -83] [(-84 73 -56 46) -84] [(-57 -90 -57 -13) -90] [(-24 96 69 78) -24] [(-49 -68 75 93) -68] [(-10 39 1 84) -10] [(-72 -80 -11 -5) -80] [(-57 39 39 -22) -57] [(26 35 43 -10) -10] [(-50 -53 91 49) -53] [(18 -26 97 7) -26] [(70 -30 -64 85) -64] [(46 -22 -42 -38) -42] [(-34 74 -38 18) -38] [(55 68 -3 -2) -3] [(99 100 76 44) 44] [(-8 -60 86 -47) -60] [(-14 83 -15 41) -15] [(-45 49 22 78) -45] [(58 -34 55 -86) -86] [(-67 31 -56 5) -67] [(-32 25 -84 -71) -84] [(-47 59 -42 51) -47] [(-7 -26 77 84) -26] [(98 5 98 -16) -16] [(-65 -44 17 -86) -86] [(-67 83 26 8) -67] [(-24 -84 86 31) -84] [(-7 -41 86 -10) -41] [(-58 -78 -84 66) -84] [(93 52 -32 -35) -35] [(13 82 -16 9) -16] [(-1 81 -34 23) -34] [(98 67 -21 47) -21] [(-65 -69 -81 -71) -81] [(100 -51 82 65) -51] [(80 60 -11 -14) -14] [(26 -42 -97 -73) -97] [(-73 -41 83 93) -73] [(-56 -3 -76 -70) -76] [(85 -34 -69 89) -69] [(20 31 86 88) 20] [(65 76 1 39) 1] [(-86 -57 -62 -37) -86] [(10 -41 30 33) -41] [(71 -96 -1 -28) -96] [(60 -100 24 -50) -100] [(-90 -78 -23 -71) -90] [(60 -25 3 41) -25] [(96 -48 -54 -99) -99] [(-96 -74 96 -70) -96] [(37 95 77 1) 1] [(55 77 28 23) 23] [(-43 -89 -31 72) -89] [(62 91 15 88) 15])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Lexicase best errors: [0 1 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Zero cases best errors: [0 1 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 6 1 1 3 10 4 10 1 1)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 6 1 1 3 10 4 10 1 1)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Errors: [0 1 0 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 9.961
Median total errors in population: 10
Error averages by case: (0.998 0.994 0.999 0.999 0.997 0.99 0.996 0.99 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.655
Average program size in population (points): 65.674
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 439404
--- Timings ---
Current time: 1559314545017 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.7 seconds, 28.4%
Fitness Testing:      1.7 seconds, 67.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (132 93 247 471 247 471 132 471 471 564)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (132 93 247 471 247 471 132 471 471 564)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) integer_yank) (print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)))
Errors: [1 1 1 0 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 6.701
Median total errors in population: 8
Error averages by case: (0.868 0.907 0.753 0.529 0.753 0.529 0.868 0.529 0.529 0.436)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.434
Average program size in population (points): 35.604
Average percent parens in population: 0.282
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.489
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 363
Genome diversity (% unique genomes):	 0.302
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 368
Syntactic diversity (% unique Push programs):	 0.288
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 795555
--- Timings ---
Current time: 1559314547640 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.4 seconds, 45.7%
Fitness Testing:      2.4 seconds, 45.2%
Report:               0.4 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Lexicase best errors: [1 1 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Zero cases best errors: [1 1 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 87 457 164 204 206 165 459 459 87)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (204 87 457 164 204 206 165 459 459 87)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Errors: [1 1 0 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 7.508
Median total errors in population: 7
Error averages by case: (0.796 0.913 0.543 0.836 0.796 0.794 0.835 0.541 0.541 0.913)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.937
Average program size in population (points): 36.291
Average percent parens in population: 0.281
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.019
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 247
Genome diversity (% unique genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1200334
--- Timings ---
Current time: 1559314551416 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.3 seconds, 58.4%
Fitness Testing:      3.1 seconds, 34.1%
Report:               0.6 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Lexicase best errors: [1 1 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Zero cases best errors: [1 1 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 186 172 296 296 931 172 277 295 294)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (277 186 172 296 296 931 172 277 295 294)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 2, :instruction tag_exec_62} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Best program: (exec_noop integer_rot boolean_xor boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_62 ()) exec_flush boolean_or) ())
Errors: [1 1 1 0 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 6.804
Median total errors in population: 7
Error averages by case: (0.723 0.814 0.828 0.704 0.704 0.069 0.828 0.723 0.705 0.706)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.576
Average program size in population (points): 34.321
Average percent parens in population: 0.275
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.511
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1575054
--- Timings ---
Current time: 1559314554692 milliseconds
Total Time:          12.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.8 seconds, 62.9%
Fitness Testing:      3.7 seconds, 30.0%
Report:               0.8 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items boolean_pop exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Lexicase best errors: [1 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items boolean_pop exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Zero cases best errors: [1 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 407 942 407 407 111 111 211 829 209)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (211 407 942 407 407 111 111 211 829 209)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Best program: (exec_noop integer_rot boolean_swap boolean_shove integer_div in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Errors: [1 0 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 6.155
Median total errors in population: 6
Error averages by case: (0.789 0.593 0.058 0.593 0.593 0.889 0.889 0.789 0.171 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.229
Average program size in population (points): 34.034
Average percent parens in population: 0.277
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.00625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1885983
--- Timings ---
Current time: 1559314557875 milliseconds
Total Time:          15.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.3 seconds, 66.7%
Fitness Testing:      4.1 seconds, 26.5%
Report:               0.9 seconds,  6.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Lexicase best errors: [0 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_yank) print_integer) (tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Zero cases best errors: [0 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (397 639 240 397 397 208 397 102 103 240)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (397 639 240 397 397 208 397 102 103 240)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_106} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Best program: (exec_noop integer_rot exec_dup_items boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items integer_empty) print_integer) (tag_exec_870 (tag_exec_106 () exec_flush boolean_or)) ())
Errors: [0 0 1 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 6.88
Median total errors in population: 7
Error averages by case: (0.603 0.361 0.76 0.603 0.603 0.792 0.603 0.898 0.897 0.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.241
Average program size in population (points): 35.312
Average percent parens in population: 0.275
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.4905625
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2279716
--- Timings ---
Current time: 1559314560856 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.6 seconds, 68.0%
Fitness Testing:      4.7 seconds, 25.3%
Report:               1.1 seconds,  6.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_when (boolean_rot integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items)) () ()))
Lexicase best errors: [1 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.438
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_when (boolean_rot integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) (exec_dup_items)) () ()))
Zero cases best errors: [1 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.438
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 106 192 210 840 107 437 437 945 106)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (210 106 192 210 840 107 437 437 945 106)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_870} {:close 1, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Best program: (boolean_dup boolean_invert_second_then_and exec_when (integer_dup_times integer_gt integer_div) exec_noop exec_yankdup boolean_swap boolean_shove boolean_dup_items in4 exec_when (boolean_xor integer_lte) integer_yank in2 exec_s_when_autoconstructing (print_integer exec_if (boolean_flush) () exec_dup_items integer_yank) (print_integer tag_exec_870 (tag_exec_98 () exec_flush boolean_or)) ())
Errors: [1 1 1 1 0 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.41
Median total errors in population: 6
Error averages by case: (0.79 0.894 0.808 0.79 0.16 0.893 0.563 0.563 0.055 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.415
Average program size in population (points): 31.324
Average percent parens in population: 0.275
Minimum age in population: 6.0
Maximum age in population: 10.71875
Average age in population: 8.94475
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2581137
--- Timings ---
Current time: 1559314563835 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.9 seconds, 69.7%
Fitness Testing:      5.1 seconds, 23.6%
Report:               1.3 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 54                 
Correct output: 23                  | Program output: 79                 
Correct output: 2                   | Program output: 57                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 21                  | Program output: 69                 
Correct output: 19                  | Program output: 58                 
Correct output: 3                   | Program output: 22                 
Correct output: 16                  | Program output: 59                 
Correct output: 4                   | Program output: 40                 
Correct output: 8                   | Program output: 18                 
Correct output: 3                   | Program output: 32                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 43                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -48                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 69                 
Correct output: -49                 | Program output: 71                 
Correct output: -83                 | Program output: 24                 
Correct output: -84                 | Program output: 46                 
Correct output: -90                 | Program output: -13                
Correct output: -24                 | Program output: 78                 
Correct output: -68                 | Program output: 93                 
Correct output: -10                 | Program output: 84                 
Correct output: -80                 | Program output: -5                 
Correct output: -57                 | Program output: -22                
Correct output: -10                 | Program output: -10                
Correct output: -53                 | Program output: 49                 
Correct output: -26                 | Program output: 7                  
Correct output: -64                 | Program output: 85                 
Correct output: -42                 | Program output: -38                
Correct output: -38                 | Program output: 18                 
Correct output: -3                  | Program output: -2                 
Correct output: 44                  | Program output: 44                 
Correct output: -60                 | Program output: -47                
Correct output: -15                 | Program output: 41                 
Correct output: -45                 | Program output: 78                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 5                  
Correct output: -84                 | Program output: -71                
Correct output: -47                 | Program output: 51                 
Correct output: -26                 | Program output: 84                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 8                  
Correct output: -84                 | Program output: 31                 
Correct output: -41                 | Program output: -10                
Correct output: -84                 | Program output: 66                 
Correct output: -35                 | Program output: -35                
Correct output: -16                 | Program output: 9                  
Correct output: -34                 | Program output: 23                 
Correct output: -21                 | Program output: 47                 
Correct output: -81                 | Program output: -71                
Correct output: -51                 | Program output: 65                 
Correct output: -14                 | Program output: -14                
Correct output: -97                 | Program output: -73                
Correct output: -73                 | Program output: 93                 
Correct output: -76                 | Program output: -70                
Correct output: -69                 | Program output: 89                 
Correct output: 20                  | Program output: 88                 
Correct output: 1                   | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -41                 | Program output: 33                 
Correct output: -96                 | Program output: -28                
Correct output: -100                | Program output: -50                
Correct output: -90                 | Program output: -71                
Correct output: -25                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -70                
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: -89                 | Program output: 72                 
Correct output: 15                  | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 2, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Lexicase best program: (integer_lte boolean_invert_first_then_and exec_dup_items in4 print_integer integer_dup_times integer_empty boolean_dup boolean_empty integer_gte exec_k (exec_do*count (boolean_rot exec_k_when_autoconstructing (exec_when (exec_do*while (in1 boolean_yankdup) integer_gte print_integer) integer_yank in2 exec_s_when_autoconstructing (boolean_flush) (exec_dup_items integer_yank print_integer) (tag_exec_98 ()) exec_flush boolean_or) ())) ())
Lexicase best errors: [0 0 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 2, :instruction tag_exec_98} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or})
Zero cases best program: (integer_lte boolean_invert_first_then_and exec_dup_items in4 print_integer integer_dup_times integer_empty boolean_dup boolean_empty integer_gte exec_k (exec_do*count (boolean_rot exec_k_when_autoconstructing (exec_when (exec_do*while (in1 boolean_yankdup) integer_gte print_integer) integer_yank in2 exec_s_when_autoconstructing (boolean_flush) (exec_dup_items integer_yank print_integer) (tag_exec_98 ()) exec_flush boolean_or) ())) ())
Zero cases best errors: [0 0 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (932 319 318 233 117 234 117 936 703 317)
Population mean number of elite cases: 4.23
Count of perfect (error zero) individuals by case: (932 319 318 233 117 234 117 936 703 317)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 1, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k})
Best program: (integer_lte exec_if () (exec_dup_items) in4 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank integer_lte integer_stackdepth exec_y (exec_stackdepth boolean_stackdepth boolean_dup_items) boolean_invert_second_then_and exec_flush exec_yank boolean_pop) (boolean_or exec_while () integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k () ())) ())
Errors: [0 0 0 1 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.774
Median total errors in population: 6
Error averages by case: (0.068 0.681 0.682 0.767 0.883 0.766 0.883 0.064 0.297 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.509
Average program size in population (points): 32.581
Average percent parens in population: 0.268
Minimum age in population: 7.0
Maximum age in population: 12.15625
Average age in population: 10.4606875
Median age in population: 10.546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2979963
--- Timings ---
Current time: 1559314568450 milliseconds
Total Time:          24.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.1 seconds, 70.2%
Fitness Testing:      5.6 seconds, 23.1%
Report:               1.5 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: 29                 
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: 83                 
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 82                 
Correct output: 23                  | Program output: 93                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 59                 
Correct output: 4                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 95                 
Correct output: 16                  | Program output: 41                 
Correct output: 4                   | Program output: 100                
Correct output: 8                   | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 93                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 65                 
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 47                 
Correct output: 2                   | Program output: 91                 
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -22                
Correct output: -82                 | Program output: -75                
Correct output: -13                 | Program output: 37                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -56                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: 69                 
Correct output: -68                 | Program output: 75                 
Correct output: -10                 | Program output: 1                  
Correct output: -80                 | Program output: -11                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 43                 
Correct output: -53                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 76                 
Correct output: -60                 | Program output: 86                 
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: 22                 
Correct output: -86                 | Program output: 55                 
Correct output: -67                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -42                
Correct output: -26                 | Program output: 77                 
Correct output: -16                 | Program output: 98                 
Correct output: -86                 | Program output: 17                 
Correct output: -67                 | Program output: 26                 
Correct output: -84                 | Program output: 86                 
Correct output: -41                 | Program output: 86                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -32                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 82                 
Correct output: -14                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -62                
Correct output: -41                 | Program output: 30                 
Correct output: -96                 | Program output: -1                 
Correct output: -100                | Program output: 24                 
Correct output: -90                 | Program output: -23                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -54                
Correct output: -96                 | Program output: 96                 
Correct output: 1                   | Program output: 77                 
Correct output: 23                  | Program output: 28                 
Correct output: -89                 | Program output: -31                
Correct output: 15                  | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_k_when_autoconstructing () (print_boolean) exec_yankdup in3 integer_yankdup integer_rot integer_dup print_integer)
Lexicase best errors: [0 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_k_when_autoconstructing () (print_boolean) exec_yankdup in3 integer_yankdup integer_rot integer_dup print_integer)
Zero cases best errors: [0 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 1 252 414 1 253 672 253 414 253)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (257 1 252 414 1 253 672 253 414 253)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (exec_when (boolean_rot -15 exec_y_when_autoconstructing (exec_yank exec_while () boolean_xor integer_yankdup exec_k_when_autoconstructing () (print_boolean) exec_yankdup in3) integer_yankdup integer_rot integer_dup print_integer))
Errors: [0 1 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 22
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.23
Median total errors in population: 7
Error averages by case: (0.743 0.999 0.748 0.586 0.999 0.747 0.328 0.747 0.586 0.747)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.597
Average program size in population (points): 31.0
Average percent parens in population: 0.259
Minimum age in population: 8.0
Maximum age in population: 13.7890625
Average age in population: 11.9638359375
Median age in population: 12.0703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3406297
--- Timings ---
Current time: 1559314571379 milliseconds
Total Time:          29.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.3 seconds, 66.4%
Fitness Testing:      6.2 seconds, 21.4%
Report:               3.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Lexicase best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ())))) () ())
Lexicase best errors: [0 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Zero cases best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ())))) () ())
Zero cases best errors: [0 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 319 919 318 215 219 221 919 919 215)
Population mean number of elite cases: 4.48
Count of perfect (error zero) individuals by case: (218 319 919 318 215 219 221 919 919 215)
Population mean number of perfect (error zero) cases: 4.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ())))) () ())
Errors: [0 1 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 5.518
Median total errors in population: 5
Error averages by case: (0.782 0.681 0.081 0.682 0.785 0.781 0.779 0.081 0.081 0.785)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.173
Average program size in population (points): 33.412
Average percent parens in population: 0.265
Minimum age in population: 10.28125
Maximum age in population: 15.25390625
Average age in population: 13.383296875
Median age in population: 13.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.547
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.521
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3759944
--- Timings ---
Current time: 1559314574163 milliseconds
Total Time:          31.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.3 seconds, 67.2%
Fitness Testing:      6.7 seconds, 21.2%
Report:               3.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Lexicase best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ())))) () ())
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Zero cases best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ())))) () ())
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (391 934 660 391 268 391 1000 270 270 1000)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (391 934 660 391 268 391 0 270 270 0)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ())))) () ())
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.425
Median total errors in population: 6
Error averages by case: (0.609 0.066 0.34 0.609 0.732 0.609 1.0 0.73 0.73 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 26.259
Average program size in population (points): 36.451
Average percent parens in population: 0.272
Minimum age in population: 11.28125
Maximum age in population: 16.533203125
Average age in population: 14.799919921875
Median age in population: 14.865234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4157328
--- Timings ---
Current time: 1559314577435 milliseconds
Total Time:          34.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.8 seconds, 68.1%
Fitness Testing:      7.2 seconds, 20.6%
Report:               3.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: 29                 
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: 83                 
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 82                 
Correct output: 23                  | Program output: 93                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 59                 
Correct output: 4                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 95                 
Correct output: 16                  | Program output: 41                 
Correct output: 4                   | Program output: 100                
Correct output: 8                   | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 93                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 65                 
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 47                 
Correct output: 2                   | Program output: 91                 
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -22                
Correct output: -82                 | Program output: -75                
Correct output: -13                 | Program output: 37                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -56                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: 69                 
Correct output: -68                 | Program output: 75                 
Correct output: -10                 | Program output: 1                  
Correct output: -80                 | Program output: -11                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 43                 
Correct output: -53                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 76                 
Correct output: -60                 | Program output: 86                 
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: 22                 
Correct output: -86                 | Program output: 55                 
Correct output: -67                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -42                
Correct output: -26                 | Program output: 77                 
Correct output: -16                 | Program output: 98                 
Correct output: -86                 | Program output: 17                 
Correct output: -67                 | Program output: 26                 
Correct output: -84                 | Program output: 86                 
Correct output: -41                 | Program output: 86                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -32                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 82                 
Correct output: -14                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -62                
Correct output: -41                 | Program output: 30                 
Correct output: -96                 | Program output: -1                 
Correct output: -100                | Program output: 24                 
Correct output: -90                 | Program output: -23                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -54                
Correct output: -96                 | Program output: 96                 
Correct output: 1                   | Program output: 77                 
Correct output: 23                  | Program output: 28                 
Correct output: -89                 | Program output: -31                
Correct output: 15                  | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Lexicase best program: (exec_when (boolean_rot -15 exec_y_when_autoconstructing (exec_yank exec_while () print_integer integer_yankdup exec_do*count () print_boolean) exec_yankdup in3) integer_yankdup integer_rot integer_min print_integer)
Lexicase best errors: [0 1 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Zero cases best program: (exec_when (boolean_rot -15 exec_y_when_autoconstructing (exec_yank exec_while () print_integer integer_yankdup exec_do*count () print_boolean) exec_yankdup in3) integer_yankdup integer_rot integer_min print_integer)
Zero cases best errors: [0 1 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (122 480 336 122 122 1000 480 1000 480 122)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (122 480 336 122 122 0 480 0 480 122)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (exec_when (boolean_rot -15 exec_y_when_autoconstructing (exec_yank exec_while () boolean_xor integer_yankdup boolean_xor) print_boolean) exec_yankdup in3 integer_yankdup integer_rot integer_dup print_integer)
Errors: [0 1 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 16
Size: 20
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.736
Median total errors in population: 7
Error averages by case: (0.878 0.52 0.664 0.878 0.878 1.0 0.52 1.0 0.52 0.878)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 28.13
Average program size in population (points): 39.064
Average percent parens in population: 0.273
Minimum age in population: 13.41015625
Maximum age in population: 18.1826171875
Average age in population: 16.2602490234375
Median age in population: 16.3271484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4598505
--- Timings ---
Current time: 1559314580161 milliseconds
Total Time:          37.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.8 seconds, 68.3%
Fitness Testing:      7.7 seconds, 20.4%
Report:               4.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: 29                 
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: 83                 
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 82                 
Correct output: 23                  | Program output: 93                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 59                 
Correct output: 4                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 95                 
Correct output: 16                  | Program output: 41                 
Correct output: 4                   | Program output: 100                
Correct output: 8                   | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 93                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 65                 
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 47                 
Correct output: 2                   | Program output: 91                 
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -22                
Correct output: -82                 | Program output: -75                
Correct output: -13                 | Program output: 37                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -56                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: 69                 
Correct output: -68                 | Program output: 75                 
Correct output: -10                 | Program output: 1                  
Correct output: -80                 | Program output: -11                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 43                 
Correct output: -53                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 76                 
Correct output: -60                 | Program output: 86                 
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: 22                 
Correct output: -86                 | Program output: 55                 
Correct output: -67                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -42                
Correct output: -26                 | Program output: 77                 
Correct output: -16                 | Program output: 98                 
Correct output: -86                 | Program output: 17                 
Correct output: -67                 | Program output: 26                 
Correct output: -84                 | Program output: 86                 
Correct output: -41                 | Program output: 86                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -32                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 82                 
Correct output: -14                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -62                
Correct output: -41                 | Program output: 30                 
Correct output: -96                 | Program output: -1                 
Correct output: -100                | Program output: 24                 
Correct output: -90                 | Program output: -23                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -54                
Correct output: -96                 | Program output: 96                 
Correct output: 1                   | Program output: 77                 
Correct output: 23                  | Program output: 28                 
Correct output: -89                 | Program output: -31                
Correct output: 15                  | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_when (boolean_rot) -15 exec_y_when_autoconstructing (exec_yank exec_while ()) boolean_xor integer_yankdup exec_k_when_autoconstructing () (print_boolean) exec_yankdup in3 integer_yankdup integer_rot integer_dup print_integer)
Lexicase best errors: [0 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_when (boolean_rot) -15 exec_y_when_autoconstructing (exec_yank exec_while ()) boolean_xor integer_yankdup exec_k_when_autoconstructing () (print_boolean) exec_yankdup in3 integer_yankdup integer_rot integer_dup print_integer)
Zero cases best errors: [0 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (931 367 931 115 931 446 367 444 114 444)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (931 367 931 115 931 446 367 444 114 444)
Population mean number of perfect (error zero) cases: 5.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer})
Best program: (exec_noop exec_when (boolean_rot -15 exec_y_when_autoconstructing (exec_yank) exec_while () boolean_xor) exec_noop exec_k_when_autoconstructing () (print_boolean) exec_yankdup in3 integer_yankdup integer_rot integer_dup print_integer)
Errors: [0 1 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 4.91
Median total errors in population: 5
Error averages by case: (0.069 0.633 0.069 0.885 0.069 0.554 0.633 0.556 0.886 0.556)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.312
Average program size in population (points): 32.158
Average percent parens in population: 0.267
Minimum age in population: 14.41015625
Maximum age in population: 19.833984375
Average age in population: 17.83540283203125
Median age in population: 17.903564453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4901674
--- Timings ---
Current time: 1559314582724 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.9 seconds, 69.1%
Fitness Testing:      8.0 seconds, 19.9%
Report:               4.3 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Lexicase best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y () exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ()))) () ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Zero cases best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y () exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ()))) () ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 267 285 267 371 371 286 267 555 1000)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (0 267 285 267 371 371 286 267 555 0)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop integer_dup integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ())))) () ())
Errors: [1 0 1 0 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.331
Median total errors in population: 7
Error averages by case: (1.0 0.733 0.715 0.733 0.629 0.629 0.714 0.733 0.445 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 22.594
Average program size in population (points): 31.074
Average percent parens in population: 0.264
Minimum age in population: 15.41015625
Maximum age in population: 21.366943359375
Average age in population: 19.28335717773438
Median age in population: 19.316162109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5239188
--- Timings ---
Current time: 1559314585694 milliseconds
Total Time:          43.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.2 seconds, 69.9%
Fitness Testing:      8.4 seconds, 19.5%
Report:               4.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: 29                 
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: 83                 
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 82                 
Correct output: 23                  | Program output: 93                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 59                 
Correct output: 4                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 95                 
Correct output: 16                  | Program output: 41                 
Correct output: 4                   | Program output: 100                
Correct output: 8                   | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 93                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 65                 
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 47                 
Correct output: 2                   | Program output: 91                 
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -22                
Correct output: -82                 | Program output: -75                
Correct output: -13                 | Program output: 37                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -56                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: 69                 
Correct output: -68                 | Program output: 75                 
Correct output: -10                 | Program output: 1                  
Correct output: -80                 | Program output: -11                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 43                 
Correct output: -53                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 76                 
Correct output: -60                 | Program output: 86                 
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: 22                 
Correct output: -86                 | Program output: 55                 
Correct output: -67                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -42                
Correct output: -26                 | Program output: 77                 
Correct output: -16                 | Program output: 98                 
Correct output: -86                 | Program output: 17                 
Correct output: -67                 | Program output: 26                 
Correct output: -84                 | Program output: 86                 
Correct output: -41                 | Program output: 86                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -32                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 82                 
Correct output: -14                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -62                
Correct output: -41                 | Program output: 30                 
Correct output: -96                 | Program output: -1                 
Correct output: -100                | Program output: 24                 
Correct output: -90                 | Program output: -23                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -54                
Correct output: -96                 | Program output: 96                 
Correct output: 1                   | Program output: 77                 
Correct output: 23                  | Program output: 28                 
Correct output: -89                 | Program output: -31                
Correct output: 15                  | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup boolean_invert_second_then_and exec_when (exec_when (exec_dup_items -15 exec_y_when_autoconstructing (exec_yank exec_while ()) boolean_xor integer_yankdup exec_k_when_autoconstructing () (print_boolean)) exec_yankdup in3) integer_yankdup integer_rot integer_dup print_integer)
Lexicase best errors: [0 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup boolean_invert_second_then_and exec_when (exec_when (exec_dup_items -15 exec_y_when_autoconstructing (exec_yank exec_while ()) boolean_xor integer_yankdup exec_k_when_autoconstructing () (print_boolean)) exec_yankdup in3) integer_yankdup integer_rot integer_dup print_integer)
Zero cases best errors: [0 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 1000 414 413 242 242 284 940 1000 241)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (242 0 414 413 242 242 284 940 0 241)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (exec_noop integer_rot -15 exec_y_when_autoconstructing (exec_yank exec_while () boolean_xor integer_yankdup exec_k_when_autoconstructing () (print_boolean) exec_yankdup in3) integer_yankdup integer_rot integer_dup print_integer)
Errors: [0 1 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.982
Median total errors in population: 7
Error averages by case: (0.758 1.0 0.586 0.587 0.758 0.758 0.716 0.06 1.0 0.759)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 23.84
Average program size in population (points): 32.749
Average percent parens in population: 0.262
Minimum age in population: 17.373046875
Maximum age in population: 22.5555419921875
Average age in population: 20.75306481933594
Median age in population: 20.85595703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5596613
--- Timings ---
Current time: 1559314588170 milliseconds
Total Time:          45.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.1 seconds, 70.1%
Fitness Testing:      8.8 seconds, 19.3%
Report:               4.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: 29                 
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: 83                 
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 82                 
Correct output: 23                  | Program output: 93                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 59                 
Correct output: 4                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 95                 
Correct output: 16                  | Program output: 41                 
Correct output: 4                   | Program output: 100                
Correct output: 8                   | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 93                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 65                 
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 47                 
Correct output: 2                   | Program output: 91                 
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -22                
Correct output: -82                 | Program output: -75                
Correct output: -13                 | Program output: 37                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -56                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: 69                 
Correct output: -68                 | Program output: 75                 
Correct output: -10                 | Program output: 1                  
Correct output: -80                 | Program output: -11                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 43                 
Correct output: -53                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 76                 
Correct output: -60                 | Program output: 86                 
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: 22                 
Correct output: -86                 | Program output: 55                 
Correct output: -67                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -42                
Correct output: -26                 | Program output: 77                 
Correct output: -16                 | Program output: 98                 
Correct output: -86                 | Program output: 17                 
Correct output: -67                 | Program output: 26                 
Correct output: -84                 | Program output: 86                 
Correct output: -41                 | Program output: 86                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -32                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 82                 
Correct output: -14                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -62                
Correct output: -41                 | Program output: 30                 
Correct output: -96                 | Program output: -1                 
Correct output: -100                | Program output: 24                 
Correct output: -90                 | Program output: -23                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -54                
Correct output: -96                 | Program output: 96                 
Correct output: 1                   | Program output: 77                 
Correct output: 23                  | Program output: 28                 
Correct output: -89                 | Program output: -31                
Correct output: 15                  | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 2, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_when (boolean_rot -15 exec_y_when_autoconstructing (exec_yank exec_while ()) boolean_xor integer_yankdup exec_k_when_autoconstructing () (print_boolean exec_yankdup in3)) integer_yankdup integer_rot integer_dup print_integer)
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 2, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_when (boolean_rot -15 exec_y_when_autoconstructing (exec_yank exec_while ()) boolean_xor integer_yankdup exec_k_when_autoconstructing () (print_boolean exec_yankdup in3)) integer_yankdup integer_rot integer_dup print_integer)
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (523 268 1000 1000 523 142 268 523 523 523)
Population mean number of elite cases: 5.29
Count of perfect (error zero) individuals by case: (523 268 0 0 523 142 268 523 523 523)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (integer_dec boolean_rot -15 exec_y_when_autoconstructing (exec_yank exec_while () boolean_xor integer_yankdup exec_k_when_autoconstructing () (print_boolean) exec_yankdup in3) integer_dup print_integer)
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 19
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.707
Median total errors in population: 5
Error averages by case: (0.477 0.732 1.0 1.0 0.477 0.858 0.732 0.477 0.477 0.477)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 20.34
Average program size in population (points): 27.707
Average percent parens in population: 0.256
Minimum age in population: 19.424560546875
Maximum age in population: 24.14105224609375
Average age in population: 22.29662817382812
Median age in population: 22.3955078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5861920
--- Timings ---
Current time: 1559314590510 milliseconds
Total Time:          48.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.0 seconds, 70.6%
Fitness Testing:      9.1 seconds, 19.0%
Report:               4.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty) () ())
Lexicase best errors: [1 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 19
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty) () ())
Zero cases best errors: [1 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 19
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 1000 568 120 120 234 234 234 234 2)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (120 0 568 120 120 234 234 234 234 2)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult integer_inc exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_when (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ()))))
Errors: [1 1 1 1 1 0 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 48
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.134
Median total errors in population: 9
Error averages by case: (0.88 1.0 0.432 0.88 0.88 0.766 0.766 0.766 0.766 0.998)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.299
Average program size in population (points): 26.267
Average percent parens in population: 0.256
Minimum age in population: 20.424560546875
Maximum age in population: 25.52560424804688
Average age in population: 23.80837341308594
Median age in population: 23.89614868164062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6106898
--- Timings ---
Current time: 1559314592943 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.0 seconds, 71.2%
Fitness Testing:      9.4 seconds, 18.7%
Report:               5.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank})
Lexicase best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times exec_yank exec_while () boolean_xor integer_yankdup exec_k_when_autoconstructing (print_boolean) (integer_mult) exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank) ())) () ())
Lexicase best errors: [0 1 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank})
Zero cases best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times exec_yank exec_while () boolean_xor integer_yankdup exec_k_when_autoconstructing (print_boolean) (integer_mult) exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank) ())) () ())
Zero cases best errors: [0 1 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 316 410 314 1000 110 1000 410 410 314)
Population mean number of elite cases: 4.69
Count of perfect (error zero) individuals by case: (410 316 410 314 0 110 0 410 410 314)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_315} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or boolean_rot) (integer_flush print_integer tag_boolean_315 integer_div boolean_and exec_k (boolean_empty boolean_stackdepth exec_yankdup exec_s () () ()) ()))) ())) () ())
Errors: [0 1 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 58
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 7.306
Median total errors in population: 7
Error averages by case: (0.59 0.684 0.59 0.686 1.0 0.89 1.0 0.59 0.59 0.686)
Error minima by case: (0 0 0 0 1 0 1 0 0 0)
Average genome size in population (length): 23.404
Average program size in population (points): 31.837
Average percent parens in population: 0.257
Minimum age in population: 21.96484375
Maximum age in population: 27.30033874511719
Average age in population: 25.23585556030273
Median age in population: 25.27590179443359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6422068
--- Timings ---
Current time: 1559314595305 milliseconds
Total Time:          52.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.7 seconds, 71.4%
Fitness Testing:      9.8 seconds, 18.5%
Report:               5.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: 29                 
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: 83                 
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 82                 
Correct output: 23                  | Program output: 93                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 59                 
Correct output: 4                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 95                 
Correct output: 16                  | Program output: 41                 
Correct output: 4                   | Program output: 100                
Correct output: 8                   | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 93                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 65                 
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 47                 
Correct output: 2                   | Program output: 91                 
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -22                
Correct output: -82                 | Program output: -75                
Correct output: -13                 | Program output: 37                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -56                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: 69                 
Correct output: -68                 | Program output: 75                 
Correct output: -10                 | Program output: 1                  
Correct output: -80                 | Program output: -11                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 43                 
Correct output: -53                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 76                 
Correct output: -60                 | Program output: 86                 
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: 22                 
Correct output: -86                 | Program output: 55                 
Correct output: -67                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -42                
Correct output: -26                 | Program output: 77                 
Correct output: -16                 | Program output: 98                 
Correct output: -86                 | Program output: 17                 
Correct output: -67                 | Program output: 26                 
Correct output: -84                 | Program output: 86                 
Correct output: -41                 | Program output: 86                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -32                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 82                 
Correct output: -14                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -62                
Correct output: -41                 | Program output: 30                 
Correct output: -96                 | Program output: -1                 
Correct output: -100                | Program output: 24                 
Correct output: -90                 | Program output: -23                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -54                
Correct output: -96                 | Program output: 96                 
Correct output: 1                   | Program output: 77                 
Correct output: 23                  | Program output: 28                 
Correct output: -89                 | Program output: -31                
Correct output: 15                  | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_when (boolean_not) -15 exec_y_when_autoconstructing (integer_div exec_if () (exec_dup_items)) in4 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank integer_lte integer_stackdepth exec_y (boolean_shove boolean_stackdepth exec_eq) boolean_invert_second_then_and) () ())
Lexicase best errors: [1 1 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 34
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_when (boolean_not) -15 exec_y_when_autoconstructing (integer_div exec_if () (exec_dup_items)) in4 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank integer_lte integer_stackdepth exec_y (boolean_shove boolean_stackdepth exec_eq) boolean_invert_second_then_and) () ())
Zero cases best errors: [1 1 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 34
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 1000 111 1000 362 362 1000 1000 468 941)
Population mean number of elite cases: 6.36
Count of perfect (error zero) individuals by case: (111 0 111 0 362 362 0 0 468 941)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (exec_noop integer_rot boolean_swap boolean_dup boolean_invert_second_then_and exec_when (exec_when (boolean_rot -15 exec_y_when_autoconstructing (exec_yank exec_while () boolean_xor integer_yankdup exec_k_when_autoconstructing (print_boolean) (exec_yankdup in3) integer_yankdup integer_rot integer_dup print_integer))))
Errors: [0 1 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.645
Median total errors in population: 8
Error averages by case: (0.889 1.0 0.889 1.0 0.638 0.638 1.0 1.0 0.532 0.059)
Error minima by case: (0 1 0 1 0 0 1 1 0 0)
Average genome size in population (length): 22.477
Average program size in population (points): 30.765
Average percent parens in population: 0.263
Minimum age in population: 23.61328125
Maximum age in population: 28.73544311523438
Average age in population: 26.72196472930908
Median age in population: 26.77430725097656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6732112
--- Timings ---
Current time: 1559314597936 milliseconds
Total Time:          55.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.8 seconds, 71.7%
Fitness Testing:     10.1 seconds, 18.2%
Report:               5.5 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty) (exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) ())) ())
Lexicase best errors: [0 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty) (exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) ())) ())
Zero cases best errors: [0 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 1 391 192 363 190 945 190 391 946)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (190 1 391 192 363 190 945 190 391 946)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if () ())) () ())
Errors: [0 1 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 27
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.201
Median total errors in population: 6
Error averages by case: (0.81 0.999 0.609 0.808 0.637 0.81 0.055 0.81 0.609 0.054)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.68
Average program size in population (points): 25.224
Average percent parens in population: 0.251
Minimum age in population: 24.7802734375
Maximum age in population: 30.12007141113281
Average age in population: 28.23087410736084
Median age in population: 28.30454635620117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6989723
--- Timings ---
Current time: 1559314600818 milliseconds
Total Time:          58.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.0 seconds, 72.2%
Fitness Testing:     10.4 seconds, 17.9%
Report:               5.7 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if})
Lexicase best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if () ())) () ())
Lexicase best errors: [1 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if})
Zero cases best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if () ())) () ())
Zero cases best errors: [1 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 124 240 462 827 462 462 240 586 121)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (241 124 240 462 827 462 462 240 586 121)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty print_integer exec_empty integer_gt tagged_500 integer_stackdepth exec_y (boolean_stackdepth boolean_stackdepth exec_do*while (boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()) ())))
Errors: [1 1 1 0 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.235
Median total errors in population: 6
Error averages by case: (0.759 0.876 0.76 0.538 0.173 0.538 0.538 0.76 0.414 0.879)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.067
Average program size in population (points): 31.655
Average percent parens in population: 0.263
Minimum age in population: 26.29373168945312
Maximum age in population: 31.49989700317383
Average age in population: 29.67280272483826
Median age in population: 29.75592231750488
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7321504
--- Timings ---
Current time: 1559314603197 milliseconds
Total Time:          60.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.8 seconds, 72.0%
Fitness Testing:     10.8 seconds, 17.7%
Report:               6.1 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 54                 
Correct output: 23                  | Program output: 79                 
Correct output: 2                   | Program output: 57                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 21                  | Program output: 69                 
Correct output: 19                  | Program output: 58                 
Correct output: 3                   | Program output: 22                 
Correct output: 16                  | Program output: 59                 
Correct output: 4                   | Program output: 40                 
Correct output: 8                   | Program output: 18                 
Correct output: 3                   | Program output: 32                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 43                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -48                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 69                 
Correct output: -49                 | Program output: 71                 
Correct output: -83                 | Program output: 24                 
Correct output: -84                 | Program output: 46                 
Correct output: -90                 | Program output: -13                
Correct output: -24                 | Program output: 78                 
Correct output: -68                 | Program output: 93                 
Correct output: -10                 | Program output: 84                 
Correct output: -80                 | Program output: -5                 
Correct output: -57                 | Program output: -22                
Correct output: -10                 | Program output: -10                
Correct output: -53                 | Program output: 49                 
Correct output: -26                 | Program output: 7                  
Correct output: -64                 | Program output: 85                 
Correct output: -42                 | Program output: -38                
Correct output: -38                 | Program output: 18                 
Correct output: -3                  | Program output: -2                 
Correct output: 44                  | Program output: 44                 
Correct output: -60                 | Program output: -47                
Correct output: -15                 | Program output: 41                 
Correct output: -45                 | Program output: 78                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 5                  
Correct output: -84                 | Program output: -71                
Correct output: -47                 | Program output: 51                 
Correct output: -26                 | Program output: 84                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 8                  
Correct output: -84                 | Program output: 31                 
Correct output: -41                 | Program output: -10                
Correct output: -84                 | Program output: 66                 
Correct output: -35                 | Program output: -35                
Correct output: -16                 | Program output: 9                  
Correct output: -34                 | Program output: 23                 
Correct output: -21                 | Program output: 47                 
Correct output: -81                 | Program output: -71                
Correct output: -51                 | Program output: 65                 
Correct output: -14                 | Program output: -14                
Correct output: -97                 | Program output: -73                
Correct output: -73                 | Program output: 93                 
Correct output: -76                 | Program output: -70                
Correct output: -69                 | Program output: 89                 
Correct output: 20                  | Program output: 88                 
Correct output: 1                   | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -41                 | Program output: 33                 
Correct output: -96                 | Program output: -28                
Correct output: -100                | Program output: -50                
Correct output: -90                 | Program output: -71                
Correct output: -25                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -70                
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: -89                 | Program output: 72                 
Correct output: 15                  | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -14} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_when (boolean_rot -14 exec_y_when_autoconstructing (exec_yank exec_while () boolean_xor integer_yankdup exec_when (integer_lte exec_if () (boolean_invert_second_then_and)) in4 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult)) boolean_or)
Lexicase best errors: [0 1 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -14} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_when (boolean_rot -14 exec_y_when_autoconstructing (exec_yank exec_while () boolean_xor integer_yankdup exec_when (integer_lte exec_if () (boolean_invert_second_then_and)) in4 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult)) boolean_or)
Zero cases best errors: [0 1 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (305 428 125 953 125 427 522 305 427 94)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (305 428 125 953 125 427 522 305 427 94)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 1, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (integer_lte exec_if () (exec_dup_items) in4 print_integer integer_dup_times integer_empty boolean_dup exec_pop (exec_y (integer_dup print_integer)))
Errors: [0 1 1 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 12
Size: 17
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.289
Median total errors in population: 6
Error averages by case: (0.695 0.572 0.875 0.047 0.875 0.573 0.478 0.695 0.573 0.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.039
Average program size in population (points): 31.584
Average percent parens in population: 0.264
Minimum age in population: 27.29373168945312
Maximum age in population: 33.04165935516357
Average age in population: 31.13994996738434
Median age in population: 31.27172660827637
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7649287
--- Timings ---
Current time: 1559314605975 milliseconds
Total Time:          63.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.1 seconds, 72.4%
Fitness Testing:     11.1 seconds, 17.5%
Report:               6.3 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: -8                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 74                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 61                 
Correct output: 21                  | Program output: 46                 
Correct output: 19                  | Program output: 85                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 20                 
Correct output: 4                   | Program output: 89                 
Correct output: 8                   | Program output: 13                 
Correct output: 3                   | Program output: 70                 
Correct output: 28                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 89                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 6                  
Correct output: 22                  | Program output: 70                 
Correct output: 43                  | Program output: 70                 
Correct output: 2                   | Program output: 20                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -94                
Correct output: -82                 | Program output: -70                
Correct output: -13                 | Program output: 32                 
Correct output: -49                 | Program output: 16                 
Correct output: -83                 | Program output: 91                 
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: -24                
Correct output: -68                 | Program output: -49                
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -72                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: 26                 
Correct output: -53                 | Program output: -50                
Correct output: -26                 | Program output: 18                 
Correct output: -64                 | Program output: 70                 
Correct output: -42                 | Program output: 46                 
Correct output: -38                 | Program output: -34                
Correct output: -3                  | Program output: 55                 
Correct output: 44                  | Program output: 99                 
Correct output: -60                 | Program output: -8                 
Correct output: -15                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -86                 | Program output: 58                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -32                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -7                 
Correct output: -16                 | Program output: 98                 
Correct output: -86                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -24                
Correct output: -41                 | Program output: -7                 
Correct output: -84                 | Program output: -58                
Correct output: -35                 | Program output: 93                 
Correct output: -16                 | Program output: 13                 
Correct output: -34                 | Program output: -1                 
Correct output: -21                 | Program output: 98                 
Correct output: -81                 | Program output: -65                
Correct output: -51                 | Program output: 100                
Correct output: -14                 | Program output: 80                 
Correct output: -97                 | Program output: 26                 
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -56                
Correct output: -69                 | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 10                 
Correct output: -96                 | Program output: 71                 
Correct output: -100                | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: 60                 
Correct output: -99                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 37                 
Correct output: 23                  | Program output: 55                 
Correct output: -89                 | Program output: -43                
Correct output: 15                  | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_lte exec_if (exec_dup_items) () in1 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty) (exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items) ())) ())
Lexicase best errors: [1 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_lte exec_if (exec_dup_items) () in1 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty) (exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items) ())) ())
Zero cases best errors: [1 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 123 297 257 257 936 257 297 936 257)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (124 123 297 257 257 936 257 297 936 257)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s})
Best program: (integer_lte exec_if (exec_dup_items) () in1 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty) (exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or boolean_eq integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_y_when_autoconstructing (integer_eq boolean_stackdepth exec_yankdup exec_s () () ()))) ())) ())
Errors: [1 1 1 0 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 6.259
Median total errors in population: 6
Error averages by case: (0.876 0.877 0.703 0.743 0.743 0.064 0.743 0.703 0.064 0.743)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.143
Average program size in population (points): 33.201
Average percent parens in population: 0.266
Minimum age in population: 29.55908203125
Maximum age in population: 34.61447620391846
Average age in population: 32.67015981626511
Median age in population: 32.71972608566284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7987444
--- Timings ---
Current time: 1559314609275 milliseconds
Total Time:          66.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.8 seconds, 73.0%
Fitness Testing:     11.5 seconds, 17.2%
Report:               6.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: 29                 
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: 83                 
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 82                 
Correct output: 23                  | Program output: 93                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 59                 
Correct output: 4                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 95                 
Correct output: 16                  | Program output: 41                 
Correct output: 4                   | Program output: 100                
Correct output: 8                   | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 93                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 65                 
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 47                 
Correct output: 2                   | Program output: 91                 
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -22                
Correct output: -82                 | Program output: -75                
Correct output: -13                 | Program output: 37                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -56                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: 69                 
Correct output: -68                 | Program output: 75                 
Correct output: -10                 | Program output: 1                  
Correct output: -80                 | Program output: -11                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 43                 
Correct output: -53                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 76                 
Correct output: -60                 | Program output: 86                 
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: 22                 
Correct output: -86                 | Program output: 55                 
Correct output: -67                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -42                
Correct output: -26                 | Program output: 77                 
Correct output: -16                 | Program output: 98                 
Correct output: -86                 | Program output: 17                 
Correct output: -67                 | Program output: 26                 
Correct output: -84                 | Program output: 86                 
Correct output: -41                 | Program output: 86                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -32                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 82                 
Correct output: -14                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -62                
Correct output: -41                 | Program output: 30                 
Correct output: -96                 | Program output: -1                 
Correct output: -100                | Program output: 24                 
Correct output: -90                 | Program output: -23                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -54                
Correct output: -96                 | Program output: 96                 
Correct output: 1                   | Program output: 77                 
Correct output: 23                  | Program output: 28                 
Correct output: -89                 | Program output: -31                
Correct output: 15                  | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (integer_lte exec_if (integer_yankdup exec_k_when_autoconstructing (print_boolean exec_yankdup in3) (integer_yankdup integer_rot integer_dup print_integer)) ())
Lexicase best errors: [1 0 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (integer_lte exec_if (integer_yankdup exec_k_when_autoconstructing (print_boolean exec_yankdup in3) (integer_yankdup integer_rot integer_dup print_integer)) ())
Zero cases best errors: [1 0 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 244 1000 257 1000 245 245 257 257 1000)
Population mean number of elite cases: 5.51
Count of perfect (error zero) individuals by case: (0 244 0 257 0 245 245 257 257 0)
Population mean number of perfect (error zero) cases: 1.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer})
Best program: (exec_noop exec_when (boolean_rot -15 exec_y_when_autoconstructing (exec_yank exec_swap () (boolean_xor exec_noop exec_k_when_autoconstructing () (integer_dec) exec_yankdup) in3) integer_yankdup integer_rot integer_dup print_integer))
Errors: [1 0 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 8.495
Median total errors in population: 7
Error averages by case: (1.0 0.756 1.0 0.743 1.0 0.755 0.755 0.743 0.743 1.0)
Error minima by case: (1 0 1 0 1 0 0 0 0 1)
Average genome size in population (length): 24.82
Average program size in population (points): 34.289
Average percent parens in population: 0.270
Minimum age in population: 31.24324035644531
Maximum age in population: 36.32689309120178
Average age in population: 34.13431634926796
Median age in population: 34.19874358177185
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8342407
--- Timings ---
Current time: 1559314611999 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.0 seconds, 73.2%
Fitness Testing:     11.9 seconds, 17.0%
Report:               6.7 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_mult print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_rot integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items) (boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) integer_flush boolean_stackdepth exec_dup (integer_div integer_add exec_k (integer_eq) ()))) () ())
Lexicase best errors: [1 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_mult print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_rot integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items) (boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) integer_flush boolean_stackdepth exec_dup (integer_div integer_add exec_k (integer_eq) ()))) () ())
Zero cases best errors: [1 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 936 456 1000 4 456 456 456 456 3)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (0 936 456 0 4 456 456 456 456 3)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup integer_div integer_empty integer_mult exec_s_when_autoconstructing (exec_empty integer_yank tagged_500 integer_stackdepth boolean_dup_times exec_if (boolean_stackdepth exec_yank) ()) () ())
Errors: [1 0 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.777
Median total errors in population: 9
Error averages by case: (1.0 0.064 0.544 1.0 0.996 0.544 0.544 0.544 0.544 0.997)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 18.754
Average program size in population (points): 25.339
Average percent parens in population: 0.254
Minimum age in population: 32.24324035644531
Maximum age in population: 37.71426367759705
Average age in population: 35.66380898249149
Median age in population: 35.73831975460052
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8615057
--- Timings ---
Current time: 1559314614229 milliseconds
Total Time:          71.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 73.5%
Fitness Testing:     12.2 seconds, 16.9%
Report:               6.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 54                 
Correct output: 23                  | Program output: 79                 
Correct output: 2                   | Program output: 57                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 21                  | Program output: 69                 
Correct output: 19                  | Program output: 58                 
Correct output: 3                   | Program output: 22                 
Correct output: 16                  | Program output: 59                 
Correct output: 4                   | Program output: 40                 
Correct output: 8                   | Program output: 18                 
Correct output: 3                   | Program output: 32                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 43                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -48                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 69                 
Correct output: -49                 | Program output: 71                 
Correct output: -83                 | Program output: 24                 
Correct output: -84                 | Program output: 46                 
Correct output: -90                 | Program output: -13                
Correct output: -24                 | Program output: 78                 
Correct output: -68                 | Program output: 93                 
Correct output: -10                 | Program output: 84                 
Correct output: -80                 | Program output: -5                 
Correct output: -57                 | Program output: -22                
Correct output: -10                 | Program output: -10                
Correct output: -53                 | Program output: 49                 
Correct output: -26                 | Program output: 7                  
Correct output: -64                 | Program output: 85                 
Correct output: -42                 | Program output: -38                
Correct output: -38                 | Program output: 18                 
Correct output: -3                  | Program output: -2                 
Correct output: 44                  | Program output: 44                 
Correct output: -60                 | Program output: -47                
Correct output: -15                 | Program output: 41                 
Correct output: -45                 | Program output: 78                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 5                  
Correct output: -84                 | Program output: -71                
Correct output: -47                 | Program output: 51                 
Correct output: -26                 | Program output: 84                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 8                  
Correct output: -84                 | Program output: 31                 
Correct output: -41                 | Program output: -10                
Correct output: -84                 | Program output: 66                 
Correct output: -35                 | Program output: -35                
Correct output: -16                 | Program output: 9                  
Correct output: -34                 | Program output: 23                 
Correct output: -21                 | Program output: 47                 
Correct output: -81                 | Program output: -71                
Correct output: -51                 | Program output: 65                 
Correct output: -14                 | Program output: -14                
Correct output: -97                 | Program output: -73                
Correct output: -73                 | Program output: 93                 
Correct output: -76                 | Program output: -70                
Correct output: -69                 | Program output: 89                 
Correct output: 20                  | Program output: 88                 
Correct output: 1                   | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -41                 | Program output: 33                 
Correct output: -96                 | Program output: -28                
Correct output: -100                | Program output: -50                
Correct output: -90                 | Program output: -71                
Correct output: -25                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -70                
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: -89                 | Program output: 72                 
Correct output: 15                  | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_k_when_autoconstructing () (print_boolean) in4 in3 integer_yankdup integer_rot integer_dup print_integer)
Lexicase best errors: [0 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_k_when_autoconstructing () (print_boolean) in4 in3 integer_yankdup integer_rot integer_dup print_integer)
Zero cases best errors: [0 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 2 244 707 244 1000 706 244 1000 244)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (244 2 244 707 244 0 706 244 0 244)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_k_when_autoconstructing () (integer_yankdup integer_rot integer_dup print_integer))
Errors: [0 1 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 11
Size: 14
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.365
Median total errors in population: 8
Error averages by case: (0.756 0.998 0.756 0.293 0.756 1.0 0.294 0.756 1.0 0.756)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 21.055
Average program size in population (points): 28.178
Average percent parens in population: 0.242
Minimum age in population: 33.73171234130859
Maximum age in population: 39.07828319072723
Average age in population: 37.31236219644547
Median age in population: 37.36728784441948
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8916732
--- Timings ---
Current time: 1559314616340 milliseconds
Total Time:          74.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.5 seconds, 73.6%
Fitness Testing:     12.5 seconds, 16.9%
Report:               7.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items integer_lte integer_stackdepth exec_y (exec_stackdepth)) ()))
Lexicase best errors: [1 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup tagged_500 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items integer_lte integer_stackdepth exec_y (exec_stackdepth)) ()))
Zero cases best errors: [1 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (600 131 1000 225 227 131 359 599 226 228)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (600 131 0 225 227 131 359 599 226 228)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_exec_434} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove boolean_dup boolean_shove tag_exec_434 (boolean_dup integer_shove integer_eq integer_mult) boolean_invert_second_then_and exec_empty exec_yank integer_lte integer_stackdepth integer_dup exec_eq boolean_yankdup integer_dup_items boolean_yank boolean_pop boolean_or integer_fromboolean integer_flush boolean_stackdepth exec_dup (integer_div boolean_yank exec_k () ()))
Errors: [1 1 1 0 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.274
Median total errors in population: 8
Error averages by case: (0.4 0.869 1.0 0.775 0.773 0.869 0.641 0.401 0.774 0.772)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 15.585
Average program size in population (points): 19.793
Average percent parens in population: 0.199
Minimum age in population: 35.80479097366333
Maximum age in population: 40.80723166465759
Average age in population: 38.88106588095427
Median age in population: 38.89142298698425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.358
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.329
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9099002
--- Timings ---
Current time: 1559314618280 milliseconds
Total Time:          75.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.0 seconds, 73.8%
Fitness Testing:     12.7 seconds, 16.7%
Report:               7.1 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 44                 
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 76                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 77                 
Correct output: 2                   | Program output: 61                 
Correct output: -98                 | Program output: 62                 
Correct output: -99                 | Program output: 43                 
Correct output: -82                 | Program output: 37                 
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -22                
Correct output: -38                 | Program output: 74                 
Correct output: -3                  | Program output: 68                 
Correct output: 44                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 83                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -34                
Correct output: -67                 | Program output: 31                 
Correct output: -84                 | Program output: 25                 
Correct output: -47                 | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: 5                  
Correct output: -86                 | Program output: -44                
Correct output: -67                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: 52                 
Correct output: -16                 | Program output: 82                 
Correct output: -34                 | Program output: 81                 
Correct output: -21                 | Program output: 67                 
Correct output: -81                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: 60                 
Correct output: -97                 | Program output: -42                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -3                 
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 76                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -48                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 95                 
Correct output: 23                  | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if (exec_dup_items) () in2 print_integer in2 integer_empty exec_do*count (boolean_shove integer_gt integer_mult) exec_s_when_autoconstructing (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_k () ()) ())) ())
Lexicase best errors: [1 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if (exec_dup_items) () in2 print_integer in2 integer_empty exec_do*count (boolean_shove integer_gt integer_mult) exec_s_when_autoconstructing (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush exec_yank boolean_pop boolean_or integer_fromboolean) (integer_flush boolean_stackdepth exec_dup (integer_div boolean_and exec_k (integer_eq boolean_stackdepth exec_k () ()) ())) ())
Zero cases best errors: [1 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 218 519 1000 518 204 942 520 519 942)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (0 218 519 0 518 204 942 520 519 942)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_468} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank})
Best program: (integer_lte exec_if (exec_dup_items) () in2 print_integer integer_dup_times integer_empty boolean_dup boolean_shove integer_gt integer_mult exec_s_when_autoconstructing (exec_empty exec_yank tagged_468 integer_stackdepth exec_y (exec_if (boolean_stackdepth boolean_dup_items boolean_invert_second_then_and exec_flush in4 integer_gt integer_mult) () exec_s_when_autoconstructing (exec_empty exec_yank) () ())) () ())
Errors: [1 1 0 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.618
Median total errors in population: 4
Error averages by case: (1.0 0.782 0.481 1.0 0.482 0.796 0.058 0.48 0.481 0.058)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 18.6
Average program size in population (points): 24.289
Average percent parens in population: 0.216
Minimum age in population: 37.2488180398941
Maximum age in population: 42.43560408055782
Average age in population: 40.28391949176788
Median age in population: 40.35249054431915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9349446
--- Timings ---
Current time: 1559314621342 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 74.1%
Fitness Testing:     13.0 seconds, 16.5%
Report:               7.3 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 54                 
Correct output: 23                  | Program output: 79                 
Correct output: 2                   | Program output: 57                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 21                  | Program output: 69                 
Correct output: 19                  | Program output: 58                 
Correct output: 3                   | Program output: 22                 
Correct output: 16                  | Program output: 59                 
Correct output: 4                   | Program output: 40                 
Correct output: 8                   | Program output: 18                 
Correct output: 3                   | Program output: 32                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 43                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -48                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 69                 
Correct output: -49                 | Program output: 71                 
Correct output: -83                 | Program output: 24                 
Correct output: -84                 | Program output: 46                 
Correct output: -90                 | Program output: -13                
Correct output: -24                 | Program output: 78                 
Correct output: -68                 | Program output: 93                 
Correct output: -10                 | Program output: 84                 
Correct output: -80                 | Program output: -5                 
Correct output: -57                 | Program output: -22                
Correct output: -10                 | Program output: -10                
Correct output: -53                 | Program output: 49                 
Correct output: -26                 | Program output: 7                  
Correct output: -64                 | Program output: 85                 
Correct output: -42                 | Program output: -38                
Correct output: -38                 | Program output: 18                 
Correct output: -3                  | Program output: -2                 
Correct output: 44                  | Program output: 44                 
Correct output: -60                 | Program output: -47                
Correct output: -15                 | Program output: 41                 
Correct output: -45                 | Program output: 78                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 5                  
Correct output: -84                 | Program output: -71                
Correct output: -47                 | Program output: 51                 
Correct output: -26                 | Program output: 84                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 8                  
Correct output: -84                 | Program output: 31                 
Correct output: -41                 | Program output: -10                
Correct output: -84                 | Program output: 66                 
Correct output: -35                 | Program output: -35                
Correct output: -16                 | Program output: 9                  
Correct output: -34                 | Program output: 23                 
Correct output: -21                 | Program output: 47                 
Correct output: -81                 | Program output: -71                
Correct output: -51                 | Program output: 65                 
Correct output: -14                 | Program output: -14                
Correct output: -97                 | Program output: -73                
Correct output: -73                 | Program output: 93                 
Correct output: -76                 | Program output: -70                
Correct output: -69                 | Program output: 89                 
Correct output: 20                  | Program output: 88                 
Correct output: 1                   | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -41                 | Program output: 33                 
Correct output: -96                 | Program output: -28                
Correct output: -100                | Program output: -50                
Correct output: -90                 | Program output: -71                
Correct output: -25                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -70                
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: -89                 | Program output: 72                 
Correct output: 15                  | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_k_when_autoconstructing () (integer_yankdup integer_rot integer_dup print_integer))
Lexicase best errors: [1 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 14
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items in4 exec_k_when_autoconstructing () (integer_yankdup integer_rot integer_dup print_integer))
Zero cases best errors: [1 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 14
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (785 124 163 825 163 163 1000 659 1000 123)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (785 124 163 825 163 163 0 659 0 123)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (exec_noop integer_rot boolean_swap boolean_shove boolean_dup_items integer_rot exec_k_when_autoconstructing () (print_boolean) in4 in3 integer_yankdup integer_rot integer_dup print_integer)
Errors: [1 1 0 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 7
Error averages by case: (0.215 0.876 0.837 0.175 0.837 0.837 1.0 0.341 1.0 0.877)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 19.911
Average program size in population (points): 26.348
Average percent parens in population: 0.228
Minimum age in population: 38.2488180398941
Maximum age in population: 43.71752850711346
Average age in population: 41.67809380631149
Median age in population: 41.76859976351261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 9622807
--- Timings ---
Current time: 1559314623584 milliseconds
Total Time:          81.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.0 seconds, 73.8%
Fitness Testing:     13.3 seconds, 16.3%
Report:               7.9 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 4                  
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: 29                 
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: 83                 
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: 30                 
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 82                 
Correct output: 23                  | Program output: 93                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 59                 
Correct output: 4                   | Program output: 97                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 95                 
Correct output: 16                  | Program output: 41                 
Correct output: 4                   | Program output: 100                
Correct output: 8                   | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 93                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 65                 
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 47                 
Correct output: 2                   | Program output: 91                 
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -22                
Correct output: -82                 | Program output: -75                
Correct output: -13                 | Program output: 37                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -56                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: 69                 
Correct output: -68                 | Program output: 75                 
Correct output: -10                 | Program output: 1                  
Correct output: -80                 | Program output: -11                
Correct output: -57                 | Program output: 39                 
Correct output: -10                 | Program output: 43                 
Correct output: -53                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 76                 
Correct output: -60                 | Program output: 86                 
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: 22                 
Correct output: -86                 | Program output: 55                 
Correct output: -67                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -42                
Correct output: -26                 | Program output: 77                 
Correct output: -16                 | Program output: 98                 
Correct output: -86                 | Program output: 17                 
Correct output: -67                 | Program output: 26                 
Correct output: -84                 | Program output: 86                 
Correct output: -41                 | Program output: 86                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -32                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 82                 
Correct output: -14                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -62                
Correct output: -41                 | Program output: 30                 
Correct output: -96                 | Program output: -1                 
Correct output: -100                | Program output: 24                 
Correct output: -90                 | Program output: -23                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -54                
Correct output: -96                 | Program output: 96                 
Correct output: 1                   | Program output: 77                 
Correct output: 23                  | Program output: 28                 
Correct output: -89                 | Program output: -31                
Correct output: 15                  | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer})
Lexicase best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_rot integer_add print_integer)
Lexicase best errors: [1 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer})
Zero cases best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_rot integer_add print_integer)
Zero cases best errors: [1 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 254 394 295 295 1 253 295 392 296)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (1 254 394 295 295 1 253 295 392 296)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup print_integer)
Errors: [1 1 1 0 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 7.524
Median total errors in population: 8
Error averages by case: (0.999 0.746 0.606 0.705 0.705 0.999 0.747 0.705 0.608 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.287
Average program size in population (points): 19.306
Average percent parens in population: 0.193
Minimum age in population: 40.42012196779251
Maximum age in population: 45.12546677142382
Average age in population: 43.15652080288902
Median age in population: 43.20786741748452
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.427
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.398
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 9808316
--- Timings ---
Current time: 1559314626386 milliseconds
Total Time:          84.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.5 seconds, 74.3%
Fitness Testing:     13.5 seconds, 16.1%
Report:               8.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 69                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 26                 
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -48                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 71                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 46                 
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -22                
Correct output: -10                 | Program output: -10                
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -38                
Correct output: -38                 | Program output: 18                 
Correct output: -3                  | Program output: -2                 
Correct output: 44                  | Program output: 44                 
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: 41                 
Correct output: -45                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 5                  
Correct output: -84                 | Program output: -71                
Correct output: -47                 | Program output: 51                 
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: -35                
Correct output: -16                 | Program output: 9                  
Correct output: -34                 | Program output: 23                 
Correct output: -21                 | Program output: 47                 
Correct output: -81                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: -14                
Correct output: -97                 | Program output: -73                
Correct output: -73                 | Program output: -41                
Correct output: -76                 | Program output: -70                
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 31                 
Correct output: 1                   | Program output: 39                 
Correct output: -86                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -78                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Lexicase best errors: [1 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 13
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Zero cases best errors: [1 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 13
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 116 115 953 243 197 710 396 196 242)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (242 116 115 953 243 197 710 396 196 242)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Errors: [1 0 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 6.59
Median total errors in population: 6
Error averages by case: (0.758 0.884 0.885 0.047 0.757 0.803 0.29 0.604 0.804 0.758)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.561
Average program size in population (points): 16.22
Average percent parens in population: 0.148
Minimum age in population: 41.5113068819046
Maximum age in population: 46.70270518772304
Average age in population: 44.35057127342187
Median age in population: 44.40690582990646
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.38
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.337
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 9960594
--- Timings ---
Current time: 1559314628681 milliseconds
Total Time:          86.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 74.6%
Fitness Testing:     13.7 seconds, 15.8%
Report:               8.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: -8                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 16                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -38                
Correct output: -38                 | Program output: -34                
Correct output: -3                  | Program output: -2                 
Correct output: 44                  | Program output: 44                 
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: -35                
Correct output: -16                 | Program output: 9                  
Correct output: -34                 | Program output: -1                 
Correct output: -21                 | Program output: 47                 
Correct output: -81                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: -14                
Correct output: -97                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -70                
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 18
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 18
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (510 637 517 515 515 115 513 839 116 320)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (510 637 517 515 515 115 513 839 116 320)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_min in1 integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 5.403
Median total errors in population: 4
Error averages by case: (0.49 0.363 0.483 0.485 0.485 0.885 0.487 0.161 0.884 0.68)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.176
Average program size in population (points): 13.355
Average percent parens in population: 0.087
Minimum age in population: 43.58075201511383
Maximum age in population: 47.36074748914689
Average age in population: 45.34810775189381
Median age in population: 45.39117862284184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 452
Genome diversity (% unique genomes):	 0.216
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 475
Syntactic diversity (% unique Push programs):	 0.181
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 10084391
--- Timings ---
Current time: 1559314630783 milliseconds
Total Time:          88.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.3 seconds, 74.9%
Fitness Testing:     13.8 seconds, 15.6%
Report:               8.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: 11                  | Program output: 11                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: -8                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 19                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: -13                
Correct output: -49                 | Program output: 16                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -30                
Correct output: -42                 | Program output: -38                
Correct output: -38                 | Program output: -34                
Correct output: -3                  | Program output: -2                 
Correct output: 44                  | Program output: 44                 
Correct output: -60                 | Program output: -60                
Correct output: -15                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: -41                
Correct output: -84                 | Program output: -78                
Correct output: -35                 | Program output: -35                
Correct output: -16                 | Program output: 9                  
Correct output: -34                 | Program output: -1                 
Correct output: -21                 | Program output: 47                 
Correct output: -81                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -14                 | Program output: -14                
Correct output: -97                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -70                
Correct output: -69                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 18
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 18
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (935 961 210 716 717 961 954 713 719 210)
Population mean number of elite cases: 7.10
Count of perfect (error zero) individuals by case: (935 961 210 716 717 961 954 713 719 210)
Population mean number of perfect (error zero) cases: 7.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 17
Size: 18
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 2.904
Median total errors in population: 2
Error averages by case: (0.065 0.039 0.79 0.284 0.283 0.039 0.046 0.287 0.281 0.79)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.936
Average program size in population (points): 16.194
Average percent parens in population: 0.078
Minimum age in population: 45.21456874534488
Maximum age in population: 48.53005575854331
Average age in population: 47.1593613265371
Median age in population: 47.14606751105748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 305
Genome diversity (% unique genomes):	 0.247
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 322
Syntactic diversity (% unique Push programs):	 0.209
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 10235792
--- Timings ---
Current time: 1559314632906 milliseconds
Total Time:          90.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.1 seconds, 75.2%
Fitness Testing:     14.0 seconds, 15.5%
Report:               8.4 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: -8                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 54                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 22                 
Correct output: 16                  | Program output: 20                 
Correct output: 4                   | Program output: 40                 
Correct output: 8                   | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 32                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: -24                
Correct output: -68                 | Program output: -49                
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -72                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -53                 | Program output: -50                
Correct output: -26                 | Program output: 7                  
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 44                 
Correct output: -60                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: -45                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -7                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -24                
Correct output: -41                 | Program output: -10                
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 65                 
Correct output: -14                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 10                 
Correct output: -96                 | Program output: -28                
Correct output: -100                | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: -89                 | Program output: -43                
Correct output: 15                  | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (integer_lte exec_yank exec_dup_items integer_add in4 integer_min in1 integer_min in1 in3 in4 integer_min in1 integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 21
Percent parens: 0.048
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (integer_lte exec_yank exec_dup_items integer_add in4 integer_min in1 integer_min in1 in3 in4 integer_min in1 integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 21
Percent parens: 0.048
--- Lexicase Population Statistics ---
Count of elite individuals by case: (901 443 437 923 902 898 917 438 896 441)
Population mean number of elite cases: 7.20
Count of perfect (error zero) individuals by case: (901 443 437 923 902 898 917 438 896 441)
Population mean number of perfect (error zero) cases: 7.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Best program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2.804
Median total errors in population: 4
Error averages by case: (0.099 0.557 0.563 0.077 0.098 0.102 0.083 0.562 0.104 0.559)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.894
Average program size in population (points): 19.959
Average percent parens in population: 0.055
Minimum age in population: 47.13373424299061
Maximum age in population: 49.95747387129813
Average age in population: 48.97146329548233
Median age in population: 48.89587817527354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.289
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.238
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 10427143
--- Timings ---
Current time: 1559314635157 milliseconds
Total Time:          92.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.9 seconds, 75.4%
Fitness Testing:     14.3 seconds, 15.4%
Report:               8.5 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 33
Successful program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 30


Auto-simplifying with starting size: 30
step: 0
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 500
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 1000
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 1500
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 2000
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 2500
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 3000
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 3500
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 4000
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 4500
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 5000
program: (integer_lte exec_yank exec_dup_items in2 in4 integer_gte boolean_xor in3 integer_yankdup integer_yank integer_dup boolean_xor in3 integer_yankdup integer_yank integer_dup in4 integer_min in1 in3 integer_yankdup boolean_frominteger integer_min in1 in3 integer_yankdup integer_rot integer_dup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: 11                  | Program output: 21                 
Correct output: -17                 | Program output: -17                
Correct output: -8                  | Program output: -8                 
Correct output: -48                 | Program output: -48                
Correct output: -70                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 72                  | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 28                  | Program output: 54                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 38                 
Correct output: 3                   | Program output: 22                 
Correct output: 16                  | Program output: 20                 
Correct output: 4                   | Program output: 40                 
Correct output: 8                   | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 32                 
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -26                
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -57                
Correct output: -24                 | Program output: -24                
Correct output: -68                 | Program output: -49                
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -72                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -53                 | Program output: -50                
Correct output: -26                 | Program output: 7                  
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -38                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: 44                  | Program output: 44                 
Correct output: -60                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -45                 | Program output: -45                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -7                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -24                
Correct output: -41                 | Program output: -10                
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -16                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 65                 
Correct output: -14                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 10                 
Correct output: -96                 | Program output: -28                
Correct output: -100                | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: 3                  
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: -89                 | Program output: -43                
Correct output: 15                  | Program output: 15                 
;;******************************
