Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[11 -13 -13 -13] -13] [[-100 28 28 28] -100] [[18 70 70 70] 18] [[89 -35 89 89] -35] [[89 -14 89 89] -14] [[95 95 6 95] 6] [[-59 -76 -76 -76] -76] [[66 37 66 66] 37] [[-13 -13 -75 -13] -75] [[-93 -93 -17 -93] -93] [(-62 -62 -62 -62) -62] [(-79 -79 -79 -79) -79] [(-52 -52 -52 -52) -52] [(-56 -56 -56 -56) -56] [(14 14 14 14) 14] [(86 24 58 46) 24] [(5 5 54 47) 5] [(2 2 35 73) 2] [(95 82 61 47) 47] [(93 77 5 67) 5] [(75 90 70 29) 29] [(0 44 95 54) 0] [(53 56 52 88) 52] [(10 50 28 35) 10] [(27 65 24 51) 24] [(66 39 59 64) 39] [(78 59 99 46) 46] [(66 46 60 4) 4] [(19 38 24 36) 19] [(85 10 43 30) 10] [(9 96 92 73) 9] [(99 93 31 25) 25] [(50 27 45 45) 27] [(95 59 53 47) 47] [(86 17 18 14) 14] [(73 13 -42 37) -42] [(-89 -74 -15 74) -89] [(-82 77 -80 -92) -92] [(-77 -13 -46 20) -77] [(85 -96 -64 -25) -96] [(-84 -60 -71 15) -84] [(87 87 59 -70) -70] [(1 96 0 -90) -90] [(65 34 -86 65) -86] [(29 -75 -21 53) -75] [(96 37 9 -27) -27] [(-67 -70 -13 -3) -70] [(30 91 44 85) 30] [(88 -75 7 93) -75] [(-48 58 -38 5) -48] [(-54 -98 84 35) -98] [(64 -52 -90 39) -90] [(-86 -37 56 38) -86] [(-16 -47 65 4) -47] [(-1 66 77 9) -1] [(-75 49 -14 -92) -92] [(-35 -43 -4 1) -43] [(92 75 -49 100) -49] [(-33 -81 38 -57) -81] [(41 -25 -99 20) -99] [(-81 35 45 8) -81] [(-89 74 -4 60) -89] [(7 43 -49 93) -49] [(-32 -75 76 -81) -81] [(47 81 -72 -44) -72] [(81 7 -12 73) -12] [(-98 -15 53 -2) -98] [(-91 -74 21 14) -91] [(-23 42 -75 -81) -81] [(51 48 -90 -8) -90] [(52 59 53 89) 52] [(89 -59 -79 39) -79] [(-76 11 80 -22) -76] [(-76 43 -45 9) -76] [(-73 92 -37 -58) -73] [(54 -37 10 41) -37] [(-46 77 45 -85) -85] [(-99 -5 -73 48) -99] [(41 53 22 54) 22] [(-68 -20 53 13) -68] [(-56 -15 -63 -44) -63] [(22 89 97 20) 20] [(-29 93 -81 7) -81] [(-57 -1 73 -64) -64] [(38 90 -82 -24) -82] [(2 -4 29 16) -4] [(11 78 -63 -35) -63] [(48 11 21 -55) -55] [(-89 -9 65 -18) -89] [(-36 88 -86 38) -86] [(67 44 32 14) 14] [(-23 24 10 -94) -94] [(93 -61 -21 -31) -61] [(0 -60 -22 79) -60] [(41 -30 -54 33) -54])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[11 -13 -13 -13] -13]
Train Case:   6 | Input/Output: [[-100 28 28 28] -100]
Train Case:   7 | Input/Output: [[18 70 70 70] 18]
Train Case:   8 | Input/Output: [[89 -35 89 89] -35]
Train Case:   9 | Input/Output: [[89 -14 89 89] -14]
Train Case:  10 | Input/Output: [[95 95 6 95] 6]
Train Case:  11 | Input/Output: [[-59 -76 -76 -76] -76]
Train Case:  12 | Input/Output: [[66 37 66 66] 37]
Train Case:  13 | Input/Output: [[-13 -13 -75 -13] -75]
Train Case:  14 | Input/Output: [[-93 -93 -17 -93] -93]
Train Case:  15 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  16 | Input/Output: [(-79 -79 -79 -79) -79]
Train Case:  17 | Input/Output: [(-52 -52 -52 -52) -52]
Train Case:  18 | Input/Output: [(-56 -56 -56 -56) -56]
Train Case:  19 | Input/Output: [(14 14 14 14) 14]
Train Case:  20 | Input/Output: [(86 24 58 46) 24]
Train Case:  21 | Input/Output: [(5 5 54 47) 5]
Train Case:  22 | Input/Output: [(2 2 35 73) 2]
Train Case:  23 | Input/Output: [(95 82 61 47) 47]
Train Case:  24 | Input/Output: [(93 77 5 67) 5]
Train Case:  25 | Input/Output: [(75 90 70 29) 29]
Train Case:  26 | Input/Output: [(0 44 95 54) 0]
Train Case:  27 | Input/Output: [(53 56 52 88) 52]
Train Case:  28 | Input/Output: [(10 50 28 35) 10]
Train Case:  29 | Input/Output: [(27 65 24 51) 24]
Train Case:  30 | Input/Output: [(66 39 59 64) 39]
Train Case:  31 | Input/Output: [(78 59 99 46) 46]
Train Case:  32 | Input/Output: [(66 46 60 4) 4]
Train Case:  33 | Input/Output: [(19 38 24 36) 19]
Train Case:  34 | Input/Output: [(85 10 43 30) 10]
Train Case:  35 | Input/Output: [(9 96 92 73) 9]
Train Case:  36 | Input/Output: [(99 93 31 25) 25]
Train Case:  37 | Input/Output: [(50 27 45 45) 27]
Train Case:  38 | Input/Output: [(95 59 53 47) 47]
Train Case:  39 | Input/Output: [(86 17 18 14) 14]
Train Case:  40 | Input/Output: [(73 13 -42 37) -42]
Train Case:  41 | Input/Output: [(-89 -74 -15 74) -89]
Train Case:  42 | Input/Output: [(-82 77 -80 -92) -92]
Train Case:  43 | Input/Output: [(-77 -13 -46 20) -77]
Train Case:  44 | Input/Output: [(85 -96 -64 -25) -96]
Train Case:  45 | Input/Output: [(-84 -60 -71 15) -84]
Train Case:  46 | Input/Output: [(87 87 59 -70) -70]
Train Case:  47 | Input/Output: [(1 96 0 -90) -90]
Train Case:  48 | Input/Output: [(65 34 -86 65) -86]
Train Case:  49 | Input/Output: [(29 -75 -21 53) -75]
Train Case:  50 | Input/Output: [(96 37 9 -27) -27]
Train Case:  51 | Input/Output: [(-67 -70 -13 -3) -70]
Train Case:  52 | Input/Output: [(30 91 44 85) 30]
Train Case:  53 | Input/Output: [(88 -75 7 93) -75]
Train Case:  54 | Input/Output: [(-48 58 -38 5) -48]
Train Case:  55 | Input/Output: [(-54 -98 84 35) -98]
Train Case:  56 | Input/Output: [(64 -52 -90 39) -90]
Train Case:  57 | Input/Output: [(-86 -37 56 38) -86]
Train Case:  58 | Input/Output: [(-16 -47 65 4) -47]
Train Case:  59 | Input/Output: [(-1 66 77 9) -1]
Train Case:  60 | Input/Output: [(-75 49 -14 -92) -92]
Train Case:  61 | Input/Output: [(-35 -43 -4 1) -43]
Train Case:  62 | Input/Output: [(92 75 -49 100) -49]
Train Case:  63 | Input/Output: [(-33 -81 38 -57) -81]
Train Case:  64 | Input/Output: [(41 -25 -99 20) -99]
Train Case:  65 | Input/Output: [(-81 35 45 8) -81]
Train Case:  66 | Input/Output: [(-89 74 -4 60) -89]
Train Case:  67 | Input/Output: [(7 43 -49 93) -49]
Train Case:  68 | Input/Output: [(-32 -75 76 -81) -81]
Train Case:  69 | Input/Output: [(47 81 -72 -44) -72]
Train Case:  70 | Input/Output: [(81 7 -12 73) -12]
Train Case:  71 | Input/Output: [(-98 -15 53 -2) -98]
Train Case:  72 | Input/Output: [(-91 -74 21 14) -91]
Train Case:  73 | Input/Output: [(-23 42 -75 -81) -81]
Train Case:  74 | Input/Output: [(51 48 -90 -8) -90]
Train Case:  75 | Input/Output: [(52 59 53 89) 52]
Train Case:  76 | Input/Output: [(89 -59 -79 39) -79]
Train Case:  77 | Input/Output: [(-76 11 80 -22) -76]
Train Case:  78 | Input/Output: [(-76 43 -45 9) -76]
Train Case:  79 | Input/Output: [(-73 92 -37 -58) -73]
Train Case:  80 | Input/Output: [(54 -37 10 41) -37]
Train Case:  81 | Input/Output: [(-46 77 45 -85) -85]
Train Case:  82 | Input/Output: [(-99 -5 -73 48) -99]
Train Case:  83 | Input/Output: [(41 53 22 54) 22]
Train Case:  84 | Input/Output: [(-68 -20 53 13) -68]
Train Case:  85 | Input/Output: [(-56 -15 -63 -44) -63]
Train Case:  86 | Input/Output: [(22 89 97 20) 20]
Train Case:  87 | Input/Output: [(-29 93 -81 7) -81]
Train Case:  88 | Input/Output: [(-57 -1 73 -64) -64]
Train Case:  89 | Input/Output: [(38 90 -82 -24) -82]
Train Case:  90 | Input/Output: [(2 -4 29 16) -4]
Train Case:  91 | Input/Output: [(11 78 -63 -35) -63]
Train Case:  92 | Input/Output: [(48 11 21 -55) -55]
Train Case:  93 | Input/Output: [(-89 -9 65 -18) -89]
Train Case:  94 | Input/Output: [(-36 88 -86 38) -86]
Train Case:  95 | Input/Output: [(67 44 32 14) 14]
Train Case:  96 | Input/Output: [(-23 24 10 -94) -94]
Train Case:  97 | Input/Output: [(93 -61 -21 -31) -61]
Train Case:  98 | Input/Output: [(0 -60 -22 79) -60]
Train Case:  99 | Input/Output: [(41 -30 -54 33) -54]
Test Case:   0 | Input/Output: [[-2 -49 -49 -49] -49]
Test Case:   1 | Input/Output: [[-95 -95 -96 -95] -96]
Test Case:   2 | Input/Output: [[-12 -45 -12 -12] -45]
Test Case:   3 | Input/Output: [[14 -78 -78 -78] -78]
Test Case:   4 | Input/Output: [[18 18 18 -45] -45]
Test Case:   5 | Input/Output: [[-68 -68 -68 -43] -68]
Test Case:   6 | Input/Output: [[90 -54 90 90] -54]
Test Case:   7 | Input/Output: [[-56 -56 -56 -29] -56]
Test Case:   8 | Input/Output: [[-76 -24 -76 -76] -76]
Test Case:   9 | Input/Output: [[8 -79 8 8] -79]
Test Case:  10 | Input/Output: [[-11 -11 -11 63] -11]
Test Case:  11 | Input/Output: [[88 88 -81 88] -81]
Test Case:  12 | Input/Output: [[20 20 -73 20] -73]
Test Case:  13 | Input/Output: [[60 22 60 60] 22]
Test Case:  14 | Input/Output: [[33 12 12 12] 12]
Test Case:  15 | Input/Output: [[-72 -72 88 -72] -72]
Test Case:  16 | Input/Output: [[-89 -53 -53 -53] -89]
Test Case:  17 | Input/Output: [[-43 -43 -43 6] -43]
Test Case:  18 | Input/Output: [[-34 -34 -34 -15] -34]
Test Case:  19 | Input/Output: [[95 95 95 -65] -65]
Test Case:  20 | Input/Output: [[-45 -45 92 -45] -45]
Test Case:  21 | Input/Output: [[-79 -79 -79 -74] -79]
Test Case:  22 | Input/Output: [[-56 -56 -70 -56] -70]
Test Case:  23 | Input/Output: [[-50 -100 -50 -50] -100]
Test Case:  24 | Input/Output: [[42 -16 -16 -16] -16]
Test Case:  25 | Input/Output: [[60 60 -21 60] -21]
Test Case:  26 | Input/Output: [[68 1 68 68] 1]
Test Case:  27 | Input/Output: [[-53 -53 -53 -94] -94]
Test Case:  28 | Input/Output: [[96 96 -67 96] -67]
Test Case:  29 | Input/Output: [[-66 -66 -17 -66] -66]
Test Case:  30 | Input/Output: [[-14 -47 -47 -47] -47]
Test Case:  31 | Input/Output: [[91 44 91 91] 44]
Test Case:  32 | Input/Output: [[29 -56 29 29] -56]
Test Case:  33 | Input/Output: [[7 7 -34 7] -34]
Test Case:  34 | Input/Output: [[-100 -100 -100 -29] -100]
Test Case:  35 | Input/Output: [[65 65 -81 65] -81]
Test Case:  36 | Input/Output: [[-50 -26 -50 -50] -50]
Test Case:  37 | Input/Output: [[12 77 12 12] 12]
Test Case:  38 | Input/Output: [[10 -69 10 10] -69]
Test Case:  39 | Input/Output: [[-13 76 76 76] -13]
Test Case:  40 | Input/Output: [[14 36 14 14] 14]
Test Case:  41 | Input/Output: [[-23 -23 35 -23] -23]
Test Case:  42 | Input/Output: [[-82 -82 16 -82] -82]
Test Case:  43 | Input/Output: [[-61 -61 96 -61] -61]
Test Case:  44 | Input/Output: [[37 32 37 37] 32]
Test Case:  45 | Input/Output: [[42 42 22 42] 22]
Test Case:  46 | Input/Output: [[58 -74 58 58] -74]
Test Case:  47 | Input/Output: [[55 55 37 55] 37]
Test Case:  48 | Input/Output: [[-78 -78 -78 64] -78]
Test Case:  49 | Input/Output: [[20 20 -41 20] -41]
Test Case:  50 | Input/Output: [[17 -62 -62 -62] -62]
Test Case:  51 | Input/Output: [[-40 -40 -40 86] -40]
Test Case:  52 | Input/Output: [[47 4 47 47] 4]
Test Case:  53 | Input/Output: [[-88 -47 -88 -88] -88]
Test Case:  54 | Input/Output: [[80 7 80 80] 7]
Test Case:  55 | Input/Output: [[-78 -45 -45 -45] -78]
Test Case:  56 | Input/Output: [[-77 -58 -77 -77] -77]
Test Case:  57 | Input/Output: [[77 8 8 8] 8]
Test Case:  58 | Input/Output: [[9 13 13 13] 9]
Test Case:  59 | Input/Output: [[80 8 80 80] 8]
Test Case:  60 | Input/Output: [[93 93 93 61] 61]
Test Case:  61 | Input/Output: [[-57 -50 -57 -57] -57]
Test Case:  62 | Input/Output: [[-19 -19 -19 81] -19]
Test Case:  63 | Input/Output: [[-59 -100 -100 -100] -100]
Test Case:  64 | Input/Output: [[-34 -60 -60 -60] -60]
Test Case:  65 | Input/Output: [[15 72 15 15] 15]
Test Case:  66 | Input/Output: [[53 53 53 15] 15]
Test Case:  67 | Input/Output: [[-12 -12 -12 -81] -81]
Test Case:  68 | Input/Output: [[62 -57 62 62] -57]
Test Case:  69 | Input/Output: [[-26 86 86 86] -26]
Test Case:  70 | Input/Output: [[-41 -41 -65 -41] -65]
Test Case:  71 | Input/Output: [[72 -17 -17 -17] -17]
Test Case:  72 | Input/Output: [[-28 93 -28 -28] -28]
Test Case:  73 | Input/Output: [[-31 -31 -31 81] -31]
Test Case:  74 | Input/Output: [[-35 32 32 32] -35]
Test Case:  75 | Input/Output: [[90 90 46 90] 46]
Test Case:  76 | Input/Output: [[83 83 83 67] 67]
Test Case:  77 | Input/Output: [[-64 -64 -64 -76] -76]
Test Case:  78 | Input/Output: [[-4 -4 -69 -4] -69]
Test Case:  79 | Input/Output: [[42 -13 -13 -13] -13]
Test Case:  80 | Input/Output: [[-52 -97 -97 -97] -97]
Test Case:  81 | Input/Output: [[-33 -33 -71 -33] -71]
Test Case:  82 | Input/Output: [[57 -72 57 57] -72]
Test Case:  83 | Input/Output: [[-49 -49 -49 -38] -49]
Test Case:  84 | Input/Output: [[-17 -17 -17 40] -17]
Test Case:  85 | Input/Output: [[33 -83 33 33] -83]
Test Case:  86 | Input/Output: [[-2 80 -2 -2] -2]
Test Case:  87 | Input/Output: [[94 94 94 -91] -91]
Test Case:  88 | Input/Output: [[42 42 64 42] 42]
Test Case:  89 | Input/Output: [[54 -3 -3 -3] -3]
Test Case:  90 | Input/Output: [[-30 -30 -72 -30] -72]
Test Case:  91 | Input/Output: [[57 -76 -76 -76] -76]
Test Case:  92 | Input/Output: [[11 11 -69 11] -69]
Test Case:  93 | Input/Output: [[68 68 76 68] 68]
Test Case:  94 | Input/Output: [[44 44 -70 44] -70]
Test Case:  95 | Input/Output: [[64 64 64 11] 11]
Test Case:  96 | Input/Output: [[-43 -43 20 -43] -43]
Test Case:  97 | Input/Output: [[-76 -76 -76 80] -76]
Test Case:  98 | Input/Output: [[26 26 26 86] 26]
Test Case:  99 | Input/Output: [[10 9 10 10] 9]
Test Case: 100 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 101 | Input/Output: [(95 95 95 95) 95]
Test Case: 102 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 103 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 104 | Input/Output: [(7 7 7 7) 7]
Test Case: 105 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 106 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 107 | Input/Output: [(92 92 92 92) 92]
Test Case: 108 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 109 | Input/Output: [(3 3 3 3) 3]
Test Case: 110 | Input/Output: [(78 78 78 78) 78]
Test Case: 111 | Input/Output: [(11 11 11 11) 11]
Test Case: 112 | Input/Output: [(81 81 81 81) 81]
Test Case: 113 | Input/Output: [(80 80 80 80) 80]
Test Case: 114 | Input/Output: [(6 6 6 6) 6]
Test Case: 115 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 116 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 117 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 118 | Input/Output: [(79 79 79 79) 79]
Test Case: 119 | Input/Output: [(95 95 95 95) 95]
Test Case: 120 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 121 | Input/Output: [(31 31 31 31) 31]
Test Case: 122 | Input/Output: [(70 70 70 70) 70]
Test Case: 123 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 124 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 125 | Input/Output: [(51 51 51 51) 51]
Test Case: 126 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 127 | Input/Output: [(19 19 19 19) 19]
Test Case: 128 | Input/Output: [(17 17 17 17) 17]
Test Case: 129 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 130 | Input/Output: [(0 0 0 0) 0]
Test Case: 131 | Input/Output: [(2 2 2 2) 2]
Test Case: 132 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 133 | Input/Output: [(15 15 15 15) 15]
Test Case: 134 | Input/Output: [(71 71 71 71) 71]
Test Case: 135 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 136 | Input/Output: [(36 36 36 36) 36]
Test Case: 137 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 138 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 139 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 140 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 141 | Input/Output: [(42 42 42 42) 42]
Test Case: 142 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 143 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 144 | Input/Output: [(76 76 76 76) 76]
Test Case: 145 | Input/Output: [(40 40 40 40) 40]
Test Case: 146 | Input/Output: [(76 76 76 76) 76]
Test Case: 147 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 148 | Input/Output: [(69 69 69 69) 69]
Test Case: 149 | Input/Output: [(38 38 38 38) 38]
Test Case: 150 | Input/Output: [(23 23 23 23) 23]
Test Case: 151 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 152 | Input/Output: [(9 9 9 9) 9]
Test Case: 153 | Input/Output: [(80 80 80 80) 80]
Test Case: 154 | Input/Output: [(25 25 25 25) 25]
Test Case: 155 | Input/Output: [(61 61 61 61) 61]
Test Case: 156 | Input/Output: [(79 79 79 79) 79]
Test Case: 157 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 158 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 159 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 160 | Input/Output: [(74 74 74 74) 74]
Test Case: 161 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 162 | Input/Output: [(34 34 34 34) 34]
Test Case: 163 | Input/Output: [(79 79 79 79) 79]
Test Case: 164 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 165 | Input/Output: [(87 87 87 87) 87]
Test Case: 166 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 167 | Input/Output: [(34 34 34 34) 34]
Test Case: 168 | Input/Output: [(49 49 49 49) 49]
Test Case: 169 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 170 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 171 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 172 | Input/Output: [(48 48 48 48) 48]
Test Case: 173 | Input/Output: [(4 4 4 4) 4]
Test Case: 174 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 175 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 176 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 177 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 178 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 179 | Input/Output: [(44 44 44 44) 44]
Test Case: 180 | Input/Output: [(18 18 18 18) 18]
Test Case: 181 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 182 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 183 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 184 | Input/Output: [(1 1 1 1) 1]
Test Case: 185 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 186 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 187 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 188 | Input/Output: [(0 0 0 0) 0]
Test Case: 189 | Input/Output: [(98 98 98 98) 98]
Test Case: 190 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 191 | Input/Output: [(85 85 85 85) 85]
Test Case: 192 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 193 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 194 | Input/Output: [(100 100 100 100) 100]
Test Case: 195 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 196 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 197 | Input/Output: [(6 6 6 6) 6]
Test Case: 198 | Input/Output: [(86 86 86 86) 86]
Test Case: 199 | Input/Output: [(84 84 84 84) 84]
Test Case: 200 | Input/Output: [(54 85 25 77) 25]
Test Case: 201 | Input/Output: [(72 15 4 59) 4]
Test Case: 202 | Input/Output: [(48 20 49 48) 20]
Test Case: 203 | Input/Output: [(56 9 93 62) 9]
Test Case: 204 | Input/Output: [(68 38 98 51) 38]
Test Case: 205 | Input/Output: [(64 22 75 65) 22]
Test Case: 206 | Input/Output: [(28 77 97 15) 15]
Test Case: 207 | Input/Output: [(25 24 83 73) 24]
Test Case: 208 | Input/Output: [(26 51 95 0) 0]
Test Case: 209 | Input/Output: [(41 75 62 57) 41]
Test Case: 210 | Input/Output: [(96 11 91 40) 11]
Test Case: 211 | Input/Output: [(65 4 43 51) 4]
Test Case: 212 | Input/Output: [(88 68 15 11) 11]
Test Case: 213 | Input/Output: [(28 99 3 11) 3]
Test Case: 214 | Input/Output: [(60 15 36 55) 15]
Test Case: 215 | Input/Output: [(22 30 61 91) 22]
Test Case: 216 | Input/Output: [(58 68 93 95) 58]
Test Case: 217 | Input/Output: [(29 41 44 57) 29]
Test Case: 218 | Input/Output: [(66 72 18 25) 18]
Test Case: 219 | Input/Output: [(2 7 42 66) 2]
Test Case: 220 | Input/Output: [(48 45 16 95) 16]
Test Case: 221 | Input/Output: [(69 70 83 68) 68]
Test Case: 222 | Input/Output: [(96 50 2 13) 2]
Test Case: 223 | Input/Output: [(71 91 99 26) 26]
Test Case: 224 | Input/Output: [(77 48 18 4) 4]
Test Case: 225 | Input/Output: [(65 12 20 69) 12]
Test Case: 226 | Input/Output: [(75 59 74 78) 59]
Test Case: 227 | Input/Output: [(7 16 17 97) 7]
Test Case: 228 | Input/Output: [(18 56 63 76) 18]
Test Case: 229 | Input/Output: [(80 52 75 53) 52]
Test Case: 230 | Input/Output: [(28 92 84 68) 28]
Test Case: 231 | Input/Output: [(68 59 34 24) 24]
Test Case: 232 | Input/Output: [(37 63 50 80) 37]
Test Case: 233 | Input/Output: [(43 0 56 4) 0]
Test Case: 234 | Input/Output: [(20 99 41 74) 20]
Test Case: 235 | Input/Output: [(55 94 38 70) 38]
Test Case: 236 | Input/Output: [(56 33 82 59) 33]
Test Case: 237 | Input/Output: [(61 96 44 35) 35]
Test Case: 238 | Input/Output: [(25 81 42 72) 25]
Test Case: 239 | Input/Output: [(27 31 94 57) 27]
Test Case: 240 | Input/Output: [(69 90 29 52) 29]
Test Case: 241 | Input/Output: [(45 75 90 43) 43]
Test Case: 242 | Input/Output: [(27 67 15 97) 15]
Test Case: 243 | Input/Output: [(100 46 66 15) 15]
Test Case: 244 | Input/Output: [(52 88 50 14) 14]
Test Case: 245 | Input/Output: [(47 99 28 28) 28]
Test Case: 246 | Input/Output: [(15 43 66 65) 15]
Test Case: 247 | Input/Output: [(98 29 61 60) 29]
Test Case: 248 | Input/Output: [(2 94 44 9) 2]
Test Case: 249 | Input/Output: [(30 90 27 19) 19]
Test Case: 250 | Input/Output: [(34 30 4 90) 4]
Test Case: 251 | Input/Output: [(65 51 71 60) 51]
Test Case: 252 | Input/Output: [(14 67 81 10) 10]
Test Case: 253 | Input/Output: [(53 9 27 12) 9]
Test Case: 254 | Input/Output: [(62 91 50 48) 48]
Test Case: 255 | Input/Output: [(85 55 58 39) 39]
Test Case: 256 | Input/Output: [(4 52 80 9) 4]
Test Case: 257 | Input/Output: [(48 39 50 73) 39]
Test Case: 258 | Input/Output: [(1 54 0 92) 0]
Test Case: 259 | Input/Output: [(13 43 98 1) 1]
Test Case: 260 | Input/Output: [(2 12 20 79) 2]
Test Case: 261 | Input/Output: [(45 70 62 12) 12]
Test Case: 262 | Input/Output: [(41 75 86 68) 41]
Test Case: 263 | Input/Output: [(19 29 72 77) 19]
Test Case: 264 | Input/Output: [(72 83 69 67) 67]
Test Case: 265 | Input/Output: [(18 14 73 40) 14]
Test Case: 266 | Input/Output: [(28 26 70 8) 8]
Test Case: 267 | Input/Output: [(84 25 68 94) 25]
Test Case: 268 | Input/Output: [(9 17 43 18) 9]
Test Case: 269 | Input/Output: [(16 35 22 12) 12]
Test Case: 270 | Input/Output: [(90 3 4 59) 3]
Test Case: 271 | Input/Output: [(71 21 28 76) 21]
Test Case: 272 | Input/Output: [(76 27 12 0) 0]
Test Case: 273 | Input/Output: [(58 13 35 91) 13]
Test Case: 274 | Input/Output: [(78 95 3 74) 3]
Test Case: 275 | Input/Output: [(23 90 34 53) 23]
Test Case: 276 | Input/Output: [(91 76 93 40) 40]
Test Case: 277 | Input/Output: [(16 1 41 37) 1]
Test Case: 278 | Input/Output: [(30 29 6 21) 6]
Test Case: 279 | Input/Output: [(53 54 10 74) 10]
Test Case: 280 | Input/Output: [(8 65 68 26) 8]
Test Case: 281 | Input/Output: [(92 95 90 54) 54]
Test Case: 282 | Input/Output: [(2 70 78 83) 2]
Test Case: 283 | Input/Output: [(9 93 49 68) 9]
Test Case: 284 | Input/Output: [(64 29 68 84) 29]
Test Case: 285 | Input/Output: [(41 40 88 72) 40]
Test Case: 286 | Input/Output: [(75 99 6 84) 6]
Test Case: 287 | Input/Output: [(92 88 61 92) 61]
Test Case: 288 | Input/Output: [(34 50 57 98) 34]
Test Case: 289 | Input/Output: [(62 11 86 27) 11]
Test Case: 290 | Input/Output: [(93 10 83 3) 3]
Test Case: 291 | Input/Output: [(18 44 73 3) 3]
Test Case: 292 | Input/Output: [(51 30 23 64) 23]
Test Case: 293 | Input/Output: [(54 36 52 41) 36]
Test Case: 294 | Input/Output: [(20 92 31 68) 20]
Test Case: 295 | Input/Output: [(67 45 4 23) 4]
Test Case: 296 | Input/Output: [(50 95 24 20) 20]
Test Case: 297 | Input/Output: [(30 48 57 23) 23]
Test Case: 298 | Input/Output: [(51 3 58 63) 3]
Test Case: 299 | Input/Output: [(39 62 89 58) 39]
Test Case: 300 | Input/Output: [(76 93 87 37) 37]
Test Case: 301 | Input/Output: [(63 99 28 82) 28]
Test Case: 302 | Input/Output: [(97 87 44 64) 44]
Test Case: 303 | Input/Output: [(86 76 28 57) 28]
Test Case: 304 | Input/Output: [(78 19 30 43) 19]
Test Case: 305 | Input/Output: [(90 92 3 54) 3]
Test Case: 306 | Input/Output: [(52 4 88 95) 4]
Test Case: 307 | Input/Output: [(45 41 64 69) 41]
Test Case: 308 | Input/Output: [(5 31 70 48) 5]
Test Case: 309 | Input/Output: [(23 89 86 47) 23]
Test Case: 310 | Input/Output: [(24 86 17 74) 17]
Test Case: 311 | Input/Output: [(63 16 26 95) 16]
Test Case: 312 | Input/Output: [(2 25 31 58) 2]
Test Case: 313 | Input/Output: [(85 41 28 5) 5]
Test Case: 314 | Input/Output: [(48 65 68 31) 31]
Test Case: 315 | Input/Output: [(63 18 60 82) 18]
Test Case: 316 | Input/Output: [(46 31 12 36) 12]
Test Case: 317 | Input/Output: [(83 22 40 24) 22]
Test Case: 318 | Input/Output: [(11 48 77 27) 11]
Test Case: 319 | Input/Output: [(90 98 92 34) 34]
Test Case: 320 | Input/Output: [(98 45 43 15) 15]
Test Case: 321 | Input/Output: [(85 94 12 32) 12]
Test Case: 322 | Input/Output: [(52 52 79 22) 22]
Test Case: 323 | Input/Output: [(99 100 51 75) 51]
Test Case: 324 | Input/Output: [(88 34 65 95) 34]
Test Case: 325 | Input/Output: [(32 53 28 17) 17]
Test Case: 326 | Input/Output: [(62 98 52 33) 33]
Test Case: 327 | Input/Output: [(84 11 93 35) 11]
Test Case: 328 | Input/Output: [(86 94 81 46) 46]
Test Case: 329 | Input/Output: [(91 52 17 19) 17]
Test Case: 330 | Input/Output: [(30 60 21 51) 21]
Test Case: 331 | Input/Output: [(61 52 32 91) 32]
Test Case: 332 | Input/Output: [(11 82 77 92) 11]
Test Case: 333 | Input/Output: [(11 0 12 6) 0]
Test Case: 334 | Input/Output: [(15 58 10 55) 10]
Test Case: 335 | Input/Output: [(32 61 29 73) 29]
Test Case: 336 | Input/Output: [(85 67 86 48) 48]
Test Case: 337 | Input/Output: [(91 51 5 5) 5]
Test Case: 338 | Input/Output: [(49 59 92 10) 10]
Test Case: 339 | Input/Output: [(22 77 3 62) 3]
Test Case: 340 | Input/Output: [(14 5 47 86) 5]
Test Case: 341 | Input/Output: [(6 80 39 68) 6]
Test Case: 342 | Input/Output: [(66 32 41 67) 32]
Test Case: 343 | Input/Output: [(16 17 8 88) 8]
Test Case: 344 | Input/Output: [(50 28 73 84) 28]
Test Case: 345 | Input/Output: [(41 51 41 57) 41]
Test Case: 346 | Input/Output: [(86 95 10 54) 10]
Test Case: 347 | Input/Output: [(51 7 71 8) 7]
Test Case: 348 | Input/Output: [(97 57 70 39) 39]
Test Case: 349 | Input/Output: [(16 56 79 10) 10]
Test Case: 350 | Input/Output: [(29 47 51 19) 19]
Test Case: 351 | Input/Output: [(89 13 5 53) 5]
Test Case: 352 | Input/Output: [(99 43 36 7) 7]
Test Case: 353 | Input/Output: [(68 59 79 20) 20]
Test Case: 354 | Input/Output: [(33 37 8 12) 8]
Test Case: 355 | Input/Output: [(74 67 38 10) 10]
Test Case: 356 | Input/Output: [(40 28 87 2) 2]
Test Case: 357 | Input/Output: [(48 95 6 62) 6]
Test Case: 358 | Input/Output: [(56 69 71 93) 56]
Test Case: 359 | Input/Output: [(48 45 14 41) 14]
Test Case: 360 | Input/Output: [(41 78 22 7) 7]
Test Case: 361 | Input/Output: [(18 69 70 71) 18]
Test Case: 362 | Input/Output: [(39 58 79 8) 8]
Test Case: 363 | Input/Output: [(19 88 11 11) 11]
Test Case: 364 | Input/Output: [(73 41 90 21) 21]
Test Case: 365 | Input/Output: [(42 51 8 9) 8]
Test Case: 366 | Input/Output: [(61 34 3 40) 3]
Test Case: 367 | Input/Output: [(97 61 23 22) 22]
Test Case: 368 | Input/Output: [(30 95 53 73) 30]
Test Case: 369 | Input/Output: [(81 39 51 72) 39]
Test Case: 370 | Input/Output: [(77 10 35 57) 10]
Test Case: 371 | Input/Output: [(50 74 40 4) 4]
Test Case: 372 | Input/Output: [(97 61 35 52) 35]
Test Case: 373 | Input/Output: [(44 77 64 12) 12]
Test Case: 374 | Input/Output: [(78 62 83 98) 62]
Test Case: 375 | Input/Output: [(98 59 41 23) 23]
Test Case: 376 | Input/Output: [(40 9 55 22) 9]
Test Case: 377 | Input/Output: [(69 85 8 5) 5]
Test Case: 378 | Input/Output: [(66 5 62 43) 5]
Test Case: 379 | Input/Output: [(47 42 7 44) 7]
Test Case: 380 | Input/Output: [(87 26 74 6) 6]
Test Case: 381 | Input/Output: [(6 55 95 48) 6]
Test Case: 382 | Input/Output: [(30 45 75 78) 30]
Test Case: 383 | Input/Output: [(16 62 78 30) 16]
Test Case: 384 | Input/Output: [(69 37 44 89) 37]
Test Case: 385 | Input/Output: [(22 2 35 51) 2]
Test Case: 386 | Input/Output: [(64 5 97 64) 5]
Test Case: 387 | Input/Output: [(57 32 59 35) 32]
Test Case: 388 | Input/Output: [(85 80 97 40) 40]
Test Case: 389 | Input/Output: [(21 81 44 48) 21]
Test Case: 390 | Input/Output: [(81 8 43 29) 8]
Test Case: 391 | Input/Output: [(12 60 87 35) 12]
Test Case: 392 | Input/Output: [(94 3 47 33) 3]
Test Case: 393 | Input/Output: [(39 58 2 66) 2]
Test Case: 394 | Input/Output: [(61 36 23 99) 23]
Test Case: 395 | Input/Output: [(46 52 6 78) 6]
Test Case: 396 | Input/Output: [(50 93 60 60) 50]
Test Case: 397 | Input/Output: [(31 12 56 5) 5]
Test Case: 398 | Input/Output: [(96 71 62 45) 45]
Test Case: 399 | Input/Output: [(3 0 47 61) 0]
Test Case: 400 | Input/Output: [(-69 11 23 -35) -69]
Test Case: 401 | Input/Output: [(-48 -49 23 -48) -49]
Test Case: 402 | Input/Output: [(33 11 -96 -82) -96]
Test Case: 403 | Input/Output: [(79 66 90 -76) -76]
Test Case: 404 | Input/Output: [(49 -92 -22 -17) -92]
Test Case: 405 | Input/Output: [(81 -28 -16 12) -28]
Test Case: 406 | Input/Output: [(64 -12 -79 -33) -79]
Test Case: 407 | Input/Output: [(-50 1 93 -40) -50]
Test Case: 408 | Input/Output: [(44 -14 38 18) -14]
Test Case: 409 | Input/Output: [(85 -47 37 -18) -47]
Test Case: 410 | Input/Output: [(48 -76 55 -18) -76]
Test Case: 411 | Input/Output: [(54 76 81 -10) -10]
Test Case: 412 | Input/Output: [(-70 -64 85 -52) -70]
Test Case: 413 | Input/Output: [(65 97 91 -15) -15]
Test Case: 414 | Input/Output: [(-98 -93 50 25) -98]
Test Case: 415 | Input/Output: [(74 -24 49 -68) -68]
Test Case: 416 | Input/Output: [(62 -86 8 -94) -94]
Test Case: 417 | Input/Output: [(77 -53 71 -57) -57]
Test Case: 418 | Input/Output: [(75 -46 -82 32) -82]
Test Case: 419 | Input/Output: [(-47 -80 21 69) -80]
Test Case: 420 | Input/Output: [(47 -98 -42 47) -98]
Test Case: 421 | Input/Output: [(88 -90 70 -62) -90]
Test Case: 422 | Input/Output: [(35 -32 98 -97) -97]
Test Case: 423 | Input/Output: [(-37 58 29 11) -37]
Test Case: 424 | Input/Output: [(-3 70 -59 -84) -84]
Test Case: 425 | Input/Output: [(30 34 -36 -16) -36]
Test Case: 426 | Input/Output: [(52 29 46 41) 29]
Test Case: 427 | Input/Output: [(99 86 -100 -39) -100]
Test Case: 428 | Input/Output: [(-73 -24 56 59) -73]
Test Case: 429 | Input/Output: [(26 -2 63 -43) -43]
Test Case: 430 | Input/Output: [(24 92 34 57) 24]
Test Case: 431 | Input/Output: [(-4 13 3 38) -4]
Test Case: 432 | Input/Output: [(-9 79 -10 59) -10]
Test Case: 433 | Input/Output: [(97 -58 -26 -36) -58]
Test Case: 434 | Input/Output: [(6 59 -59 -78) -78]
Test Case: 435 | Input/Output: [(44 31 14 2) 2]
Test Case: 436 | Input/Output: [(-89 -35 -39 -80) -89]
Test Case: 437 | Input/Output: [(84 -2 8 -95) -95]
Test Case: 438 | Input/Output: [(-60 41 74 -36) -60]
Test Case: 439 | Input/Output: [(-56 19 27 7) -56]
Test Case: 440 | Input/Output: [(-20 -100 -33 -73) -100]
Test Case: 441 | Input/Output: [(62 -39 -50 74) -50]
Test Case: 442 | Input/Output: [(57 -3 -37 -13) -37]
Test Case: 443 | Input/Output: [(41 -28 14 69) -28]
Test Case: 444 | Input/Output: [(64 95 31 -39) -39]
Test Case: 445 | Input/Output: [(-89 -90 -28 -56) -90]
Test Case: 446 | Input/Output: [(-3 0 -9 26) -9]
Test Case: 447 | Input/Output: [(-10 71 25 -77) -77]
Test Case: 448 | Input/Output: [(83 -2 -3 28) -3]
Test Case: 449 | Input/Output: [(-89 -80 -73 1) -89]
Test Case: 450 | Input/Output: [(-89 -28 21 -51) -89]
Test Case: 451 | Input/Output: [(-97 -12 76 -99) -99]
Test Case: 452 | Input/Output: [(93 -93 8 31) -93]
Test Case: 453 | Input/Output: [(37 -69 5 -38) -69]
Test Case: 454 | Input/Output: [(41 -99 -54 16) -99]
Test Case: 455 | Input/Output: [(30 13 36 -50) -50]
Test Case: 456 | Input/Output: [(99 -17 57 -91) -91]
Test Case: 457 | Input/Output: [(21 -74 -86 23) -86]
Test Case: 458 | Input/Output: [(86 -97 -76 49) -97]
Test Case: 459 | Input/Output: [(-11 -6 -52 63) -52]
Test Case: 460 | Input/Output: [(-54 -100 -15 -48) -100]
Test Case: 461 | Input/Output: [(51 85 83 -41) -41]
Test Case: 462 | Input/Output: [(40 80 -1 57) -1]
Test Case: 463 | Input/Output: [(74 -84 12 99) -84]
Test Case: 464 | Input/Output: [(-42 78 -46 34) -46]
Test Case: 465 | Input/Output: [(21 74 -37 53) -37]
Test Case: 466 | Input/Output: [(99 75 -60 95) -60]
Test Case: 467 | Input/Output: [(-28 11 32 40) -28]
Test Case: 468 | Input/Output: [(-4 -8 -95 28) -95]
Test Case: 469 | Input/Output: [(7 -16 -88 -15) -88]
Test Case: 470 | Input/Output: [(-44 -5 -40 -54) -54]
Test Case: 471 | Input/Output: [(-38 -64 36 26) -64]
Test Case: 472 | Input/Output: [(-82 -12 95 15) -82]
Test Case: 473 | Input/Output: [(34 72 80 13) 13]
Test Case: 474 | Input/Output: [(0 -42 15 77) -42]
Test Case: 475 | Input/Output: [(20 -22 100 24) -22]
Test Case: 476 | Input/Output: [(-44 10 -39 33) -44]
Test Case: 477 | Input/Output: [(94 -59 32 41) -59]
Test Case: 478 | Input/Output: [(1 1 -34 -96) -96]
Test Case: 479 | Input/Output: [(-31 81 -19 -13) -31]
Test Case: 480 | Input/Output: [(17 -65 -33 -43) -65]
Test Case: 481 | Input/Output: [(-85 -67 -54 -16) -85]
Test Case: 482 | Input/Output: [(3 47 55 53) 3]
Test Case: 483 | Input/Output: [(-92 -35 -83 81) -92]
Test Case: 484 | Input/Output: [(63 17 44 -88) -88]
Test Case: 485 | Input/Output: [(-1 16 99 -51) -51]
Test Case: 486 | Input/Output: [(24 88 92 84) 24]
Test Case: 487 | Input/Output: [(-6 -24 -56 68) -56]
Test Case: 488 | Input/Output: [(2 24 -65 17) -65]
Test Case: 489 | Input/Output: [(7 33 94 44) 7]
Test Case: 490 | Input/Output: [(68 94 2 -35) -35]
Test Case: 491 | Input/Output: [(77 19 -52 -43) -52]
Test Case: 492 | Input/Output: [(-84 71 32 -57) -84]
Test Case: 493 | Input/Output: [(4 55 40 14) 4]
Test Case: 494 | Input/Output: [(-83 -32 -57 -46) -83]
Test Case: 495 | Input/Output: [(5 -43 -2 53) -43]
Test Case: 496 | Input/Output: [(96 6 30 94) 6]
Test Case: 497 | Input/Output: [(-20 -47 18 0) -47]
Test Case: 498 | Input/Output: [(88 34 -27 -2) -27]
Test Case: 499 | Input/Output: [(-82 15 -43 -62) -82]
Test Case: 500 | Input/Output: [(2 -36 -34 72) -36]
Test Case: 501 | Input/Output: [(71 -24 88 -21) -24]
Test Case: 502 | Input/Output: [(65 25 79 43) 25]
Test Case: 503 | Input/Output: [(22 36 43 -27) -27]
Test Case: 504 | Input/Output: [(87 -49 -91 0) -91]
Test Case: 505 | Input/Output: [(32 -9 -99 -73) -99]
Test Case: 506 | Input/Output: [(0 -62 -13 82) -62]
Test Case: 507 | Input/Output: [(97 24 -53 99) -53]
Test Case: 508 | Input/Output: [(-34 -90 -68 19) -90]
Test Case: 509 | Input/Output: [(-96 -50 -53 37) -96]
Test Case: 510 | Input/Output: [(-65 56 45 65) -65]
Test Case: 511 | Input/Output: [(-39 69 -20 9) -39]
Test Case: 512 | Input/Output: [(89 -60 -93 3) -93]
Test Case: 513 | Input/Output: [(47 56 10 -70) -70]
Test Case: 514 | Input/Output: [(-69 32 81 -26) -69]
Test Case: 515 | Input/Output: [(48 -66 15 63) -66]
Test Case: 516 | Input/Output: [(-25 -56 86 -20) -56]
Test Case: 517 | Input/Output: [(28 38 0 -83) -83]
Test Case: 518 | Input/Output: [(39 52 -68 1) -68]
Test Case: 519 | Input/Output: [(-40 -69 45 -1) -69]
Test Case: 520 | Input/Output: [(-94 54 16 70) -94]
Test Case: 521 | Input/Output: [(100 84 -10 -52) -52]
Test Case: 522 | Input/Output: [(82 -53 18 -55) -55]
Test Case: 523 | Input/Output: [(-74 -47 36 -87) -87]
Test Case: 524 | Input/Output: [(-90 -18 -90 -7) -90]
Test Case: 525 | Input/Output: [(22 24 -92 57) -92]
Test Case: 526 | Input/Output: [(-2 -3 20 11) -3]
Test Case: 527 | Input/Output: [(5 -62 -4 -12) -62]
Test Case: 528 | Input/Output: [(-91 98 56 81) -91]
Test Case: 529 | Input/Output: [(77 4 83 -18) -18]
Test Case: 530 | Input/Output: [(-13 -10 84 -81) -81]
Test Case: 531 | Input/Output: [(27 -70 -91 70) -91]
Test Case: 532 | Input/Output: [(29 62 43 52) 29]
Test Case: 533 | Input/Output: [(-24 56 99 12) -24]
Test Case: 534 | Input/Output: [(-97 -29 -96 -95) -97]
Test Case: 535 | Input/Output: [(-61 -55 55 39) -61]
Test Case: 536 | Input/Output: [(73 -72 74 12) -72]
Test Case: 537 | Input/Output: [(-45 81 87 29) -45]
Test Case: 538 | Input/Output: [(7 10 75 59) 7]
Test Case: 539 | Input/Output: [(33 -95 -27 -24) -95]
Test Case: 540 | Input/Output: [(-63 -3 45 6) -63]
Test Case: 541 | Input/Output: [(66 -78 -67 -71) -78]
Test Case: 542 | Input/Output: [(45 -22 44 68) -22]
Test Case: 543 | Input/Output: [(-35 26 66 67) -35]
Test Case: 544 | Input/Output: [(94 25 22 37) 22]
Test Case: 545 | Input/Output: [(-84 7 -59 -70) -84]
Test Case: 546 | Input/Output: [(38 -76 -1 100) -76]
Test Case: 547 | Input/Output: [(-73 -31 -81 77) -81]
Test Case: 548 | Input/Output: [(-75 28 -22 10) -75]
Test Case: 549 | Input/Output: [(99 29 -48 49) -48]
Test Case: 550 | Input/Output: [(15 -37 88 30) -37]
Test Case: 551 | Input/Output: [(-69 23 -42 -69) -69]
Test Case: 552 | Input/Output: [(53 -81 -22 -74) -81]
Test Case: 553 | Input/Output: [(91 -64 84 -19) -64]
Test Case: 554 | Input/Output: [(-93 52 82 54) -93]
Test Case: 555 | Input/Output: [(62 -97 -50 -99) -99]
Test Case: 556 | Input/Output: [(46 -49 -95 82) -95]
Test Case: 557 | Input/Output: [(26 -79 86 -72) -79]
Test Case: 558 | Input/Output: [(-50 -38 91 -60) -60]
Test Case: 559 | Input/Output: [(-77 -50 3 29) -77]
Test Case: 560 | Input/Output: [(79 -20 79 -90) -90]
Test Case: 561 | Input/Output: [(65 -20 -25 76) -25]
Test Case: 562 | Input/Output: [(39 33 -51 6) -51]
Test Case: 563 | Input/Output: [(-71 -79 93 -25) -79]
Test Case: 564 | Input/Output: [(-19 -99 53 -86) -99]
Test Case: 565 | Input/Output: [(-50 29 68 59) -50]
Test Case: 566 | Input/Output: [(18 -54 -26 86) -54]
Test Case: 567 | Input/Output: [(39 -92 44 55) -92]
Test Case: 568 | Input/Output: [(-58 79 96 6) -58]
Test Case: 569 | Input/Output: [(89 1 8 -73) -73]
Test Case: 570 | Input/Output: [(-32 -38 53 -9) -38]
Test Case: 571 | Input/Output: [(-51 22 21 -91) -91]
Test Case: 572 | Input/Output: [(46 22 35 -8) -8]
Test Case: 573 | Input/Output: [(49 73 -79 -65) -79]
Test Case: 574 | Input/Output: [(13 57 31 -57) -57]
Test Case: 575 | Input/Output: [(25 -17 -89 -39) -89]
Test Case: 576 | Input/Output: [(-90 -13 59 8) -90]
Test Case: 577 | Input/Output: [(-46 82 39 59) -46]
Test Case: 578 | Input/Output: [(-9 46 -41 -5) -41]
Test Case: 579 | Input/Output: [(72 -100 63 79) -100]
Test Case: 580 | Input/Output: [(81 -7 -34 18) -34]
Test Case: 581 | Input/Output: [(41 -17 -36 32) -36]
Test Case: 582 | Input/Output: [(-64 -42 -31 -100) -100]
Test Case: 583 | Input/Output: [(-30 23 53 23) -30]
Test Case: 584 | Input/Output: [(87 30 -76 -80) -80]
Test Case: 585 | Input/Output: [(39 -73 92 -40) -73]
Test Case: 586 | Input/Output: [(-65 -42 -59 15) -65]
Test Case: 587 | Input/Output: [(58 43 4 93) 4]
Test Case: 588 | Input/Output: [(-23 -26 67 -72) -72]
Test Case: 589 | Input/Output: [(-81 98 61 -58) -81]
Test Case: 590 | Input/Output: [(88 16 46 38) 16]
Test Case: 591 | Input/Output: [(-68 79 -20 89) -68]
Test Case: 592 | Input/Output: [(-14 -52 -98 -14) -98]
Test Case: 593 | Input/Output: [(-74 86 -42 -21) -74]
Test Case: 594 | Input/Output: [(72 -77 -40 28) -77]
Test Case: 595 | Input/Output: [(97 8 71 -13) -13]
Test Case: 596 | Input/Output: [(54 72 -17 -80) -80]
Test Case: 597 | Input/Output: [(-95 -79 -19 -98) -98]
Test Case: 598 | Input/Output: [(83 -37 -36 -55) -55]
Test Case: 599 | Input/Output: [(-62 69 61 -28) -62]
Test Case: 600 | Input/Output: [(-91 -82 -91 -40) -91]
Test Case: 601 | Input/Output: [(71 3 -22 82) -22]
Test Case: 602 | Input/Output: [(91 -54 -65 -40) -65]
Test Case: 603 | Input/Output: [(74 -60 -90 -7) -90]
Test Case: 604 | Input/Output: [(71 -85 51 41) -85]
Test Case: 605 | Input/Output: [(47 78 -6 -45) -45]
Test Case: 606 | Input/Output: [(78 -35 -57 -98) -98]
Test Case: 607 | Input/Output: [(-42 -65 43 71) -65]
Test Case: 608 | Input/Output: [(-41 73 46 -23) -41]
Test Case: 609 | Input/Output: [(6 -8 -72 62) -72]
Test Case: 610 | Input/Output: [(-87 -57 -30 -92) -92]
Test Case: 611 | Input/Output: [(-10 92 -45 -65) -65]
Test Case: 612 | Input/Output: [(23 77 8 77) 8]
Test Case: 613 | Input/Output: [(-72 73 79 75) -72]
Test Case: 614 | Input/Output: [(77 -92 94 13) -92]
Test Case: 615 | Input/Output: [(56 69 -1 -14) -14]
Test Case: 616 | Input/Output: [(-100 7 -77 -14) -100]
Test Case: 617 | Input/Output: [(-73 -8 72 94) -73]
Test Case: 618 | Input/Output: [(16 -91 -17 2) -91]
Test Case: 619 | Input/Output: [(28 83 10 37) 10]
Test Case: 620 | Input/Output: [(-5 23 -19 49) -19]
Test Case: 621 | Input/Output: [(-31 37 64 -98) -98]
Test Case: 622 | Input/Output: [(-57 -75 35 5) -75]
Test Case: 623 | Input/Output: [(71 -85 47 12) -85]
Test Case: 624 | Input/Output: [(65 59 83 94) 59]
Test Case: 625 | Input/Output: [(-18 -99 19 -98) -99]
Test Case: 626 | Input/Output: [(34 72 95 -41) -41]
Test Case: 627 | Input/Output: [(-72 -72 -52 65) -72]
Test Case: 628 | Input/Output: [(-48 91 54 44) -48]
Test Case: 629 | Input/Output: [(-98 82 -8 -55) -98]
Test Case: 630 | Input/Output: [(-96 -71 56 95) -96]
Test Case: 631 | Input/Output: [(-97 -59 -5 -70) -97]
Test Case: 632 | Input/Output: [(-46 33 11 -81) -81]
Test Case: 633 | Input/Output: [(33 64 32 -99) -99]
Test Case: 634 | Input/Output: [(-100 51 40 -81) -100]
Test Case: 635 | Input/Output: [(-36 -52 38 85) -52]
Test Case: 636 | Input/Output: [(-2 -55 82 -94) -94]
Test Case: 637 | Input/Output: [(3 37 28 5) 3]
Test Case: 638 | Input/Output: [(-61 -94 -8 29) -94]
Test Case: 639 | Input/Output: [(25 79 61 -92) -92]
Test Case: 640 | Input/Output: [(81 12 -86 84) -86]
Test Case: 641 | Input/Output: [(89 -86 -45 -100) -100]
Test Case: 642 | Input/Output: [(-65 84 -2 93) -65]
Test Case: 643 | Input/Output: [(58 -32 -75 57) -75]
Test Case: 644 | Input/Output: [(40 -6 -49 -8) -49]
Test Case: 645 | Input/Output: [(-100 -29 74 -80) -100]
Test Case: 646 | Input/Output: [(-82 22 -61 -87) -87]
Test Case: 647 | Input/Output: [(-1 73 85 -62) -62]
Test Case: 648 | Input/Output: [(-85 -86 71 28) -86]
Test Case: 649 | Input/Output: [(-77 -83 -65 -87) -87]
Test Case: 650 | Input/Output: [(-7 -3 78 -12) -12]
Test Case: 651 | Input/Output: [(-78 -17 63 0) -78]
Test Case: 652 | Input/Output: [(2 -61 82 16) -61]
Test Case: 653 | Input/Output: [(-82 92 30 10) -82]
Test Case: 654 | Input/Output: [(88 45 60 -12) -12]
Test Case: 655 | Input/Output: [(-12 67 -16 -29) -29]
Test Case: 656 | Input/Output: [(-9 59 -69 -14) -69]
Test Case: 657 | Input/Output: [(-8 98 -26 -99) -99]
Test Case: 658 | Input/Output: [(46 7 -7 -80) -80]
Test Case: 659 | Input/Output: [(-37 -27 -93 -18) -93]
Test Case: 660 | Input/Output: [(38 -41 -25 5) -41]
Test Case: 661 | Input/Output: [(-14 -30 -72 84) -72]
Test Case: 662 | Input/Output: [(7 14 -84 6) -84]
Test Case: 663 | Input/Output: [(22 -99 -24 -93) -99]
Test Case: 664 | Input/Output: [(-24 80 42 -26) -26]
Test Case: 665 | Input/Output: [(88 -29 -38 85) -38]
Test Case: 666 | Input/Output: [(-66 -42 25 13) -66]
Test Case: 667 | Input/Output: [(-4 51 44 -59) -59]
Test Case: 668 | Input/Output: [(6 -23 15 30) -23]
Test Case: 669 | Input/Output: [(-88 -84 -34 -96) -96]
Test Case: 670 | Input/Output: [(33 69 -25 33) -25]
Test Case: 671 | Input/Output: [(91 -31 -4 99) -31]
Test Case: 672 | Input/Output: [(-79 44 -22 94) -79]
Test Case: 673 | Input/Output: [(-46 7 31 18) -46]
Test Case: 674 | Input/Output: [(-12 -80 76 73) -80]
Test Case: 675 | Input/Output: [(73 15 99 81) 15]
Test Case: 676 | Input/Output: [(17 81 -55 -80) -80]
Test Case: 677 | Input/Output: [(-44 -55 -87 -83) -87]
Test Case: 678 | Input/Output: [(57 -29 55 -23) -29]
Test Case: 679 | Input/Output: [(8 -86 79 89) -86]
Test Case: 680 | Input/Output: [(100 78 77 -66) -66]
Test Case: 681 | Input/Output: [(32 49 -58 -45) -58]
Test Case: 682 | Input/Output: [(78 53 62 80) 53]
Test Case: 683 | Input/Output: [(96 88 97 -21) -21]
Test Case: 684 | Input/Output: [(90 65 24 -19) -19]
Test Case: 685 | Input/Output: [(52 -25 35 82) -25]
Test Case: 686 | Input/Output: [(-39 -61 -94 -30) -94]
Test Case: 687 | Input/Output: [(89 -90 -5 -32) -90]
Test Case: 688 | Input/Output: [(-18 -52 -99 35) -99]
Test Case: 689 | Input/Output: [(-34 -28 -99 94) -99]
Test Case: 690 | Input/Output: [(-79 -70 5 12) -79]
Test Case: 691 | Input/Output: [(14 -46 -87 90) -87]
Test Case: 692 | Input/Output: [(-35 -22 -39 86) -39]
Test Case: 693 | Input/Output: [(56 -39 84 39) -39]
Test Case: 694 | Input/Output: [(-57 -86 36 -96) -96]
Test Case: 695 | Input/Output: [(9 -58 55 35) -58]
Test Case: 696 | Input/Output: [(19 59 8 2) 2]
Test Case: 697 | Input/Output: [(21 -3 20 42) -3]
Test Case: 698 | Input/Output: [(66 78 -92 -13) -92]
Test Case: 699 | Input/Output: [(76 78 92 57) 57]
Test Case: 700 | Input/Output: [(-74 60 -66 99) -74]
Test Case: 701 | Input/Output: [(-69 71 -98 -19) -98]
Test Case: 702 | Input/Output: [(-18 65 -25 -99) -99]
Test Case: 703 | Input/Output: [(-14 63 -26 41) -26]
Test Case: 704 | Input/Output: [(91 -82 -22 -34) -82]
Test Case: 705 | Input/Output: [(-95 -11 -90 -40) -95]
Test Case: 706 | Input/Output: [(91 83 -58 -84) -84]
Test Case: 707 | Input/Output: [(30 -19 -83 -22) -83]
Test Case: 708 | Input/Output: [(-59 19 -25 -69) -69]
Test Case: 709 | Input/Output: [(-66 -52 91 -53) -66]
Test Case: 710 | Input/Output: [(-48 96 97 97) -48]
Test Case: 711 | Input/Output: [(63 -86 14 83) -86]
Test Case: 712 | Input/Output: [(25 -41 -21 65) -41]
Test Case: 713 | Input/Output: [(-54 -68 -71 79) -71]
Test Case: 714 | Input/Output: [(-12 32 6 33) -12]
Test Case: 715 | Input/Output: [(72 -87 -58 43) -87]
Test Case: 716 | Input/Output: [(63 53 6 7) 6]
Test Case: 717 | Input/Output: [(-56 88 -22 45) -56]
Test Case: 718 | Input/Output: [(-57 -23 -73 89) -73]
Test Case: 719 | Input/Output: [(-58 -4 -12 -85) -85]
Test Case: 720 | Input/Output: [(35 59 -41 5) -41]
Test Case: 721 | Input/Output: [(-9 -52 -54 70) -54]
Test Case: 722 | Input/Output: [(32 33 99 47) 32]
Test Case: 723 | Input/Output: [(15 77 4 58) 4]
Test Case: 724 | Input/Output: [(-33 -31 42 50) -33]
Test Case: 725 | Input/Output: [(-97 32 96 8) -97]
Test Case: 726 | Input/Output: [(-59 -26 22 84) -59]
Test Case: 727 | Input/Output: [(29 20 64 13) 13]
Test Case: 728 | Input/Output: [(50 -30 -64 15) -64]
Test Case: 729 | Input/Output: [(-50 59 32 58) -50]
Test Case: 730 | Input/Output: [(92 39 -3 -91) -91]
Test Case: 731 | Input/Output: [(5 59 24 65) 5]
Test Case: 732 | Input/Output: [(91 42 87 -51) -51]
Test Case: 733 | Input/Output: [(85 -61 11 -75) -75]
Test Case: 734 | Input/Output: [(60 16 -29 64) -29]
Test Case: 735 | Input/Output: [(-81 -4 55 -71) -81]
Test Case: 736 | Input/Output: [(-97 28 13 -87) -97]
Test Case: 737 | Input/Output: [(23 -36 -33 43) -36]
Test Case: 738 | Input/Output: [(51 8 51 25) 8]
Test Case: 739 | Input/Output: [(88 83 84 -69) -69]
Test Case: 740 | Input/Output: [(19 2 -40 -60) -60]
Test Case: 741 | Input/Output: [(-16 3 -14 87) -16]
Test Case: 742 | Input/Output: [(-3 11 77 -85) -85]
Test Case: 743 | Input/Output: [(82 39 -62 75) -62]
Test Case: 744 | Input/Output: [(-14 -65 -9 -13) -65]
Test Case: 745 | Input/Output: [(-52 -78 88 65) -78]
Test Case: 746 | Input/Output: [(18 -63 32 -30) -63]
Test Case: 747 | Input/Output: [(-52 67 -96 76) -96]
Test Case: 748 | Input/Output: [(55 -63 -17 50) -63]
Test Case: 749 | Input/Output: [(-45 79 -90 44) -90]
Test Case: 750 | Input/Output: [(10 -25 -85 9) -85]
Test Case: 751 | Input/Output: [(-35 -16 -3 48) -35]
Test Case: 752 | Input/Output: [(-66 94 54 84) -66]
Test Case: 753 | Input/Output: [(70 -50 -86 -99) -99]
Test Case: 754 | Input/Output: [(55 -36 54 52) -36]
Test Case: 755 | Input/Output: [(-59 49 51 -26) -59]
Test Case: 756 | Input/Output: [(-12 -64 -86 15) -86]
Test Case: 757 | Input/Output: [(40 -29 -34 -94) -94]
Test Case: 758 | Input/Output: [(-70 9 -18 -38) -70]
Test Case: 759 | Input/Output: [(-40 -37 34 -93) -93]
Test Case: 760 | Input/Output: [(74 77 24 -82) -82]
Test Case: 761 | Input/Output: [(-62 -57 -35 -78) -78]
Test Case: 762 | Input/Output: [(-66 5 -69 -54) -69]
Test Case: 763 | Input/Output: [(-9 82 -90 82) -90]
Test Case: 764 | Input/Output: [(-70 56 -49 -88) -88]
Test Case: 765 | Input/Output: [(24 93 31 -69) -69]
Test Case: 766 | Input/Output: [(34 -69 -55 -34) -69]
Test Case: 767 | Input/Output: [(28 -20 17 42) -20]
Test Case: 768 | Input/Output: [(-5 -54 -35 54) -54]
Test Case: 769 | Input/Output: [(-20 94 -25 55) -25]
Test Case: 770 | Input/Output: [(71 -65 -10 -29) -65]
Test Case: 771 | Input/Output: [(-1 63 -88 67) -88]
Test Case: 772 | Input/Output: [(-36 -43 84 -15) -43]
Test Case: 773 | Input/Output: [(44 0 75 -27) -27]
Test Case: 774 | Input/Output: [(35 73 81 -15) -15]
Test Case: 775 | Input/Output: [(28 76 71 65) 28]
Test Case: 776 | Input/Output: [(79 -2 -47 18) -47]
Test Case: 777 | Input/Output: [(42 53 -84 -71) -84]
Test Case: 778 | Input/Output: [(33 -96 -52 40) -96]
Test Case: 779 | Input/Output: [(51 37 25 82) 25]
Test Case: 780 | Input/Output: [(-24 26 -47 -74) -74]
Test Case: 781 | Input/Output: [(-9 -30 7 87) -30]
Test Case: 782 | Input/Output: [(-88 -64 -15 36) -88]
Test Case: 783 | Input/Output: [(11 -91 -68 65) -91]
Test Case: 784 | Input/Output: [(-76 -90 26 7) -90]
Test Case: 785 | Input/Output: [(-35 17 -72 -53) -72]
Test Case: 786 | Input/Output: [(16 -73 45 -80) -80]
Test Case: 787 | Input/Output: [(-45 91 -50 -36) -50]
Test Case: 788 | Input/Output: [(-85 -100 24 24) -100]
Test Case: 789 | Input/Output: [(35 -82 52 -15) -82]
Test Case: 790 | Input/Output: [(-37 -24 -50 -79) -79]
Test Case: 791 | Input/Output: [(-32 80 -75 -67) -75]
Test Case: 792 | Input/Output: [(-56 -2 -1 92) -56]
Test Case: 793 | Input/Output: [(-87 54 52 32) -87]
Test Case: 794 | Input/Output: [(-8 16 -78 11) -78]
Test Case: 795 | Input/Output: [(-59 87 -95 86) -95]
Test Case: 796 | Input/Output: [(-9 20 30 28) -9]
Test Case: 797 | Input/Output: [(3 96 0 30) 0]
Test Case: 798 | Input/Output: [(-62 -92 -49 11) -92]
Test Case: 799 | Input/Output: [(-90 -74 11 -85) -90]
Test Case: 800 | Input/Output: [(-96 -93 91 -22) -96]
Test Case: 801 | Input/Output: [(32 47 -64 -16) -64]
Test Case: 802 | Input/Output: [(-72 57 36 -47) -72]
Test Case: 803 | Input/Output: [(99 -77 78 -57) -77]
Test Case: 804 | Input/Output: [(-35 -73 16 99) -73]
Test Case: 805 | Input/Output: [(-87 88 -62 -82) -87]
Test Case: 806 | Input/Output: [(-63 94 23 -88) -88]
Test Case: 807 | Input/Output: [(-89 53 50 -62) -89]
Test Case: 808 | Input/Output: [(63 48 -7 60) -7]
Test Case: 809 | Input/Output: [(-94 88 -95 94) -95]
Test Case: 810 | Input/Output: [(17 66 -67 -44) -67]
Test Case: 811 | Input/Output: [(-77 64 -41 100) -77]
Test Case: 812 | Input/Output: [(-92 -99 86 -21) -99]
Test Case: 813 | Input/Output: [(89 57 -25 90) -25]
Test Case: 814 | Input/Output: [(-72 79 19 -93) -93]
Test Case: 815 | Input/Output: [(52 -38 40 -68) -68]
Test Case: 816 | Input/Output: [(73 -18 -52 -31) -52]
Test Case: 817 | Input/Output: [(-54 85 33 -15) -54]
Test Case: 818 | Input/Output: [(-17 -14 -38 -2) -38]
Test Case: 819 | Input/Output: [(-88 32 -44 -67) -88]
Test Case: 820 | Input/Output: [(73 -97 -56 75) -97]
Test Case: 821 | Input/Output: [(84 98 6 -83) -83]
Test Case: 822 | Input/Output: [(62 61 -1 18) -1]
Test Case: 823 | Input/Output: [(-7 21 41 -20) -20]
Test Case: 824 | Input/Output: [(10 97 74 14) 10]
Test Case: 825 | Input/Output: [(14 67 25 -89) -89]
Test Case: 826 | Input/Output: [(6 19 -48 -23) -48]
Test Case: 827 | Input/Output: [(-33 -62 13 -53) -62]
Test Case: 828 | Input/Output: [(93 96 -86 7) -86]
Test Case: 829 | Input/Output: [(-20 -13 -14 -66) -66]
Test Case: 830 | Input/Output: [(-69 87 -58 -55) -69]
Test Case: 831 | Input/Output: [(87 -90 76 60) -90]
Test Case: 832 | Input/Output: [(-98 -49 3 -51) -98]
Test Case: 833 | Input/Output: [(-21 -7 81 46) -21]
Test Case: 834 | Input/Output: [(55 98 30 66) 30]
Test Case: 835 | Input/Output: [(20 21 -1 -35) -35]
Test Case: 836 | Input/Output: [(53 64 -22 91) -22]
Test Case: 837 | Input/Output: [(-41 -64 -88 -33) -88]
Test Case: 838 | Input/Output: [(15 82 -24 -25) -25]
Test Case: 839 | Input/Output: [(-57 -2 92 -83) -83]
Test Case: 840 | Input/Output: [(38 -10 -56 -99) -99]
Test Case: 841 | Input/Output: [(-40 -26 100 78) -40]
Test Case: 842 | Input/Output: [(42 -10 88 16) -10]
Test Case: 843 | Input/Output: [(-36 -14 -51 -89) -89]
Test Case: 844 | Input/Output: [(-87 -80 34 63) -87]
Test Case: 845 | Input/Output: [(100 8 -3 -72) -72]
Test Case: 846 | Input/Output: [(48 81 -49 -67) -67]
Test Case: 847 | Input/Output: [(-87 -75 -79 77) -87]
Test Case: 848 | Input/Output: [(-71 -31 37 29) -71]
Test Case: 849 | Input/Output: [(71 100 -95 99) -95]
Test Case: 850 | Input/Output: [(18 -81 -72 99) -81]
Test Case: 851 | Input/Output: [(94 -8 -29 -71) -71]
Test Case: 852 | Input/Output: [(-11 26 83 -65) -65]
Test Case: 853 | Input/Output: [(-70 1 -67 -50) -70]
Test Case: 854 | Input/Output: [(1 -25 -62 -67) -67]
Test Case: 855 | Input/Output: [(43 25 -14 76) -14]
Test Case: 856 | Input/Output: [(-55 80 35 -72) -72]
Test Case: 857 | Input/Output: [(28 72 -81 -22) -81]
Test Case: 858 | Input/Output: [(6 91 13 30) 6]
Test Case: 859 | Input/Output: [(43 7 50 68) 7]
Test Case: 860 | Input/Output: [(93 -60 36 58) -60]
Test Case: 861 | Input/Output: [(-24 97 -28 -25) -28]
Test Case: 862 | Input/Output: [(8 -91 61 -31) -91]
Test Case: 863 | Input/Output: [(-7 62 74 -51) -51]
Test Case: 864 | Input/Output: [(35 74 -25 76) -25]
Test Case: 865 | Input/Output: [(87 80 75 48) 48]
Test Case: 866 | Input/Output: [(-20 -15 -79 -23) -79]
Test Case: 867 | Input/Output: [(-37 93 86 -54) -54]
Test Case: 868 | Input/Output: [(-50 10 47 -71) -71]
Test Case: 869 | Input/Output: [(-99 88 -77 -98) -99]
Test Case: 870 | Input/Output: [(78 71 -2 75) -2]
Test Case: 871 | Input/Output: [(-8 -83 -22 50) -83]
Test Case: 872 | Input/Output: [(94 10 -45 48) -45]
Test Case: 873 | Input/Output: [(-1 -20 -59 -3) -59]
Test Case: 874 | Input/Output: [(-56 5 84 -54) -56]
Test Case: 875 | Input/Output: [(-35 -46 -11 -32) -46]
Test Case: 876 | Input/Output: [(-48 3 53 75) -48]
Test Case: 877 | Input/Output: [(-74 -75 -89 -46) -89]
Test Case: 878 | Input/Output: [(29 -9 89 -51) -51]
Test Case: 879 | Input/Output: [(48 -75 61 60) -75]
Test Case: 880 | Input/Output: [(36 -68 -57 -6) -68]
Test Case: 881 | Input/Output: [(56 -11 14 29) -11]
Test Case: 882 | Input/Output: [(24 -100 -77 37) -100]
Test Case: 883 | Input/Output: [(-18 -68 -86 76) -86]
Test Case: 884 | Input/Output: [(-14 6 -94 81) -94]
Test Case: 885 | Input/Output: [(-11 -51 15 72) -51]
Test Case: 886 | Input/Output: [(-33 85 -85 95) -85]
Test Case: 887 | Input/Output: [(87 -1 -23 -69) -69]
Test Case: 888 | Input/Output: [(53 41 -15 -15) -15]
Test Case: 889 | Input/Output: [(-7 -11 -30 -75) -75]
Test Case: 890 | Input/Output: [(-86 18 56 47) -86]
Test Case: 891 | Input/Output: [(-40 -64 52 81) -64]
Test Case: 892 | Input/Output: [(81 24 -91 -85) -91]
Test Case: 893 | Input/Output: [(-90 -12 -36 40) -90]
Test Case: 894 | Input/Output: [(-53 -83 -64 39) -83]
Test Case: 895 | Input/Output: [(-14 77 -69 41) -69]
Test Case: 896 | Input/Output: [(-60 8 -83 -20) -83]
Test Case: 897 | Input/Output: [(-36 -31 -4 -45) -45]
Test Case: 898 | Input/Output: [(-96 -22 74 31) -96]
Test Case: 899 | Input/Output: [(-77 -5 61 -45) -77]
Test Case: 900 | Input/Output: [(35 36 -43 85) -43]
Test Case: 901 | Input/Output: [(-78 -76 1 76) -78]
Test Case: 902 | Input/Output: [(15 -19 81 100) -19]
Test Case: 903 | Input/Output: [(-94 -90 78 -99) -99]
Test Case: 904 | Input/Output: [(-42 43 -65 -97) -97]
Test Case: 905 | Input/Output: [(69 -81 -56 -14) -81]
Test Case: 906 | Input/Output: [(4 -64 11 -31) -64]
Test Case: 907 | Input/Output: [(-30 52 77 7) -30]
Test Case: 908 | Input/Output: [(3 27 75 -80) -80]
Test Case: 909 | Input/Output: [(-2 -96 -52 70) -96]
Test Case: 910 | Input/Output: [(58 30 -85 91) -85]
Test Case: 911 | Input/Output: [(-93 91 -78 72) -93]
Test Case: 912 | Input/Output: [(-27 4 -30 1) -30]
Test Case: 913 | Input/Output: [(15 40 84 9) 9]
Test Case: 914 | Input/Output: [(-59 -14 41 8) -59]
Test Case: 915 | Input/Output: [(34 -45 -4 13) -45]
Test Case: 916 | Input/Output: [(-61 47 -45 -74) -74]
Test Case: 917 | Input/Output: [(-40 -20 -7 38) -40]
Test Case: 918 | Input/Output: [(-47 -66 74 -52) -66]
Test Case: 919 | Input/Output: [(20 -20 -46 95) -46]
Test Case: 920 | Input/Output: [(35 21 -77 26) -77]
Test Case: 921 | Input/Output: [(-87 35 -37 -76) -87]
Test Case: 922 | Input/Output: [(60 -50 39 13) -50]
Test Case: 923 | Input/Output: [(-88 54 53 54) -88]
Test Case: 924 | Input/Output: [(-8 100 30 -7) -8]
Test Case: 925 | Input/Output: [(-67 -31 -85 5) -85]
Test Case: 926 | Input/Output: [(88 -26 -98 -6) -98]
Test Case: 927 | Input/Output: [(-72 -92 -97 -4) -97]
Test Case: 928 | Input/Output: [(38 4 -23 -7) -23]
Test Case: 929 | Input/Output: [(26 16 57 -56) -56]
Test Case: 930 | Input/Output: [(-52 -75 -44 79) -75]
Test Case: 931 | Input/Output: [(6 89 -50 -94) -94]
Test Case: 932 | Input/Output: [(-31 -15 -75 -44) -75]
Test Case: 933 | Input/Output: [(74 59 65 40) 40]
Test Case: 934 | Input/Output: [(94 29 64 77) 29]
Test Case: 935 | Input/Output: [(75 7 11 20) 7]
Test Case: 936 | Input/Output: [(90 26 56 -67) -67]
Test Case: 937 | Input/Output: [(-99 -44 -15 22) -99]
Test Case: 938 | Input/Output: [(83 -76 11 -30) -76]
Test Case: 939 | Input/Output: [(-46 -3 2 68) -46]
Test Case: 940 | Input/Output: [(4 70 15 65) 4]
Test Case: 941 | Input/Output: [(86 -1 -36 -51) -51]
Test Case: 942 | Input/Output: [(-68 53 49 -48) -68]
Test Case: 943 | Input/Output: [(61 97 12 48) 12]
Test Case: 944 | Input/Output: [(68 -92 39 37) -92]
Test Case: 945 | Input/Output: [(-44 86 -56 41) -56]
Test Case: 946 | Input/Output: [(70 -57 -13 -99) -99]
Test Case: 947 | Input/Output: [(-83 65 -9 20) -83]
Test Case: 948 | Input/Output: [(-27 92 32 -90) -90]
Test Case: 949 | Input/Output: [(61 -17 -7 -53) -53]
Test Case: 950 | Input/Output: [(13 96 -22 40) -22]
Test Case: 951 | Input/Output: [(-6 -6 28 -89) -89]
Test Case: 952 | Input/Output: [(-26 -84 -25 -32) -84]
Test Case: 953 | Input/Output: [(14 74 -50 -41) -50]
Test Case: 954 | Input/Output: [(10 -35 2 40) -35]
Test Case: 955 | Input/Output: [(-10 -73 -45 -100) -100]
Test Case: 956 | Input/Output: [(59 66 13 -51) -51]
Test Case: 957 | Input/Output: [(70 11 55 -54) -54]
Test Case: 958 | Input/Output: [(12 56 42 -71) -71]
Test Case: 959 | Input/Output: [(-28 57 93 -89) -89]
Test Case: 960 | Input/Output: [(66 -65 54 -51) -65]
Test Case: 961 | Input/Output: [(28 -47 45 -16) -47]
Test Case: 962 | Input/Output: [(20 10 14 -69) -69]
Test Case: 963 | Input/Output: [(-67 -39 11 90) -67]
Test Case: 964 | Input/Output: [(-90 2 -18 -100) -100]
Test Case: 965 | Input/Output: [(100 -54 -29 2) -54]
Test Case: 966 | Input/Output: [(93 68 38 2) 2]
Test Case: 967 | Input/Output: [(-91 -61 23 39) -91]
Test Case: 968 | Input/Output: [(-71 41 33 -16) -71]
Test Case: 969 | Input/Output: [(99 -10 42 -54) -54]
Test Case: 970 | Input/Output: [(67 -36 92 -7) -36]
Test Case: 971 | Input/Output: [(67 -81 71 -80) -81]
Test Case: 972 | Input/Output: [(24 77 80 -94) -94]
Test Case: 973 | Input/Output: [(-70 56 100 -51) -70]
Test Case: 974 | Input/Output: [(31 -44 51 -52) -52]
Test Case: 975 | Input/Output: [(43 10 -53 68) -53]
Test Case: 976 | Input/Output: [(58 74 18 -77) -77]
Test Case: 977 | Input/Output: [(54 4 18 -94) -94]
Test Case: 978 | Input/Output: [(-28 -84 -11 75) -84]
Test Case: 979 | Input/Output: [(81 47 6 11) 6]
Test Case: 980 | Input/Output: [(-56 37 63 -93) -93]
Test Case: 981 | Input/Output: [(63 27 42 -85) -85]
Test Case: 982 | Input/Output: [(-93 5 -73 37) -93]
Test Case: 983 | Input/Output: [(49 -16 36 -82) -82]
Test Case: 984 | Input/Output: [(56 63 -60 3) -60]
Test Case: 985 | Input/Output: [(-2 28 18 -86) -86]
Test Case: 986 | Input/Output: [(84 -41 94 -28) -41]
Test Case: 987 | Input/Output: [(75 7 32 -52) -52]
Test Case: 988 | Input/Output: [(-68 -86 13 -39) -86]
Test Case: 989 | Input/Output: [(72 -48 36 74) -48]
Test Case: 990 | Input/Output: [(-65 49 28 -8) -65]
Test Case: 991 | Input/Output: [(76 -52 94 7) -52]
Test Case: 992 | Input/Output: [(-82 31 18 94) -82]
Test Case: 993 | Input/Output: [(-75 33 44 -94) -94]
Test Case: 994 | Input/Output: [(-67 -17 4 46) -67]
Test Case: 995 | Input/Output: [(94 42 13 -26) -26]
Test Case: 996 | Input/Output: [(-11 65 48 12) -11]
Test Case: 997 | Input/Output: [(-12 15 26 53) -12]
Test Case: 998 | Input/Output: [(-90 93 38 -14) -90]
Test Case: 999 | Input/Output: [(-23 89 -99 9) -99]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -9 28 -16 83 -21 -45 -125 -111 -51 110 -48 89 -103 125 111 -83
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[11 -13 -13 -13] -13] [[-100 28 28 28] -100] [[18 70 70 70] 18] [[89 -35 89 89] -35] [[89 -14 89 89] -14] [[95 95 6 95] 6] [[-59 -76 -76 -76] -76] [[66 37 66 66] 37] [[-13 -13 -75 -13] -75] [[-93 -93 -17 -93] -93] [(-62 -62 -62 -62) -62] [(-79 -79 -79 -79) -79] [(-52 -52 -52 -52) -52] [(-56 -56 -56 -56) -56] [(14 14 14 14) 14] [(86 24 58 46) 24] [(5 5 54 47) 5] [(2 2 35 73) 2] [(95 82 61 47) 47] [(93 77 5 67) 5] [(75 90 70 29) 29] [(0 44 95 54) 0] [(53 56 52 88) 52] [(10 50 28 35) 10] [(27 65 24 51) 24] [(66 39 59 64) 39] [(78 59 99 46) 46] [(66 46 60 4) 4] [(19 38 24 36) 19] [(85 10 43 30) 10] [(9 96 92 73) 9] [(99 93 31 25) 25] [(50 27 45 45) 27] [(95 59 53 47) 47] [(86 17 18 14) 14] [(73 13 -42 37) -42] [(-89 -74 -15 74) -89] [(-82 77 -80 -92) -92] [(-77 -13 -46 20) -77] [(85 -96 -64 -25) -96] [(-84 -60 -71 15) -84] [(87 87 59 -70) -70] [(1 96 0 -90) -90] [(65 34 -86 65) -86] [(29 -75 -21 53) -75] [(96 37 9 -27) -27] [(-67 -70 -13 -3) -70] [(30 91 44 85) 30] [(88 -75 7 93) -75] [(-48 58 -38 5) -48] [(-54 -98 84 35) -98] [(64 -52 -90 39) -90] [(-86 -37 56 38) -86] [(-16 -47 65 4) -47] [(-1 66 77 9) -1] [(-75 49 -14 -92) -92] [(-35 -43 -4 1) -43] [(92 75 -49 100) -49] [(-33 -81 38 -57) -81] [(41 -25 -99 20) -99] [(-81 35 45 8) -81] [(-89 74 -4 60) -89] [(7 43 -49 93) -49] [(-32 -75 76 -81) -81] [(47 81 -72 -44) -72] [(81 7 -12 73) -12] [(-98 -15 53 -2) -98] [(-91 -74 21 14) -91] [(-23 42 -75 -81) -81] [(51 48 -90 -8) -90] [(52 59 53 89) 52] [(89 -59 -79 39) -79] [(-76 11 80 -22) -76] [(-76 43 -45 9) -76] [(-73 92 -37 -58) -73] [(54 -37 10 41) -37] [(-46 77 45 -85) -85] [(-99 -5 -73 48) -99] [(41 53 22 54) 22] [(-68 -20 53 13) -68] [(-56 -15 -63 -44) -63] [(22 89 97 20) 20] [(-29 93 -81 7) -81] [(-57 -1 73 -64) -64] [(38 90 -82 -24) -82] [(2 -4 29 16) -4] [(11 78 -63 -35) -63] [(48 11 21 -55) -55] [(-89 -9 65 -18) -89] [(-36 88 -86 38) -86] [(67 44 32 14) 14] [(-23 24 10 -94) -94] [(93 -61 -21 -31) -61] [(0 -60 -22 79) -60] [(41 -30 -54 33) -54])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 95                 
Correct output: 5                   | Program output: 93                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 78                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 95                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: 96                 
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 51                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 54                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_rot} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_exec_271} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max})
Lexicase best program: (exec_yank boolean_rot boolean_invert_first_then_and boolean_empty exec_do*times (boolean_eq boolean_not exec_noop exec_noop in1 exec_do*while (boolean_and integer_dup exec_if (boolean_yank exec_rot () () (integer_flush)) (exec_s (print_integer exec_do*count (boolean_invert_second_then_and exec_when () boolean_dup_times) integer_fromboolean integer_dup) (integer_sub boolean_invert_second_then_and boolean_frominteger) (integer_dec exec_flush exec_s_when_autoconstructing () (in3) (integer_dec boolean_and exec_when (in1 boolean_or) integer_mult exec_rot (boolean_dup_items integer_add exec_do*while ()) (integer_fromboolean exec_flush) (exec_eq integer_fromboolean exec_s_when_autoconstructing (integer_stackdepth) (boolean_invert_first_then_and integer_dup in1 exec_empty exec_pop () exec_y_when_autoconstructing (boolean_yank) integer_mod integer_mult boolean_stackdepth boolean_empty) (in2 exec_dup_items exec_dup (boolean_not integer_dup_times boolean_invert_first_then_and integer_pop boolean_yankdup integer_div exec_dup (exec_while () boolean_rot boolean_pop integer_min integer_eq) boolean_empty exec_y () exec_s () (boolean_and tag_exec_271 (print_boolean in2 print_newline exec_do*range (boolean_rot) integer_max)) ())))))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 120
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_rot} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_exec_271} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max})
Zero cases best program: (exec_yank boolean_rot boolean_invert_first_then_and boolean_empty exec_do*times (boolean_eq boolean_not exec_noop exec_noop in1 exec_do*while (boolean_and integer_dup exec_if (boolean_yank exec_rot () () (integer_flush)) (exec_s (print_integer exec_do*count (boolean_invert_second_then_and exec_when () boolean_dup_times) integer_fromboolean integer_dup) (integer_sub boolean_invert_second_then_and boolean_frominteger) (integer_dec exec_flush exec_s_when_autoconstructing () (in3) (integer_dec boolean_and exec_when (in1 boolean_or) integer_mult exec_rot (boolean_dup_items integer_add exec_do*while ()) (integer_fromboolean exec_flush) (exec_eq integer_fromboolean exec_s_when_autoconstructing (integer_stackdepth) (boolean_invert_first_then_and integer_dup in1 exec_empty exec_pop () exec_y_when_autoconstructing (boolean_yank) integer_mod integer_mult boolean_stackdepth boolean_empty) (in2 exec_dup_items exec_dup (boolean_not integer_dup_times boolean_invert_first_then_and integer_pop boolean_yankdup integer_div exec_dup (exec_while () boolean_rot boolean_pop integer_min integer_eq) boolean_empty exec_y () exec_s () (boolean_and tag_exec_271 (print_boolean in2 print_newline exec_do*range (boolean_rot) integer_max)) ())))))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 120
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 6 3 3 18 3 6 9 4)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (3 3 6 3 3 18 3 6 9 4)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean})
Best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup exec_empty print_integer integer_eq integer_rot in4 integer_fromboolean)
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 9.942
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.994 0.997 0.997 0.982 0.997 0.994 0.991 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.272
Average program size in population (points): 73.084
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 497408
--- Timings ---
Current time: 1559314571174 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 29.3%
Fitness Testing:      1.7 seconds, 66.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 95                 
Correct output: 5                   | Program output: 93                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 78                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 95                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: 96                 
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 51                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 54                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_188} {:close 0, :instruction tagged_474} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction 75} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_rot})
Lexicase best program: (integer_swap in1 print_integer tag_integer_188 tagged_474 boolean_and in2 in4 integer_dup_times exec_do*times (boolean_or integer_empty integer_yankdup integer_dup integer_yank) integer_dup_times exec_yank boolean_flush exec_rot (exec_if (75 boolean_dup_items boolean_stackdepth exec_eq integer_max boolean_invert_second_then_and) (exec_yank integer_shove integer_dec integer_dup exec_do*count (boolean_yank in1) exec_k (exec_when (exec_do*times (boolean_yankdup exec_k () (integer_inc exec_rot (exec_when (integer_dup) integer_dec) (integer_inc exec_k_when_autoconstructing () (exec_dup_items) integer_inc) (integer_pop integer_gt integer_min integer_dec exec_dup_times (integer_dup_times in1)) integer_inc integer_eq) integer_add) exec_do*count () integer_rot)) ())) () ())
Lexicase best errors: [1 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 81
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_188} {:close 0, :instruction tagged_474} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction 75} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_rot})
Zero cases best program: (integer_swap in1 print_integer tag_integer_188 tagged_474 boolean_and in2 in4 integer_dup_times exec_do*times (boolean_or integer_empty integer_yankdup integer_dup integer_yank) integer_dup_times exec_yank boolean_flush exec_rot (exec_if (75 boolean_dup_items boolean_stackdepth exec_eq integer_max boolean_invert_second_then_and) (exec_yank integer_shove integer_dec integer_dup exec_do*count (boolean_yank in1) exec_k (exec_when (exec_do*times (boolean_yankdup exec_k () (integer_inc exec_rot (exec_when (integer_dup) integer_dec) (integer_inc exec_k_when_autoconstructing () (exec_dup_items) integer_inc) (integer_pop integer_gt integer_min integer_dec exec_dup_times (integer_dup_times in1)) integer_inc integer_eq) integer_add) exec_do*count () integer_rot)) ())) () ())
Zero cases best errors: [1 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 81
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 92 672 670 92 678 662 90 92 90)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (0 92 672 670 92 678 662 90 92 90)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_rot} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_exec_271} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max})
Best program: (exec_yank boolean_rot boolean_invert_first_then_and boolean_empty exec_do*times (boolean_eq boolean_not exec_noop exec_noop in1 exec_do*while (boolean_and integer_dup exec_if (boolean_yank exec_rot () () (integer_flush)) (exec_s (print_integer exec_do*count (boolean_invert_second_then_and exec_when () boolean_dup_times) integer_fromboolean integer_dup) (integer_sub boolean_invert_second_then_and boolean_frominteger) (integer_dec exec_flush exec_s_when_autoconstructing () (in3) (integer_dec boolean_and exec_when (in1 boolean_or) integer_mult boolean_shove boolean_dup_items integer_add exec_do*while ()) integer_fromboolean exec_flush) exec_eq integer_fromboolean exec_s_when_autoconstructing (integer_stackdepth) (boolean_invert_first_then_and integer_dup in1 exec_empty exec_pop () exec_y_when_autoconstructing (boolean_yank) integer_mod integer_mult boolean_stackdepth boolean_empty) (in2 exec_dup_items exec_dup (boolean_not integer_dup_times boolean_invert_first_then_and integer_pop boolean_yankdup integer_div exec_dup (exec_while () boolean_rot boolean_pop integer_min integer_eq) boolean_empty exec_y () exec_s () (boolean_and tag_exec_271 (print_boolean in2 print_newline exec_do*range (boolean_rot) integer_max)) ()))))))
Errors: [1 1 0 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 85
Size: 117
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 6.862
Median total errors in population: 6
Error averages by case: (1.0 0.908 0.328 0.33 0.908 0.322 0.338 0.91 0.908 0.91)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.909
Average program size in population (points): 72.298
Average percent parens in population: 0.227
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.532
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 183
Genome diversity (% unique genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1030436
--- Timings ---
Current time: 1559314574051 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 44.0%
Fitness Testing:      2.5 seconds, 47.5%
Report:               0.4 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 28                 
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 46                 
Correct output: 5                   | Program output: 47                 
Correct output: 2                   | Program output: 73                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 67                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 54                 
Correct output: 52                  | Program output: 88                 
Correct output: 10                  | Program output: 35                 
Correct output: 24                  | Program output: 51                 
Correct output: 39                  | Program output: 64                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 36                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 73                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: -42                 | Program output: 37                 
Correct output: -89                 | Program output: 74                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 20                 
Correct output: -96                 | Program output: -25                
Correct output: -84                 | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 53                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -3                 
Correct output: 30                  | Program output: 85                 
Correct output: -75                 | Program output: 93                 
Correct output: -48                 | Program output: 5                  
Correct output: -98                 | Program output: 35                 
Correct output: -90                 | Program output: 39                 
Correct output: -86                 | Program output: 38                 
Correct output: -47                 | Program output: 4                  
Correct output: -1                  | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: 1                  
Correct output: -49                 | Program output: 100                
Correct output: -81                 | Program output: -57                
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: 8                  
Correct output: -89                 | Program output: 60                 
Correct output: -49                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -44                
Correct output: -12                 | Program output: 73                 
Correct output: -98                 | Program output: -2                 
Correct output: -91                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -8                 
Correct output: 52                  | Program output: 89                 
Correct output: -79                 | Program output: 39                 
Correct output: -76                 | Program output: -22                
Correct output: -76                 | Program output: 9                  
Correct output: -73                 | Program output: -58                
Correct output: -37                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: 48                 
Correct output: 22                  | Program output: 54                 
Correct output: -68                 | Program output: 13                 
Correct output: -63                 | Program output: -44                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: 7                  
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: -24                
Correct output: -4                  | Program output: 16                 
Correct output: -63                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -18                
Correct output: -86                 | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -31                
Correct output: -60                 | Program output: 79                 
Correct output: -54                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_rot} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_eq})
Lexicase best program: (integer_eq integer_mult in4 exec_swap (exec_dup_items boolean_shove) (print_integer in1 exec_do*while (boolean_and integer_dup exec_if (boolean_yank exec_rot () () (integer_flush)) (exec_s (print_integer exec_do*count (boolean_invert_second_then_and exec_when () boolean_dup_times) integer_fromboolean integer_dup) (exec_k_when_autoconstructing (integer_mult) (integer_sub boolean_shove boolean_dup integer_shove integer_div)) (boolean_eq)))))
Lexicase best errors: [1 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_rot} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_eq})
Zero cases best program: (integer_eq integer_mult in4 exec_swap (exec_dup_items boolean_shove) (print_integer in1 exec_do*while (boolean_and integer_dup exec_if (boolean_yank exec_rot () () (integer_flush)) (exec_s (print_integer exec_do*count (boolean_invert_second_then_and exec_when () boolean_dup_times) integer_fromboolean integer_dup) (exec_k_when_autoconstructing (integer_mult) (integer_sub boolean_shove boolean_dup integer_shove integer_div)) (boolean_eq)))))
Zero cases best errors: [1 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 455 260 179 280 280 398 175 854 281)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (0 455 260 179 280 280 398 175 854 281)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_297} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_661} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction 50} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction exec_yank})
Best program: (tagged_297 integer_swap exec_while (integer_fromboolean exec_pop () boolean_invert_first_then_and integer_stackdepth) integer_eq in4 integer_eq exec_s_when_autoconstructing () (integer_gt boolean_yank integer_dup boolean_empty boolean_frominteger) (tag_boolean_661) exec_do*while (integer_lte print_integer boolean_rot integer_gte) boolean_empty exec_yankdup exec_y_when_autoconstructing (exec_yank exec_yankdup exec_shove (exec_flush boolean_yankdup boolean_yank exec_pop (exec_k_when_autoconstructing (integer_dec) () boolean_eq) integer_swap exec_do*times (exec_dup_times () integer_dup integer_max boolean_dup_times) in2 boolean_shove integer_yank boolean_or boolean_stackdepth) integer_dec exec_y () integer_mult) exec_s (exec_stackdepth exec_yank) (exec_dup (boolean_pop) boolean_shove boolean_dup_times exec_flush exec_y_when_autoconstructing () exec_when () exec_empty exec_y_when_autoconstructing (integer_rot boolean_and boolean_invert_first_then_and)) (boolean_frominteger integer_div) boolean_invert_first_then_and boolean_or 50 boolean_empty boolean_pop exec_k_when_autoconstructing () (exec_k () (boolean_eq boolean_yankdup boolean_and) boolean_swap) exec_dup_items integer_flush boolean_eq exec_stackdepth exec_empty boolean_invert_first_then_and boolean_dup_items exec_rot (in1) (exec_yank) ())
Errors: [1 0 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 87
Size: 116
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.838
Median total errors in population: 8
Error averages by case: (1.0 0.545 0.74 0.821 0.72 0.72 0.602 0.825 0.146 0.719)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.285
Average program size in population (points): 71.313
Average percent parens in population: 0.244
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.004
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1540192
--- Timings ---
Current time: 1559314576878 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.3 seconds, 50.9%
Fitness Testing:      3.2 seconds, 38.0%
Report:               0.8 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 95                 
Correct output: 5                   | Program output: 93                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 78                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 95                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: 96                 
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 51                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 54                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_rot} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_991} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 3, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if})
Lexicase best program: (exec_yank boolean_rot boolean_invert_first_then_and boolean_empty integer_stackdepth boolean_eq boolean_not exec_noop exec_noop in1 exec_do*while (boolean_and integer_dup exec_if (boolean_yank exec_rot () () (integer_flush)) (exec_s (print_integer exec_do*count (boolean_invert_second_then_and exec_when () boolean_dup_times) integer_fromboolean integer_dup) (integer_sub boolean_invert_second_then_and boolean_frominteger) (integer_dec exec_flush exec_s_when_autoconstructing () (in3) (integer_dec boolean_and exec_when (in1 boolean_or) integer_mult exec_rot (boolean_dup_items integer_add exec_do*while ()) (integer_fromboolean integer_div exec_pop (exec_k_when_autoconstructing (integer_eq) (integer_pop boolean_xor exec_do*times (tagged_991 boolean_yank exec_dup_items integer_dup boolean_pop) exec_do*times (print_exec (boolean_shove) exec_dup_items in2) exec_do*times (exec_k_when_autoconstructing (integer_dup integer_sub print_newline) ()) exec_noop exec_dup (boolean_dup integer_yank exec_do*count (integer_mult print_boolean) exec_rot () (print_exec (exec_rot (integer_lte) (boolean_swap exec_y (integer_lte) boolean_shove exec_dup_items exec_swap (exec_if () ()) ()) ())) ())))) ())))))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 126
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_rot} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_991} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 3, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if})
Zero cases best program: (exec_yank boolean_rot boolean_invert_first_then_and boolean_empty integer_stackdepth boolean_eq boolean_not exec_noop exec_noop in1 exec_do*while (boolean_and integer_dup exec_if (boolean_yank exec_rot () () (integer_flush)) (exec_s (print_integer exec_do*count (boolean_invert_second_then_and exec_when () boolean_dup_times) integer_fromboolean integer_dup) (integer_sub boolean_invert_second_then_and boolean_frominteger) (integer_dec exec_flush exec_s_when_autoconstructing () (in3) (integer_dec boolean_and exec_when (in1 boolean_or) integer_mult exec_rot (boolean_dup_items integer_add exec_do*while ()) (integer_fromboolean integer_div exec_pop (exec_k_when_autoconstructing (integer_eq) (integer_pop boolean_xor exec_do*times (tagged_991 boolean_yank exec_dup_items integer_dup boolean_pop) exec_do*times (print_exec (boolean_shove) exec_dup_items in2) exec_do*times (exec_k_when_autoconstructing (integer_dup integer_sub print_newline) ()) exec_noop exec_dup (boolean_dup integer_yank exec_do*count (integer_mult print_boolean) exec_rot () (print_exec (exec_rot (integer_lte) (boolean_swap exec_y (integer_lte) boolean_shove exec_dup_items exec_swap (exec_if () ()) ()) ())) ())))) ())))))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 126
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 532 97 94 878 251 532 1000 93 532)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (95 532 97 94 878 251 532 0 93 532)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_188} {:close 0, :instruction tagged_474} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction 75} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_rot})
Best program: (integer_swap in1 print_integer tag_integer_188 tagged_474 boolean_and in2 in4 integer_dup_times exec_do*times (boolean_or integer_empty integer_yankdup integer_dup integer_yank) integer_dup_times exec_yank boolean_flush exec_rot (exec_if (75 boolean_dup_items boolean_stackdepth exec_eq integer_max boolean_invert_second_then_and) (exec_yank integer_shove integer_dec integer_dup exec_do*count (boolean_yank in1) exec_k (exec_when (exec_do*times (boolean_yankdup exec_k () (integer_inc exec_rot (exec_when (integer_dup) integer_dec) (integer_inc exec_k_when_autoconstructing () (exec_dup_items) integer_inc) (integer_pop integer_gt integer_min integer_dec exec_dup_times (integer_dup_times in1)) integer_inc integer_eq) integer_add) exec_do*count () integer_rot)) ())) () ())
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 81
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 6.896
Median total errors in population: 6
Error averages by case: (0.905 0.468 0.903 0.906 0.122 0.749 0.468 1.0 0.907 0.468)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 48.384
Average program size in population (points): 66.29
Average percent parens in population: 0.263
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.42925
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2134946
--- Timings ---
Current time: 1559314580838 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.9 seconds, 57.6%
Fitness Testing:      3.9 seconds, 32.3%
Report:               1.1 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 28                 
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 58                 
Correct output: 5                   | Program output: 54                 
Correct output: 2                   | Program output: 35                 
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 95                 
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 28                 
Correct output: 24                  | Program output: 24                 
Correct output: 39                  | Program output: 59                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 60                 
Correct output: 19                  | Program output: 24                 
Correct output: 10                  | Program output: 43                 
Correct output: 9                   | Program output: 92                 
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 18                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -15                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -46                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output: 44                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -38                
Correct output: -98                 | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: 56                 
Correct output: -47                 | Program output: 65                 
Correct output: -1                  | Program output: 77                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 45                 
Correct output: -89                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: 76                 
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: 53                 
Correct output: -91                 | Program output: 21                 
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: 80                 
Correct output: -76                 | Program output: -45                
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: 45                 
Correct output: -99                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: 53                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: 73                 
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: 29                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 21                 
Correct output: -89                 | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: -22                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer})
Lexicase best program: (in3 print_integer)
Lexicase best errors: [1 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 3
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer})
Zero cases best program: (in3 print_integer)
Zero cases best errors: [1 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 3
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (342 112 1000 440 342 432 454 112 112 112)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (342 112 0 440 342 432 454 112 112 112)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_869} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_854} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup})
Best program: (integer_yank exec_s_when_autoconstructing (integer_dup_times) (boolean_invert_first_then_and boolean_or exec_dup_times (exec_shove (in4 integer_lte) exec_y_when_autoconstructing (tagged_869 in4 exec_shove (integer_yank tagged_854 integer_inc in3) boolean_dup boolean_or exec_s_when_autoconstructing (exec_eq integer_gte exec_s (in3 print_integer exec_dup_times (boolean_rot boolean_or boolean_dup_items boolean_yankdup)) () ()) () ()))) ())
Errors: [1 0 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.542
Median total errors in population: 8
Error averages by case: (0.658 0.888 1.0 0.56 0.658 0.568 0.546 0.888 0.888 0.888)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 44.793
Average program size in population (points): 60.808
Average percent parens in population: 0.233
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.851375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2671535
--- Timings ---
Current time: 1559314583868 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.8 seconds, 58.4%
Fitness Testing:      4.5 seconds, 29.6%
Report:               1.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: 47                  | Program output: 95                 
Correct output: 5                   | Program output: 93                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 78                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 95                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: 96                 
Correct output: -70                 | Program output: -3                 
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: 1                  
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -57                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 81                 
Correct output: -98                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: 51                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: -22                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -58                
Correct output: -37                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -44                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output:                    
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -18                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_yankdup integer_mult in4 exec_swap (exec_dup_items boolean_shove) (print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte in1 boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup))) ())))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_yankdup integer_mult in4 exec_swap (exec_dup_items boolean_shove) (print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte in1 boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup))) ())))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 315 121 315 118 862 878 449 434 1)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (14 315 121 315 118 862 878 449 434 1)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_yankdup integer_mult in4 exec_swap (exec_dup_items boolean_shove) (print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte in1 boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup))) ())))
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 44
Size: 54
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 6.493
Median total errors in population: 7
Error averages by case: (0.986 0.685 0.879 0.685 0.882 0.138 0.122 0.551 0.566 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.492
Average program size in population (points): 52.719
Average percent parens in population: 0.244
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.362875
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3404703
--- Timings ---
Current time: 1559314587449 milliseconds
Total Time:          18.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.8 seconds, 58.6%
Fitness Testing:      5.3 seconds, 28.8%
Report:               2.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 67                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 88                 
Correct output: 10                  | Program output: 35                 
Correct output: 24                  | Program output: 51                 
Correct output: 39                  | Program output: 64                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 36                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 73                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: -42                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 53                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 85                 
Correct output: -75                 | Program output: 93                 
Correct output: -48                 | Program output: -485               
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -160               
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 100                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 651                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -44                
Correct output: -12                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -8                 
Correct output: 52                  | Program output: 89                 
Correct output: -79                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 41                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -24                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -31                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 3, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_when (exec_dup_items boolean_shove) print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (print_integer boolean_eq exec_dup_times (exec_dup (boolean_stackdepth) boolean_xor integer_dup_items))) integer_mod integer_yank)) ()))
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 3, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_when (exec_dup_items boolean_shove) print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (print_integer boolean_eq exec_dup_times (exec_dup (boolean_stackdepth) boolean_xor integer_dup_items))) integer_mod integer_yank)) ()))
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (406 281 173 172 184 281 3 406 172 642)
Population mean number of elite cases: 2.72
Count of perfect (error zero) individuals by case: (406 281 173 172 184 281 3 406 172 642)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_when (exec_dup_items boolean_shove) print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (in2 in2 integer_gte integer_dec boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()) ()))
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 42
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 7.28
Median total errors in population: 8
Error averages by case: (0.594 0.719 0.827 0.828 0.816 0.719 0.997 0.594 0.828 0.358)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.331
Average program size in population (points): 51.881
Average percent parens in population: 0.203
Minimum age in population: 8.0
Maximum age in population: 10.4375
Average age in population: 8.8418125
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4703671
--- Timings ---
Current time: 1559314591714 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.9 seconds, 56.7%
Fitness Testing:      6.7 seconds, 29.6%
Report:               3.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 95                 
Correct output: 5                   | Program output: 93                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 78                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 95                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: 96                 
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 51                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 54                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_s_when_autoconstructing (exec_dup_items boolean_shove) (print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_k (integer_gte integer_dec boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) (boolean_dup))))) ())) ())
Lexicase best errors: [1 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_s_when_autoconstructing (exec_dup_items boolean_shove) (print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_k (integer_gte integer_dec boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) (boolean_dup))))) ())) ())
Zero cases best errors: [1 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 22 248 359 22 13 294 296 12 234)
Population mean number of elite cases: 1.75
Count of perfect (error zero) individuals by case: (247 22 248 359 22 13 294 296 12 234)
Population mean number of perfect (error zero) cases: 1.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 boolean_shove print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte boolean_not in1 exec_noop in2 in2 integer_gte in1 boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)) ()))
Errors: [1 1 1 1 1 0 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 8.253
Median total errors in population: 8
Error averages by case: (0.753 0.978 0.752 0.641 0.978 0.987 0.706 0.704 0.988 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.969
Average program size in population (points): 51.319
Average percent parens in population: 0.201
Minimum age in population: 9.0
Maximum age in population: 12.3125
Average age in population: 10.281265625
Median age in population: 10.328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6071342
--- Timings ---
Current time: 1559314596280 milliseconds
Total Time:          27.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.1 seconds, 55.5%
Fitness Testing:      8.2 seconds, 30.1%
Report:               3.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 95                 
Correct output: 5                   | Program output: 93                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 78                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 95                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: 96                 
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 51                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 54                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup in1 in1 exec_yankdup exec_s_when_autoconstructing (in4 exec_when (exec_dup_items boolean_shove) print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dec boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup))) ())) () ())
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup in1 in1 exec_yankdup exec_s_when_autoconstructing (in4 exec_when (exec_dup_items boolean_shove) print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dec boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup))) ())) () ())
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (305 305 59 59 586 306 87 405 199 393)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (305 305 59 59 586 306 87 405 199 393)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 boolean_shove print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte boolean_not in1 exec_noop in2 in2 integer_gte in1 boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)) ()))
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 7.296
Median total errors in population: 8
Error averages by case: (0.695 0.695 0.941 0.941 0.414 0.694 0.913 0.595 0.801 0.607)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.923
Average program size in population (points): 52.407
Average percent parens in population: 0.218
Minimum age in population: 10.0
Maximum age in population: 13.859375
Average age in population: 11.87603125
Median age in population: 11.84375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7387521
--- Timings ---
Current time: 1559314600481 milliseconds
Total Time:          31.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.0 seconds, 54.2%
Fitness Testing:      9.6 seconds, 30.6%
Report:               4.7 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 95                 
Correct output: 5                   | Program output: 93                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 78                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 95                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: 96                 
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 51                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 54                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_when (exec_dup_items boolean_shove) print_integer integer_stackdepth exec_if (in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dec boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_s_when_autoconstructing () () ()))) ())) ())
Lexicase best errors: [1 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup integer_eq in1 exec_yankdup integer_mult in4 exec_when (exec_dup_items boolean_shove) print_integer integer_stackdepth exec_if (in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dec boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_s_when_autoconstructing () () ()))) ())) ())
Zero cases best errors: [1 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 400 329 853 533 175 556 400 533)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (1 1 400 329 853 533 175 556 400 533)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 2, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in1 integer_yankdup in1 in1 exec_yankdup exec_s_when_autoconstructing (in4 exec_when (exec_dup_items exec_s () (print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (boolean_invert_second_then_and exec_pop (in1 exec_noop in2 in2 integer_gte integer_dec boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup))) ())) ())) () ())
Errors: [1 1 0 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 6.219
Median total errors in population: 5
Error averages by case: (0.999 0.999 0.6 0.671 0.147 0.467 0.825 0.444 0.6 0.467)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.85
Average program size in population (points): 51.48
Average percent parens in population: 0.206
Minimum age in population: 11.0
Maximum age in population: 15.1640625
Average age in population: 13.3908984375
Median age in population: 13.48046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8697778
--- Timings ---
Current time: 1559314604883 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.2 seconds, 53.5%
Fitness Testing:     11.0 seconds, 30.7%
Report:               5.6 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 28                 
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 58                 
Correct output: 5                   | Program output: 54                 
Correct output: 2                   | Program output: 35                 
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 95                 
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 28                 
Correct output: 24                  | Program output: 24                 
Correct output: 39                  | Program output: 59                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 60                 
Correct output: 19                  | Program output: 24                 
Correct output: 10                  | Program output: 43                 
Correct output: 9                   | Program output: 92                 
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 18                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -15                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -46                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output: 44                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -38                
Correct output: -98                 | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: 56                 
Correct output: -47                 | Program output: 65                 
Correct output: -1                  | Program output: 77                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 45                 
Correct output: -89                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: 76                 
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: 53                 
Correct output: -91                 | Program output: 21                 
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: 80                 
Correct output: -76                 | Program output: -45                
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: 45                 
Correct output: -99                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: 53                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: 73                 
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: 29                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 21                 
Correct output: -89                 | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: -22                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup exec_do*while () exec_shove () boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)))) ()))
Lexicase best errors: [0 1 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup exec_do*while () exec_shove () boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)))) ()))
Zero cases best errors: [0 1 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 8 309 784 8 429 2 8 188 188)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (188 8 309 784 8 429 2 8 188 188)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup exec_do*while () exec_shove () boolean_yankdup in3 integer_gt print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_shove (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)))) ()))
Errors: [0 1 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 44
Size: 55
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.888
Median total errors in population: 8
Error averages by case: (0.812 0.992 0.691 0.216 0.992 0.571 0.998 0.992 0.812 0.812)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.34
Average program size in population (points): 52.335
Average percent parens in population: 0.209
Minimum age in population: 12.1640625
Maximum age in population: 16.716796875
Average age in population: 14.97425
Median age in population: 14.9697265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 10058349
--- Timings ---
Current time: 1559314608988 milliseconds
Total Time:          40.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.1 seconds, 52.7%
Fitness Testing:     12.5 seconds, 31.2%
Report:               6.3 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 572
Test mean error for best: 0.57200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 70                 
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 28                 
Correct output: 24                  | Program output: 24                 
Correct output: 39                  | Program output: 59                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 60                 
Correct output: 19                  | Program output: 24                 
Correct output: 10                  | Program output: 43                 
Correct output: 9                   | Program output: 92                 
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 18                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 44                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 651                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 97                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: 58                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*while () exec_shove () boolean_yankdup in1 in1 exec_yankdup integer_mult boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ())))) ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 56
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*while () exec_shove () boolean_yankdup in1 in1 exec_yankdup integer_mult boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ())))) ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 56
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (742 443 11 226 55 300 55 300 127 742)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (742 443 11 226 55 300 55 300 127 742)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*while () exec_shove () boolean_yankdup in1 in1 exec_yankdup integer_mult boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ())))) ()))
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 56
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.999
Median total errors in population: 6
Error averages by case: (0.258 0.557 0.989 0.774 0.945 0.7 0.945 0.7 0.873 0.258)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.811
Average program size in population (points): 52.825
Average percent parens in population: 0.208
Minimum age in population: 14.0859375
Maximum age in population: 18.166015625
Average age in population: 16.44123828125
Median age in population: 16.45849609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 11424495
--- Timings ---
Current time: 1559314613337 milliseconds
Total Time:          44.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.1 seconds, 52.2%
Fitness Testing:     14.0 seconds, 31.5%
Report:               7.1 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 569
Test mean error for best: 0.56900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 70                 
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 28                 
Correct output: 24                  | Program output: 24                 
Correct output: 39                  | Program output: 59                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 60                 
Correct output: 19                  | Program output: 24                 
Correct output: 10                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 18                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 44                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 651                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 97                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: 58                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_do*while () exec_shove () boolean_yankdup in1 in1 exec_yankdup integer_mult boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Lexicase best errors: [0 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.148
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_do*while () exec_shove () boolean_yankdup in1 in1 exec_yankdup integer_mult boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Zero cases best errors: [0 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (454 805 172 538 162 454 538 23 115 539)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (454 805 172 538 162 454 538 23 115 539)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (exec_do*while () exec_shove () boolean_yankdup in1 in1 exec_yankdup integer_mult boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Errors: [0 0 1 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 47
Size: 55
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 6.2
Median total errors in population: 6
Error averages by case: (0.546 0.195 0.828 0.462 0.838 0.546 0.462 0.977 0.885 0.461)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.256
Average program size in population (points): 54.832
Average percent parens in population: 0.192
Minimum age in population: 16.322265625
Maximum age in population: 19.45703125
Average age in population: 18.232087890625
Median age in population: 18.45703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 238
Genome diversity (% unique genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 12813537
--- Timings ---
Current time: 1559314617755 milliseconds
Total Time:          48.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.2 seconds, 51.7%
Fitness Testing:     15.4 seconds, 31.7%
Report:               8.0 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 28                 
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 44                 
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 28                 
Correct output: 24                  | Program output: 24                 
Correct output: 39                  | Program output: 59                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 60                 
Correct output: 19                  | Program output: 24                 
Correct output: 10                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 18                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 44                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -37                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: 66                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 93                 
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -15                
Correct output: -91                 | Program output: -74                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: 11                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: 77                 
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: -20                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 97                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -1                 
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 21                 
Correct output: -89                 | Program output: -9                 
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: 24                 
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_do*while () in2 boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Lexicase best errors: [0 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_do*while () in2 boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Zero cases best errors: [0 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (706 77 578 103 103 905 103 1 134 437)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (706 77 578 103 103 905 103 1 134 437)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (exec_do*while () in2 boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Errors: [0 1 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 47
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 6.853
Median total errors in population: 7
Error averages by case: (0.294 0.923 0.422 0.897 0.897 0.095 0.897 0.999 0.866 0.563)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.743
Average program size in population (points): 54.59
Average percent parens in population: 0.179
Minimum age in population: 17.322265625
Maximum age in population: 21.18896484375
Average age in population: 19.85922998046875
Median age in population: 19.80029296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.007
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14287957
--- Timings ---
Current time: 1559314621980 milliseconds
Total Time:          52.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.0 seconds, 51.1%
Fitness Testing:     17.0 seconds, 32.1%
Report:               8.8 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 585
Test mean error for best: 0.58500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 82                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 65                 
Correct output: 39                  | Program output: 39                 
Correct output: 46                  | Program output: 59                 
Correct output: 4                   | Program output: 46                 
Correct output: 19                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 93                 
Correct output: 27                  | Program output: 27                 
Correct output: 47                  | Program output: 59                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: 37                 
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 91                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 77                 
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 51                 
Correct output: 52                  | Program output: 59                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 53                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 89                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output:                    
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 44                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*while () exec_shove () boolean_yankdup in1 in1 exec_yankdup integer_inc in2 integer_yankdup integer_eq in1 in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop exec_when (boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ()))))) ()))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*while () exec_shove () boolean_yankdup in1 in1 exec_yankdup integer_inc in2 integer_yankdup integer_eq in1 in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop exec_when (boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ()))))) ()))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (314 313 730 221 219 306 248 137 220 137)
Population mean number of elite cases: 2.85
Count of perfect (error zero) individuals by case: (314 313 730 221 219 306 248 137 220 137)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*while () exec_shove () boolean_yankdup in1 in1 exec_yankdup integer_inc in2 integer_yankdup integer_eq in1 in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop exec_when (boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ()))))) ()))
Errors: [1 1 0 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 47
Size: 60
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.155
Median total errors in population: 6
Error averages by case: (0.686 0.687 0.27 0.779 0.781 0.694 0.752 0.863 0.78 0.863)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.723
Average program size in population (points): 52.561
Average percent parens in population: 0.166
Minimum age in population: 18.322265625
Maximum age in population: 22.9208984375
Average age in population: 21.17912280273438
Median age in population: 21.30029296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 15724316
--- Timings ---
Current time: 1559314626212 milliseconds
Total Time:          57.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.9 seconds, 50.6%
Fitness Testing:     18.5 seconds, 32.3%
Report:               9.7 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 28                 
Correct output: 24                  | Program output: 24                 
Correct output: 39                  | Program output: 59                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 60                 
Correct output: 19                  | Program output: 24                 
Correct output: 10                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 18                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 44                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 93                 
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 97                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc boolean_flush boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc boolean_flush boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 731 341 179 718 341 731 333 341 179)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (341 731 341 179 718 341 731 333 341 179)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Errors: [0 0 0 1 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 38
Size: 44
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 5.765
Median total errors in population: 6
Error averages by case: (0.659 0.269 0.659 0.821 0.282 0.659 0.269 0.667 0.659 0.821)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.435
Average program size in population (points): 55.734
Average percent parens in population: 0.183
Minimum age in population: 21.3057861328125
Maximum age in population: 24.860595703125
Average age in population: 23.15930535888672
Median age in population: 23.22052001953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 17198906
--- Timings ---
Current time: 1559314630523 milliseconds
Total Time:          61.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.9 seconds, 50.2%
Fitness Testing:     20.0 seconds, 32.5%
Report:              10.5 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 82                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 39                 
Correct output: 46                  | Program output: 59                 
Correct output: 4                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 93                 
Correct output: 27                  | Program output: 27                 
Correct output: 47                  | Program output: 59                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 37                 
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 44                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ())))) ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ())))) ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (151 152 852 586 5 166 152 23 526 706)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (151 152 852 586 5 166 152 23 526 706)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)))) ()))
Errors: [0 0 0 0 0 1 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 6.681
Median total errors in population: 6
Error averages by case: (0.849 0.848 0.148 0.414 0.995 0.834 0.848 0.977 0.474 0.294)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.66
Average program size in population (points): 54.154
Average percent parens in population: 0.174
Minimum age in population: 22.55029296875
Maximum age in population: 26.1429443359375
Average age in population: 24.52100189208984
Median age in population: 24.58522033691406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 18659453
--- Timings ---
Current time: 1559314634850 milliseconds
Total Time:          65.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 49.9%
Fitness Testing:     21.5 seconds, 32.7%
Report:              11.3 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 607
Test mean error for best: 0.60700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 28                 
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 67                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 44                 
Correct output: 52                  | Program output: 88                 
Correct output: 10                  | Program output: 35                 
Correct output: 24                  | Program output: 51                 
Correct output: 39                  | Program output: 64                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 36                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: -42                 | Program output: 37                 
Correct output: -89                 | Program output: -74                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -13                
Correct output: -96                 | Program output: -25                
Correct output: -84                 | Program output: -60                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 53                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 85                 
Correct output: -75                 | Program output: 93                 
Correct output: -48                 | Program output: 58                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: 66                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: 100                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: 35                 
Correct output: -89                 | Program output: 74                 
Correct output: -49                 | Program output: 43                 
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -44                
Correct output: -12                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -74                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -8                 
Correct output: 52                  | Program output: 89                 
Correct output: -79                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 43                 
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 41                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -5                 
Correct output: 22                  | Program output: 54                 
Correct output: -68                 | Program output: -20                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: 93                 
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -24                
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: 88                 
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (603 2 108 108 108 419 108 420 382 2)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (603 2 108 108 108 419 108 420 382 2)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Errors: [1 1 0 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 7.74
Median total errors in population: 7
Error averages by case: (0.397 0.998 0.892 0.892 0.892 0.581 0.892 0.58 0.618 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.47
Average program size in population (points): 52.626
Average percent parens in population: 0.171
Minimum age in population: 23.69036865234375
Maximum age in population: 27.56045532226562
Average age in population: 26.35381799316406
Median age in population: 26.36813354492188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.501
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 20131712
--- Timings ---
Current time: 1559314639079 milliseconds
Total Time:          70.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.7 seconds, 49.6%
Fitness Testing:     23.0 seconds, 32.9%
Report:              12.1 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 581
Test mean error for best: 0.58100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 28                 
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output:                    
Correct output: 24                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 67                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 54                 
Correct output: 52                  | Program output: 88                 
Correct output: 10                  | Program output: 35                 
Correct output: 24                  | Program output: 51                 
Correct output: 39                  | Program output: 64                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 36                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: -42                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 53                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 85                 
Correct output: -75                 | Program output: 93                 
Correct output: -48                 | Program output: 5                  
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 100                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: 8                  
Correct output: -89                 | Program output: 60                 
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -44                
Correct output: -12                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -8                 
Correct output: 52                  | Program output: 89                 
Correct output: -79                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 9                  
Correct output: -73                 | Program output: -58                
Correct output: -37                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: 7                  
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -24                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -31                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 350 120 180 173 349 120 531 436 13)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (350 350 120 180 173 349 120 531 436 13)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 48
Size: 54
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 7.378
Median total errors in population: 7
Error averages by case: (0.65 0.65 0.88 0.82 0.827 0.651 0.88 0.469 0.564 0.987)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.226
Average program size in population (points): 51.414
Average percent parens in population: 0.156
Minimum age in population: 25.235595703125
Maximum age in population: 29.27944183349609
Average age in population: 28.03466307830811
Median age in population: 28.01942443847656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 21639740
--- Timings ---
Current time: 1559314643568 milliseconds
Total Time:          74.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.8 seconds, 49.4%
Fitness Testing:     24.6 seconds, 33.0%
Report:              13.0 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 581
Test mean error for best: 0.58100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 28                 
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output:                    
Correct output: 24                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 67                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 54                 
Correct output: 52                  | Program output: 88                 
Correct output: 10                  | Program output: 35                 
Correct output: 24                  | Program output: 51                 
Correct output: 39                  | Program output: 64                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 36                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: -42                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 53                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 85                 
Correct output: -75                 | Program output: 93                 
Correct output: -48                 | Program output: 5                  
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 100                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: 8                  
Correct output: -89                 | Program output: 60                 
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -44                
Correct output: -12                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -8                 
Correct output: 52                  | Program output: 89                 
Correct output: -79                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 9                  
Correct output: -73                 | Program output: -58                
Correct output: -37                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: 7                  
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -24                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -31                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction 62} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 62 integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction 62} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 62 integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 367 263 344 283 218 264 916 344 367)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (249 367 263 344 283 218 264 916 344 367)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 54
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 6.385
Median total errors in population: 6
Error averages by case: (0.751 0.633 0.737 0.656 0.717 0.782 0.736 0.084 0.656 0.633)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.339
Average program size in population (points): 52.975
Average percent parens in population: 0.140
Minimum age in population: 26.235595703125
Maximum age in population: 31.18698120117188
Average age in population: 29.3834972114563
Median age in population: 29.570068359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.006
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 22987633
--- Timings ---
Current time: 1559314647689 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.7 seconds, 49.2%
Fitness Testing:     26.0 seconds, 33.1%
Report:              13.9 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 82                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 39                 
Correct output: 46                  | Program output: 59                 
Correct output: 4                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 93                 
Correct output: 27                  | Program output: 27                 
Correct output: 47                  | Program output: 59                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 37                 
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 44                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_newline})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop exec_k (exec_do*while (integer_gte integer_dup_items boolean_pop exec_when (boolean_invert_first_then_and boolean_flush) print_newline)) ())))) ()))
Lexicase best errors: [1 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_newline})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop exec_k (exec_do*while (integer_gte integer_dup_items boolean_pop exec_when (boolean_invert_first_then_and boolean_flush) print_newline)) ())))) ()))
Zero cases best errors: [1 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 444 327 241 241 241 155 450 241 161)
Population mean number of elite cases: 2.66
Count of perfect (error zero) individuals by case: (160 444 327 241 241 241 155 450 241 161)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup))) ()))
Errors: [1 1 0 0 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 50
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 7.339
Median total errors in population: 7
Error averages by case: (0.84 0.556 0.673 0.759 0.759 0.759 0.845 0.55 0.759 0.839)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.572
Average program size in population (points): 54.919
Average percent parens in population: 0.149
Minimum age in population: 27.235595703125
Maximum age in population: 32.81758689880371
Average age in population: 30.94561202812195
Median age in population: 31.070068359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.006
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 24385631
--- Timings ---
Current time: 1559314651784 milliseconds
Total Time:          82.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.5 seconds, 49.0%
Fitness Testing:     27.4 seconds, 33.2%
Report:              14.7 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -59                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 67                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 88                 
Correct output: 10                  | Program output: 35                 
Correct output: 24                  | Program output: 51                 
Correct output: 39                  | Program output: 64                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 36                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: -42                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 53                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 85                 
Correct output: -75                 | Program output: 93                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 100                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -44                
Correct output: -12                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -8                 
Correct output: 52                  | Program output: 89                 
Correct output: -79                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 41                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -24                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -31                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte exec_do*while (integer_gte integer_dup_items boolean_pop exec_when (boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ())))))) ()))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc boolean_stackdepth exec_dup_items integer_inc in2 exec_yankdup boolean_swap boolean_yankdup boolean_yankdup in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte exec_do*while (integer_gte integer_dup_items boolean_pop exec_when (boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ())))))) ()))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 508 216 452 421 223 263 231 223 458)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (220 508 216 452 421 223 263 231 223 458)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc boolean_stackdepth exec_dup_items in1 in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup print_integer integer_stackdepth boolean_dup_items in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Errors: [0 0 1 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 42
Size: 48
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 6.785
Median total errors in population: 7
Error averages by case: (0.78 0.492 0.784 0.548 0.579 0.777 0.737 0.769 0.777 0.542)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.912
Average program size in population (points): 57.067
Average percent parens in population: 0.158
Minimum age in population: 28.235595703125
Maximum age in population: 34.40816307067871
Average age in population: 32.93954925441742
Median age in population: 33.13653659820557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.007
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 25843629
--- Timings ---
Current time: 1559314655983 milliseconds
Total Time:          86.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.4 seconds, 48.8%
Fitness Testing:     28.9 seconds, 33.3%
Report:              15.5 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 82                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 39                 
Correct output: 46                  | Program output: 59                 
Correct output: 4                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 93                 
Correct output: 27                  | Program output: 27                 
Correct output: 47                  | Program output: 59                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 37                 
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 44                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty integer_mult integer_mod boolean_yankdup boolean_empty boolean_or boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Lexicase best errors: [0 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.107
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty integer_mult integer_mod boolean_yankdup boolean_empty boolean_or boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Zero cases best errors: [0 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.107
--- Lexicase Population Statistics ---
Count of elite individuals by case: (299 16 761 394 121 528 411 34 121 245)
Population mean number of elite cases: 2.93
Count of perfect (error zero) individuals by case: (299 16 761 394 121 528 411 34 121 245)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_9894} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 exec_do*while (boolean_shove) in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 integer_empty exec_noop tagged_9894 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_inc boolean_flush) boolean_dup))
Errors: [0 1 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 35
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.07
Median total errors in population: 7
Error averages by case: (0.701 0.984 0.239 0.606 0.879 0.472 0.589 0.966 0.879 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.165
Average program size in population (points): 56.722
Average percent parens in population: 0.150
Minimum age in population: 31.570068359375
Maximum age in population: 36.23163795471191
Average age in population: 34.26741799449921
Median age in population: 34.36542177200317
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.006
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 27319329
--- Timings ---
Current time: 1559314659580 milliseconds
Total Time:          91.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.2 seconds, 48.6%
Fitness Testing:     30.4 seconds, 33.4%
Report:              16.4 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 82                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 39                 
Correct output: 46                  | Program output: 59                 
Correct output: 4                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 93                 
Correct output: 27                  | Program output: 27                 
Correct output: 47                  | Program output: 59                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 37                 
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 44                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank exec_swap (boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte in1 boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ()))) ())) ()))
Lexicase best errors: [1 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank exec_swap (boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte in1 boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ()))) ())) ()))
Zero cases best errors: [1 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 145 494 316 350 389 257 300 918 918)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (129 145 494 316 350 389 257 300 918 918)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_yankdup boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (exec_rot (exec_noop in2 in2 boolean_empty integer_dup_items exec_dup (integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) () ())) ()))
Errors: [1 0 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 5.784
Median total errors in population: 5
Error averages by case: (0.871 0.855 0.506 0.684 0.65 0.611 0.743 0.7 0.082 0.082)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.398
Average program size in population (points): 56.791
Average percent parens in population: 0.149
Minimum age in population: 32.69947719573975
Maximum age in population: 37.89153146743774
Average age in population: 35.90474722695351
Median age in population: 35.95434093475342
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.007
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 28778660
--- Timings ---
Current time: 1559314663807 milliseconds
Total Time:          94.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.1 seconds, 48.7%
Fitness Testing:     31.9 seconds, 33.7%
Report:              16.6 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 67                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 64                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 969                
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: -42                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -57                
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -44                
Correct output: -12                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -8                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: -24                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -31                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -6} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth boolean_frominteger integer_inc in2 integer_yankdup in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_eq boolean_xor integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop) (integer_add integer_empty exec_shove (integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and -6 in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)))))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 69
Percent parens: 0.116
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -6} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth boolean_frominteger integer_inc in2 integer_yankdup in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_eq boolean_xor integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop) (integer_add integer_empty exec_shove (integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and -6 in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)))))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 69
Percent parens: 0.116
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 451 307 385 277 753 566 253 312 114)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (174 451 307 385 277 753 566 253 312 114)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup in4 boolean_xor integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop) (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup))))))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 50
Size: 59
Percent parens: 0.153
--- Population Statistics ---
Average total errors in population: 6.408
Median total errors in population: 6
Error averages by case: (0.826 0.549 0.693 0.615 0.723 0.247 0.434 0.747 0.688 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.202
Average program size in population (points): 59.137
Average percent parens in population: 0.136
Minimum age in population: 33.98232650756836
Maximum age in population: 39.30325150489807
Average age in population: 37.41233771383762
Median age in population: 37.52248167991638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.008
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 30250153
--- Timings ---
Current time: 1559314668011 milliseconds
Total Time:          99.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.0 seconds, 48.5%
Fitness Testing:     33.4 seconds, 33.7%
Report:              17.5 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 67                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 64                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 969                
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: -42                 | Program output: 37                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -25                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -67                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -35                
Correct output: -49                 | Program output: 92                 
Correct output: -81                 | Program output: -57                
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -44                
Correct output: -12                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -8                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: -24                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -31                
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -6} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth boolean_frominteger integer_inc in2 integer_yankdup in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_eq boolean_xor integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop) (integer_add integer_empty exec_shove (integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and -6 in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)))))
Lexicase best errors: [1 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 70
Percent parens: 0.114
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -6} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth boolean_frominteger integer_inc in2 integer_yankdup in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_eq boolean_xor integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop) (integer_add integer_empty exec_shove (integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and -6 in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)))))
Zero cases best errors: [1 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 70
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (251 348 705 573 206 579 158 550 439 403)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (251 348 705 573 206 579 158 550 439 403)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup in4 boolean_xor integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop) (tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup))))))
Errors: [1 0 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 59
Percent parens: 0.153
--- Population Statistics ---
Average total errors in population: 5.788
Median total errors in population: 5
Error averages by case: (0.749 0.652 0.295 0.427 0.794 0.421 0.842 0.45 0.561 0.597)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.532
Average program size in population (points): 61.96
Average percent parens in population: 0.120
Minimum age in population: 35.63472652435303
Maximum age in population: 40.90443563461304
Average age in population: 38.98985535311699
Median age in population: 39.05254632234573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.008
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 31726449
--- Timings ---
Current time: 1559314672211 milliseconds
Total Time:         103.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.0 seconds, 48.4%
Fitness Testing:     34.8 seconds, 33.8%
Report:              18.3 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 579
Test mean error for best: 0.57900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -15                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -46                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -38                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 81                 
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -45                
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 90                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: -22                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth boolean_frominteger integer_inc in2 integer_yankdup in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_eq boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) (boolean_dup)))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 75
Percent parens: 0.067
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth boolean_frominteger integer_inc in2 integer_yankdup in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_eq boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) (boolean_dup)))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 75
Percent parens: 0.067
--- Lexicase Population Statistics ---
Count of elite individuals by case: (471 314 910 292 617 283 478 349 81 555)
Population mean number of elite cases: 4.35
Count of perfect (error zero) individuals by case: (471 314 910 292 617 283 478 349 81 555)
Population mean number of perfect (error zero) cases: 4.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth boolean_frominteger integer_inc in2 integer_yankdup in1 exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_eq boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) (boolean_dup)))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 70
Size: 75
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 5.65
Median total errors in population: 5
Error averages by case: (0.529 0.686 0.09 0.708 0.383 0.717 0.522 0.651 0.919 0.445)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.735
Average program size in population (points): 61.333
Average percent parens in population: 0.108
Minimum age in population: 38.05969047546387
Maximum age in population: 42.62144714593887
Average age in population: 40.63553608062863
Median age in population: 40.74444526433945
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.009
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 33263459
--- Timings ---
Current time: 1559314676549 milliseconds
Total Time:         107.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.9 seconds, 48.3%
Fitness Testing:     36.4 seconds, 33.9%
Report:              19.1 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 95                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 78                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 95                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 13                 
Correct output: -89                 | Program output: -74                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -13                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -60                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -38                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 81                 
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -45                
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -5                 
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -15                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 90                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup integer_eq boolean_swap boolean_yankdup in4 integer_yankdup integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing () (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth exec_k (boolean_empty integer_dup_items integer_dup_items boolean_pop integer_stackdepth) (boolean_invert_first_then_and boolean_flush) boolean_dup))))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.135
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup integer_eq boolean_swap boolean_yankdup in4 integer_yankdup integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing () (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth exec_k (boolean_empty integer_dup_items integer_dup_items boolean_pop integer_stackdepth) (boolean_invert_first_then_and boolean_flush) boolean_dup))))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.135
--- Lexicase Population Statistics ---
Count of elite individuals by case: (898 679 136 632 731 110 427 82 588 611)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (898 679 136 632 731 110 427 82 588 611)
Population mean number of perfect (error zero) cases: 4.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (exec_dup (boolean_stackdepth integer_mod) integer_inc in2 integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and exec_dup_items boolean_invert_first_then_and boolean_eq exec_dup_items) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) (boolean_dup)))
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 60
Size: 66
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 5.106
Median total errors in population: 4
Error averages by case: (0.102 0.321 0.864 0.368 0.269 0.89 0.573 0.918 0.412 0.389)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.1
Average program size in population (points): 66.197
Average percent parens in population: 0.093
Minimum age in population: 39.8602956533432
Maximum age in population: 43.85034894943237
Average age in population: 42.32304042294621
Median age in population: 42.37160374969244
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.009
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 34859638
--- Timings ---
Current time: 1559314680960 milliseconds
Total Time:         111.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.9 seconds, 48.1%
Fitness Testing:     38.0 seconds, 33.9%
Report:              19.9 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 28                 
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 44                 
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 28                 
Correct output: 24                  | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 46                  | Program output: 59                 
Correct output: 4                   | Program output: 46                 
Correct output: 19                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 92                 
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 27                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -74                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -37                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: 66                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 35                 
Correct output: -89                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -15                
Correct output: -91                 | Program output: -74                
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: 11                 
Correct output: -76                 | Program output: -45                
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: 45                 
Correct output: -99                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: -20                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 89                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: -1                 
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in3 integer_min integer_yankdup print_integer integer_stackdepth exec_flush exec_rot (integer_yankdup integer_eq) (integer_sub integer_eq) (boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq) boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq boolean_not exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty exec_dup (boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 70
Percent parens: 0.129
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in3 integer_min integer_yankdup print_integer integer_stackdepth exec_flush exec_rot (integer_yankdup integer_eq) (integer_sub integer_eq) (boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq) boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq boolean_not exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty exec_dup (boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 70
Percent parens: 0.129
--- Lexicase Population Statistics ---
Count of elite individuals by case: (301 378 1 2 526 1 361 484 238 417)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (301 378 1 2 526 1 361 484 238 417)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in3 integer_min integer_yankdup print_integer integer_stackdepth exec_flush exec_rot (integer_yankdup integer_eq) (integer_sub integer_eq) (boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq) boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq boolean_not exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty exec_dup (boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup) ()))
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 70
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 7.291
Median total errors in population: 7
Error averages by case: (0.699 0.622 0.999 0.998 0.474 0.999 0.639 0.516 0.762 0.583)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.363
Average program size in population (points): 66.162
Average percent parens in population: 0.118
Minimum age in population: 41.6233806014061
Maximum age in population: 45.41488767415285
Average age in population: 44.11644978305697
Median age in population: 44.14295960962772
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.006
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.247
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 36233459
--- Timings ---
Current time: 1559314684470 milliseconds
Total Time:         116.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 48.1%
Fitness Testing:     39.4 seconds, 33.9%
Report:              20.8 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 82                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 39                 
Correct output: 46                  | Program output: 59                 
Correct output: 4                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 93                 
Correct output: 27                  | Program output: 27                 
Correct output: 47                  | Program output: 59                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 37                 
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 44                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank exec_swap (boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte in1 boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ()))) ())) ()))
Lexicase best errors: [0 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank exec_swap (boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq exec_swap () (integer_lte exec_pop (in1 exec_noop in2 exec_do*while (integer_gte in1 boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) exec_y_when_autoconstructing ()))) ())) ()))
Zero cases best errors: [0 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 187 792 63 84 181 458 10 83 170)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (333 187 792 63 84 181 458 10 83 170)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (in4 exec_y (exec_k_when_autoconstructing (integer_empty exec_shove (integer_mod boolean_yankdup boolean_empty boolean_invert_first_then_and boolean_invert_first_then_and integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and integer_yank boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty integer_mult integer_mod boolean_yankdup boolean_empty boolean_or boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)) ())))
Errors: [0 1 0 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 67
Size: 75
Percent parens: 0.107
--- Population Statistics ---
Average total errors in population: 7.639
Median total errors in population: 8
Error averages by case: (0.667 0.813 0.208 0.937 0.916 0.819 0.542 0.99 0.917 0.83)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.992
Average program size in population (points): 70.148
Average percent parens in population: 0.101
Minimum age in population: 43.42128618061543
Maximum age in population: 47.03591928258538
Average age in population: 45.8828920939602
Median age in population: 45.74172183126211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.007
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 37353408
--- Timings ---
Current time: 1559314688416 milliseconds
Total Time:         119.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.7 seconds, 48.4%
Fitness Testing:     40.5 seconds, 34.0%
Report:              21.0 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 484
Test mean error for best: 0.48400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 88                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 51                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -74                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -13                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -60                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 969                
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -37                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -15                
Correct output: -91                 | Program output: -74                
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -45                
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -5                 
Correct output: 22                  | Program output: 54                 
Correct output: -68                 | Program output: -20                
Correct output: -63                 | Program output: -15                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: -1                 
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: 24                 
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 78
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 78
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (505 384 161 499 405 509 167 169 401 23)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (505 384 161 499 405 509 167 169 401 23)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 72
Size: 78
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 6.777
Median total errors in population: 6
Error averages by case: (0.495 0.616 0.839 0.501 0.595 0.491 0.833 0.831 0.599 0.977)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.939
Average program size in population (points): 65.852
Average percent parens in population: 0.104
Minimum age in population: 44.42128618061543
Maximum age in population: 48.83757794834673
Average age in population: 47.36929194740579
Median age in population: 47.52287323959172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.009
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 38458337
--- Timings ---
Current time: 1559314692315 milliseconds
Total Time:         123.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 48.3%
Fitness Testing:     41.7 seconds, 33.8%
Report:              21.9 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 501
Test mean error for best: 0.50100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 88                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -15                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -46                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -74-21             
Correct output: -27                 | Program output: -2737              
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output:                    
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -38                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -45                
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -73                
Correct output: 22                  | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: -22                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup integer_yankdup in1 exec_yankdup exec_y_when_autoconstructing (boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth) integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 80
Percent parens: 0.088
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup integer_yankdup in1 exec_yankdup exec_y_when_autoconstructing (boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth) integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 80
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 365 207 545 756 206 141 150 363 21)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (85 365 207 545 756 206 141 150 363 21)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup integer_yankdup in1 exec_yankdup exec_y_when_autoconstructing (boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth) integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
Errors: [1 0 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 73
Size: 80
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 7.161
Median total errors in population: 7
Error averages by case: (0.915 0.635 0.793 0.455 0.244 0.794 0.859 0.85 0.637 0.979)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.705
Average program size in population (points): 73.768
Average percent parens in population: 0.083
Minimum age in population: 45.80029591917992
Maximum age in population: 50.31658077333122
Average age in population: 48.23980486123543
Median age in population: 48.29285802599043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 193
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.008
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 40010910
--- Timings ---
Current time: 1559314696661 milliseconds
Total Time:         127.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.5 seconds, 48.2%
Fitness Testing:     43.2 seconds, 33.9%
Report:              22.8 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 82                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 39                 
Correct output: 46                  | Program output: 59                 
Correct output: 4                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 93                 
Correct output: 27                  | Program output: 27                 
Correct output: 47                  | Program output: 59                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 37                 
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 7                  
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: 47                 
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 44                 
Correct output: -94                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction -84} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (boolean_stackdepth exec_dup_items exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup exec_do*range () boolean_swap boolean_yankdup in4 integer_yankdup integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing () (exec_rot (integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 exec_when (exec_noop tagged_172 integer_empty exec_shove (integer_mod integer_mod boolean_invert_first_then_and boolean_frominteger boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 -84 in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) integer_stackdepth)) ())) () ())))
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction -84} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (boolean_stackdepth exec_dup_items exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_min integer_yankdup exec_do*range () boolean_swap boolean_yankdup in4 integer_yankdup integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing () (exec_rot (integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 exec_when (exec_noop tagged_172 integer_empty exec_shove (integer_mod integer_mod boolean_invert_first_then_and boolean_frominteger boolean_invert_first_then_and boolean_eq in1) integer_lte exec_pop (in1 -84 in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) integer_stackdepth)) ())) () ())))
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 491 361 596 172 210 271 306 270 596)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (562 491 361 596 172 210 271 306 270 596)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup boolean_and in1 integer_min integer_yankdup print_integer integer_stackdepth boolean_eq integer_yankdup boolean_xor in3 boolean_xor exec_yankdup boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1 integer_lte exec_pop (in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_invert_first_then_and boolean_flush) boolean_dup)
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 38
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 6.165
Median total errors in population: 6
Error averages by case: (0.438 0.509 0.639 0.404 0.828 0.79 0.729 0.694 0.73 0.404)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.153
Average program size in population (points): 73.454
Average percent parens in population: 0.101
Minimum age in population: 47.55795345082879
Maximum age in population: 51.78750421572477
Average age in population: 50.07149653276382
Median age in population: 50.11983089963906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.008
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 41454166
--- Timings ---
Current time: 1559314700189 milliseconds
Total Time:         131.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.3 seconds, 48.1%
Fitness Testing:     44.6 seconds, 33.9%
Report:              23.7 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 609
Test mean error for best: 0.60900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output:                    
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 0                  
Correct output: 46                  | Program output: 0                  
Correct output: 4                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 0                  
Correct output: 27                  | Program output:                    
Correct output: 47                  | Program output: 0                  
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 13                 
Correct output: -89                 | Program output: -15                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: 0                  
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 0                  
Correct output: -79                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -73                
Correct output: 22                  | Program output: 0                  
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 38                 
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 0                  
Correct output: -94                 | Program output: -2210              
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -22                
Correct output: -54                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq) in1) (boolean_or integer_empty in1 exec_noop in2 in2 boolean_empty integer_dup_items integer_dup integer_stackdepth integer_rot boolean_flush) boolean_dup))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.078
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq) in1) (boolean_or integer_empty in1 exec_noop in2 in2 boolean_empty integer_dup_items integer_dup integer_stackdepth integer_rot boolean_flush) boolean_dup))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.078
--- Lexicase Population Statistics ---
Count of elite individuals by case: (897 97 352 425 13 895 609 524 121 616)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (897 97 352 425 13 895 609 524 121 616)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_stackdepth exec_dup_items integer_inc in2 integer_yankdup integer_eq in1 integer_inc in2 integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_rot integer_sub integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq in1) integer_lte integer_pop in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 72
Percent parens: 0.069
--- Population Statistics ---
Average total errors in population: 5.451
Median total errors in population: 5
Error averages by case: (0.103 0.903 0.648 0.575 0.987 0.105 0.391 0.476 0.879 0.384)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.728
Average program size in population (points): 72.762
Average percent parens in population: 0.099
Minimum age in population: 49.29285802599043
Maximum age in population: 53.24632217246108
Average age in population: 51.41766556431493
Median age in population: 51.46427910472266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.009
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.226
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 42844574
--- Timings ---
Current time: 1559314704382 milliseconds
Total Time:         135.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.3 seconds, 48.3%
Fitness Testing:     46.0 seconds, 34.0%
Report:              23.9 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 4                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output:                    
Correct output: 5                   | Program output: 4                  
Correct output: 29                  | Program output:                    
Correct output: 0                   | Program output:                    
Correct output: 52                  | Program output:                    
Correct output: 10                  | Program output: 4                  
Correct output: 24                  | Program output:                    
Correct output: 39                  | Program output:                    
Correct output: 46                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 19                  | Program output:                    
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 22                 
Correct output: 25                  | Program output:                    
Correct output: 27                  | Program output: 27                 
Correct output: 47                  | Program output:                    
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: 73                 
Correct output: -89                 | Program output: -15                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -46                
Correct output: -96                 | Program output: 5                  
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output:                    
Correct output: -90                 | Program output: 1                  
Correct output: -86                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 37                 
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output: 91                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: 5                  
Correct output: -86                 | Program output: -37                
Correct output: -47                 | Program output: -47                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: 43                 
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: 81                 
Correct output: -12                 | Program output: 7                  
Correct output: -98                 | Program output: -15                
Correct output: -91                 | Program output: -74                
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output:                    
Correct output: -79                 | Program output: 5                  
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 43                 
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -73                
Correct output: 22                  | Program output:                    
Correct output: -68                 | Program output: -20                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 89                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: -1                 
Correct output: -82                 | Program output: 90                 
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: 78                 
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -9                 
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output:                    
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: 5                  
Correct output: -60                 | Program output: -22                
Correct output: -54                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_rot integer_sub integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_pop (in1) exec_noop in2 integer_lt boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_empty boolean_invert_first_then_and boolean_eq in1) (integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth integer_rot integer_dup_items boolean_pop boolean_xor integer_rot boolean_flush) boolean_dup))
Lexicase best errors: [0 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.067
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_rot integer_sub integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_pop (in1) exec_noop in2 integer_lt boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_empty boolean_invert_first_then_and boolean_eq in1) (integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth integer_rot integer_dup_items boolean_pop boolean_xor integer_rot boolean_flush) boolean_dup))
Zero cases best errors: [0 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.067
--- Lexicase Population Statistics ---
Count of elite individuals by case: (286 317 503 288 126 169 217 138 905 14)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (286 317 503 288 126 169 217 138 905 14)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_rot integer_sub integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_pop (in1) exec_noop in2 integer_lt boolean_empty integer_dup_items boolean_pop integer_stackdepth boolean_empty boolean_invert_first_then_and boolean_eq in1) (integer_lte integer_pop in1 exec_noop in2 in2 boolean_empty integer_dup_items boolean_pop integer_stackdepth integer_rot integer_dup_items boolean_pop boolean_xor integer_rot boolean_flush) boolean_dup))
Errors: [0 0 0 1 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 84
Size: 90
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 7.037
Median total errors in population: 7
Error averages by case: (0.714 0.683 0.497 0.712 0.874 0.831 0.783 0.862 0.095 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.064
Average program size in population (points): 72.314
Average percent parens in population: 0.071
Minimum age in population: 51.29285802599043
Maximum age in population: 54.37182771845255
Average age in population: 52.92240588552342
Median age in population: 53.17594058159739
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.007
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 44315269
--- Timings ---
Current time: 1559314708698 milliseconds
Total Time:         139.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.2 seconds, 48.2%
Fitness Testing:     47.4 seconds, 34.0%
Report:              24.8 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 521
Test mean error for best: 0.52100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 44                 
Correct output: 52                  | Program output: 88                 
Correct output: 10                  | Program output: 50                 
Correct output: 24                  | Program output: 51                 
Correct output: 39                  | Program output: 39                 
Correct output: 46                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 96                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: 13                 
Correct output: -89                 | Program output: -74                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -13                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -60                
Correct output: -70                 | Program output: -70                
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: 30                  | Program output: 91                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: -38                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: 66                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -45                
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -5                 
Correct output: 22                  | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -15                
Correct output: 20                  | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: 24                 
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.088
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (407 304 407 860 320 105 130 314 361 2)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (407 304 407 860 320 105 130 314 361 2)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction tagged_410} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_mod tagged_410 integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup) ()))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 62
Size: 68
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 6.79
Median total errors in population: 7
Error averages by case: (0.593 0.696 0.593 0.14 0.68 0.895 0.87 0.686 0.639 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.935
Average program size in population (points): 73.737
Average percent parens in population: 0.078
Minimum age in population: 52.29285802599043
Maximum age in population: 56.34192275651731
Average age in population: 54.69472483454575
Median age in population: 54.70433706685435
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.009
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.376
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 45734021
--- Timings ---
Current time: 1559314712894 milliseconds
Total Time:         143.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.2 seconds, 48.1%
Fitness Testing:     48.8 seconds, 33.9%
Report:              25.7 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 572
Test mean error for best: 0.57200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 28                 
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
Correct output: -14                 | Program output: -14                
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 95                 
Correct output: 5                   | Program output: 77                 
Correct output: 29                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 78                 
Correct output: 4                   | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 95                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -15                
Correct output: -92                 | Program output: 77                 
Correct output: -77                 | Program output: -46                
Correct output: -96                 | Program output: -64                
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: 87                 
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: 34                 
Correct output: -75                 | Program output: -74-21             
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output: 30                 
Correct output: -75                 | Program output: 7                  
Correct output: -48                 | Program output: 58                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -37                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: 49                 
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: 75                 
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: 74                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: 81                 
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -74                
Correct output: -81                 | Program output: 42                 
Correct output: -90                 | Program output: 48                 
Correct output: 52                  | Program output: 52                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 43                 
Correct output: -73                 | Program output: 92                 
Correct output: -37                 | Program output: 10                 
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -73                
Correct output: 22                  | Program output: 41                 
Correct output: -68                 | Program output: -20                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: 93                 
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: 90                 
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: 88                 
Correct output: 14                  | Program output: 67                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: -21                
Correct output: -60                 | Program output: -22                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_do*while (exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth) integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup) ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 69
Percent parens: 0.101
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_do*while (exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth) integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup) ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 69
Percent parens: 0.101
--- Lexicase Population Statistics ---
Count of elite individuals by case: (448 226 242 803 237 531 196 721 326 108)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (448 226 242 803 237 531 196 721 326 108)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush})
Best program: (in2 exec_do*while () integer_inc integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup exec_k () (integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq) integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush)) ()))
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 61
Size: 69
Percent parens: 0.116
--- Population Statistics ---
Average total errors in population: 6.162
Median total errors in population: 6
Error averages by case: (0.552 0.774 0.758 0.197 0.763 0.469 0.804 0.279 0.674 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.969
Average program size in population (points): 72.605
Average percent parens in population: 0.091
Minimum age in population: 54.23439930379391
Maximum age in population: 57.95712745300261
Average age in population: 56.77860241678503
Median age in population: 56.86095483053941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.008
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 47375899
--- Timings ---
Current time: 1559314717245 milliseconds
Total Time:         148.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.1 seconds, 48.0%
Fitness Testing:     50.4 seconds, 34.0%
Report:              26.6 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 66                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 66                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 60                 
Correct output: 19                  | Program output: 1919               
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output:                    
Correct output: 27                  | Program output: 45                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -74                
Correct output: -92                 | Program output: -80                
Correct output: -77                 | Program output: -46                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -75                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -38                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: -1                 
Correct output: -92                 | Program output: -14                
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -33                
Correct output: -99                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -81                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -45                
Correct output: -73                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -46                
Correct output: -99                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -81                
Correct output: -64                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_yankdup in1 exec_yankdup exec_yankdup exec_yankdup boolean_swap boolean_yankdup integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 boolean_flush exec_shove (integer_mod in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_yankdup in1 exec_yankdup exec_yankdup exec_yankdup boolean_swap boolean_yankdup integer_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup integer_stackdepth integer_sub integer_eq boolean_yankdup in4 integer_yankdup integer_eq integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 boolean_flush exec_shove (integer_mod in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (469 66 617 107 64 515 426 881 153 11)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (469 66 617 107 64 515 426 881 153 11)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 boolean_invert_first_then_and integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup boolean_swap exec_k (boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup) (integer_rot) integer_sub integer_sub integer_eq boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty boolean_invert_first_then_and boolean_eq) in1) (integer_lte integer_pop in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup))
Errors: [0 1 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 73
Size: 81
Percent parens: 0.099
--- Population Statistics ---
Average total errors in population: 6.691
Median total errors in population: 6
Error averages by case: (0.531 0.934 0.383 0.893 0.936 0.485 0.574 0.119 0.847 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.953
Average program size in population (points): 72.076
Average percent parens in population: 0.099
Minimum age in population: 56.70516994269565
Maximum age in population: 59.95712745300261
Average age in population: 58.6043418851872
Median age in population: 58.70994279932347
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.008
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 48984458
--- Timings ---
Current time: 1559314721658 milliseconds
Total Time:         152.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.0 seconds, 47.9%
Fitness Testing:     52.0 seconds, 34.1%
Report:              27.4 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 601
Test mean error for best: 0.60100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 1
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 1
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 59                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 60                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output:                    
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: 65                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -15                
Correct output: -91                 | Program output: -74                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: 11                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 54                 
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -1                 
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -9                 
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup boolean_swap exec_k (boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_rot) (integer_sub integer_sub integer_eq) boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty) boolean_invert_first_then_and boolean_eq in1) (integer_lte integer_pop in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 80
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup boolean_swap exec_k (boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_rot) (integer_sub integer_sub integer_eq) boolean_xor in3 boolean_xor exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq in3 integer_yankdup print_integer integer_max boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod boolean_invert_first_then_and boolean_invert_first_then_and boolean_empty) boolean_invert_first_then_and boolean_eq in1) (integer_lte integer_pop in1 exec_noop in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) boolean_dup))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 80
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 616 462 519 200 901 750 250 527 510)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (212 616 462 519 200 901 750 250 527 510)
Population mean number of perfect (error zero) cases: 4.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_172} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 55
Size: 61
Percent parens: 0.098
--- Population Statistics ---
Average total errors in population: 5.053
Median total errors in population: 5
Error averages by case: (0.788 0.384 0.538 0.481 0.8 0.099 0.25 0.75 0.473 0.49)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.805
Average program size in population (points): 72.367
Average percent parens in population: 0.105
Minimum age in population: 57.70516994269565
Maximum age in population: 61.64413807542587
Average age in population: 59.88287745267691
Median age in population: 59.90904114177101
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.011
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 50592941
--- Timings ---
Current time: 1559314726024 milliseconds
Total Time:         156.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.0 seconds, 47.8%
Fitness Testing:     53.6 seconds, 34.1%
Report:              28.3 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 38
Successful program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 61


Auto-simplifying with starting size: 61
step: 0
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 500
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 1000
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 1500
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 2000
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 2500
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 3000
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 3500
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 4000
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 4500
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 5000
program: (in2 exec_do*while () boolean_empty integer_rot integer_yankdup in1 exec_yankdup exec_yankdup boolean_swap boolean_yankdup boolean_xor boolean_swap boolean_yankdup in4 integer_yankdup integer_stackdepth integer_sub integer_eq exec_yankdup exec_yankdup integer_eq boolean_xor in3 in3 exec_yankdup integer_inc integer_inc in2 integer_yankdup integer_eq boolean_xor in3 integer_yankdup print_integer integer_stackdepth boolean_eq in4 exec_y (exec_k_when_autoconstructing (tagged_172 integer_empty exec_noop tagged_172 integer_empty exec_shove (integer_mod in1 exec_noop) in2 in2 boolean_pop integer_stackdepth integer_rot boolean_flush) (boolean_dup)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 601
Test mean error for best: 0.60100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 1
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 1
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 89                 
Correct output: -14                 | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -93                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -56                
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 47                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 29                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 27                 
Correct output: 39                  | Program output: 59                 
Correct output: 46                  | Program output: 99                 
Correct output: 4                   | Program output: 60                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 85                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 31                 
Correct output: 27                  | Program output: 50                 
Correct output: 47                  | Program output: 53                 
Correct output: 14                  | Program output: 17                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: 85                 
Correct output: -84                 | Program output: -71                
Correct output: -70                 | Program output: 59                 
Correct output: -90                 | Program output: 0                  
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -21                
Correct output: -27                 | Program output: 9                  
Correct output: -70                 | Program output: -13                
Correct output: 30                  | Program output:                    
Correct output: -75                 | Program output: 88                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -54                
Correct output: -90                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -47                 | Program output: -16                
Correct output: -1                  | Program output: 65                 
Correct output: -92                 | Program output: -75                
Correct output: -43                 | Program output: -4                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 41                 
Correct output: -81                 | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -15                
Correct output: -91                 | Program output: -74                
Correct output: -81                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: 52                  | Program output: 53                 
Correct output: -79                 | Program output: 89                 
Correct output: -76                 | Program output: 11                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 54                 
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 22                  | Program output: 22                 
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 22                 
Correct output: -81                 | Program output: -29                
Correct output: -64                 | Program output: -1                 
Correct output: -82                 | Program output: -82                
Correct output: -4                  | Program output: -4                 
Correct output: -63                 | Program output: 11                 
Correct output: -55                 | Program output: 11                 
Correct output: -89                 | Program output: -9                 
Correct output: -86                 | Program output: -36                
Correct output: 14                  | Program output: 32                 
Correct output: -94                 | Program output: 10                 
Correct output: -61                 | Program output: 93                 
Correct output: -60                 | Program output: 0                  
Correct output: -54                 | Program output: 41                 
;;******************************
