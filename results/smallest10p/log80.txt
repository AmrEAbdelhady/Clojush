Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-50 -48 -50 -50] -50] [[41 41 -58 41] -58] [[40 54 40 40] 40] [[46 88 46 46] 46] [[76 18 76 76] 18] [[21 23 23 23] 21] [[68 68 -96 68] -96] [[6 57 6 6] 6] [[-97 61 61 61] -97] [[-78 -78 -78 78] -78] [(-34 -34 -34 -34) -34] [(75 75 75 75) 75] [(-37 -37 -37 -37) -37] [(-59 -59 -59 -59) -59] [(-82 -82 -82 -82) -82] [(51 21 81 73) 21] [(84 37 43 33) 33] [(4 68 11 42) 4] [(32 34 9 84) 9] [(61 91 3 0) 0] [(67 49 78 26) 26] [(12 18 1 29) 1] [(24 90 10 66) 10] [(65 19 2 15) 2] [(90 31 41 52) 31] [(38 13 50 76) 13] [(43 95 89 18) 18] [(72 72 48 23) 23] [(34 80 48 99) 34] [(89 45 68 18) 18] [(59 40 23 100) 23] [(60 0 67 97) 0] [(49 69 91 54) 49] [(92 62 88 38) 38] [(45 97 26 58) 26] [(-69 91 0 -54) -69] [(-39 -48 -90 78) -90] [(-72 39 -2 14) -72] [(51 -41 -13 -93) -93] [(2 -55 -88 4) -88] [(-35 -34 -86 77) -86] [(-7 30 -86 53) -86] [(32 -52 -21 -46) -52] [(69 -30 24 29) -30] [(12 -81 84 -94) -94] [(81 -53 94 11) -53] [(56 35 32 5) 5] [(16 -8 6 6) -8] [(-1 39 12 81) -1] [(-56 44 -62 22) -62] [(-46 -57 55 -26) -57] [(71 -52 -82 -45) -82] [(-86 -71 6 -30) -86] [(95 -1 -55 -29) -55] [(56 -11 68 67) -11] [(39 46 48 42) 39] [(13 -31 -46 80) -46] [(25 18 -20 -76) -76] [(-53 -10 -51 -22) -53] [(4 -86 -100 -67) -100] [(80 42 -27 -89) -89] [(-55 62 -56 -31) -56] [(71 95 45 9) 9] [(14 85 -33 -76) -76] [(73 -24 -42 83) -42] [(-37 -100 -89 -56) -100] [(-27 -15 0 93) -27] [(25 51 31 -32) -32] [(1 -83 -20 22) -83] [(-98 -37 -75 14) -98] [(95 -41 -37 44) -41] [(-66 56 -32 -32) -66] [(-3 60 -55 -1) -55] [(85 3 43 -26) -26] [(81 -91 -94 -59) -94] [(35 -42 -58 -66) -66] [(-55 56 -47 20) -55] [(100 -66 38 -19) -66] [(-24 34 -19 -54) -54] [(-16 63 55 34) -16] [(-28 1 4 -38) -38] [(41 75 43 12) 12] [(-80 21 24 82) -80] [(56 -60 -75 -76) -76] [(25 34 -9 85) -9] [(-20 -61 56 63) -61] [(-78 15 62 97) -78] [(15 -17 63 -86) -86] [(28 26 76 42) 26] [(73 28 8 -11) -11] [(-97 42 55 -68) -97] [(57 -23 56 63) -23] [(57 77 99 -96) -96] [(-13 34 -85 1) -85] [(18 54 5 19) 5])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-50 -48 -50 -50] -50]
Train Case:   6 | Input/Output: [[41 41 -58 41] -58]
Train Case:   7 | Input/Output: [[40 54 40 40] 40]
Train Case:   8 | Input/Output: [[46 88 46 46] 46]
Train Case:   9 | Input/Output: [[76 18 76 76] 18]
Train Case:  10 | Input/Output: [[21 23 23 23] 21]
Train Case:  11 | Input/Output: [[68 68 -96 68] -96]
Train Case:  12 | Input/Output: [[6 57 6 6] 6]
Train Case:  13 | Input/Output: [[-97 61 61 61] -97]
Train Case:  14 | Input/Output: [[-78 -78 -78 78] -78]
Train Case:  15 | Input/Output: [(-34 -34 -34 -34) -34]
Train Case:  16 | Input/Output: [(75 75 75 75) 75]
Train Case:  17 | Input/Output: [(-37 -37 -37 -37) -37]
Train Case:  18 | Input/Output: [(-59 -59 -59 -59) -59]
Train Case:  19 | Input/Output: [(-82 -82 -82 -82) -82]
Train Case:  20 | Input/Output: [(51 21 81 73) 21]
Train Case:  21 | Input/Output: [(84 37 43 33) 33]
Train Case:  22 | Input/Output: [(4 68 11 42) 4]
Train Case:  23 | Input/Output: [(32 34 9 84) 9]
Train Case:  24 | Input/Output: [(61 91 3 0) 0]
Train Case:  25 | Input/Output: [(67 49 78 26) 26]
Train Case:  26 | Input/Output: [(12 18 1 29) 1]
Train Case:  27 | Input/Output: [(24 90 10 66) 10]
Train Case:  28 | Input/Output: [(65 19 2 15) 2]
Train Case:  29 | Input/Output: [(90 31 41 52) 31]
Train Case:  30 | Input/Output: [(38 13 50 76) 13]
Train Case:  31 | Input/Output: [(43 95 89 18) 18]
Train Case:  32 | Input/Output: [(72 72 48 23) 23]
Train Case:  33 | Input/Output: [(34 80 48 99) 34]
Train Case:  34 | Input/Output: [(89 45 68 18) 18]
Train Case:  35 | Input/Output: [(59 40 23 100) 23]
Train Case:  36 | Input/Output: [(60 0 67 97) 0]
Train Case:  37 | Input/Output: [(49 69 91 54) 49]
Train Case:  38 | Input/Output: [(92 62 88 38) 38]
Train Case:  39 | Input/Output: [(45 97 26 58) 26]
Train Case:  40 | Input/Output: [(-69 91 0 -54) -69]
Train Case:  41 | Input/Output: [(-39 -48 -90 78) -90]
Train Case:  42 | Input/Output: [(-72 39 -2 14) -72]
Train Case:  43 | Input/Output: [(51 -41 -13 -93) -93]
Train Case:  44 | Input/Output: [(2 -55 -88 4) -88]
Train Case:  45 | Input/Output: [(-35 -34 -86 77) -86]
Train Case:  46 | Input/Output: [(-7 30 -86 53) -86]
Train Case:  47 | Input/Output: [(32 -52 -21 -46) -52]
Train Case:  48 | Input/Output: [(69 -30 24 29) -30]
Train Case:  49 | Input/Output: [(12 -81 84 -94) -94]
Train Case:  50 | Input/Output: [(81 -53 94 11) -53]
Train Case:  51 | Input/Output: [(56 35 32 5) 5]
Train Case:  52 | Input/Output: [(16 -8 6 6) -8]
Train Case:  53 | Input/Output: [(-1 39 12 81) -1]
Train Case:  54 | Input/Output: [(-56 44 -62 22) -62]
Train Case:  55 | Input/Output: [(-46 -57 55 -26) -57]
Train Case:  56 | Input/Output: [(71 -52 -82 -45) -82]
Train Case:  57 | Input/Output: [(-86 -71 6 -30) -86]
Train Case:  58 | Input/Output: [(95 -1 -55 -29) -55]
Train Case:  59 | Input/Output: [(56 -11 68 67) -11]
Train Case:  60 | Input/Output: [(39 46 48 42) 39]
Train Case:  61 | Input/Output: [(13 -31 -46 80) -46]
Train Case:  62 | Input/Output: [(25 18 -20 -76) -76]
Train Case:  63 | Input/Output: [(-53 -10 -51 -22) -53]
Train Case:  64 | Input/Output: [(4 -86 -100 -67) -100]
Train Case:  65 | Input/Output: [(80 42 -27 -89) -89]
Train Case:  66 | Input/Output: [(-55 62 -56 -31) -56]
Train Case:  67 | Input/Output: [(71 95 45 9) 9]
Train Case:  68 | Input/Output: [(14 85 -33 -76) -76]
Train Case:  69 | Input/Output: [(73 -24 -42 83) -42]
Train Case:  70 | Input/Output: [(-37 -100 -89 -56) -100]
Train Case:  71 | Input/Output: [(-27 -15 0 93) -27]
Train Case:  72 | Input/Output: [(25 51 31 -32) -32]
Train Case:  73 | Input/Output: [(1 -83 -20 22) -83]
Train Case:  74 | Input/Output: [(-98 -37 -75 14) -98]
Train Case:  75 | Input/Output: [(95 -41 -37 44) -41]
Train Case:  76 | Input/Output: [(-66 56 -32 -32) -66]
Train Case:  77 | Input/Output: [(-3 60 -55 -1) -55]
Train Case:  78 | Input/Output: [(85 3 43 -26) -26]
Train Case:  79 | Input/Output: [(81 -91 -94 -59) -94]
Train Case:  80 | Input/Output: [(35 -42 -58 -66) -66]
Train Case:  81 | Input/Output: [(-55 56 -47 20) -55]
Train Case:  82 | Input/Output: [(100 -66 38 -19) -66]
Train Case:  83 | Input/Output: [(-24 34 -19 -54) -54]
Train Case:  84 | Input/Output: [(-16 63 55 34) -16]
Train Case:  85 | Input/Output: [(-28 1 4 -38) -38]
Train Case:  86 | Input/Output: [(41 75 43 12) 12]
Train Case:  87 | Input/Output: [(-80 21 24 82) -80]
Train Case:  88 | Input/Output: [(56 -60 -75 -76) -76]
Train Case:  89 | Input/Output: [(25 34 -9 85) -9]
Train Case:  90 | Input/Output: [(-20 -61 56 63) -61]
Train Case:  91 | Input/Output: [(-78 15 62 97) -78]
Train Case:  92 | Input/Output: [(15 -17 63 -86) -86]
Train Case:  93 | Input/Output: [(28 26 76 42) 26]
Train Case:  94 | Input/Output: [(73 28 8 -11) -11]
Train Case:  95 | Input/Output: [(-97 42 55 -68) -97]
Train Case:  96 | Input/Output: [(57 -23 56 63) -23]
Train Case:  97 | Input/Output: [(57 77 99 -96) -96]
Train Case:  98 | Input/Output: [(-13 34 -85 1) -85]
Train Case:  99 | Input/Output: [(18 54 5 19) 5]
Test Case:   0 | Input/Output: [[23 23 23 -32] -32]
Test Case:   1 | Input/Output: [[-27 -7 -7 -7] -27]
Test Case:   2 | Input/Output: [[0 0 0 93] 0]
Test Case:   3 | Input/Output: [[-94 -76 -94 -94] -94]
Test Case:   4 | Input/Output: [[91 91 59 91] 59]
Test Case:   5 | Input/Output: [[-83 17 -83 -83] -83]
Test Case:   6 | Input/Output: [[89 81 81 81] 81]
Test Case:   7 | Input/Output: [[-89 11 -89 -89] -89]
Test Case:   8 | Input/Output: [[-89 -89 51 -89] -89]
Test Case:   9 | Input/Output: [[52 52 52 0] 0]
Test Case:  10 | Input/Output: [[-47 -47 -8 -47] -47]
Test Case:  11 | Input/Output: [[52 52 52 -65] -65]
Test Case:  12 | Input/Output: [[-55 -36 -55 -55] -55]
Test Case:  13 | Input/Output: [[-16 -16 -16 27] -16]
Test Case:  14 | Input/Output: [[-54 68 68 68] -54]
Test Case:  15 | Input/Output: [[-86 -86 -86 -54] -86]
Test Case:  16 | Input/Output: [[65 37 65 65] 37]
Test Case:  17 | Input/Output: [[72 71 71 71] 71]
Test Case:  18 | Input/Output: [[47 -54 47 47] -54]
Test Case:  19 | Input/Output: [[85 53 85 85] 53]
Test Case:  20 | Input/Output: [[100 100 100 -12] -12]
Test Case:  21 | Input/Output: [[-45 -45 -45 37] -45]
Test Case:  22 | Input/Output: [[91 91 91 -69] -69]
Test Case:  23 | Input/Output: [[1 1 -73 1] -73]
Test Case:  24 | Input/Output: [[53 53 44 53] 44]
Test Case:  25 | Input/Output: [[-87 -87 -87 -83] -87]
Test Case:  26 | Input/Output: [[8 8 94 8] 8]
Test Case:  27 | Input/Output: [[14 3 3 3] 3]
Test Case:  28 | Input/Output: [[93 -41 -41 -41] -41]
Test Case:  29 | Input/Output: [[-40 -93 -93 -93] -93]
Test Case:  30 | Input/Output: [[-3 -33 -3 -3] -33]
Test Case:  31 | Input/Output: [[-15 -84 -84 -84] -84]
Test Case:  32 | Input/Output: [[-75 -44 -44 -44] -75]
Test Case:  33 | Input/Output: [[-68 -53 -53 -53] -68]
Test Case:  34 | Input/Output: [[20 20 66 20] 20]
Test Case:  35 | Input/Output: [[5 -2 5 5] -2]
Test Case:  36 | Input/Output: [[-97 -97 -97 -100] -100]
Test Case:  37 | Input/Output: [[2 2 2 31] 2]
Test Case:  38 | Input/Output: [[29 18 18 18] 18]
Test Case:  39 | Input/Output: [[-88 -1 -88 -88] -88]
Test Case:  40 | Input/Output: [[-4 45 -4 -4] -4]
Test Case:  41 | Input/Output: [[25 25 25 79] 25]
Test Case:  42 | Input/Output: [[-48 -48 -67 -48] -67]
Test Case:  43 | Input/Output: [[80 80 80 -58] -58]
Test Case:  44 | Input/Output: [[89 35 35 35] 35]
Test Case:  45 | Input/Output: [[-55 78 -55 -55] -55]
Test Case:  46 | Input/Output: [[-88 -88 -31 -88] -88]
Test Case:  47 | Input/Output: [[76 76 76 0] 0]
Test Case:  48 | Input/Output: [[39 39 39 0] 0]
Test Case:  49 | Input/Output: [[39 90 39 39] 39]
Test Case:  50 | Input/Output: [[98 98 98 -12] -12]
Test Case:  51 | Input/Output: [[5 -12 -12 -12] -12]
Test Case:  52 | Input/Output: [[-21 -21 -4 -21] -21]
Test Case:  53 | Input/Output: [[68 68 42 68] 42]
Test Case:  54 | Input/Output: [[-57 92 -57 -57] -57]
Test Case:  55 | Input/Output: [[68 68 -75 68] -75]
Test Case:  56 | Input/Output: [[7 7 7 77] 7]
Test Case:  57 | Input/Output: [[-28 -28 -28 98] -28]
Test Case:  58 | Input/Output: [[80 24 80 80] 24]
Test Case:  59 | Input/Output: [[26 64 64 64] 26]
Test Case:  60 | Input/Output: [[-3 -90 -90 -90] -90]
Test Case:  61 | Input/Output: [[32 32 4 32] 4]
Test Case:  62 | Input/Output: [[-59 -59 51 -59] -59]
Test Case:  63 | Input/Output: [[36 -20 36 36] -20]
Test Case:  64 | Input/Output: [[-28 -28 -28 -2] -28]
Test Case:  65 | Input/Output: [[-54 -81 -54 -54] -81]
Test Case:  66 | Input/Output: [[-38 -38 -38 -24] -38]
Test Case:  67 | Input/Output: [[-29 -29 -29 -84] -84]
Test Case:  68 | Input/Output: [[-86 66 -86 -86] -86]
Test Case:  69 | Input/Output: [[-18 -18 30 -18] -18]
Test Case:  70 | Input/Output: [[-6 -27 -27 -27] -27]
Test Case:  71 | Input/Output: [[15 -70 -70 -70] -70]
Test Case:  72 | Input/Output: [[92 42 92 92] 42]
Test Case:  73 | Input/Output: [[99 99 -98 99] -98]
Test Case:  74 | Input/Output: [[41 83 83 83] 41]
Test Case:  75 | Input/Output: [[-88 -88 -88 -81] -88]
Test Case:  76 | Input/Output: [[-64 -64 37 -64] -64]
Test Case:  77 | Input/Output: [[44 44 44 7] 7]
Test Case:  78 | Input/Output: [[-13 -13 -76 -13] -76]
Test Case:  79 | Input/Output: [[33 -1 33 33] -1]
Test Case:  80 | Input/Output: [[-89 -75 -75 -75] -89]
Test Case:  81 | Input/Output: [[-57 -57 -57 80] -57]
Test Case:  82 | Input/Output: [[-40 72 72 72] -40]
Test Case:  83 | Input/Output: [[22 22 28 22] 22]
Test Case:  84 | Input/Output: [[-48 -48 -2 -48] -48]
Test Case:  85 | Input/Output: [[29 -15 -15 -15] -15]
Test Case:  86 | Input/Output: [[-77 -77 -77 -47] -77]
Test Case:  87 | Input/Output: [[-74 99 -74 -74] -74]
Test Case:  88 | Input/Output: [[30 30 0 30] 0]
Test Case:  89 | Input/Output: [[26 98 98 98] 26]
Test Case:  90 | Input/Output: [[87 -96 87 87] -96]
Test Case:  91 | Input/Output: [[-55 -55 99 -55] -55]
Test Case:  92 | Input/Output: [[93 93 93 -63] -63]
Test Case:  93 | Input/Output: [[85 70 85 85] 70]
Test Case:  94 | Input/Output: [[-4 -4 -4 38] -4]
Test Case:  95 | Input/Output: [[89 -6 -6 -6] -6]
Test Case:  96 | Input/Output: [[-55 -55 98 -55] -55]
Test Case:  97 | Input/Output: [[82 -72 -72 -72] -72]
Test Case:  98 | Input/Output: [[-40 -40 85 -40] -40]
Test Case:  99 | Input/Output: [[-93 -93 -93 55] -93]
Test Case: 100 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 101 | Input/Output: [(14 14 14 14) 14]
Test Case: 102 | Input/Output: [(17 17 17 17) 17]
Test Case: 103 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 104 | Input/Output: [(66 66 66 66) 66]
Test Case: 105 | Input/Output: [(58 58 58 58) 58]
Test Case: 106 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 107 | Input/Output: [(36 36 36 36) 36]
Test Case: 108 | Input/Output: [(75 75 75 75) 75]
Test Case: 109 | Input/Output: [(66 66 66 66) 66]
Test Case: 110 | Input/Output: [(57 57 57 57) 57]
Test Case: 111 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 112 | Input/Output: [(60 60 60 60) 60]
Test Case: 113 | Input/Output: [(55 55 55 55) 55]
Test Case: 114 | Input/Output: [(62 62 62 62) 62]
Test Case: 115 | Input/Output: [(42 42 42 42) 42]
Test Case: 116 | Input/Output: [(88 88 88 88) 88]
Test Case: 117 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 118 | Input/Output: [(19 19 19 19) 19]
Test Case: 119 | Input/Output: [(77 77 77 77) 77]
Test Case: 120 | Input/Output: [(12 12 12 12) 12]
Test Case: 121 | Input/Output: [(46 46 46 46) 46]
Test Case: 122 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 123 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 124 | Input/Output: [(72 72 72 72) 72]
Test Case: 125 | Input/Output: [(38 38 38 38) 38]
Test Case: 126 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 127 | Input/Output: [(12 12 12 12) 12]
Test Case: 128 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 129 | Input/Output: [(54 54 54 54) 54]
Test Case: 130 | Input/Output: [(66 66 66 66) 66]
Test Case: 131 | Input/Output: [(78 78 78 78) 78]
Test Case: 132 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 133 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 134 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 135 | Input/Output: [(61 61 61 61) 61]
Test Case: 136 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 137 | Input/Output: [(24 24 24 24) 24]
Test Case: 138 | Input/Output: [(14 14 14 14) 14]
Test Case: 139 | Input/Output: [(83 83 83 83) 83]
Test Case: 140 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 141 | Input/Output: [(78 78 78 78) 78]
Test Case: 142 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 143 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 144 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 145 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 146 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 147 | Input/Output: [(85 85 85 85) 85]
Test Case: 148 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 149 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 150 | Input/Output: [(73 73 73 73) 73]
Test Case: 151 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 152 | Input/Output: [(40 40 40 40) 40]
Test Case: 153 | Input/Output: [(36 36 36 36) 36]
Test Case: 154 | Input/Output: [(33 33 33 33) 33]
Test Case: 155 | Input/Output: [(73 73 73 73) 73]
Test Case: 156 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 157 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 158 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 159 | Input/Output: [(95 95 95 95) 95]
Test Case: 160 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 161 | Input/Output: [(8 8 8 8) 8]
Test Case: 162 | Input/Output: [(23 23 23 23) 23]
Test Case: 163 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 164 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 165 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 166 | Input/Output: [(90 90 90 90) 90]
Test Case: 167 | Input/Output: [(18 18 18 18) 18]
Test Case: 168 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 169 | Input/Output: [(23 23 23 23) 23]
Test Case: 170 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 171 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 172 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 173 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 174 | Input/Output: [(12 12 12 12) 12]
Test Case: 175 | Input/Output: [(59 59 59 59) 59]
Test Case: 176 | Input/Output: [(9 9 9 9) 9]
Test Case: 177 | Input/Output: [(42 42 42 42) 42]
Test Case: 178 | Input/Output: [(85 85 85 85) 85]
Test Case: 179 | Input/Output: [(44 44 44 44) 44]
Test Case: 180 | Input/Output: [(88 88 88 88) 88]
Test Case: 181 | Input/Output: [(83 83 83 83) 83]
Test Case: 182 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 183 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 184 | Input/Output: [(92 92 92 92) 92]
Test Case: 185 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 186 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 187 | Input/Output: [(9 9 9 9) 9]
Test Case: 188 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 189 | Input/Output: [(91 91 91 91) 91]
Test Case: 190 | Input/Output: [(14 14 14 14) 14]
Test Case: 191 | Input/Output: [(69 69 69 69) 69]
Test Case: 192 | Input/Output: [(89 89 89 89) 89]
Test Case: 193 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 194 | Input/Output: [(71 71 71 71) 71]
Test Case: 195 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 196 | Input/Output: [(49 49 49 49) 49]
Test Case: 197 | Input/Output: [(0 0 0 0) 0]
Test Case: 198 | Input/Output: [(1 1 1 1) 1]
Test Case: 199 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 200 | Input/Output: [(60 100 51 64) 51]
Test Case: 201 | Input/Output: [(71 88 94 83) 71]
Test Case: 202 | Input/Output: [(90 8 5 67) 5]
Test Case: 203 | Input/Output: [(13 97 77 27) 13]
Test Case: 204 | Input/Output: [(45 54 3 15) 3]
Test Case: 205 | Input/Output: [(16 79 49 77) 16]
Test Case: 206 | Input/Output: [(46 86 80 24) 24]
Test Case: 207 | Input/Output: [(91 25 98 53) 25]
Test Case: 208 | Input/Output: [(26 31 17 30) 17]
Test Case: 209 | Input/Output: [(38 54 81 91) 38]
Test Case: 210 | Input/Output: [(77 71 90 44) 44]
Test Case: 211 | Input/Output: [(21 28 19 99) 19]
Test Case: 212 | Input/Output: [(28 39 96 15) 15]
Test Case: 213 | Input/Output: [(43 36 22 63) 22]
Test Case: 214 | Input/Output: [(51 10 94 51) 10]
Test Case: 215 | Input/Output: [(62 75 52 52) 52]
Test Case: 216 | Input/Output: [(7 58 88 75) 7]
Test Case: 217 | Input/Output: [(90 17 72 53) 17]
Test Case: 218 | Input/Output: [(83 80 60 79) 60]
Test Case: 219 | Input/Output: [(2 67 3 3) 2]
Test Case: 220 | Input/Output: [(12 58 87 75) 12]
Test Case: 221 | Input/Output: [(74 64 28 2) 2]
Test Case: 222 | Input/Output: [(80 75 40 99) 40]
Test Case: 223 | Input/Output: [(19 21 78 31) 19]
Test Case: 224 | Input/Output: [(87 80 69 40) 40]
Test Case: 225 | Input/Output: [(17 79 14 55) 14]
Test Case: 226 | Input/Output: [(31 25 34 82) 25]
Test Case: 227 | Input/Output: [(0 71 4 33) 0]
Test Case: 228 | Input/Output: [(88 1 15 24) 1]
Test Case: 229 | Input/Output: [(79 35 85 63) 35]
Test Case: 230 | Input/Output: [(88 34 84 2) 2]
Test Case: 231 | Input/Output: [(99 52 62 83) 52]
Test Case: 232 | Input/Output: [(2 22 18 96) 2]
Test Case: 233 | Input/Output: [(95 69 49 3) 3]
Test Case: 234 | Input/Output: [(41 42 72 90) 41]
Test Case: 235 | Input/Output: [(53 98 11 48) 11]
Test Case: 236 | Input/Output: [(58 6 67 82) 6]
Test Case: 237 | Input/Output: [(1 71 83 83) 1]
Test Case: 238 | Input/Output: [(4 6 22 18) 4]
Test Case: 239 | Input/Output: [(67 36 13 76) 13]
Test Case: 240 | Input/Output: [(21 65 22 43) 21]
Test Case: 241 | Input/Output: [(68 94 59 78) 59]
Test Case: 242 | Input/Output: [(0 45 58 51) 0]
Test Case: 243 | Input/Output: [(60 66 10 26) 10]
Test Case: 244 | Input/Output: [(47 52 56 58) 47]
Test Case: 245 | Input/Output: [(73 79 75 71) 71]
Test Case: 246 | Input/Output: [(93 33 70 65) 33]
Test Case: 247 | Input/Output: [(63 57 4 42) 4]
Test Case: 248 | Input/Output: [(32 99 35 16) 16]
Test Case: 249 | Input/Output: [(38 72 14 5) 5]
Test Case: 250 | Input/Output: [(58 100 72 18) 18]
Test Case: 251 | Input/Output: [(63 23 42 78) 23]
Test Case: 252 | Input/Output: [(69 13 99 73) 13]
Test Case: 253 | Input/Output: [(52 56 1 30) 1]
Test Case: 254 | Input/Output: [(56 33 42 40) 33]
Test Case: 255 | Input/Output: [(78 45 48 20) 20]
Test Case: 256 | Input/Output: [(8 15 59 53) 8]
Test Case: 257 | Input/Output: [(14 67 19 14) 14]
Test Case: 258 | Input/Output: [(100 71 73 83) 71]
Test Case: 259 | Input/Output: [(38 72 31 17) 17]
Test Case: 260 | Input/Output: [(95 3 79 76) 3]
Test Case: 261 | Input/Output: [(51 73 55 45) 45]
Test Case: 262 | Input/Output: [(100 83 95 88) 83]
Test Case: 263 | Input/Output: [(11 29 56 0) 0]
Test Case: 264 | Input/Output: [(99 20 79 76) 20]
Test Case: 265 | Input/Output: [(27 45 58 70) 27]
Test Case: 266 | Input/Output: [(54 50 88 69) 50]
Test Case: 267 | Input/Output: [(16 42 55 89) 16]
Test Case: 268 | Input/Output: [(53 91 82 35) 35]
Test Case: 269 | Input/Output: [(89 28 71 0) 0]
Test Case: 270 | Input/Output: [(9 25 66 95) 9]
Test Case: 271 | Input/Output: [(19 74 6 79) 6]
Test Case: 272 | Input/Output: [(47 19 10 81) 10]
Test Case: 273 | Input/Output: [(6 62 47 41) 6]
Test Case: 274 | Input/Output: [(11 70 54 71) 11]
Test Case: 275 | Input/Output: [(14 86 36 67) 14]
Test Case: 276 | Input/Output: [(53 62 79 7) 7]
Test Case: 277 | Input/Output: [(21 69 42 82) 21]
Test Case: 278 | Input/Output: [(41 26 39 100) 26]
Test Case: 279 | Input/Output: [(13 81 51 43) 13]
Test Case: 280 | Input/Output: [(91 5 46 44) 5]
Test Case: 281 | Input/Output: [(10 31 88 31) 10]
Test Case: 282 | Input/Output: [(73 19 4 49) 4]
Test Case: 283 | Input/Output: [(39 69 92 11) 11]
Test Case: 284 | Input/Output: [(86 95 4 37) 4]
Test Case: 285 | Input/Output: [(94 28 9 11) 9]
Test Case: 286 | Input/Output: [(37 40 27 54) 27]
Test Case: 287 | Input/Output: [(89 100 82 67) 67]
Test Case: 288 | Input/Output: [(33 99 18 23) 18]
Test Case: 289 | Input/Output: [(36 64 26 95) 26]
Test Case: 290 | Input/Output: [(50 8 35 48) 8]
Test Case: 291 | Input/Output: [(38 49 87 61) 38]
Test Case: 292 | Input/Output: [(49 59 28 46) 28]
Test Case: 293 | Input/Output: [(81 11 98 24) 11]
Test Case: 294 | Input/Output: [(40 19 1 88) 1]
Test Case: 295 | Input/Output: [(60 46 95 33) 33]
Test Case: 296 | Input/Output: [(44 72 49 14) 14]
Test Case: 297 | Input/Output: [(19 68 39 49) 19]
Test Case: 298 | Input/Output: [(72 5 66 3) 3]
Test Case: 299 | Input/Output: [(79 92 36 29) 29]
Test Case: 300 | Input/Output: [(86 67 84 19) 19]
Test Case: 301 | Input/Output: [(22 78 72 69) 22]
Test Case: 302 | Input/Output: [(17 39 21 48) 17]
Test Case: 303 | Input/Output: [(87 4 2 17) 2]
Test Case: 304 | Input/Output: [(13 76 53 9) 9]
Test Case: 305 | Input/Output: [(38 41 80 91) 38]
Test Case: 306 | Input/Output: [(80 86 28 68) 28]
Test Case: 307 | Input/Output: [(46 32 34 26) 26]
Test Case: 308 | Input/Output: [(73 26 98 14) 14]
Test Case: 309 | Input/Output: [(99 14 64 64) 14]
Test Case: 310 | Input/Output: [(56 79 79 44) 44]
Test Case: 311 | Input/Output: [(9 43 95 29) 9]
Test Case: 312 | Input/Output: [(43 92 60 47) 43]
Test Case: 313 | Input/Output: [(56 37 88 56) 37]
Test Case: 314 | Input/Output: [(81 36 90 97) 36]
Test Case: 315 | Input/Output: [(83 5 66 90) 5]
Test Case: 316 | Input/Output: [(58 24 64 50) 24]
Test Case: 317 | Input/Output: [(34 99 95 54) 34]
Test Case: 318 | Input/Output: [(44 38 74 14) 14]
Test Case: 319 | Input/Output: [(66 34 90 53) 34]
Test Case: 320 | Input/Output: [(86 41 5 24) 5]
Test Case: 321 | Input/Output: [(95 10 57 30) 10]
Test Case: 322 | Input/Output: [(94 38 73 65) 38]
Test Case: 323 | Input/Output: [(2 79 47 60) 2]
Test Case: 324 | Input/Output: [(89 10 93 86) 10]
Test Case: 325 | Input/Output: [(75 32 46 50) 32]
Test Case: 326 | Input/Output: [(14 68 38 34) 14]
Test Case: 327 | Input/Output: [(4 21 93 15) 4]
Test Case: 328 | Input/Output: [(65 98 36 25) 25]
Test Case: 329 | Input/Output: [(86 19 49 77) 19]
Test Case: 330 | Input/Output: [(74 88 78 24) 24]
Test Case: 331 | Input/Output: [(75 31 60 59) 31]
Test Case: 332 | Input/Output: [(92 77 15 68) 15]
Test Case: 333 | Input/Output: [(48 21 4 82) 4]
Test Case: 334 | Input/Output: [(47 16 82 85) 16]
Test Case: 335 | Input/Output: [(44 16 55 63) 16]
Test Case: 336 | Input/Output: [(23 6 7 98) 6]
Test Case: 337 | Input/Output: [(48 76 71 12) 12]
Test Case: 338 | Input/Output: [(20 17 34 6) 6]
Test Case: 339 | Input/Output: [(15 50 63 55) 15]
Test Case: 340 | Input/Output: [(2 49 78 100) 2]
Test Case: 341 | Input/Output: [(89 53 89 75) 53]
Test Case: 342 | Input/Output: [(61 74 95 24) 24]
Test Case: 343 | Input/Output: [(43 55 64 24) 24]
Test Case: 344 | Input/Output: [(26 36 74 87) 26]
Test Case: 345 | Input/Output: [(29 25 50 31) 25]
Test Case: 346 | Input/Output: [(17 100 58 45) 17]
Test Case: 347 | Input/Output: [(79 9 76 51) 9]
Test Case: 348 | Input/Output: [(89 71 43 8) 8]
Test Case: 349 | Input/Output: [(40 67 60 42) 40]
Test Case: 350 | Input/Output: [(97 42 3 16) 3]
Test Case: 351 | Input/Output: [(24 57 13 70) 13]
Test Case: 352 | Input/Output: [(100 82 11 36) 11]
Test Case: 353 | Input/Output: [(97 80 61 88) 61]
Test Case: 354 | Input/Output: [(52 30 21 38) 21]
Test Case: 355 | Input/Output: [(45 99 99 91) 45]
Test Case: 356 | Input/Output: [(39 21 31 20) 20]
Test Case: 357 | Input/Output: [(100 34 77 11) 11]
Test Case: 358 | Input/Output: [(3 36 15 88) 3]
Test Case: 359 | Input/Output: [(73 87 40 19) 19]
Test Case: 360 | Input/Output: [(11 24 73 84) 11]
Test Case: 361 | Input/Output: [(52 54 32 79) 32]
Test Case: 362 | Input/Output: [(27 9 95 44) 9]
Test Case: 363 | Input/Output: [(32 82 64 49) 32]
Test Case: 364 | Input/Output: [(35 8 37 20) 8]
Test Case: 365 | Input/Output: [(77 82 83 54) 54]
Test Case: 366 | Input/Output: [(76 77 28 15) 15]
Test Case: 367 | Input/Output: [(10 21 28 24) 10]
Test Case: 368 | Input/Output: [(91 82 38 81) 38]
Test Case: 369 | Input/Output: [(69 48 45 5) 5]
Test Case: 370 | Input/Output: [(81 79 52 55) 52]
Test Case: 371 | Input/Output: [(38 98 100 9) 9]
Test Case: 372 | Input/Output: [(29 49 9 6) 6]
Test Case: 373 | Input/Output: [(61 78 53 32) 32]
Test Case: 374 | Input/Output: [(98 24 59 30) 24]
Test Case: 375 | Input/Output: [(77 72 73 52) 52]
Test Case: 376 | Input/Output: [(16 86 26 78) 16]
Test Case: 377 | Input/Output: [(14 76 28 14) 14]
Test Case: 378 | Input/Output: [(90 32 6 56) 6]
Test Case: 379 | Input/Output: [(14 33 43 66) 14]
Test Case: 380 | Input/Output: [(99 61 16 89) 16]
Test Case: 381 | Input/Output: [(61 89 94 85) 61]
Test Case: 382 | Input/Output: [(5 24 77 10) 5]
Test Case: 383 | Input/Output: [(59 17 61 88) 17]
Test Case: 384 | Input/Output: [(18 39 16 38) 16]
Test Case: 385 | Input/Output: [(24 8 47 2) 2]
Test Case: 386 | Input/Output: [(73 68 49 24) 24]
Test Case: 387 | Input/Output: [(60 17 58 62) 17]
Test Case: 388 | Input/Output: [(73 27 13 97) 13]
Test Case: 389 | Input/Output: [(88 90 49 100) 49]
Test Case: 390 | Input/Output: [(18 58 13 16) 13]
Test Case: 391 | Input/Output: [(80 21 13 87) 13]
Test Case: 392 | Input/Output: [(100 40 18 30) 18]
Test Case: 393 | Input/Output: [(58 93 65 24) 24]
Test Case: 394 | Input/Output: [(22 39 5 59) 5]
Test Case: 395 | Input/Output: [(36 69 17 38) 17]
Test Case: 396 | Input/Output: [(46 71 29 90) 29]
Test Case: 397 | Input/Output: [(95 36 95 62) 36]
Test Case: 398 | Input/Output: [(68 23 4 54) 4]
Test Case: 399 | Input/Output: [(25 58 38 21) 21]
Test Case: 400 | Input/Output: [(-58 77 -49 25) -58]
Test Case: 401 | Input/Output: [(-59 -59 41 -21) -59]
Test Case: 402 | Input/Output: [(-93 74 0 98) -93]
Test Case: 403 | Input/Output: [(-76 72 45 -70) -76]
Test Case: 404 | Input/Output: [(28 -44 -72 1) -72]
Test Case: 405 | Input/Output: [(86 44 26 -30) -30]
Test Case: 406 | Input/Output: [(74 -11 72 -98) -98]
Test Case: 407 | Input/Output: [(-81 100 38 -16) -81]
Test Case: 408 | Input/Output: [(9 45 28 -8) -8]
Test Case: 409 | Input/Output: [(84 -10 57 81) -10]
Test Case: 410 | Input/Output: [(83 22 51 7) 7]
Test Case: 411 | Input/Output: [(-73 -23 -4 4) -73]
Test Case: 412 | Input/Output: [(-24 -7 4 46) -24]
Test Case: 413 | Input/Output: [(89 54 74 -67) -67]
Test Case: 414 | Input/Output: [(1 69 28 -87) -87]
Test Case: 415 | Input/Output: [(-39 -53 28 -94) -94]
Test Case: 416 | Input/Output: [(-44 67 -1 -79) -79]
Test Case: 417 | Input/Output: [(3 -28 61 -32) -32]
Test Case: 418 | Input/Output: [(31 69 -7 -13) -13]
Test Case: 419 | Input/Output: [(42 -87 -37 -42) -87]
Test Case: 420 | Input/Output: [(-34 94 -81 -92) -92]
Test Case: 421 | Input/Output: [(20 91 70 -28) -28]
Test Case: 422 | Input/Output: [(-42 55 6 88) -42]
Test Case: 423 | Input/Output: [(-99 61 -44 57) -99]
Test Case: 424 | Input/Output: [(7 -53 29 13) -53]
Test Case: 425 | Input/Output: [(87 -63 -86 73) -86]
Test Case: 426 | Input/Output: [(65 65 -34 -17) -34]
Test Case: 427 | Input/Output: [(-83 -4 12 18) -83]
Test Case: 428 | Input/Output: [(-8 -24 -82 -20) -82]
Test Case: 429 | Input/Output: [(4 91 -73 -17) -73]
Test Case: 430 | Input/Output: [(-25 -80 -22 33) -80]
Test Case: 431 | Input/Output: [(10 43 19 -62) -62]
Test Case: 432 | Input/Output: [(-72 11 44 50) -72]
Test Case: 433 | Input/Output: [(43 -99 -70 62) -99]
Test Case: 434 | Input/Output: [(37 99 -65 8) -65]
Test Case: 435 | Input/Output: [(-34 71 44 18) -34]
Test Case: 436 | Input/Output: [(18 -34 -46 76) -46]
Test Case: 437 | Input/Output: [(75 79 -26 26) -26]
Test Case: 438 | Input/Output: [(43 10 80 71) 10]
Test Case: 439 | Input/Output: [(23 -29 -100 47) -100]
Test Case: 440 | Input/Output: [(64 -3 80 16) -3]
Test Case: 441 | Input/Output: [(-17 -35 -52 -73) -73]
Test Case: 442 | Input/Output: [(54 -20 -81 -37) -81]
Test Case: 443 | Input/Output: [(71 -42 -89 75) -89]
Test Case: 444 | Input/Output: [(-55 28 -9 60) -55]
Test Case: 445 | Input/Output: [(-32 82 43 -87) -87]
Test Case: 446 | Input/Output: [(-82 -26 -18 -20) -82]
Test Case: 447 | Input/Output: [(-9 -85 90 73) -85]
Test Case: 448 | Input/Output: [(-59 91 -22 62) -59]
Test Case: 449 | Input/Output: [(73 7 7 73) 7]
Test Case: 450 | Input/Output: [(-79 -9 18 -53) -79]
Test Case: 451 | Input/Output: [(31 -30 -2 -13) -30]
Test Case: 452 | Input/Output: [(-92 1 43 -23) -92]
Test Case: 453 | Input/Output: [(42 23 73 -7) -7]
Test Case: 454 | Input/Output: [(12 -19 -83 -50) -83]
Test Case: 455 | Input/Output: [(69 42 62 -2) -2]
Test Case: 456 | Input/Output: [(92 -72 57 96) -72]
Test Case: 457 | Input/Output: [(12 11 34 -22) -22]
Test Case: 458 | Input/Output: [(-56 -35 -77 12) -77]
Test Case: 459 | Input/Output: [(-97 89 -70 -5) -97]
Test Case: 460 | Input/Output: [(-100 -79 -11 -69) -100]
Test Case: 461 | Input/Output: [(57 25 42 91) 25]
Test Case: 462 | Input/Output: [(76 -71 67 -6) -71]
Test Case: 463 | Input/Output: [(58 43 82 -2) -2]
Test Case: 464 | Input/Output: [(52 46 69 100) 46]
Test Case: 465 | Input/Output: [(48 -70 -38 38) -70]
Test Case: 466 | Input/Output: [(15 12 24 38) 12]
Test Case: 467 | Input/Output: [(45 19 61 68) 19]
Test Case: 468 | Input/Output: [(-51 94 73 -62) -62]
Test Case: 469 | Input/Output: [(43 78 95 -16) -16]
Test Case: 470 | Input/Output: [(79 -26 -75 91) -75]
Test Case: 471 | Input/Output: [(54 100 94 -52) -52]
Test Case: 472 | Input/Output: [(-34 92 54 73) -34]
Test Case: 473 | Input/Output: [(-55 99 -97 56) -97]
Test Case: 474 | Input/Output: [(-85 -63 -15 -40) -85]
Test Case: 475 | Input/Output: [(47 -25 -80 30) -80]
Test Case: 476 | Input/Output: [(-33 -93 -47 9) -93]
Test Case: 477 | Input/Output: [(52 65 5 53) 5]
Test Case: 478 | Input/Output: [(-85 -52 -64 -48) -85]
Test Case: 479 | Input/Output: [(86 -80 -30 -22) -80]
Test Case: 480 | Input/Output: [(-24 48 -18 -28) -28]
Test Case: 481 | Input/Output: [(39 -4 -32 49) -32]
Test Case: 482 | Input/Output: [(25 -30 50 -43) -43]
Test Case: 483 | Input/Output: [(91 84 21 44) 21]
Test Case: 484 | Input/Output: [(85 100 -56 -30) -56]
Test Case: 485 | Input/Output: [(32 63 4 -75) -75]
Test Case: 486 | Input/Output: [(-28 -43 38 -31) -43]
Test Case: 487 | Input/Output: [(-89 -37 -87 70) -89]
Test Case: 488 | Input/Output: [(4 -13 55 75) -13]
Test Case: 489 | Input/Output: [(33 46 74 -58) -58]
Test Case: 490 | Input/Output: [(-38 68 -61 -64) -64]
Test Case: 491 | Input/Output: [(62 45 -41 -99) -99]
Test Case: 492 | Input/Output: [(3 -53 -79 -53) -79]
Test Case: 493 | Input/Output: [(-60 3 -14 -74) -74]
Test Case: 494 | Input/Output: [(-20 78 17 25) -20]
Test Case: 495 | Input/Output: [(15 -16 -91 91) -91]
Test Case: 496 | Input/Output: [(-18 -37 -7 53) -37]
Test Case: 497 | Input/Output: [(-40 87 31 27) -40]
Test Case: 498 | Input/Output: [(-59 78 84 -69) -69]
Test Case: 499 | Input/Output: [(-17 74 32 66) -17]
Test Case: 500 | Input/Output: [(97 94 6 80) 6]
Test Case: 501 | Input/Output: [(12 -80 29 12) -80]
Test Case: 502 | Input/Output: [(-12 -8 -38 18) -38]
Test Case: 503 | Input/Output: [(44 74 99 -34) -34]
Test Case: 504 | Input/Output: [(-11 89 88 -70) -70]
Test Case: 505 | Input/Output: [(-21 -78 -2 -31) -78]
Test Case: 506 | Input/Output: [(-77 71 15 -5) -77]
Test Case: 507 | Input/Output: [(70 -5 -41 89) -41]
Test Case: 508 | Input/Output: [(89 -39 -98 42) -98]
Test Case: 509 | Input/Output: [(99 -89 14 -17) -89]
Test Case: 510 | Input/Output: [(-14 8 30 -15) -15]
Test Case: 511 | Input/Output: [(-12 -26 -68 -52) -68]
Test Case: 512 | Input/Output: [(-49 -6 49 -2) -49]
Test Case: 513 | Input/Output: [(51 81 91 76) 51]
Test Case: 514 | Input/Output: [(90 40 9 -52) -52]
Test Case: 515 | Input/Output: [(93 40 90 7) 7]
Test Case: 516 | Input/Output: [(48 65 83 57) 48]
Test Case: 517 | Input/Output: [(67 49 -69 100) -69]
Test Case: 518 | Input/Output: [(-60 49 -17 17) -60]
Test Case: 519 | Input/Output: [(67 67 17 7) 7]
Test Case: 520 | Input/Output: [(-58 47 46 -10) -58]
Test Case: 521 | Input/Output: [(88 -32 -54 -79) -79]
Test Case: 522 | Input/Output: [(9 0 -5 -90) -90]
Test Case: 523 | Input/Output: [(-37 1 72 79) -37]
Test Case: 524 | Input/Output: [(-6 95 -1 -31) -31]
Test Case: 525 | Input/Output: [(-57 95 -29 -18) -57]
Test Case: 526 | Input/Output: [(55 43 -97 -51) -97]
Test Case: 527 | Input/Output: [(-57 42 43 -29) -57]
Test Case: 528 | Input/Output: [(61 39 97 31) 31]
Test Case: 529 | Input/Output: [(26 -32 -16 -34) -34]
Test Case: 530 | Input/Output: [(50 -65 33 11) -65]
Test Case: 531 | Input/Output: [(-52 77 -34 -32) -52]
Test Case: 532 | Input/Output: [(-17 57 -48 -91) -91]
Test Case: 533 | Input/Output: [(70 -17 -56 28) -56]
Test Case: 534 | Input/Output: [(-34 -62 -74 90) -74]
Test Case: 535 | Input/Output: [(-94 -48 80 88) -94]
Test Case: 536 | Input/Output: [(99 92 48 84) 48]
Test Case: 537 | Input/Output: [(-52 65 -11 87) -52]
Test Case: 538 | Input/Output: [(-27 52 50 -80) -80]
Test Case: 539 | Input/Output: [(15 52 97 -58) -58]
Test Case: 540 | Input/Output: [(-39 -70 -8 -70) -70]
Test Case: 541 | Input/Output: [(-87 92 54 -39) -87]
Test Case: 542 | Input/Output: [(-37 46 35 98) -37]
Test Case: 543 | Input/Output: [(59 -17 -80 61) -80]
Test Case: 544 | Input/Output: [(50 41 -15 -63) -63]
Test Case: 545 | Input/Output: [(77 -86 -23 -1) -86]
Test Case: 546 | Input/Output: [(-14 -56 -42 -60) -60]
Test Case: 547 | Input/Output: [(40 -11 45 91) -11]
Test Case: 548 | Input/Output: [(91 -30 92 89) -30]
Test Case: 549 | Input/Output: [(-3 66 -54 26) -54]
Test Case: 550 | Input/Output: [(-28 -93 -71 -58) -93]
Test Case: 551 | Input/Output: [(-63 42 85 -73) -73]
Test Case: 552 | Input/Output: [(46 72 -34 -99) -99]
Test Case: 553 | Input/Output: [(-80 -61 27 -98) -98]
Test Case: 554 | Input/Output: [(-3 88 75 63) -3]
Test Case: 555 | Input/Output: [(-61 -86 56 -96) -96]
Test Case: 556 | Input/Output: [(6 -66 2 50) -66]
Test Case: 557 | Input/Output: [(8 2 -8 -76) -76]
Test Case: 558 | Input/Output: [(-47 85 -32 48) -47]
Test Case: 559 | Input/Output: [(-49 13 36 -1) -49]
Test Case: 560 | Input/Output: [(86 -93 -49 6) -93]
Test Case: 561 | Input/Output: [(53 -97 -90 30) -97]
Test Case: 562 | Input/Output: [(27 -37 -65 50) -65]
Test Case: 563 | Input/Output: [(67 -44 20 11) -44]
Test Case: 564 | Input/Output: [(-32 89 -53 2) -53]
Test Case: 565 | Input/Output: [(-43 -5 98 -90) -90]
Test Case: 566 | Input/Output: [(53 -9 15 54) -9]
Test Case: 567 | Input/Output: [(-30 -50 -21 -32) -50]
Test Case: 568 | Input/Output: [(-17 -55 35 67) -55]
Test Case: 569 | Input/Output: [(-87 -39 -88 95) -88]
Test Case: 570 | Input/Output: [(29 44 -55 -37) -55]
Test Case: 571 | Input/Output: [(-53 -92 70 -17) -92]
Test Case: 572 | Input/Output: [(-37 -14 27 46) -37]
Test Case: 573 | Input/Output: [(57 7 -2 79) -2]
Test Case: 574 | Input/Output: [(-63 -36 -17 59) -63]
Test Case: 575 | Input/Output: [(48 28 -66 24) -66]
Test Case: 576 | Input/Output: [(2 16 -10 -21) -21]
Test Case: 577 | Input/Output: [(8 -82 -64 -10) -82]
Test Case: 578 | Input/Output: [(81 -20 -58 45) -58]
Test Case: 579 | Input/Output: [(42 -82 43 53) -82]
Test Case: 580 | Input/Output: [(-8 -82 1 -66) -82]
Test Case: 581 | Input/Output: [(-80 7 62 -37) -80]
Test Case: 582 | Input/Output: [(35 -93 -47 -2) -93]
Test Case: 583 | Input/Output: [(-68 89 99 7) -68]
Test Case: 584 | Input/Output: [(10 -9 -3 -66) -66]
Test Case: 585 | Input/Output: [(-7 -18 28 19) -18]
Test Case: 586 | Input/Output: [(-20 -47 22 -3) -47]
Test Case: 587 | Input/Output: [(-40 93 -23 49) -40]
Test Case: 588 | Input/Output: [(-84 -1 58 87) -84]
Test Case: 589 | Input/Output: [(67 -39 86 -28) -39]
Test Case: 590 | Input/Output: [(65 -85 13 -60) -85]
Test Case: 591 | Input/Output: [(-90 29 -21 -33) -90]
Test Case: 592 | Input/Output: [(-51 -77 71 -79) -79]
Test Case: 593 | Input/Output: [(-37 1 19 -65) -65]
Test Case: 594 | Input/Output: [(-42 38 -23 76) -42]
Test Case: 595 | Input/Output: [(71 -68 -6 76) -68]
Test Case: 596 | Input/Output: [(-83 37 23 46) -83]
Test Case: 597 | Input/Output: [(-95 -38 -17 68) -95]
Test Case: 598 | Input/Output: [(38 -35 91 -41) -41]
Test Case: 599 | Input/Output: [(52 -100 21 -8) -100]
Test Case: 600 | Input/Output: [(-80 83 -38 -52) -80]
Test Case: 601 | Input/Output: [(98 12 -11 -28) -28]
Test Case: 602 | Input/Output: [(-66 13 -94 -14) -94]
Test Case: 603 | Input/Output: [(-34 22 0 73) -34]
Test Case: 604 | Input/Output: [(49 -85 72 58) -85]
Test Case: 605 | Input/Output: [(-45 34 -81 -72) -81]
Test Case: 606 | Input/Output: [(91 77 -11 -57) -57]
Test Case: 607 | Input/Output: [(27 54 -23 -19) -23]
Test Case: 608 | Input/Output: [(30 88 42 -92) -92]
Test Case: 609 | Input/Output: [(-72 85 -55 80) -72]
Test Case: 610 | Input/Output: [(67 -24 84 -3) -24]
Test Case: 611 | Input/Output: [(7 -51 -39 3) -51]
Test Case: 612 | Input/Output: [(40 9 53 -80) -80]
Test Case: 613 | Input/Output: [(12 -88 -57 -45) -88]
Test Case: 614 | Input/Output: [(12 31 -36 -31) -36]
Test Case: 615 | Input/Output: [(-77 84 -73 -55) -77]
Test Case: 616 | Input/Output: [(38 -80 85 -71) -80]
Test Case: 617 | Input/Output: [(-70 -70 -64 52) -70]
Test Case: 618 | Input/Output: [(36 40 -51 -7) -51]
Test Case: 619 | Input/Output: [(12 59 93 37) 12]
Test Case: 620 | Input/Output: [(-60 -28 59 -75) -75]
Test Case: 621 | Input/Output: [(30 12 -81 -23) -81]
Test Case: 622 | Input/Output: [(-62 -47 11 34) -62]
Test Case: 623 | Input/Output: [(73 -25 70 30) -25]
Test Case: 624 | Input/Output: [(-66 27 -24 94) -66]
Test Case: 625 | Input/Output: [(56 21 -94 -4) -94]
Test Case: 626 | Input/Output: [(58 -86 -19 53) -86]
Test Case: 627 | Input/Output: [(58 72 -13 69) -13]
Test Case: 628 | Input/Output: [(-91 54 40 65) -91]
Test Case: 629 | Input/Output: [(47 84 -10 -41) -41]
Test Case: 630 | Input/Output: [(-46 1 -43 -59) -59]
Test Case: 631 | Input/Output: [(23 42 -17 -26) -26]
Test Case: 632 | Input/Output: [(-38 90 4 -3) -38]
Test Case: 633 | Input/Output: [(-31 -65 -52 78) -65]
Test Case: 634 | Input/Output: [(-32 29 -20 -51) -51]
Test Case: 635 | Input/Output: [(-1 38 -55 13) -55]
Test Case: 636 | Input/Output: [(-3 36 50 -91) -91]
Test Case: 637 | Input/Output: [(8 11 -96 1) -96]
Test Case: 638 | Input/Output: [(35 38 96 -46) -46]
Test Case: 639 | Input/Output: [(-4 62 51 -72) -72]
Test Case: 640 | Input/Output: [(-16 -49 67 48) -49]
Test Case: 641 | Input/Output: [(-88 -66 -15 18) -88]
Test Case: 642 | Input/Output: [(-87 -21 -93 -65) -93]
Test Case: 643 | Input/Output: [(-100 -48 50 86) -100]
Test Case: 644 | Input/Output: [(-25 10 99 55) -25]
Test Case: 645 | Input/Output: [(-12 88 -37 -30) -37]
Test Case: 646 | Input/Output: [(38 36 87 -67) -67]
Test Case: 647 | Input/Output: [(3 -1 86 85) -1]
Test Case: 648 | Input/Output: [(44 13 33 34) 13]
Test Case: 649 | Input/Output: [(75 87 -43 12) -43]
Test Case: 650 | Input/Output: [(2 -11 63 -21) -21]
Test Case: 651 | Input/Output: [(-12 -86 57 -98) -98]
Test Case: 652 | Input/Output: [(0 -58 30 -44) -58]
Test Case: 653 | Input/Output: [(-6 -99 36 -50) -99]
Test Case: 654 | Input/Output: [(25 5 39 52) 5]
Test Case: 655 | Input/Output: [(-21 10 -2 64) -21]
Test Case: 656 | Input/Output: [(-90 -9 -58 100) -90]
Test Case: 657 | Input/Output: [(90 -90 -63 -81) -90]
Test Case: 658 | Input/Output: [(59 -94 -19 17) -94]
Test Case: 659 | Input/Output: [(-9 -35 15 -5) -35]
Test Case: 660 | Input/Output: [(-11 -83 96 39) -83]
Test Case: 661 | Input/Output: [(-93 -5 70 -60) -93]
Test Case: 662 | Input/Output: [(-17 -71 -79 -89) -89]
Test Case: 663 | Input/Output: [(-97 73 27 36) -97]
Test Case: 664 | Input/Output: [(-14 -29 45 74) -29]
Test Case: 665 | Input/Output: [(-3 -46 0 -69) -69]
Test Case: 666 | Input/Output: [(-33 76 -98 -27) -98]
Test Case: 667 | Input/Output: [(-79 41 -80 -41) -80]
Test Case: 668 | Input/Output: [(-62 -93 47 -5) -93]
Test Case: 669 | Input/Output: [(-95 85 23 -55) -95]
Test Case: 670 | Input/Output: [(-15 66 -14 -47) -47]
Test Case: 671 | Input/Output: [(16 72 -4 40) -4]
Test Case: 672 | Input/Output: [(93 -93 54 94) -93]
Test Case: 673 | Input/Output: [(-73 63 23 38) -73]
Test Case: 674 | Input/Output: [(52 -35 60 -36) -36]
Test Case: 675 | Input/Output: [(60 -35 92 -24) -35]
Test Case: 676 | Input/Output: [(-3 -88 -62 28) -88]
Test Case: 677 | Input/Output: [(65 -48 71 -17) -48]
Test Case: 678 | Input/Output: [(-100 92 41 18) -100]
Test Case: 679 | Input/Output: [(-13 -63 84 -43) -63]
Test Case: 680 | Input/Output: [(92 -82 5 -16) -82]
Test Case: 681 | Input/Output: [(-29 11 92 -99) -99]
Test Case: 682 | Input/Output: [(92 66 44 25) 25]
Test Case: 683 | Input/Output: [(-16 17 78 90) -16]
Test Case: 684 | Input/Output: [(45 3 71 92) 3]
Test Case: 685 | Input/Output: [(-49 62 38 42) -49]
Test Case: 686 | Input/Output: [(99 -39 -39 7) -39]
Test Case: 687 | Input/Output: [(54 -13 18 50) -13]
Test Case: 688 | Input/Output: [(37 6 -60 -50) -60]
Test Case: 689 | Input/Output: [(-12 99 45 -9) -12]
Test Case: 690 | Input/Output: [(85 -73 -46 -16) -73]
Test Case: 691 | Input/Output: [(94 -57 26 68) -57]
Test Case: 692 | Input/Output: [(-96 -72 52 85) -96]
Test Case: 693 | Input/Output: [(-66 -23 -48 100) -66]
Test Case: 694 | Input/Output: [(-62 -94 -47 77) -94]
Test Case: 695 | Input/Output: [(8 20 43 -97) -97]
Test Case: 696 | Input/Output: [(-68 94 -39 -62) -68]
Test Case: 697 | Input/Output: [(-76 -18 -92 -22) -92]
Test Case: 698 | Input/Output: [(21 33 12 -14) -14]
Test Case: 699 | Input/Output: [(-97 5 81 -45) -97]
Test Case: 700 | Input/Output: [(-34 5 -96 90) -96]
Test Case: 701 | Input/Output: [(-98 40 -54 24) -98]
Test Case: 702 | Input/Output: [(12 -11 43 51) -11]
Test Case: 703 | Input/Output: [(37 -71 59 -91) -91]
Test Case: 704 | Input/Output: [(64 28 8 76) 8]
Test Case: 705 | Input/Output: [(30 -63 46 -74) -74]
Test Case: 706 | Input/Output: [(-94 79 -1 20) -94]
Test Case: 707 | Input/Output: [(63 -53 -41 -34) -53]
Test Case: 708 | Input/Output: [(-66 -90 9 -82) -90]
Test Case: 709 | Input/Output: [(85 82 -56 -58) -58]
Test Case: 710 | Input/Output: [(-82 -43 50 -99) -99]
Test Case: 711 | Input/Output: [(14 14 70 -19) -19]
Test Case: 712 | Input/Output: [(-60 31 -55 -58) -60]
Test Case: 713 | Input/Output: [(-57 21 69 -70) -70]
Test Case: 714 | Input/Output: [(-24 83 72 -80) -80]
Test Case: 715 | Input/Output: [(-76 50 -64 88) -76]
Test Case: 716 | Input/Output: [(-70 57 -90 -11) -90]
Test Case: 717 | Input/Output: [(41 55 84 -86) -86]
Test Case: 718 | Input/Output: [(15 66 85 -58) -58]
Test Case: 719 | Input/Output: [(50 7 -67 31) -67]
Test Case: 720 | Input/Output: [(-24 -4 59 89) -24]
Test Case: 721 | Input/Output: [(7 5 50 -9) -9]
Test Case: 722 | Input/Output: [(-47 60 -56 83) -56]
Test Case: 723 | Input/Output: [(70 14 -49 49) -49]
Test Case: 724 | Input/Output: [(-39 -19 -85 59) -85]
Test Case: 725 | Input/Output: [(-78 50 15 61) -78]
Test Case: 726 | Input/Output: [(29 69 35 -46) -46]
Test Case: 727 | Input/Output: [(-80 -8 76 69) -80]
Test Case: 728 | Input/Output: [(84 -48 13 60) -48]
Test Case: 729 | Input/Output: [(2 80 56 51) 2]
Test Case: 730 | Input/Output: [(-35 5 -26 -1) -35]
Test Case: 731 | Input/Output: [(-37 -64 32 -84) -84]
Test Case: 732 | Input/Output: [(-95 -67 24 3) -95]
Test Case: 733 | Input/Output: [(-55 8 -67 -1) -67]
Test Case: 734 | Input/Output: [(-91 -36 -41 -51) -91]
Test Case: 735 | Input/Output: [(-63 -5 -94 34) -94]
Test Case: 736 | Input/Output: [(35 45 68 40) 35]
Test Case: 737 | Input/Output: [(-45 43 29 69) -45]
Test Case: 738 | Input/Output: [(37 -10 -59 -12) -59]
Test Case: 739 | Input/Output: [(82 -98 100 91) -98]
Test Case: 740 | Input/Output: [(-28 28 -19 11) -28]
Test Case: 741 | Input/Output: [(-64 -63 -7 87) -64]
Test Case: 742 | Input/Output: [(-94 -86 37 -90) -94]
Test Case: 743 | Input/Output: [(36 -36 52 -99) -99]
Test Case: 744 | Input/Output: [(-18 65 43 90) -18]
Test Case: 745 | Input/Output: [(-55 8 26 -11) -55]
Test Case: 746 | Input/Output: [(16 39 57 55) 16]
Test Case: 747 | Input/Output: [(-11 99 -21 19) -21]
Test Case: 748 | Input/Output: [(-91 -29 -58 24) -91]
Test Case: 749 | Input/Output: [(-23 -66 -25 47) -66]
Test Case: 750 | Input/Output: [(-27 76 -71 -27) -71]
Test Case: 751 | Input/Output: [(18 -23 -44 -46) -46]
Test Case: 752 | Input/Output: [(17 45 -92 43) -92]
Test Case: 753 | Input/Output: [(31 -31 -95 92) -95]
Test Case: 754 | Input/Output: [(39 90 -95 -23) -95]
Test Case: 755 | Input/Output: [(2 -3 56 -54) -54]
Test Case: 756 | Input/Output: [(-17 -37 73 88) -37]
Test Case: 757 | Input/Output: [(-50 3 84 86) -50]
Test Case: 758 | Input/Output: [(11 -42 61 69) -42]
Test Case: 759 | Input/Output: [(65 99 51 -81) -81]
Test Case: 760 | Input/Output: [(-29 -14 -21 26) -29]
Test Case: 761 | Input/Output: [(93 5 44 -19) -19]
Test Case: 762 | Input/Output: [(-39 20 -6 96) -39]
Test Case: 763 | Input/Output: [(-70 78 -26 70) -70]
Test Case: 764 | Input/Output: [(100 97 -12 95) -12]
Test Case: 765 | Input/Output: [(84 -5 -6 55) -6]
Test Case: 766 | Input/Output: [(-92 64 -65 -71) -92]
Test Case: 767 | Input/Output: [(36 5 -66 84) -66]
Test Case: 768 | Input/Output: [(86 82 20 -65) -65]
Test Case: 769 | Input/Output: [(-67 41 -15 27) -67]
Test Case: 770 | Input/Output: [(88 -61 -17 27) -61]
Test Case: 771 | Input/Output: [(15 19 18 -80) -80]
Test Case: 772 | Input/Output: [(-14 -85 19 79) -85]
Test Case: 773 | Input/Output: [(-71 -73 -15 -63) -73]
Test Case: 774 | Input/Output: [(-70 -84 -93 -64) -93]
Test Case: 775 | Input/Output: [(41 -5 -17 51) -17]
Test Case: 776 | Input/Output: [(42 77 46 -14) -14]
Test Case: 777 | Input/Output: [(90 -28 53 61) -28]
Test Case: 778 | Input/Output: [(87 13 -70 -10) -70]
Test Case: 779 | Input/Output: [(32 -94 -47 -39) -94]
Test Case: 780 | Input/Output: [(94 75 -32 16) -32]
Test Case: 781 | Input/Output: [(-64 14 42 -43) -64]
Test Case: 782 | Input/Output: [(50 -85 89 -59) -85]
Test Case: 783 | Input/Output: [(18 19 27 -59) -59]
Test Case: 784 | Input/Output: [(37 -94 82 42) -94]
Test Case: 785 | Input/Output: [(-12 -61 -85 88) -85]
Test Case: 786 | Input/Output: [(82 21 -86 79) -86]
Test Case: 787 | Input/Output: [(93 -94 18 -67) -94]
Test Case: 788 | Input/Output: [(-95 55 -70 34) -95]
Test Case: 789 | Input/Output: [(63 33 9 77) 9]
Test Case: 790 | Input/Output: [(-64 28 35 -49) -64]
Test Case: 791 | Input/Output: [(-73 99 19 86) -73]
Test Case: 792 | Input/Output: [(63 -59 -30 -29) -59]
Test Case: 793 | Input/Output: [(10 -18 -79 87) -79]
Test Case: 794 | Input/Output: [(-71 50 -99 18) -99]
Test Case: 795 | Input/Output: [(-6 -96 -30 91) -96]
Test Case: 796 | Input/Output: [(7 -81 39 69) -81]
Test Case: 797 | Input/Output: [(7 -14 -13 9) -14]
Test Case: 798 | Input/Output: [(1 -85 90 0) -85]
Test Case: 799 | Input/Output: [(88 -98 -9 -10) -98]
Test Case: 800 | Input/Output: [(33 78 27 -54) -54]
Test Case: 801 | Input/Output: [(9 45 -61 91) -61]
Test Case: 802 | Input/Output: [(40 -17 -90 -19) -90]
Test Case: 803 | Input/Output: [(85 8 97 -92) -92]
Test Case: 804 | Input/Output: [(-82 -75 -81 -28) -82]
Test Case: 805 | Input/Output: [(-40 94 -68 -41) -68]
Test Case: 806 | Input/Output: [(-5 97 -23 65) -23]
Test Case: 807 | Input/Output: [(32 9 -25 -38) -38]
Test Case: 808 | Input/Output: [(-20 -17 58 79) -20]
Test Case: 809 | Input/Output: [(93 83 26 -29) -29]
Test Case: 810 | Input/Output: [(-38 -58 27 71) -58]
Test Case: 811 | Input/Output: [(67 6 11 -40) -40]
Test Case: 812 | Input/Output: [(85 44 77 -52) -52]
Test Case: 813 | Input/Output: [(-2 -42 -41 -25) -42]
Test Case: 814 | Input/Output: [(71 -27 -72 68) -72]
Test Case: 815 | Input/Output: [(-29 -9 77 -46) -46]
Test Case: 816 | Input/Output: [(-97 -92 67 -58) -97]
Test Case: 817 | Input/Output: [(74 -91 -72 69) -91]
Test Case: 818 | Input/Output: [(41 -27 -6 -37) -37]
Test Case: 819 | Input/Output: [(51 92 39 28) 28]
Test Case: 820 | Input/Output: [(-78 -36 95 -84) -84]
Test Case: 821 | Input/Output: [(91 -63 -30 21) -63]
Test Case: 822 | Input/Output: [(-19 -38 -27 91) -38]
Test Case: 823 | Input/Output: [(-41 -26 86 42) -41]
Test Case: 824 | Input/Output: [(88 -74 -67 -96) -96]
Test Case: 825 | Input/Output: [(72 -60 96 -75) -75]
Test Case: 826 | Input/Output: [(-8 16 -58 55) -58]
Test Case: 827 | Input/Output: [(-39 -83 -45 7) -83]
Test Case: 828 | Input/Output: [(88 65 83 -41) -41]
Test Case: 829 | Input/Output: [(64 32 47 -21) -21]
Test Case: 830 | Input/Output: [(-32 83 91 5) -32]
Test Case: 831 | Input/Output: [(22 -98 -77 -27) -98]
Test Case: 832 | Input/Output: [(-69 71 85 54) -69]
Test Case: 833 | Input/Output: [(69 -35 -73 73) -73]
Test Case: 834 | Input/Output: [(-81 44 27 50) -81]
Test Case: 835 | Input/Output: [(-76 81 33 -15) -76]
Test Case: 836 | Input/Output: [(-27 -19 -1 34) -27]
Test Case: 837 | Input/Output: [(-68 -23 54 -82) -82]
Test Case: 838 | Input/Output: [(94 -30 38 35) -30]
Test Case: 839 | Input/Output: [(-49 -57 -24 89) -57]
Test Case: 840 | Input/Output: [(31 58 -75 -65) -75]
Test Case: 841 | Input/Output: [(65 30 7 -63) -63]
Test Case: 842 | Input/Output: [(13 -77 -8 -11) -77]
Test Case: 843 | Input/Output: [(35 98 85 97) 35]
Test Case: 844 | Input/Output: [(81 17 82 -64) -64]
Test Case: 845 | Input/Output: [(85 37 99 -76) -76]
Test Case: 846 | Input/Output: [(-12 4 82 -99) -99]
Test Case: 847 | Input/Output: [(-62 -46 -2 -62) -62]
Test Case: 848 | Input/Output: [(-21 42 57 -79) -79]
Test Case: 849 | Input/Output: [(18 10 -63 2) -63]
Test Case: 850 | Input/Output: [(1 66 47 7) 1]
Test Case: 851 | Input/Output: [(26 -88 -8 79) -88]
Test Case: 852 | Input/Output: [(48 -80 -95 57) -95]
Test Case: 853 | Input/Output: [(90 31 -3 -92) -92]
Test Case: 854 | Input/Output: [(-36 12 -45 82) -45]
Test Case: 855 | Input/Output: [(-10 -75 0 -30) -75]
Test Case: 856 | Input/Output: [(-19 -60 55 100) -60]
Test Case: 857 | Input/Output: [(-62 89 96 4) -62]
Test Case: 858 | Input/Output: [(-15 -17 -28 12) -28]
Test Case: 859 | Input/Output: [(-30 -29 17 -79) -79]
Test Case: 860 | Input/Output: [(85 -46 -32 94) -46]
Test Case: 861 | Input/Output: [(55 95 -4 -51) -51]
Test Case: 862 | Input/Output: [(88 43 65 3) 3]
Test Case: 863 | Input/Output: [(-40 -87 -15 -26) -87]
Test Case: 864 | Input/Output: [(51 88 -74 95) -74]
Test Case: 865 | Input/Output: [(65 60 4 -93) -93]
Test Case: 866 | Input/Output: [(9 -54 -88 2) -88]
Test Case: 867 | Input/Output: [(81 -50 -89 -87) -89]
Test Case: 868 | Input/Output: [(26 -77 73 -28) -77]
Test Case: 869 | Input/Output: [(2 33 48 79) 2]
Test Case: 870 | Input/Output: [(21 79 -78 78) -78]
Test Case: 871 | Input/Output: [(52 0 58 50) 0]
Test Case: 872 | Input/Output: [(46 31 88 -22) -22]
Test Case: 873 | Input/Output: [(-98 -83 38 -84) -98]
Test Case: 874 | Input/Output: [(-22 -2 -79 -45) -79]
Test Case: 875 | Input/Output: [(100 -4 -73 -14) -73]
Test Case: 876 | Input/Output: [(86 -56 37 -37) -56]
Test Case: 877 | Input/Output: [(-55 89 16 8) -55]
Test Case: 878 | Input/Output: [(20 -92 -97 15) -97]
Test Case: 879 | Input/Output: [(36 -40 -65 -22) -65]
Test Case: 880 | Input/Output: [(-98 -70 0 3) -98]
Test Case: 881 | Input/Output: [(3 -46 -59 -33) -59]
Test Case: 882 | Input/Output: [(-81 -47 14 64) -81]
Test Case: 883 | Input/Output: [(-80 -36 76 -60) -80]
Test Case: 884 | Input/Output: [(12 -100 -69 33) -100]
Test Case: 885 | Input/Output: [(5 -65 -97 75) -97]
Test Case: 886 | Input/Output: [(-53 26 0 -25) -53]
Test Case: 887 | Input/Output: [(-79 78 0 -15) -79]
Test Case: 888 | Input/Output: [(-42 89 -82 6) -82]
Test Case: 889 | Input/Output: [(41 88 -28 38) -28]
Test Case: 890 | Input/Output: [(-55 59 -31 -42) -55]
Test Case: 891 | Input/Output: [(-4 28 78 -91) -91]
Test Case: 892 | Input/Output: [(76 54 -58 -45) -58]
Test Case: 893 | Input/Output: [(48 27 -90 5) -90]
Test Case: 894 | Input/Output: [(76 -44 95 94) -44]
Test Case: 895 | Input/Output: [(45 25 100 41) 25]
Test Case: 896 | Input/Output: [(25 3 0 -50) -50]
Test Case: 897 | Input/Output: [(64 95 -98 -39) -98]
Test Case: 898 | Input/Output: [(-85 -23 -95 -82) -95]
Test Case: 899 | Input/Output: [(-25 68 9 -52) -52]
Test Case: 900 | Input/Output: [(66 61 20 48) 20]
Test Case: 901 | Input/Output: [(-56 68 0 -52) -56]
Test Case: 902 | Input/Output: [(-22 78 -79 -2) -79]
Test Case: 903 | Input/Output: [(-27 -41 -83 95) -83]
Test Case: 904 | Input/Output: [(30 39 3 -44) -44]
Test Case: 905 | Input/Output: [(75 -28 -30 36) -30]
Test Case: 906 | Input/Output: [(62 46 -61 9) -61]
Test Case: 907 | Input/Output: [(6 0 -17 -16) -17]
Test Case: 908 | Input/Output: [(-98 -3 -97 20) -98]
Test Case: 909 | Input/Output: [(-2 -55 -55 27) -55]
Test Case: 910 | Input/Output: [(-100 -33 -9 17) -100]
Test Case: 911 | Input/Output: [(37 9 -49 -86) -86]
Test Case: 912 | Input/Output: [(-50 97 72 -56) -56]
Test Case: 913 | Input/Output: [(-19 -3 34 93) -19]
Test Case: 914 | Input/Output: [(9 -47 70 39) -47]
Test Case: 915 | Input/Output: [(68 -36 49 -63) -63]
Test Case: 916 | Input/Output: [(-59 77 -27 -78) -78]
Test Case: 917 | Input/Output: [(-34 84 -98 -85) -98]
Test Case: 918 | Input/Output: [(85 99 86 100) 85]
Test Case: 919 | Input/Output: [(58 20 58 4) 4]
Test Case: 920 | Input/Output: [(-9 -62 -94 10) -94]
Test Case: 921 | Input/Output: [(11 -95 4 -39) -95]
Test Case: 922 | Input/Output: [(-22 -76 87 -91) -91]
Test Case: 923 | Input/Output: [(-89 84 87 -25) -89]
Test Case: 924 | Input/Output: [(8 -24 51 10) -24]
Test Case: 925 | Input/Output: [(-95 23 -83 -81) -95]
Test Case: 926 | Input/Output: [(-5 73 90 -86) -86]
Test Case: 927 | Input/Output: [(-63 -91 -11 59) -91]
Test Case: 928 | Input/Output: [(51 -24 -91 48) -91]
Test Case: 929 | Input/Output: [(72 -7 4 -51) -51]
Test Case: 930 | Input/Output: [(-57 -5 -72 76) -72]
Test Case: 931 | Input/Output: [(78 -82 -13 47) -82]
Test Case: 932 | Input/Output: [(-60 48 -15 -78) -78]
Test Case: 933 | Input/Output: [(56 28 -17 34) -17]
Test Case: 934 | Input/Output: [(47 -85 -93 -73) -93]
Test Case: 935 | Input/Output: [(-46 64 -27 36) -46]
Test Case: 936 | Input/Output: [(5 100 31 42) 5]
Test Case: 937 | Input/Output: [(24 16 -9 57) -9]
Test Case: 938 | Input/Output: [(93 42 -63 90) -63]
Test Case: 939 | Input/Output: [(42 -82 0 -64) -82]
Test Case: 940 | Input/Output: [(7 78 -16 -56) -56]
Test Case: 941 | Input/Output: [(-39 -45 -59 75) -59]
Test Case: 942 | Input/Output: [(-79 -42 68 -90) -90]
Test Case: 943 | Input/Output: [(88 -10 -80 -8) -80]
Test Case: 944 | Input/Output: [(-8 25 -55 -79) -79]
Test Case: 945 | Input/Output: [(42 17 68 54) 17]
Test Case: 946 | Input/Output: [(76 -20 59 62) -20]
Test Case: 947 | Input/Output: [(-81 -40 -33 -13) -81]
Test Case: 948 | Input/Output: [(16 39 21 83) 16]
Test Case: 949 | Input/Output: [(-97 71 16 54) -97]
Test Case: 950 | Input/Output: [(-100 -87 -100 -79) -100]
Test Case: 951 | Input/Output: [(-46 54 -1 44) -46]
Test Case: 952 | Input/Output: [(43 43 11 -52) -52]
Test Case: 953 | Input/Output: [(67 40 -15 1) -15]
Test Case: 954 | Input/Output: [(-56 30 5 32) -56]
Test Case: 955 | Input/Output: [(-62 -88 -92 80) -92]
Test Case: 956 | Input/Output: [(-2 7 74 -68) -68]
Test Case: 957 | Input/Output: [(57 -78 -88 12) -88]
Test Case: 958 | Input/Output: [(-9 80 88 31) -9]
Test Case: 959 | Input/Output: [(-54 56 2 14) -54]
Test Case: 960 | Input/Output: [(19 15 19 84) 15]
Test Case: 961 | Input/Output: [(-31 -74 53 11) -74]
Test Case: 962 | Input/Output: [(88 -43 72 -53) -53]
Test Case: 963 | Input/Output: [(-20 82 -2 -36) -36]
Test Case: 964 | Input/Output: [(69 80 71 68) 68]
Test Case: 965 | Input/Output: [(-44 -11 99 28) -44]
Test Case: 966 | Input/Output: [(63 87 -11 35) -11]
Test Case: 967 | Input/Output: [(-89 41 -74 99) -89]
Test Case: 968 | Input/Output: [(26 -74 52 -15) -74]
Test Case: 969 | Input/Output: [(-71 21 80 77) -71]
Test Case: 970 | Input/Output: [(-72 28 -88 -95) -95]
Test Case: 971 | Input/Output: [(2 -8 60 -23) -23]
Test Case: 972 | Input/Output: [(-77 96 25 8) -77]
Test Case: 973 | Input/Output: [(53 76 96 -9) -9]
Test Case: 974 | Input/Output: [(34 -93 -43 -48) -93]
Test Case: 975 | Input/Output: [(19 -3 72 44) -3]
Test Case: 976 | Input/Output: [(35 -71 -37 38) -71]
Test Case: 977 | Input/Output: [(39 -56 92 11) -56]
Test Case: 978 | Input/Output: [(-37 -31 -60 66) -60]
Test Case: 979 | Input/Output: [(12 37 -68 78) -68]
Test Case: 980 | Input/Output: [(38 74 98 27) 27]
Test Case: 981 | Input/Output: [(-38 -16 87 16) -38]
Test Case: 982 | Input/Output: [(-57 81 49 83) -57]
Test Case: 983 | Input/Output: [(-92 2 97 25) -92]
Test Case: 984 | Input/Output: [(-31 15 -13 -86) -86]
Test Case: 985 | Input/Output: [(19 -27 43 35) -27]
Test Case: 986 | Input/Output: [(24 76 -13 -46) -46]
Test Case: 987 | Input/Output: [(35 33 -22 28) -22]
Test Case: 988 | Input/Output: [(38 -21 41 -5) -21]
Test Case: 989 | Input/Output: [(84 -14 -35 -44) -44]
Test Case: 990 | Input/Output: [(15 3 95 -28) -28]
Test Case: 991 | Input/Output: [(97 -9 -54 69) -54]
Test Case: 992 | Input/Output: [(34 59 -50 89) -50]
Test Case: 993 | Input/Output: [(-96 -65 -69 25) -96]
Test Case: 994 | Input/Output: [(63 24 52 2) 2]
Test Case: 995 | Input/Output: [(9 -22 -28 27) -28]
Test Case: 996 | Input/Output: [(26 -89 -81 -96) -96]
Test Case: 997 | Input/Output: [(67 68 -91 -77) -91]
Test Case: 998 | Input/Output: [(8 9 17 -1) -1]
Test Case: 999 | Input/Output: [(43 69 93 3) 3]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -70 -118 -97 -14 74 36 11 37 -46 6 58 -18 82 24 -93 -93
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-50 -48 -50 -50] -50] [[41 41 -58 41] -58] [[40 54 40 40] 40] [[46 88 46 46] 46] [[76 18 76 76] 18] [[21 23 23 23] 21] [[68 68 -96 68] -96] [[6 57 6 6] 6] [[-97 61 61 61] -97] [[-78 -78 -78 78] -78] [(-34 -34 -34 -34) -34] [(75 75 75 75) 75] [(-37 -37 -37 -37) -37] [(-59 -59 -59 -59) -59] [(-82 -82 -82 -82) -82] [(51 21 81 73) 21] [(84 37 43 33) 33] [(4 68 11 42) 4] [(32 34 9 84) 9] [(61 91 3 0) 0] [(67 49 78 26) 26] [(12 18 1 29) 1] [(24 90 10 66) 10] [(65 19 2 15) 2] [(90 31 41 52) 31] [(38 13 50 76) 13] [(43 95 89 18) 18] [(72 72 48 23) 23] [(34 80 48 99) 34] [(89 45 68 18) 18] [(59 40 23 100) 23] [(60 0 67 97) 0] [(49 69 91 54) 49] [(92 62 88 38) 38] [(45 97 26 58) 26] [(-69 91 0 -54) -69] [(-39 -48 -90 78) -90] [(-72 39 -2 14) -72] [(51 -41 -13 -93) -93] [(2 -55 -88 4) -88] [(-35 -34 -86 77) -86] [(-7 30 -86 53) -86] [(32 -52 -21 -46) -52] [(69 -30 24 29) -30] [(12 -81 84 -94) -94] [(81 -53 94 11) -53] [(56 35 32 5) 5] [(16 -8 6 6) -8] [(-1 39 12 81) -1] [(-56 44 -62 22) -62] [(-46 -57 55 -26) -57] [(71 -52 -82 -45) -82] [(-86 -71 6 -30) -86] [(95 -1 -55 -29) -55] [(56 -11 68 67) -11] [(39 46 48 42) 39] [(13 -31 -46 80) -46] [(25 18 -20 -76) -76] [(-53 -10 -51 -22) -53] [(4 -86 -100 -67) -100] [(80 42 -27 -89) -89] [(-55 62 -56 -31) -56] [(71 95 45 9) 9] [(14 85 -33 -76) -76] [(73 -24 -42 83) -42] [(-37 -100 -89 -56) -100] [(-27 -15 0 93) -27] [(25 51 31 -32) -32] [(1 -83 -20 22) -83] [(-98 -37 -75 14) -98] [(95 -41 -37 44) -41] [(-66 56 -32 -32) -66] [(-3 60 -55 -1) -55] [(85 3 43 -26) -26] [(81 -91 -94 -59) -94] [(35 -42 -58 -66) -66] [(-55 56 -47 20) -55] [(100 -66 38 -19) -66] [(-24 34 -19 -54) -54] [(-16 63 55 34) -16] [(-28 1 4 -38) -38] [(41 75 43 12) 12] [(-80 21 24 82) -80] [(56 -60 -75 -76) -76] [(25 34 -9 85) -9] [(-20 -61 56 63) -61] [(-78 15 62 97) -78] [(15 -17 63 -86) -86] [(28 26 76 42) 26] [(73 28 8 -11) -11] [(-97 42 55 -68) -97] [(57 -23 56 63) -23] [(57 77 99 -96) -96] [(-13 34 -85 1) -85] [(18 54 5 19) 5])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -48                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 54                 
Correct output: 46                  | Program output: 88                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 57                 
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 37                 
Correct output: 4                   | Program output: 68                 
Correct output: 9                   | Program output: 34                 
Correct output: 0                   | Program output: 91                 
Correct output: 26                  | Program output: 49                 
Correct output: 1                   | Program output: 18                 
Correct output: 10                  | Program output: 90                 
Correct output: 2                   | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 95                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 80                 
Correct output: 18                  | Program output: 45                 
Correct output: 23                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 69                 
Correct output: 38                  | Program output: 62                 
Correct output: 26                  | Program output: 97                 
Correct output: -69                 | Program output: 91                 
Correct output: -90                 | Program output: -48                
Correct output: -72                 | Program output: 39                 
Correct output: -93                 | Program output: -41                
Correct output: -88                 | Program output: -55                
Correct output: -86                 | Program output: -34                
Correct output: -86                 | Program output: 30                 
Correct output: -52                 | Program output: -52                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 35                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: 39                 
Correct output: -62                 | Program output: 44                 
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -52                
Correct output: -86                 | Program output: -71                
Correct output: -55                 | Program output: -1                 
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 46                 
Correct output: -46                 | Program output: -31                
Correct output: -76                 | Program output: 18                 
Correct output: -53                 | Program output: -10                
Correct output: -100                | Program output: -86                
Correct output: -89                 | Program output: 42                 
Correct output: -56                 | Program output: 62                 
Correct output: 9                   | Program output: 95                 
Correct output: -76                 | Program output: 85                 
Correct output: -42                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -15                
Correct output: -32                 | Program output: 51                 
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -66                 | Program output: 56                 
Correct output: -55                 | Program output: 60                 
Correct output: -26                 | Program output: 3                  
Correct output: -94                 | Program output: -91                
Correct output: -66                 | Program output: -42                
Correct output: -55                 | Program output: 56                 
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: 34                 
Correct output: -16                 | Program output: 63                 
Correct output: -38                 | Program output: 1                  
Correct output: 12                  | Program output: 75                 
Correct output: -80                 | Program output: 21                 
Correct output: -76                 | Program output: -60                
Correct output: -9                  | Program output: 34                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 15                 
Correct output: -86                 | Program output: -17                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: 28                 
Correct output: -97                 | Program output: 42                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: 77                 
Correct output: -85                 | Program output: 34                 
Correct output: 5                   | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_690} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 1, :instruction exec_when} {:close 1, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times})
Lexicase best program: (print_integer exec_dup (integer_shove boolean_empty integer_shove in3 boolean_yank exec_when () integer_min tagged_690 integer_mult) exec_do*range () integer_rot print_integer in2 print_integer boolean_and exec_pop (exec_s (integer_gt boolean_shove in2) (integer_mod exec_rot () (integer_gt exec_yank integer_div boolean_shove exec_s () (exec_yank) (integer_rot boolean_stackdepth in1 print_boolean integer_yank) boolean_pop boolean_yankdup) (integer_div integer_yank exec_stackdepth integer_mult boolean_dup_times) integer_empty) (boolean_dup_items integer_stackdepth in3 print_newline integer_shove) exec_rot (exec_s_when_autoconstructing (print_exec () exec_when () print_exec () exec_k_when_autoconstructing (boolean_empty) (exec_flush exec_yankdup boolean_stackdepth boolean_pop exec_dup (boolean_frominteger) integer_mult)) (exec_if (print_boolean) () boolean_or boolean_dup integer_rot exec_swap (boolean_yankdup boolean_frominteger integer_stackdepth exec_yankdup exec_s (boolean_shove exec_do*while (integer_dup_items) boolean_and boolean_xor exec_dup_times ()) () ()) ()) ()) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 114
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_690} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 1, :instruction exec_when} {:close 1, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times})
Zero cases best program: (print_integer exec_dup (integer_shove boolean_empty integer_shove in3 boolean_yank exec_when () integer_min tagged_690 integer_mult) exec_do*range () integer_rot print_integer in2 print_integer boolean_and exec_pop (exec_s (integer_gt boolean_shove in2) (integer_mod exec_rot () (integer_gt exec_yank integer_div boolean_shove exec_s () (exec_yank) (integer_rot boolean_stackdepth in1 print_boolean integer_yank) boolean_pop boolean_yankdup) (integer_div integer_yank exec_stackdepth integer_mult boolean_dup_times) integer_empty) (boolean_dup_items integer_stackdepth in3 print_newline integer_shove) exec_rot (exec_s_when_autoconstructing (print_exec () exec_when () print_exec () exec_k_when_autoconstructing (boolean_empty) (exec_flush exec_yankdup boolean_stackdepth boolean_pop exec_dup (boolean_frominteger) integer_mult)) (exec_if (print_boolean) () boolean_or boolean_dup integer_rot exec_swap (boolean_yankdup boolean_frominteger integer_stackdepth exec_yankdup exec_s (boolean_shove exec_do*while (integer_dup_items) boolean_and boolean_xor exec_dup_times ()) () ()) ()) ()) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 114
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 17 14 3 3 3 4 12 4)
Population mean number of elite cases: 0.07
Count of perfect (error zero) individuals by case: (3 4 17 14 3 3 3 4 12 4)
Population mean number of perfect (error zero) cases: 0.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 2, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 60} {:close 0, :instruction exec_y})
Best program: (integer_rot integer_dup_items exec_stackdepth exec_if (exec_do*times () integer_mod) () in2 print_integer exec_yank exec_s (60 exec_y ()) () ())
Errors: [0 0 0 1 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 12
Size: 20
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 9.933
Median total errors in population: 10
Error averages by case: (0.997 0.996 0.983 0.986 0.997 0.997 0.997 0.996 0.988 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.671
Average program size in population (points): 69.974
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 486440
--- Timings ---
Current time: 1559314674262 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 30.6%
Fitness Testing:      1.6 seconds, 65.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: 78                 
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 76                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 73                 
Correct output: 33                  | Program output: 34                 
Correct output: 4                   | Program output: 42                 
Correct output: 9                   | Program output: 84                 
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 29                 
Correct output: 10                  | Program output: 66                 
Correct output: 2                   | Program output: 16                 
Correct output: 31                  | Program output: 52                 
Correct output: 13                  | Program output: 76                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 100                
Correct output: 0                   | Program output: 97                 
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 58                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: 78                 
Correct output: -72                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 4                  
Correct output: -86                 | Program output: 77                 
Correct output: -86                 | Program output: 53                 
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 82                 
Correct output: -62                 | Program output: 22                 
Correct output: -57                 | Program output: -26                
Correct output: -82                 | Program output: -45                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: 67                 
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: 80                 
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 10                 
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: 83                 
Correct output: -100                | Program output: -56                
Correct output: -27                 | Program output: 94                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 22                 
Correct output: -98                 | Program output: 14                 
Correct output: -41                 | Program output: 44                 
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -1                 
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 20                 
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 85                 
Correct output: -61                 | Program output: 64                 
Correct output: -78                 | Program output: 97                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: 64                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 1                  
Correct output: 5                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_489})
Lexicase best program: (integer_flush tag_integer_693 exec_dup_times (integer_max boolean_rot integer_dup in4 boolean_pop exec_dup (integer_dup exec_yankdup integer_div print_integer exec_s_when_autoconstructing (integer_inc boolean_empty exec_k (exec_empty) (integer_swap print_newline integer_flush) tagged_489) () ())))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_489})
Zero cases best program: (integer_flush tag_integer_693 exec_dup_times (integer_max boolean_rot integer_dup in4 boolean_pop exec_dup (integer_dup exec_yankdup integer_div print_integer exec_s_when_autoconstructing (integer_inc boolean_empty exec_k (exec_empty) (integer_swap print_newline integer_flush) tagged_489) () ())))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 175 185 175 175 174 160 187 185 563)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (403 175 185 175 175 174 160 187 185 563)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_489})
Best program: (integer_flush tag_integer_693 exec_dup_times (integer_max boolean_rot integer_dup in4 boolean_pop exec_dup (integer_dup exec_yankdup integer_div print_integer exec_s_when_autoconstructing (integer_inc boolean_empty exec_k (exec_empty) (integer_swap print_newline integer_flush) tagged_489) () ())))
Errors: [1 0 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.618
Median total errors in population: 8
Error averages by case: (0.597 0.825 0.815 0.825 0.825 0.826 0.84 0.813 0.815 0.437)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.643
Average program size in population (points): 52.635
Average percent parens in population: 0.259
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.475
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.417
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 885946
--- Timings ---
Current time: 1559314676780 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.3 seconds, 43.0%
Fitness Testing:      2.1 seconds, 39.9%
Report:               0.8 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 81                 
Correct output: 33                  | Program output: 43                 
Correct output: 4                   | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 3                  
Correct output: 26                  | Program output: 78                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 50                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 48                 
Correct output: 34                  | Program output: 48                 
Correct output: 18                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 67                 
Correct output: 49                  | Program output: 91                 
Correct output: 38                  | Program output: 88                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: 84                 
Correct output: -53                 | Program output: 94                 
Correct output: 5                   | Program output: 32                 
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 6                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 68                 
Correct output: 39                  | Program output: 48                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 45                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 31                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 43                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 38                 
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: 55                 
Correct output: -38                 | Program output: 4                  
Correct output: 12                  | Program output: 43                 
Correct output: -80                 | Program output: 24                 
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: 56                 
Correct output: -78                 | Program output: 62                 
Correct output: -86                 | Program output: 63                 
Correct output: 26                  | Program output: 76                 
Correct output: -11                 | Program output: 8                  
Correct output: -97                 | Program output: 55                 
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_713} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_lt})
Lexicase best program: (boolean_invert_second_then_and in3 boolean_dup integer_empty print_integer boolean_and integer_flush boolean_invert_second_then_and integer_shove integer_add exec_pop (exec_while (exec_do*times (integer_inc boolean_flush exec_do*times (exec_noop print_exec (integer_rot exec_y_when_autoconstructing () integer_dup) exec_when (integer_div integer_swap tag_exec_713 (boolean_eq exec_rot () (in3 integer_pop exec_do*times () integer_lt) ())))))))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_713} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_lt})
Zero cases best program: (boolean_invert_second_then_and in3 boolean_dup integer_empty print_integer boolean_and integer_flush boolean_invert_second_then_and integer_shove integer_add exec_pop (exec_while (exec_do*times (integer_inc boolean_flush exec_do*times (exec_noop print_exec (integer_rot exec_y_when_autoconstructing () integer_dup) exec_when (integer_div integer_swap tag_exec_713 (boolean_eq exec_rot () (in3 integer_pop exec_do*times () integer_lt) ())))))))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 289 125 925 125 129 542 288 793 381)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (129 289 125 925 125 129 542 288 793 381)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank})
Best program: (print_integer exec_do*range (integer_dup boolean_yankdup exec_swap (print_integer exec_s_when_autoconstructing (in3 boolean_empty) (print_integer exec_flush exec_yank integer_dec exec_when (exec_s (boolean_dup_items exec_dup_times (exec_y_when_autoconstructing (boolean_dup_items boolean_eq exec_do*times (boolean_dup_times integer_shove) boolean_pop) exec_y (integer_lt) in4 exec_dup (boolean_dup_items print_exec (integer_sub integer_max boolean_invert_second_then_and) integer_flush boolean_dup_times exec_pop (integer_add boolean_rot)) exec_dup_times (integer_yank))) () ())) ()) ()))
Errors: [1 0 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 59
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 6.274
Median total errors in population: 5
Error averages by case: (0.871 0.711 0.875 0.075 0.875 0.871 0.458 0.712 0.207 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.089
Average program size in population (points): 52.645
Average percent parens in population: 0.259
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9515
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1252102
--- Timings ---
Current time: 1559314679583 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.5 seconds, 53.3%
Fitness Testing:      2.5 seconds, 29.5%
Report:               1.3 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -48                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 54                 
Correct output: 46                  | Program output: 88                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 57                 
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 37                 
Correct output: 4                   | Program output: 68                 
Correct output: 9                   | Program output: 34                 
Correct output: 0                   | Program output: 91                 
Correct output: 26                  | Program output: 49                 
Correct output: 1                   | Program output: 18                 
Correct output: 10                  | Program output: 90                 
Correct output: 2                   | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 95                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 80                 
Correct output: 18                  | Program output: 45                 
Correct output: 23                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 69                 
Correct output: 38                  | Program output: 62                 
Correct output: 26                  | Program output: 97                 
Correct output: -69                 | Program output: 91                 
Correct output: -90                 | Program output: -48                
Correct output: -72                 | Program output: 39                 
Correct output: -93                 | Program output: -41                
Correct output: -88                 | Program output: -55                
Correct output: -86                 | Program output: -34                
Correct output: -86                 | Program output: 30                 
Correct output: -52                 | Program output: -52                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 35                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: 39                 
Correct output: -62                 | Program output: 44                 
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -52                
Correct output: -86                 | Program output: -71                
Correct output: -55                 | Program output: -1                 
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 46                 
Correct output: -46                 | Program output: -31                
Correct output: -76                 | Program output: 18                 
Correct output: -53                 | Program output: -10                
Correct output: -100                | Program output: -86                
Correct output: -89                 | Program output: 42                 
Correct output: -56                 | Program output: 62                 
Correct output: 9                   | Program output: 95                 
Correct output: -76                 | Program output: 85                 
Correct output: -42                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -15                
Correct output: -32                 | Program output: 51                 
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -66                 | Program output: 56                 
Correct output: -55                 | Program output: 60                 
Correct output: -26                 | Program output: 3                  
Correct output: -94                 | Program output: -91                
Correct output: -66                 | Program output: -42                
Correct output: -55                 | Program output: 56                 
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: 34                 
Correct output: -16                 | Program output: 63                 
Correct output: -38                 | Program output: 1                  
Correct output: 12                  | Program output: 75                 
Correct output: -80                 | Program output: 21                 
Correct output: -76                 | Program output: -60                
Correct output: -9                  | Program output: 34                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 15                 
Correct output: -86                 | Program output: -17                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: 28                 
Correct output: -97                 | Program output: 42                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: 77                 
Correct output: -85                 | Program output: 34                 
Correct output: 5                   | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_734} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction -30} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_539} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tag_boolean_500})
Lexicase best program: (exec_s (integer_div integer_lte integer_dup_items) (exec_eq exec_noop boolean_yank integer_yankdup integer_shove) (integer_yank exec_eq) exec_k_when_autoconstructing (boolean_stackdepth) (exec_do*while (integer_stackdepth boolean_or integer_dec in4) print_integer boolean_yankdup integer_min exec_flush integer_div boolean_and) exec_when (tagged_734) boolean_dup_times boolean_yank boolean_flush exec_dup_times () boolean_shove boolean_flush -30 exec_s_when_autoconstructing (boolean_frominteger exec_if (boolean_and boolean_invert_first_then_and tag_integer_539) (in2 integer_dup_items) boolean_invert_second_then_and integer_rot) (boolean_or exec_rot (boolean_invert_second_then_and) (integer_dup_items integer_pop print_exec (in1 boolean_stackdepth tag_boolean_500)) ()) ())
Lexicase best errors: [0 1 1 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 70
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_734} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction -30} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_539} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tag_boolean_500})
Zero cases best program: (exec_s (integer_div integer_lte integer_dup_items) (exec_eq exec_noop boolean_yank integer_yankdup integer_shove) (integer_yank exec_eq) exec_k_when_autoconstructing (boolean_stackdepth) (exec_do*while (integer_stackdepth boolean_or integer_dec in4) print_integer boolean_yankdup integer_min exec_flush integer_div boolean_and) exec_when (tagged_734) boolean_dup_times boolean_yank boolean_flush exec_dup_times () boolean_shove boolean_flush -30 exec_s_when_autoconstructing (boolean_frominteger exec_if (boolean_and boolean_invert_first_then_and tag_integer_539) (in2 integer_dup_items) boolean_invert_second_then_and integer_rot) (boolean_or exec_rot (boolean_invert_second_then_and) (integer_dup_items integer_pop print_exec (in1 boolean_stackdepth tag_boolean_500)) ()) ())
Zero cases best errors: [0 1 1 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 70
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 256 252 268 289 268 114 114 268 256)
Population mean number of elite cases: 2.20
Count of perfect (error zero) individuals by case: (114 256 252 268 289 268 114 114 268 256)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_690} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1})
Best program: (print_integer exec_dup (integer_shove boolean_empty integer_shove in3 boolean_yank exec_when () integer_min tagged_690 integer_mult) exec_do*range () integer_rot print_integer in2 print_integer boolean_and exec_pop (exec_s (integer_gt boolean_shove in2) (integer_mod exec_rot () (integer_gt exec_yank integer_div boolean_shove exec_s () (exec_yank) (integer_rot boolean_stackdepth in1)) ()) ()))
Errors: [1 0 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 7.801
Median total errors in population: 7
Error averages by case: (0.886 0.744 0.748 0.732 0.711 0.732 0.886 0.886 0.732 0.744)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.159
Average program size in population (points): 46.35
Average percent parens in population: 0.258
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.468
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1595922
--- Timings ---
Current time: 1559314682531 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.8 seconds, 60.0%
Fitness Testing:      2.9 seconds, 25.3%
Report:               1.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 81                 
Correct output: 33                  | Program output: 43                 
Correct output: 4                   | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 3                  
Correct output: 26                  | Program output: 78                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 50                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 48                 
Correct output: 34                  | Program output: 48                 
Correct output: 18                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 67                 
Correct output: 49                  | Program output: 91                 
Correct output: 38                  | Program output: 88                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: 84                 
Correct output: -53                 | Program output: 94                 
Correct output: 5                   | Program output: 32                 
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 6                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 68                 
Correct output: 39                  | Program output: 48                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 45                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 31                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 43                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 38                 
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: 55                 
Correct output: -38                 | Program output: 4                  
Correct output: 12                  | Program output: 43                 
Correct output: -80                 | Program output: 24                 
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: 56                 
Correct output: -78                 | Program output: 62                 
Correct output: -86                 | Program output: 63                 
Correct output: 26                  | Program output: 76                 
Correct output: -11                 | Program output: 8                  
Correct output: -97                 | Program output: 55                 
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3})
Lexicase best program: (exec_do*count () boolean_pop exec_do*while (exec_stackdepth boolean_or in3 print_integer) integer_rot boolean_frominteger exec_rot (exec_do*count (boolean_swap)) (boolean_yankdup boolean_shove) (integer_yank boolean_not integer_rot exec_yank boolean_yank integer_lte) exec_s (exec_do*while (integer_yankdup) in2 integer_mod integer_swap integer_div exec_s (exec_k (boolean_pop boolean_dup_times) (boolean_dup_items integer_swap integer_max) boolean_dup_times integer_dup_items boolean_yank integer_dup_items integer_eq) () (integer_stackdepth integer_swap) boolean_dup integer_gt boolean_invert_second_then_and integer_eq exec_pop (integer_pop integer_div exec_empty integer_swap boolean_dup_items boolean_invert_second_then_and in3 in3)) () ())
Lexicase best errors: [0 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3})
Zero cases best program: (exec_do*count () boolean_pop exec_do*while (exec_stackdepth boolean_or in3 print_integer) integer_rot boolean_frominteger exec_rot (exec_do*count (boolean_swap)) (boolean_yankdup boolean_shove) (integer_yank boolean_not integer_rot exec_yank boolean_yank integer_lte) exec_s (exec_do*while (integer_yankdup) in2 integer_mod integer_swap integer_div exec_s (exec_k (boolean_pop boolean_dup_times) (boolean_dup_items integer_swap integer_max) boolean_dup_times integer_dup_items boolean_yank integer_dup_items integer_eq) () (integer_stackdepth integer_swap) boolean_dup integer_gt boolean_invert_second_then_and integer_eq exec_pop (integer_pop integer_div exec_empty integer_swap boolean_dup_items boolean_invert_second_then_and in3 in3)) () ())
Zero cases best errors: [0 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 284 79 284 928 353 273 289 79 79)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (79 284 79 284 928 353 273 289 79 79)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3})
Best program: (exec_do*count (boolean_pop exec_do*while (exec_stackdepth boolean_or in3 print_integer) integer_rot boolean_frominteger exec_rot (exec_do*count (boolean_swap)) (boolean_yankdup boolean_shove) (integer_yank boolean_not integer_rot exec_yank boolean_yank integer_lte) exec_s (exec_do*while (integer_yankdup)) (in2 integer_mod integer_swap integer_div exec_s (exec_k (boolean_pop boolean_dup_times) (boolean_dup_items exec_stackdepth integer_max) boolean_dup_times integer_dup_items boolean_yank integer_dup_items integer_eq) () (integer_stackdepth integer_swap) boolean_dup integer_gt boolean_invert_second_then_and integer_eq exec_pop (integer_pop integer_div exec_empty integer_swap boolean_dup_items boolean_invert_second_then_and in3 in3)) ()))
Errors: [0 1 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 54
Size: 71
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 7.273
Median total errors in population: 7
Error averages by case: (0.921 0.716 0.921 0.716 0.072 0.647 0.727 0.711 0.921 0.921)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.588
Average program size in population (points): 51.096
Average percent parens in population: 0.265
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.987
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1974831
--- Timings ---
Current time: 1559314685629 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         9.1 seconds, 63.7%
Fitness Testing:      3.3 seconds, 22.8%
Report:               1.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 81                 
Correct output: 33                  | Program output: 43                 
Correct output: 4                   | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 3                  
Correct output: 26                  | Program output: 78                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 50                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 48                 
Correct output: 34                  | Program output: 48                 
Correct output: 18                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 67                 
Correct output: 49                  | Program output: 91                 
Correct output: 38                  | Program output: 88                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: 84                 
Correct output: -53                 | Program output: 94                 
Correct output: 5                   | Program output: 32                 
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 6                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 68                 
Correct output: 39                  | Program output: 48                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 45                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 31                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 43                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 38                 
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: 55                 
Correct output: -38                 | Program output: 4                  
Correct output: 12                  | Program output: 43                 
Correct output: -80                 | Program output: 24                 
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: 56                 
Correct output: -78                 | Program output: 62                 
Correct output: -86                 | Program output: 63                 
Correct output: 26                  | Program output: 76                 
Correct output: -11                 | Program output: 8                  
Correct output: -97                 | Program output: 55                 
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq})
Lexicase best program: (boolean_not integer_gt exec_noop in3 print_integer exec_flush integer_gt exec_when () integer_gt boolean_eq)
Lexicase best errors: [1 0 0 1 1 1 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq})
Zero cases best program: (boolean_not integer_gt exec_noop in3 print_integer exec_flush integer_gt exec_when () integer_gt boolean_eq)
Zero cases best errors: [1 0 0 1 1 1 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 923 509 1000 3 1000 1000 271 1000 1000)
Population mean number of elite cases: 6.85
Count of perfect (error zero) individuals by case: (142 923 509 0 3 0 0 271 0 0)
Population mean number of perfect (error zero) cases: 1.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor})
Best program: (boolean_empty exec_do*range (integer_dup boolean_yankdup exec_swap (print_integer exec_s_when_autoconstructing (in3 boolean_empty) (print_integer exec_flush exec_yank integer_dec exec_when (exec_s (boolean_dup_items exec_dup_times (exec_y_when_autoconstructing (boolean_dup_items boolean_xor))) () ())) ()) ()))
Errors: [1 0 0 1 1 1 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 20
Size: 33
Percent parens: 0.394
--- Population Statistics ---
Average total errors in population: 8.152
Median total errors in population: 8
Error averages by case: (0.858 0.077 0.491 1.0 0.997 1.0 1.0 0.729 1.0 1.0)
Error minima by case: (0 0 0 1 0 1 1 0 1 1)
Average genome size in population (length): 36.389
Average program size in population (points): 50.213
Average percent parens in population: 0.259
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.514
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2221575
--- Timings ---
Current time: 1559314688342 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.4 seconds, 66.1%
Fitness Testing:      3.5 seconds, 20.4%
Report:               2.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 81                 
Correct output: 33                  | Program output: 43                 
Correct output: 4                   | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 3                  
Correct output: 26                  | Program output: 78                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 50                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 48                 
Correct output: 34                  | Program output: 48                 
Correct output: 18                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 67                 
Correct output: 49                  | Program output: 91                 
Correct output: 38                  | Program output: 88                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: 84                 
Correct output: -53                 | Program output: 94                 
Correct output: 5                   | Program output: 32                 
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 6                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 68                 
Correct output: 39                  | Program output: 48                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 45                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 31                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 43                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 38                 
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: 55                 
Correct output: -38                 | Program output: 4                  
Correct output: 12                  | Program output: 43                 
Correct output: -80                 | Program output: 24                 
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: 56                 
Correct output: -78                 | Program output: 62                 
Correct output: -86                 | Program output: 63                 
Correct output: 26                  | Program output: 76                 
Correct output: -11                 | Program output: 8                  
Correct output: -97                 | Program output: 55                 
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_invert_second_then_and in3 boolean_dup boolean_swap print_integer boolean_and integer_flush boolean_invert_second_then_and integer_min integer_add exec_pop (exec_while (exec_do*times (integer_inc boolean_flush exec_do*times (exec_noop print_exec (integer_rot exec_y_when_autoconstructing (integer_dup) exec_when ()))))))
Lexicase best errors: [0 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_invert_second_then_and in3 boolean_dup boolean_swap print_integer boolean_and integer_flush boolean_invert_second_then_and integer_min integer_add exec_pop (exec_while (exec_do*times (integer_inc boolean_flush exec_do*times (exec_noop print_exec (integer_rot exec_y_when_autoconstructing (integer_dup) exec_when ()))))))
Zero cases best errors: [0 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (747 750 254 247 254 258 249 1000 249 247)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (747 750 254 247 254 258 249 0 249 247)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq})
Best program: (integer_inc integer_shove exec_noop in3 print_integer exec_flush integer_gt exec_when () integer_gt boolean_eq)
Errors: [0 0 0 1 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.745
Median total errors in population: 6
Error averages by case: (0.253 0.25 0.746 0.753 0.746 0.742 0.751 1.0 0.751 0.753)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 40.531
Average program size in population (points): 56.296
Average percent parens in population: 0.267
Minimum age in population: 6.0
Maximum age in population: 11.125
Average age in population: 9.12134375
Median age in population: 9.21875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2505620
--- Timings ---
Current time: 1559314690727 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.3 seconds, 67.8%
Fitness Testing:      3.8 seconds, 19.4%
Report:               2.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 81                 
Correct output: 33                  | Program output: 43                 
Correct output: 4                   | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 3                  
Correct output: 26                  | Program output: 78                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 50                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 48                 
Correct output: 34                  | Program output: 48                 
Correct output: 18                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 67                 
Correct output: 49                  | Program output: 91                 
Correct output: 38                  | Program output: 88                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: 84                 
Correct output: -53                 | Program output: 94                 
Correct output: 5                   | Program output: 32                 
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 6                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 68                 
Correct output: 39                  | Program output: 48                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 45                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 31                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 43                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 38                 
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: 55                 
Correct output: -38                 | Program output: 4                  
Correct output: 12                  | Program output: 43                 
Correct output: -80                 | Program output: 24                 
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: 56                 
Correct output: -78                 | Program output: 62                 
Correct output: -86                 | Program output: 63                 
Correct output: 26                  | Program output: 76                 
Correct output: -11                 | Program output: 8                  
Correct output: -97                 | Program output: 55                 
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq})
Lexicase best program: (integer_inc integer_shove exec_noop in3 print_integer exec_flush integer_gt exec_when () integer_gt boolean_eq)
Lexicase best errors: [1 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq})
Zero cases best program: (integer_inc integer_shove exec_noop in3 print_integer exec_flush integer_gt exec_when () integer_gt boolean_eq)
Zero cases best errors: [1 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 1000 381 382 1000 381 235 909 292 382)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (239 0 381 382 0 381 235 909 292 382)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq})
Best program: (integer_inc integer_shove exec_noop in3 print_integer exec_flush integer_gt exec_when () integer_gt boolean_eq)
Errors: [1 1 0 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.799
Median total errors in population: 7
Error averages by case: (0.761 1.0 0.619 0.618 1.0 0.619 0.765 0.091 0.708 0.618)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 35.514
Average program size in population (points): 49.544
Average percent parens in population: 0.268
Minimum age in population: 7.625
Maximum age in population: 12.484375
Average age in population: 10.55165625
Median age in population: 10.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2802494
--- Timings ---
Current time: 1559314693530 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.6 seconds, 69.8%
Fitness Testing:      4.1 seconds, 18.3%
Report:               2.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 32                 
Correct output: 0                   | Program output: 61                 
Correct output: 26                  | Program output: 67                 
Correct output: 1                   | Program output: 12                 
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 65                 
Correct output: 31                  | Program output: 90                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 43                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 59                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 92                 
Correct output: 26                  | Program output: 45                 
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: 51                 
Correct output: -88                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -86                 | Program output: -7                 
Correct output: -52                 | Program output: 32                 
Correct output: -30                 | Program output: 69                 
Correct output: -94                 | Program output: 12                 
Correct output: -53                 | Program output: 81                 
Correct output: 5                   | Program output: 56                 
Correct output: -8                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -56                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 95                 
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: 13                 
Correct output: -76                 | Program output: 25                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 4                  
Correct output: -89                 | Program output: 80                 
Correct output: -56                 | Program output: -55                
Correct output: 9                   | Program output: 71                 
Correct output: -76                 | Program output: 14                 
Correct output: -42                 | Program output: 73                 
Correct output: -100                | Program output: -37                
Correct output: -27                 | Program output: -27                
Correct output: -32                 | Program output: 25                 
Correct output: -83                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -41                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -3                 
Correct output: -26                 | Program output: 85                 
Correct output: -94                 | Program output: 81                 
Correct output: -66                 | Program output: 35                 
Correct output: -55                 | Program output: -55                
Correct output: -66                 | Program output: 100                
Correct output: -54                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -28                
Correct output: 12                  | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: 56                 
Correct output: -9                  | Program output: 25                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: 15                 
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 57                 
Correct output: -96                 | Program output: 57                 
Correct output: -85                 | Program output: -13                
Correct output: 5                   | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_exec_32} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s})
Lexicase best program: (integer_max boolean_empty in1 integer_lte exec_s (boolean_empty integer_mult print_integer boolean_swap) (integer_yankdup exec_stackdepth) (exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc tag_exec_32 (exec_yank exec_pop () boolean_eq) integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing () exec_dup_times () exec_k () (integer_flush) exec_do*count ()) boolean_shove exec_do*while (boolean_invert_second_then_and boolean_frominteger exec_noop boolean_yankdup boolean_not) exec_s () () ())))) ()))) () ()))
Lexicase best errors: [1 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_exec_32} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s})
Zero cases best program: (integer_max boolean_empty in1 integer_lte exec_s (boolean_empty integer_mult print_integer boolean_swap) (integer_yankdup exec_stackdepth) (exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc tag_exec_32 (exec_yank exec_pop () boolean_eq) integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing () exec_dup_times () exec_k () (integer_flush) exec_do*count ()) boolean_shove exec_do*while (boolean_invert_second_then_and boolean_frominteger exec_noop boolean_yankdup boolean_not) exec_s () () ())))) ()))) () ()))
Zero cases best errors: [1 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 244 160 244 945 160 244 160 1 160)
Population mean number of elite cases: 2.32
Count of perfect (error zero) individuals by case: (1 244 160 244 945 160 244 160 1 160)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush})
Best program: (exec_dup_items boolean_shove exec_yank boolean_yank boolean_dup_times exec_shove () boolean_not integer_pop in4 integer_stackdepth integer_lt exec_eq exec_yankdup boolean_xor integer_swap integer_fromboolean in1 print_integer integer_gte boolean_flush)
Errors: [1 1 0 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 22
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 7.681
Median total errors in population: 9
Error averages by case: (0.999 0.756 0.84 0.756 0.055 0.84 0.756 0.84 0.999 0.84)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.647
Average program size in population (points): 46.646
Average percent parens in population: 0.257
Minimum age in population: 9.5
Maximum age in population: 14.1015625
Average age in population: 12.0736015625
Median age in population: 12.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3042449
--- Timings ---
Current time: 1559314696364 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 71.4%
Fitness Testing:      4.4 seconds, 17.3%
Report:               2.7 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: 78                 
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 73                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: 9                   | Program output: 84                 
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 29                 
Correct output: 10                  | Program output: 66                 
Correct output: 2                   | Program output: 15                 
Correct output: 31                  | Program output: 52                 
Correct output: 13                  | Program output: 76                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 100                
Correct output: 0                   | Program output: 97                 
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 58                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: 78                 
Correct output: -72                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 4                  
Correct output: -86                 | Program output: 77                 
Correct output: -86                 | Program output: 53                 
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 81                 
Correct output: -62                 | Program output: 22                 
Correct output: -57                 | Program output: -26                
Correct output: -82                 | Program output: -45                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: 67                 
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: 80                 
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: 83                 
Correct output: -100                | Program output: -56                
Correct output: -27                 | Program output: 93                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 22                 
Correct output: -98                 | Program output: 14                 
Correct output: -41                 | Program output: 44                 
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -1                 
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 20                 
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 85                 
Correct output: -61                 | Program output: 63                 
Correct output: -78                 | Program output: 97                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: 63                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 1                  
Correct output: 5                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction -4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction tagged_734} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction -30} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty})
Lexicase best program: (integer_flush tag_integer_693 exec_dup_times (integer_max in2 integer_dup in4 integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_do*count ()) (exec_s (integer_eq integer_lt) (exec_while (boolean_dup_times) boolean_stackdepth exec_y (exec_y (boolean_or exec_while (boolean_dup_times) boolean_stackdepth exec_y (in2 exec_s_when_autoconstructing (exec_y (exec_empty exec_do*range (integer_empty boolean_dup_items integer_dup_times integer_dup integer_eq) boolean_or) integer_mult -4 integer_dup_times exec_do*range (integer_min exec_flush integer_div boolean_and) in1 tagged_734 boolean_dup_times boolean_yank boolean_flush exec_dup_times () boolean_shove boolean_flush -30 exec_s_when_autoconstructing (integer_yank boolean_swap exec_eq exec_y (boolean_xor integer_stackdepth)) (exec_noop integer_empty) (exec_s (boolean_eq exec_swap (exec_k_when_autoconstructing (exec_if (boolean_empty) ()) ()) ()) () ())) () ())))) ())))
Lexicase best errors: [1 0 1 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 104
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction -4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction tagged_734} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction -30} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_flush tag_integer_693 exec_dup_times (integer_max in2 integer_dup in4 integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_do*count ()) (exec_s (integer_eq integer_lt) (exec_while (boolean_dup_times) boolean_stackdepth exec_y (exec_y (boolean_or exec_while (boolean_dup_times) boolean_stackdepth exec_y (in2 exec_s_when_autoconstructing (exec_y (exec_empty exec_do*range (integer_empty boolean_dup_items integer_dup_times integer_dup integer_eq) boolean_or) integer_mult -4 integer_dup_times exec_do*range (integer_min exec_flush integer_div boolean_and) in1 tagged_734 boolean_dup_times boolean_yank boolean_flush exec_dup_times () boolean_shove boolean_flush -30 exec_s_when_autoconstructing (integer_yank boolean_swap exec_eq exec_y (boolean_xor integer_stackdepth)) (exec_noop integer_empty) (exec_s (boolean_eq exec_swap (exec_k_when_autoconstructing (exec_if (boolean_empty) ()) ()) ()) () ())) () ())))) ())))
Zero cases best errors: [1 0 1 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 104
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 180 1000 1000 418 1000 1000 322 180 1000)
Population mean number of elite cases: 6.42
Count of perfect (error zero) individuals by case: (320 180 0 0 418 0 0 322 180 0)
Population mean number of perfect (error zero) cases: 1.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_734} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction -30} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if})
Best program: (exec_s (integer_div exec_s (integer_div integer_lte integer_dup_items exec_eq exec_noop boolean_yank integer_yankdup integer_shove) (integer_yank exec_eq) (exec_k_when_autoconstructing (boolean_stackdepth) (exec_do*while (integer_stackdepth boolean_or integer_dec in4 print_integer boolean_yankdup integer_min exec_flush in3) integer_stackdepth boolean_or integer_dec in4) print_integer boolean_yankdup integer_min exec_flush integer_div boolean_and) exec_when (tagged_734) boolean_dup_times) (boolean_yank boolean_flush exec_dup_times () boolean_shove boolean_flush -30 exec_s_when_autoconstructing (boolean_frominteger exec_if () ()) () ()) ())
Errors: [0 1 1 1 1 1 1 0 1 1]
Total: 8
Mean: 0.8
Genome size: 47
Size: 64
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 8.58
Median total errors in population: 17/2
Error averages by case: (0.68 0.82 1.0 1.0 0.582 1.0 1.0 0.678 0.82 1.0)
Error minima by case: (0 0 1 1 0 1 1 0 0 1)
Average genome size in population (length): 44.013
Average program size in population (points): 63.035
Average percent parens in population: 0.298
Minimum age in population: 10.859375
Maximum age in population: 15.37109375
Average age in population: 13.71668359375
Median age in population: 13.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3616617
--- Timings ---
Current time: 1559314699071 milliseconds
Total Time:          27.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.9 seconds, 71.5%
Fitness Testing:      4.9 seconds, 17.5%
Report:               3.0 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -48                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 54                 
Correct output: 46                  | Program output: 88                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 57                 
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 37                 
Correct output: 4                   | Program output: 68                 
Correct output: 9                   | Program output: 34                 
Correct output: 0                   | Program output: 91                 
Correct output: 26                  | Program output: 49                 
Correct output: 1                   | Program output: 18                 
Correct output: 10                  | Program output: 90                 
Correct output: 2                   | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 95                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 80                 
Correct output: 18                  | Program output: 45                 
Correct output: 23                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 69                 
Correct output: 38                  | Program output: 62                 
Correct output: 26                  | Program output: 97                 
Correct output: -69                 | Program output: 91                 
Correct output: -90                 | Program output: -48                
Correct output: -72                 | Program output: 39                 
Correct output: -93                 | Program output: -41                
Correct output: -88                 | Program output: -55                
Correct output: -86                 | Program output: -34                
Correct output: -86                 | Program output: 30                 
Correct output: -52                 | Program output: -52                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 35                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: 39                 
Correct output: -62                 | Program output: 44                 
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -52                
Correct output: -86                 | Program output: -71                
Correct output: -55                 | Program output: -1                 
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 46                 
Correct output: -46                 | Program output: -31                
Correct output: -76                 | Program output: 18                 
Correct output: -53                 | Program output: -10                
Correct output: -100                | Program output: -86                
Correct output: -89                 | Program output: 42                 
Correct output: -56                 | Program output: 62                 
Correct output: 9                   | Program output: 95                 
Correct output: -76                 | Program output: 85                 
Correct output: -42                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -15                
Correct output: -32                 | Program output: 51                 
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -66                 | Program output: 56                 
Correct output: -55                 | Program output: 60                 
Correct output: -26                 | Program output: 3                  
Correct output: -94                 | Program output: -91                
Correct output: -66                 | Program output: -42                
Correct output: -55                 | Program output: 56                 
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: 34                 
Correct output: -16                 | Program output: 63                 
Correct output: -38                 | Program output: 1                  
Correct output: 12                  | Program output: 75                 
Correct output: -80                 | Program output: 21                 
Correct output: -76                 | Program output: -60                
Correct output: -9                  | Program output: 34                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 15                 
Correct output: -86                 | Program output: -17                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: 28                 
Correct output: -97                 | Program output: 42                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: 77                 
Correct output: -85                 | Program output: 34                 
Correct output: 5                   | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction -4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction tagged_734} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction -30} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty})
Lexicase best program: (integer_flush exec_dup_items exec_dup_times (integer_max in2 integer_dup in4 integer_rot print_integer integer_shove exec_dup_items exec_rot () (integer_gte exec_do*count ()) (exec_s (integer_eq integer_lt) (exec_while (boolean_dup_times) boolean_stackdepth exec_y (exec_y (boolean_or exec_while (boolean_dup_times) boolean_stackdepth exec_y (in2 exec_s_when_autoconstructing (exec_y (exec_empty exec_do*range (integer_empty boolean_dup_items integer_dup_times integer_dup integer_eq) boolean_or) integer_mult -4 integer_dup_times exec_do*range (integer_min exec_flush exec_eq boolean_and) in1 tagged_734 boolean_dup_times boolean_yank boolean_flush exec_dup_times () boolean_shove boolean_flush -30 exec_s_when_autoconstructing (integer_yank boolean_swap exec_eq exec_y (boolean_xor integer_stackdepth)) (exec_noop integer_empty) (exec_s (boolean_eq exec_swap (exec_k_when_autoconstructing (exec_if (boolean_empty) ()) ()) ()) () ())) () ())))) ())))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 104
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction -4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction tagged_734} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction -30} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_flush exec_dup_items exec_dup_times (integer_max in2 integer_dup in4 integer_rot print_integer integer_shove exec_dup_items exec_rot () (integer_gte exec_do*count ()) (exec_s (integer_eq integer_lt) (exec_while (boolean_dup_times) boolean_stackdepth exec_y (exec_y (boolean_or exec_while (boolean_dup_times) boolean_stackdepth exec_y (in2 exec_s_when_autoconstructing (exec_y (exec_empty exec_do*range (integer_empty boolean_dup_items integer_dup_times integer_dup integer_eq) boolean_or) integer_mult -4 integer_dup_times exec_do*range (integer_min exec_flush exec_eq boolean_and) in1 tagged_734 boolean_dup_times boolean_yank boolean_flush exec_dup_times () boolean_shove boolean_flush -30 exec_s_when_autoconstructing (integer_yank boolean_swap exec_eq exec_y (boolean_xor integer_stackdepth)) (exec_noop integer_empty) (exec_s (boolean_eq exec_swap (exec_k_when_autoconstructing (exec_if (boolean_empty) ()) ()) ()) () ())) () ())))) ())))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 104
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 1000 1000 1000 358 362 914 914 199 359)
Population mean number of elite cases: 6.31
Count of perfect (error zero) individuals by case: (200 0 0 0 358 362 914 914 199 359)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction -4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction tagged_734} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction -30} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty})
Best program: (integer_flush tag_integer_693 exec_dup_times (integer_max in2 integer_dup in4 integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_do*count ()) (exec_s (integer_eq integer_lt) (exec_while (boolean_dup_times) boolean_stackdepth exec_y (exec_y (boolean_or exec_while (boolean_dup_times) boolean_stackdepth exec_y (in2 exec_s_when_autoconstructing (exec_y (exec_empty exec_do*range (integer_empty boolean_dup_items integer_dup_times integer_dup integer_eq boolean_or) integer_mult -4 integer_dup_times exec_do*range (integer_min exec_flush integer_div boolean_and) in1 tagged_734 boolean_dup_times boolean_yank boolean_flush exec_dup_times () boolean_shove boolean_flush -30 exec_s_when_autoconstructing (integer_yank boolean_swap exec_eq exec_y (boolean_xor integer_stackdepth)) (exec_noop integer_empty) (exec_s (boolean_eq exec_swap (exec_k_when_autoconstructing (exec_if (boolean_empty) ()) ()) ()) () ()))) () ())))) ())))
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 70
Size: 104
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 6.694
Median total errors in population: 6
Error averages by case: (0.8 1.0 1.0 1.0 0.642 0.638 0.086 0.086 0.801 0.641)
Error minima by case: (0 1 1 1 0 0 0 0 0 0)
Average genome size in population (length): 49.669
Average program size in population (points): 71.181
Average percent parens in population: 0.297
Minimum age in population: 12.25
Maximum age in population: 16.900390625
Average age in population: 15.2526171875
Median age in population: 15.3291015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4364696
--- Timings ---
Current time: 1559314702860 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.0 seconds, 71.2%
Fitness Testing:      5.6 seconds, 18.0%
Report:               3.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: 78                 
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 73                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: 9                   | Program output: 84                 
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 29                 
Correct output: 10                  | Program output: 66                 
Correct output: 2                   | Program output: 15                 
Correct output: 31                  | Program output: 52                 
Correct output: 13                  | Program output: 76                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 100                
Correct output: 0                   | Program output: 97                 
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 58                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: 78                 
Correct output: -72                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 4                  
Correct output: -86                 | Program output: 77                 
Correct output: -86                 | Program output: 53                 
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 81                 
Correct output: -62                 | Program output: 22                 
Correct output: -57                 | Program output: -26                
Correct output: -82                 | Program output: -45                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: 67                 
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: 80                 
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: 83                 
Correct output: -100                | Program output: -56                
Correct output: -27                 | Program output: 93                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 22                 
Correct output: -98                 | Program output: 14                 
Correct output: -41                 | Program output: 44                 
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -1                 
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 20                 
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 85                 
Correct output: -61                 | Program output: 63                 
Correct output: -78                 | Program output: 97                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: 63                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 1                  
Correct output: 5                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div})
Lexicase best program: (exec_s (integer_div integer_lte integer_dup_items) (exec_eq exec_noop boolean_yank integer_yankdup integer_shove) (integer_yank exec_eq) exec_k_when_autoconstructing (boolean_stackdepth) (exec_do*while (integer_stackdepth boolean_or integer_dec in4) print_integer boolean_yankdup integer_min exec_flush integer_div))
Lexicase best errors: [1 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div})
Zero cases best program: (exec_s (integer_div integer_lte integer_dup_items) (exec_eq exec_noop boolean_yank integer_yankdup integer_shove) (integer_yank exec_eq) exec_k_when_autoconstructing (boolean_stackdepth) (exec_do*while (integer_stackdepth boolean_or integer_dec in4) print_integer boolean_yankdup integer_min exec_flush integer_div))
Zero cases best errors: [1 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 190 191 190 934 416 1 190 1 417)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (326 190 191 190 934 416 1 190 1 417)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y})
Best program: (integer_rot integer_dup_items exec_stackdepth exec_if (exec_s_when_autoconstructing (print_boolean boolean_empty exec_do*while (in4 integer_stackdepth boolean_yankdup print_integer boolean_xor exec_do*times () boolean_swap) integer_yankdup exec_y ()) () ()) ())
Errors: [1 0 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 26
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 7.144
Median total errors in population: 7
Error averages by case: (0.674 0.81 0.809 0.81 0.066 0.584 0.999 0.81 0.999 0.583)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.895
Average program size in population (points): 63.562
Average percent parens in population: 0.304
Minimum age in population: 13.9296875
Maximum age in population: 18.7490234375
Average age in population: 16.7515927734375
Median age in population: 16.82666015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5068444
--- Timings ---
Current time: 1559314706190 milliseconds
Total Time:          34.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.0 seconds, 69.4%
Fitness Testing:      6.2 seconds, 18.0%
Report:               4.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 81                 
Correct output: 33                  | Program output: 43                 
Correct output: 4                   | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 3                  
Correct output: 26                  | Program output: 78                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 50                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 48                 
Correct output: 34                  | Program output: 48                 
Correct output: 18                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 67                 
Correct output: 49                  | Program output: 91                 
Correct output: 38                  | Program output: 88                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: 84                 
Correct output: -53                 | Program output: 94                 
Correct output: 5                   | Program output: 32                 
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 6                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 68                 
Correct output: 39                  | Program output: 48                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 45                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 31                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 43                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 38                 
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: 55                 
Correct output: -38                 | Program output: 4                  
Correct output: 12                  | Program output: 43                 
Correct output: -80                 | Program output: 24                 
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: 56                 
Correct output: -78                 | Program output: 62                 
Correct output: -86                 | Program output: 63                 
Correct output: 26                  | Program output: 76                 
Correct output: -11                 | Program output: 8                  
Correct output: -97                 | Program output: 55                 
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc})
Lexicase best program: (in1 boolean_yank in3 exec_y_when_autoconstructing (integer_rot print_integer) integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush exec_yank integer_dec print_integer boolean_swap) (print_integer boolean_and exec_do*times () exec_while (integer_gt) integer_lt integer_div exec_if () (integer_rot integer_dup_times) integer_empty exec_when (boolean_flush exec_s_when_autoconstructing (integer_max exec_flush integer_dup integer_fromboolean in4 print_integer integer_mod) (boolean_eq exec_swap (integer_dup boolean_yank boolean_or exec_while (boolean_eq boolean_stackdepth integer_yank integer_fromboolean) boolean_yank integer_inc boolean_and exec_when (print_exec (exec_stackdepth print_exec (in2 integer_sub boolean_dup_items exec_shove (exec_yank exec_while () integer_dec boolean_shove boolean_and boolean_yank exec_do*times (exec_while (boolean_eq boolean_stackdepth integer_yank integer_fromboolean) boolean_yank integer_inc)))))) ()) ())))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 94
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc})
Zero cases best program: (in1 boolean_yank in3 exec_y_when_autoconstructing (integer_rot print_integer) integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush exec_yank integer_dec print_integer boolean_swap) (print_integer boolean_and exec_do*times () exec_while (integer_gt) integer_lt integer_div exec_if () (integer_rot integer_dup_times) integer_empty exec_when (boolean_flush exec_s_when_autoconstructing (integer_max exec_flush integer_dup integer_fromboolean in4 print_integer integer_mod) (boolean_eq exec_swap (integer_dup boolean_yank boolean_or exec_while (boolean_eq boolean_stackdepth integer_yank integer_fromboolean) boolean_yank integer_inc boolean_and exec_when (print_exec (exec_stackdepth print_exec (in2 integer_sub boolean_dup_items exec_shove (exec_yank exec_while () integer_dec boolean_shove boolean_and boolean_yank exec_do*times (exec_while (boolean_eq boolean_stackdepth integer_yank integer_fromboolean) boolean_yank integer_inc)))))) ()) ())))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 94
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 810 103 415 262 264 262 914 499 415)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (262 810 103 415 262 264 262 914 499 415)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s})
Best program: (in1 boolean_yank in3 exec_y_when_autoconstructing (integer_rot print_integer) integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush exec_yank integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty in3 exec_pop () boolean_eq) (integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing (exec_dup_times () exec_k () (integer_flush) exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_frominteger exec_noop boolean_yankdup boolean_not) exec_s () () ()))))))))) () ())
Errors: [0 0 1 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 61
Size: 89
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 5.794
Median total errors in population: 6
Error averages by case: (0.738 0.19 0.897 0.585 0.738 0.736 0.738 0.086 0.501 0.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.551
Average program size in population (points): 67.89
Average percent parens in population: 0.294
Minimum age in population: 15.4375
Maximum age in population: 20.00048828125
Average age in population: 18.2277646484375
Median age in population: 18.219482421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5503622
--- Timings ---
Current time: 1559314709078 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.3 seconds, 69.3%
Fitness Testing:      6.6 seconds, 17.5%
Report:               4.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 786
Test mean error for best: 0.78600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 011                
Correct output: -44                 | Program output: -1311              
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 10011              
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 4111               
Correct output: 40                  | Program output: 4011               
Correct output: 46                  | Program output: 4611               
Correct output: 18                  | Program output: 7611               
Correct output: 21                  | Program output: 2311               
Correct output: -96                 | Program output: 6811               
Correct output: 6                   | Program output: 611                
Correct output: -97                 | Program output: 6111               
Correct output: -78                 | Program output: 7811               
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 7511               
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 7311               
Correct output: 33                  | Program output: 3311               
Correct output: 4                   | Program output: 4211               
Correct output: 9                   | Program output: 8411               
Correct output: 0                   | Program output: 011                
Correct output: 26                  | Program output: 2611               
Correct output: 1                   | Program output: 2911               
Correct output: 10                  | Program output: 6611               
Correct output: 2                   | Program output: 1511               
Correct output: 31                  | Program output: 5211               
Correct output: 13                  | Program output: 7611               
Correct output: 18                  | Program output: 1811               
Correct output: 23                  | Program output: 2311               
Correct output: 34                  | Program output: 9911               
Correct output: 18                  | Program output: 1811               
Correct output: 23                  | Program output: 10011              
Correct output: 0                   | Program output: 9711               
Correct output: 49                  | Program output: 5411               
Correct output: 38                  | Program output: 3811               
Correct output: 26                  | Program output: 5811               
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: 7811               
Correct output: -72                 | Program output: 1411               
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 411                
Correct output: -86                 | Program output: 7711               
Correct output: -86                 | Program output: 5311               
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 2911               
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 1111               
Correct output: 5                   | Program output: 511                
Correct output: -8                  | Program output: 611                
Correct output: -1                  | Program output: 8111               
Correct output: -62                 | Program output: 2211               
Correct output: -57                 | Program output: -26                
Correct output: -82                 | Program output: -45                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: 6711               
Correct output: 39                  | Program output: 4211               
Correct output: -46                 | Program output: 8011               
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 911                
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: 8311               
Correct output: -100                | Program output: -56                
Correct output: -27                 | Program output: 9311               
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 2211               
Correct output: -98                 | Program output: 1411               
Correct output: -41                 | Program output: 4411               
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -111               
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 2011               
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 3411               
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 1211               
Correct output: -80                 | Program output: 8211               
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 8511               
Correct output: -61                 | Program output: 6311               
Correct output: -78                 | Program output: 9711               
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 4211               
Correct output: -11                 | Program output: -1111              
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: 6311               
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 111                
Correct output: 5                   | Program output: 1911               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s})
Lexicase best program: (in1 integer_inc integer_shove integer_dup_items exec_eq exec_noop boolean_yank integer_yankdup integer_shove integer_yank exec_eq exec_k_when_autoconstructing (boolean_stackdepth) (exec_do*while (exec_noop boolean_or integer_add in4) print_integer boolean_yankdup exec_y_when_autoconstructing () exec_flush boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_pop () boolean_eq) (integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing (exec_dup_times () exec_k () () integer_flush exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_frominteger exec_noop boolean_yankdup boolean_not) exec_s () () ()))))))))))
Lexicase best errors: [0 0 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 87
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s})
Zero cases best program: (in1 integer_inc integer_shove integer_dup_items exec_eq exec_noop boolean_yank integer_yankdup integer_shove integer_yank exec_eq exec_k_when_autoconstructing (boolean_stackdepth) (exec_do*while (exec_noop boolean_or integer_add in4) print_integer boolean_yankdup exec_y_when_autoconstructing () exec_flush boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_pop () boolean_eq) (integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing (exec_dup_times () exec_k () () integer_flush exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_frominteger exec_noop boolean_yankdup boolean_not) exec_s () () ()))))))))))
Zero cases best errors: [0 0 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 87
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 833 9 9 96 95 105 220 220 604)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (220 833 9 9 96 95 105 220 220 604)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction -14} {:close 0, :instruction tag_boolean_384} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not})
Best program: (in4 integer_mod integer_dup -14 tag_boolean_384 exec_s_when_autoconstructing (print_boolean boolean_empty exec_do*while (integer_lt integer_stackdepth boolean_yankdup print_integer boolean_xor exec_do*times () integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc exec_while (exec_yank exec_pop () boolean_eq) integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing (exec_dup_times () exec_k () (integer_flush) exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_frominteger exec_noop boolean_yankdup boolean_not))))))) ())))) () ()) () ())
Errors: [0 0 1 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 91
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.589
Median total errors in population: 8
Error averages by case: (0.78 0.167 0.991 0.991 0.904 0.905 0.895 0.78 0.78 0.396)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.761
Average program size in population (points): 77.444
Average percent parens in population: 0.301
Minimum age in population: 16.958984375
Maximum age in population: 21.4990234375
Average age in population: 19.72402758789062
Median age in population: 19.8046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5849405
--- Timings ---
Current time: 1559314712235 milliseconds
Total Time:          40.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.6 seconds, 70.0%
Fitness Testing:      7.0 seconds, 17.1%
Report:               5.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: 78                 
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 73                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: 9                   | Program output: 84                 
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 29                 
Correct output: 10                  | Program output: 66                 
Correct output: 2                   | Program output: 15                 
Correct output: 31                  | Program output: 52                 
Correct output: 13                  | Program output: 76                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 100                
Correct output: 0                   | Program output: 97                 
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 58                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: 78                 
Correct output: -72                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 4                  
Correct output: -86                 | Program output: 77                 
Correct output: -86                 | Program output: 53                 
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 81                 
Correct output: -62                 | Program output: 22                 
Correct output: -57                 | Program output: -26                
Correct output: -82                 | Program output: -45                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: 67                 
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: 80                 
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: 83                 
Correct output: -100                | Program output: -56                
Correct output: -27                 | Program output: 93                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 22                 
Correct output: -98                 | Program output: 14                 
Correct output: -41                 | Program output: 44                 
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -1                 
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 20                 
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 85                 
Correct output: -61                 | Program output: 63                 
Correct output: -78                 | Program output: 97                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: 63                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 1                  
Correct output: 5                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s})
Lexicase best program: (in1 boolean_yank in3 boolean_yank in3 exec_y_when_autoconstructing (integer_rot print_integer) integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush exec_yank boolean_yank print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_pop () boolean_eq) (integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (integer_inc integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing (exec_dup_times () exec_k () (integer_flush) exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_not exec_noop boolean_yankdup boolean_not) exec_s () () ()))))))))) () ())
Lexicase best errors: [1 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 91
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s})
Zero cases best program: (in1 boolean_yank in3 boolean_yank in3 exec_y_when_autoconstructing (integer_rot print_integer) integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush exec_yank boolean_yank print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_pop () boolean_eq) (integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (integer_inc integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing (exec_dup_times () exec_k () (integer_flush) exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_not exec_noop boolean_yankdup boolean_not) exec_s () () ()))))))))) () ())
Zero cases best errors: [1 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 91
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 926 290 213 290 295 299 290 294 124)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (124 926 290 213 290 295 299 290 294 124)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup} {:close 0, :instruction -14} {:close 0, :instruction tag_boolean_384} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s})
Best program: (in4 integer_mod integer_dup -14 tag_boolean_384 exec_s_when_autoconstructing (print_boolean boolean_empty exec_do*while (in4 integer_empty) print_integer boolean_and exec_do*times () exec_while (integer_gt) integer_lt integer_div exec_if () (integer_rot integer_dup_times) integer_empty exec_when (boolean_flush exec_s_when_autoconstructing (integer_max exec_flush integer_lt exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_pop () boolean_eq) (integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing (exec_dup_times () exec_k () (integer_flush) exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_frominteger exec_noop boolean_yankdup boolean_not) exec_s () () ()))))))))) () ())) () ())
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 66
Size: 98
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 6.855
Median total errors in population: 6
Error averages by case: (0.876 0.074 0.71 0.787 0.71 0.705 0.701 0.71 0.706 0.876)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.045
Average program size in population (points): 78.086
Average percent parens in population: 0.292
Minimum age in population: 18.294921875
Maximum age in population: 23.01025390625
Average age in population: 21.34256408691406
Median age in population: 21.39794921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6325154
--- Timings ---
Current time: 1559314715136 milliseconds
Total Time:          43.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.7 seconds, 69.9%
Fitness Testing:      7.5 seconds, 17.0%
Report:               5.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 32                 
Correct output: 0                   | Program output: 61                 
Correct output: 26                  | Program output: 67                 
Correct output: 1                   | Program output: 12                 
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 65                 
Correct output: 31                  | Program output: 90                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 43                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 59                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 92                 
Correct output: 26                  | Program output: 45                 
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: 51                 
Correct output: -88                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -86                 | Program output: -7                 
Correct output: -52                 | Program output: 32                 
Correct output: -30                 | Program output: 69                 
Correct output: -94                 | Program output: 12                 
Correct output: -53                 | Program output: 81                 
Correct output: 5                   | Program output: 56                 
Correct output: -8                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -56                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 95                 
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: 13                 
Correct output: -76                 | Program output: 25                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 4                  
Correct output: -89                 | Program output: 80                 
Correct output: -56                 | Program output: -55                
Correct output: 9                   | Program output: 71                 
Correct output: -76                 | Program output: 14                 
Correct output: -42                 | Program output: 73                 
Correct output: -100                | Program output: -37                
Correct output: -27                 | Program output: -27                
Correct output: -32                 | Program output: 25                 
Correct output: -83                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -41                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -3                 
Correct output: -26                 | Program output: 85                 
Correct output: -94                 | Program output: 81                 
Correct output: -66                 | Program output: 35                 
Correct output: -55                 | Program output: -55                
Correct output: -66                 | Program output: 100                
Correct output: -54                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -28                
Correct output: 12                  | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: 56                 
Correct output: -9                  | Program output: 25                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: 15                 
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 57                 
Correct output: -96                 | Program output: 57                 
Correct output: -85                 | Program output: -13                
Correct output: 5                   | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction -35} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in1 -35 in3 exec_y_when_autoconstructing (integer_rot print_integer) integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush exec_yank integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_dup_items boolean_yank exec_empty boolean_dup_times exec_dup_times (in3 exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_pop () boolean_eq) (integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing (exec_dup_times () exec_k () (integer_flush) exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_frominteger))))))))))
Lexicase best errors: [0 1 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction -35} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in1 -35 in3 exec_y_when_autoconstructing (integer_rot print_integer) integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush exec_yank integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_dup_items boolean_yank exec_empty boolean_dup_times exec_dup_times (in3 exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_pop () boolean_eq) (integer_rot boolean_flush exec_empty exec_flush exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and exec_y_when_autoconstructing (exec_dup_times () exec_k () (integer_flush) exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_frominteger))))))))))
Zero cases best errors: [0 1 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (837 278 94 931 334 94 333 428 278 225)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (837 278 94 931 334 94 333 428 278 225)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction -14} {:close 0, :instruction tag_boolean_384} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction -30} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_yank in3 exec_y_when_autoconstructing (boolean_frominteger print_integer) integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush exec_yank integer_dec -14 tag_boolean_384 exec_s_when_autoconstructing (print_boolean boolean_empty exec_do*while (in4 integer_stackdepth boolean_yankdup print_integer boolean_xor exec_do*times () exec_while (integer_gt) integer_lt integer_div exec_if () (integer_rot integer_dup_times integer_empty exec_when (boolean_flush exec_s_when_autoconstructing (integer_max exec_flush boolean_shove boolean_flush -30 exec_s_when_autoconstructing (boolean_flush exec_s_when_autoconstructing (integer_max exec_flush boolean_flush integer_fromboolean in4) (print_integer integer_mod boolean_eq exec_swap (integer_dup boolean_yank exec_do*times (exec_while (boolean_eq boolean_stackdepth integer_yank integer_fromboolean) boolean_yank integer_inc boolean_and exec_when (exec_yank exec_stackdepth print_exec (in2 integer_sub boolean_dup_items exec_shove (exec_yank) exec_y_when_autoconstructing ())))) ()) ()) () ()) () ())))) () ()) ())
Errors: [0 1 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 74
Size: 105
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 6.168
Median total errors in population: 6
Error averages by case: (0.163 0.722 0.906 0.069 0.666 0.906 0.667 0.572 0.722 0.775)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.595
Average program size in population (points): 77.238
Average percent parens in population: 0.290
Minimum age in population: 19.294921875
Maximum age in population: 24.5758056640625
Average age in population: 22.80355072021484
Median age in population: 22.89654541015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6659557
--- Timings ---
Current time: 1559314717875 milliseconds
Total Time:          46.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.8 seconds, 70.3%
Fitness Testing:      7.8 seconds, 16.7%
Report:               5.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 32                 
Correct output: 0                   | Program output: 61                 
Correct output: 26                  | Program output: 67                 
Correct output: 1                   | Program output: 12                 
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 65                 
Correct output: 31                  | Program output: 90                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 43                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 59                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 92                 
Correct output: 26                  | Program output: 45                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 69                 
Correct output: -94                 | Program output: 12                 
Correct output: -53                 | Program output: 81                 
Correct output: 5                   | Program output: 56                 
Correct output: -8                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 71                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 25                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 100                
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -28                
Correct output: 12                  | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: 15                 
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 57                 
Correct output: -96                 | Program output: 57                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_yank in3 in3 integer_shove integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ()))) () ())
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_yank in3 in3 integer_shove integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ()))) () ())
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (121 121 240 339 240 338 234 338 121 338)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (121 121 240 339 240 338 234 338 121 338)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Best program: (in1 boolean_yank in3 in3 integer_shove integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ()))) () ())
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.57
Median total errors in population: 8
Error averages by case: (0.879 0.879 0.76 0.661 0.76 0.662 0.766 0.662 0.879 0.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.162
Average program size in population (points): 75.38
Average percent parens in population: 0.291
Minimum age in population: 21.060791015625
Maximum age in population: 25.99484252929688
Average age in population: 24.22899038696289
Median age in population: 24.30831909179688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7098564
--- Timings ---
Current time: 1559314720790 milliseconds
Total Time:          49.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.1 seconds, 70.7%
Fitness Testing:      8.2 seconds, 16.6%
Report:               6.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 32                 
Correct output: 0                   | Program output: 61                 
Correct output: 26                  | Program output: 67                 
Correct output: 1                   | Program output: 12                 
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 65                 
Correct output: 31                  | Program output: 90                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 43                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 59                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 92                 
Correct output: 26                  | Program output: 45                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 69                 
Correct output: -94                 | Program output: 12                 
Correct output: -53                 | Program output: 81                 
Correct output: 5                   | Program output: 56                 
Correct output: -8                  | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 71                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 25                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 100                
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -28                
Correct output: 12                  | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: 15                 
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 57                 
Correct output: -96                 | Program output: 57                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s})
Lexicase best program: (in1 boolean_yank in3 exec_y_when_autoconstructing (integer_rot print_integer) integer_shove exec_dup_items exec_rot (boolean_shove exec_flush boolean_yank integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) (exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty integer_rot exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot) exec_swap () (integer_inc integer_empty exec_yank exec_pop () boolean_eq) integer_rot exec_shove (exec_empty exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and) exec_y_when_autoconstructing (exec_dup_times () exec_k () (integer_flush) exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_frominteger exec_noop boolean_yank boolean_not exec_s () () ())))))))) () ()))
Lexicase best errors: [0 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 89
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s})
Zero cases best program: (in1 boolean_yank in3 exec_y_when_autoconstructing (integer_rot print_integer) integer_shove exec_dup_items exec_rot (boolean_shove exec_flush boolean_yank integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) (exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty integer_rot exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot) exec_swap () (integer_inc integer_empty exec_yank exec_pop () boolean_eq) integer_rot exec_shove (exec_empty exec_pop (exec_do*times (boolean_yankdup integer_flush boolean_rot exec_k_when_autoconstructing () (integer_dec print_exec (boolean_and) exec_y_when_autoconstructing (exec_dup_times () exec_k () (integer_flush) exec_do*count () boolean_shove exec_do*while (boolean_flush boolean_frominteger exec_noop boolean_yank boolean_not exec_s () () ())))))))) () ()))
Zero cases best errors: [0 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 89
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (645 195 87 417 648 86 86 247 87 645)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (645 195 87 417 648 86 86 247 87 645)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Best program: (in1 boolean_yank in3 in3 integer_shove integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ()))) () ())
Errors: [0 1 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.857
Median total errors in population: 6
Error averages by case: (0.355 0.805 0.913 0.583 0.352 0.914 0.914 0.753 0.913 0.355)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.705
Average program size in population (points): 61.201
Average percent parens in population: 0.280
Minimum age in population: 23.2926025390625
Maximum age in population: 27.53314208984375
Average age in population: 25.0735085144043
Median age in population: 25.10861206054688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 254
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7390636
--- Timings ---
Current time: 1559314723559 milliseconds
Total Time:          52.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.3 seconds, 71.2%
Fitness Testing:      8.6 seconds, 16.3%
Report:               6.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: 78                 
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 73                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: 9                   | Program output: 84                 
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 29                 
Correct output: 10                  | Program output: 66                 
Correct output: 2                   | Program output: 15                 
Correct output: 31                  | Program output: 52                 
Correct output: 13                  | Program output: 76                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 100                
Correct output: 0                   | Program output: 97                 
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 58                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: 78                 
Correct output: -72                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 4                  
Correct output: -86                 | Program output: 77                 
Correct output: -86                 | Program output: 53                 
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 81                 
Correct output: -62                 | Program output: 22                 
Correct output: -57                 | Program output: -26                
Correct output: -82                 | Program output: -45                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: 67                 
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: 80                 
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: 83                 
Correct output: -100                | Program output: -56                
Correct output: -27                 | Program output: 93                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 22                 
Correct output: -98                 | Program output: 14                 
Correct output: -41                 | Program output: 44                 
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -1                 
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 20                 
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 85                 
Correct output: -61                 | Program output: 63                 
Correct output: -78                 | Program output: 97                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: 63                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 1                  
Correct output: 5                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction -13} {:close 0, :instruction tag_boolean_384} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (in4 integer_mod integer_lte -13 tag_boolean_384 exec_s_when_autoconstructing (print_boolean boolean_empty exec_do*while (in4 integer_stackdepth boolean_yankdup print_integer boolean_xor exec_do*times (exec_while (integer_gt integer_lt integer_div exec_if () (integer_rot integer_dup_times) integer_empty exec_when (boolean_flush boolean_or integer_gt exec_flush integer_dup integer_fromboolean))))) () ())
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction -13} {:close 0, :instruction tag_boolean_384} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (in4 integer_mod integer_lte -13 tag_boolean_384 exec_s_when_autoconstructing (print_boolean boolean_empty exec_do*while (in4 integer_stackdepth boolean_yankdup print_integer boolean_xor exec_do*times (exec_while (integer_gt integer_lt integer_div exec_if () (integer_rot integer_dup_times) integer_empty exec_when (boolean_flush boolean_or integer_gt exec_flush integer_dup integer_fromboolean))))) () ())
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 96 473 855 96 96 96 96 250 951)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (96 96 473 855 96 96 96 96 250 951)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_flush tag_integer_693 exec_dup_times (integer_max boolean_rot integer_dup in4 boolean_pop exec_dup (integer_dup exec_yankdup integer_div print_integer exec_s_when_autoconstructing () () ())))
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 20
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.895
Median total errors in population: 7
Error averages by case: (0.904 0.904 0.527 0.145 0.904 0.904 0.904 0.904 0.75 0.049)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.222
Average program size in population (points): 64.029
Average percent parens in population: 0.289
Minimum age in population: 24.2926025390625
Maximum age in population: 28.72100067138672
Average age in population: 26.66541298675537
Median age in population: 26.71634674072266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7813311
--- Timings ---
Current time: 1559314726476 milliseconds
Total Time:          55.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.4 seconds, 71.4%
Fitness Testing:      9.0 seconds, 16.3%
Report:               6.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: 78                 
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 73                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: 9                   | Program output: 84                 
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 29                 
Correct output: 10                  | Program output: 66                 
Correct output: 2                   | Program output: 15                 
Correct output: 31                  | Program output: 52                 
Correct output: 13                  | Program output: 76                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 100                
Correct output: 0                   | Program output: 97                 
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 58                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: 78                 
Correct output: -72                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 4                  
Correct output: -86                 | Program output: 77                 
Correct output: -86                 | Program output: 53                 
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 81                 
Correct output: -62                 | Program output: 22                 
Correct output: -57                 | Program output: -26                
Correct output: -82                 | Program output: -45                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: 67                 
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: 80                 
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: 83                 
Correct output: -100                | Program output: -56                
Correct output: -27                 | Program output: 93                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 22                 
Correct output: -98                 | Program output: 14                 
Correct output: -41                 | Program output: 44                 
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -1                 
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 20                 
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 85                 
Correct output: -61                 | Program output: 63                 
Correct output: -78                 | Program output: 97                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: 63                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 1                  
Correct output: 5                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_693} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in2} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_yank tag_integer_693 exec_dup_times (integer_max boolean_rot integer_dup in4 integer_dup in4 integer_rot print_integer integer_shove exec_dup_items) exec_rot () (in2 exec_do*count ()) (exec_s (print_integer boolean_yankdup exec_do*count (exec_flush integer_div exec_empty boolean_dup_times) exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot integer_pop integer_inc integer_empty exec_yank exec_y (in2)))) () ()))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_693} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in2} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_yank tag_integer_693 exec_dup_times (integer_max boolean_rot integer_dup in4 integer_dup in4 integer_rot print_integer integer_shove exec_dup_items) exec_rot () (in2 exec_do*count ()) (exec_s (print_integer boolean_yankdup exec_do*count (exec_flush integer_div exec_empty boolean_dup_times) exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot integer_pop integer_inc integer_empty exec_yank exec_y (in2)))) () ()))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 574 574 5 5 574 5 11 574 336)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (334 574 574 5 5 574 5 11 574 336)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Best program: (exec_s (integer_gt integer_lte exec_yankdup) (exec_eq exec_noop boolean_yank integer_yankdup integer_shove) (integer_yank exec_eq) exec_k_when_autoconstructing (boolean_stackdepth exec_do*while (integer_stackdepth boolean_or integer_dec in4) print_integer boolean_yankdup integer_min exec_flush integer_add exec_y (in2 exec_s_when_autoconstructing (exec_y () exec_empty) (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ()) ())) ())
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.008
Median total errors in population: 6
Error averages by case: (0.666 0.426 0.426 0.995 0.995 0.426 0.995 0.989 0.426 0.664)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.377
Average program size in population (points): 57.686
Average percent parens in population: 0.278
Minimum age in population: 25.2926025390625
Maximum age in population: 30.15987777709961
Average age in population: 28.09880948257446
Median age in population: 28.17007446289062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8189353
--- Timings ---
Current time: 1559314729919 milliseconds
Total Time:          58.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.2 seconds, 71.8%
Fitness Testing:      9.4 seconds, 16.0%
Report:               7.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 61                 
Correct output: 26                  | Program output: 67                 
Correct output: 1                   | Program output: 112                
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 65                 
Correct output: 31                  | Program output: 90                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 43                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 59                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 92                 
Correct output: 26                  | Program output: 45                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 69                 
Correct output: -94                 | Program output: 12                 
Correct output: -53                 | Program output: 81                 
Correct output: 5                   | Program output: 56                 
Correct output: -8                  | Program output:                    
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 71                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 25                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 100                
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -28                
Correct output: 12                  | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: 15                 
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output:                    
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 57                 
Correct output: -96                 | Program output: 57                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_yank in3 in3 exec_yankdup integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove exec_yankdup print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ())))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_yank in3 in3 exec_yankdup integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove exec_yankdup print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ())))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (161 312 333 284 652 8 159 283 161 312)
Population mean number of elite cases: 2.66
Count of perfect (error zero) individuals by case: (161 312 333 284 652 8 159 283 161 312)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Best program: (in1 boolean_yank in3 in3 exec_yankdup integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove exec_yankdup print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ())))
Errors: [0 0 1 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.335
Median total errors in population: 8
Error averages by case: (0.839 0.688 0.667 0.716 0.348 0.992 0.841 0.717 0.839 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.82
Average program size in population (points): 57.575
Average percent parens in population: 0.289
Minimum age in population: 26.780517578125
Maximum age in population: 31.58089637756348
Average age in population: 29.77112928962708
Median age in population: 29.86165618896484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8614919
--- Timings ---
Current time: 1559314732404 milliseconds
Total Time:          61.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.0 seconds, 71.9%
Fitness Testing:      9.8 seconds, 16.0%
Report:               7.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 61                 
Correct output: 26                  | Program output: 67                 
Correct output: 1                   | Program output: 112                
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 65                 
Correct output: 31                  | Program output: 90                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 43                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 89                 
Correct output: 23                  | Program output: 59                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 92                 
Correct output: 26                  | Program output: 45                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 69                 
Correct output: -94                 | Program output: 12                 
Correct output: -53                 | Program output: 81                 
Correct output: 5                   | Program output: 56                 
Correct output: -8                  | Program output:                    
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 71                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 25                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: 100                
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -28                
Correct output: 12                  | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: 15                 
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output:                    
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 57                 
Correct output: -96                 | Program output: 57                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_yank in3 in3 exec_yankdup integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_max exec_yankdup print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ())))
Lexicase best errors: [0 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_yank in3 in3 exec_yankdup integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_max exec_yankdup print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ())))
Zero cases best errors: [0 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (948 295 444 531 517 444 444 298 200 946)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (948 295 444 531 517 444 444 298 200 946)
Population mean number of perfect (error zero) cases: 5.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Best program: (in1 boolean_yank in3 in3 exec_yankdup integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove exec_yankdup print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ())))
Errors: [0 1 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 4.933
Median total errors in population: 5
Error averages by case: (0.052 0.705 0.556 0.469 0.483 0.556 0.556 0.702 0.8 0.054)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.624
Average program size in population (points): 47.353
Average percent parens in population: 0.246
Minimum age in population: 28.88262939453125
Maximum age in population: 32.86165618896484
Average age in population: 30.94488530254364
Median age in population: 31.10065650939941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8809874
--- Timings ---
Current time: 1559314735470 milliseconds
Total Time:          64.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.6 seconds, 72.5%
Fitness Testing:     10.0 seconds, 15.6%
Report:               7.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: 9                   | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 18                 
Correct output: 10                  | Program output: 66                 
Correct output: 2                   | Program output: 15                 
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 80                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 58                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: -48                
Correct output: -72                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -55                
Correct output: -86                 | Program output: -34                
Correct output: -86                 | Program output: 30                 
Correct output: -52                 | Program output: -52                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: 39                 
Correct output: -62                 | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -52                
Correct output: -86                 | Program output: -71                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -15                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -1                 
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 20                 
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 21                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 34                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 1                  
Correct output: 5                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 integer_dup in4 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap () ()))) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 46
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 integer_dup in4 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap () ()))) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 46
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (245 893 246 246 246 247 517 246 246 246)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (245 893 246 246 246 247 517 246 246 246)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 integer_dup in4 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap () ()))) () ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 34
Size: 46
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.622
Median total errors in population: 8
Error averages by case: (0.755 0.107 0.754 0.754 0.754 0.753 0.483 0.754 0.754 0.754)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.931
Average program size in population (points): 47.427
Average percent parens in population: 0.240
Minimum age in population: 30.134033203125
Maximum age in population: 34.86165618896484
Average age in population: 32.37616638660431
Median age in population: 32.50449180603027
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9093497
--- Timings ---
Current time: 1559314737976 milliseconds
Total Time:          66.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.6 seconds, 72.8%
Fitness Testing:     10.3 seconds, 15.5%
Report:               7.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: 9                   | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 18                 
Correct output: 10                  | Program output: 66                 
Correct output: 2                   | Program output: 15                 
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 80                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 58                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: -48                
Correct output: -72                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -55                
Correct output: -86                 | Program output: -34                
Correct output: -86                 | Program output: 30                 
Correct output: -52                 | Program output: -52                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: 39                 
Correct output: -62                 | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -52                
Correct output: -86                 | Program output: -71                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -15                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -1                 
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 20                 
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 21                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 34                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 1                  
Correct output: 5                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 integer_dup in4 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap () ()))) () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 integer_dup in4 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap () ()))) () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (834 948 829 922 836 97 830 6 835 97)
Population mean number of elite cases: 6.23
Count of perfect (error zero) individuals by case: (834 948 829 922 836 97 830 6 835 97)
Population mean number of perfect (error zero) cases: 6.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 integer_dup in4 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_swap) (integer_yankdup exec_stackdepth) (exec_dup () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap () ()))) () ()))
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 40
Size: 56
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 3.766
Median total errors in population: 3
Error averages by case: (0.166 0.052 0.171 0.078 0.164 0.903 0.17 0.994 0.165 0.903)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.74
Average program size in population (points): 46.246
Average percent parens in population: 0.249
Minimum age in population: 31.38543701171875
Maximum age in population: 36.30212879180908
Average age in population: 34.33637257432938
Median age in population: 34.41654586791992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 220
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9302326
--- Timings ---
Current time: 1559314740659 milliseconds
Total Time:          69.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.9 seconds, 73.2%
Fitness Testing:     10.6 seconds, 15.2%
Report:               7.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 561
Test mean error for best: 0.56100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 54                 
Correct output: 46                  | Program output: 88                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 37                 
Correct output: 4                   | Program output: 68                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 9161               
Correct output: 26                  | Program output: 49                 
Correct output: 1                   | Program output: 118                
Correct output: 10                  | Program output: 90                 
Correct output: 2                   | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 95                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 80                 
Correct output: 18                  | Program output: 45                 
Correct output: 23                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 69                 
Correct output: 38                  | Program output: 62                 
Correct output: 26                  | Program output: 97                 
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 35                 
Correct output: -8                  | Program output:                    
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 46                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 95                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: 51                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -19                
Correct output: -16                 | Program output: 63                 
Correct output: -38                 | Program output: 1                  
Correct output: 12                  | Program output: 75                 
Correct output: -80                 | Program output: 21                 
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 15                 
Correct output: -86                 | Program output: -17                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: 9                  
Correct output: -97                 | Program output: 42                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: 77                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_yank in3 in3 integer_dup in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_s_when_autoconstructing (boolean_yank exec_empty exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ())) () ())
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_yank in3 in3 integer_dup in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_s_when_autoconstructing (boolean_yank exec_empty exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ())) () ())
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 591 237 237 500 500 591 949 237 293)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (293 591 237 237 500 500 591 949 237 293)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 in3 in3 exec_yankdup integer_rot print_integer in1 exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove exec_yankdup print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Errors: [1 0 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 5.572
Median total errors in population: 5
Error averages by case: (0.707 0.409 0.763 0.763 0.5 0.5 0.409 0.051 0.763 0.707)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.813
Average program size in population (points): 46.64
Average percent parens in population: 0.253
Minimum age in population: 32.38543701171875
Maximum age in population: 37.78416180610657
Average age in population: 35.78874241900444
Median age in population: 35.87568831443787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9507236
--- Timings ---
Current time: 1559314743008 milliseconds
Total Time:          71.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.8 seconds, 73.5%
Fitness Testing:     10.8 seconds, 15.0%
Report:               8.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 32                 
Correct output: 0                   | Program output: 61                 
Correct output: 26                  | Program output: 49                 
Correct output: 1                   | Program output: 12                 
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 43                 
Correct output: 23                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 45                 
Correct output: 23                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 62                 
Correct output: 26                  | Program output: 45                 
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -41                
Correct output: -88                 | Program output: -55                
Correct output: -86                 | Program output: -35                
Correct output: -86                 | Program output: -7                 
Correct output: -52                 | Program output: -52                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -81                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 35                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -1                 
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -31                
Correct output: -76                 | Program output: 18                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -86                
Correct output: -89                 | Program output: 42                 
Correct output: -56                 | Program output: -55                
Correct output: 9                   | Program output: 71                 
Correct output: -76                 | Program output: 14                 
Correct output: -42                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -27                
Correct output: -32                 | Program output: 25                 
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -98                
Correct output: -41                 | Program output: -41                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -3                 
Correct output: -26                 | Program output: 3                  
Correct output: -94                 | Program output: -91                
Correct output: -66                 | Program output: -42                
Correct output: -55                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -28                
Correct output: 12                  | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -60                
Correct output: -9                  | Program output: 25                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -17                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: 28                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: 57                 
Correct output: -85                 | Program output: -13                
Correct output: 5                   | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_flush tag_integer_693 boolean_pop integer_empty tag_integer_693 boolean_pop integer_max in2 integer_dup in1 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (exec_if (exec_eq exec_when (boolean_dup boolean_rot exec_swap () ())) ())) () ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_flush tag_integer_693 boolean_pop integer_empty tag_integer_693 boolean_pop integer_max in2 integer_dup in1 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (exec_if (exec_eq exec_when (boolean_dup boolean_rot exec_swap () ())) ())) () ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (487 487 487 348 231 487 348 511 926 511)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (487 487 487 348 231 487 348 511 926 511)
Population mean number of perfect (error zero) cases: 4.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Best program: (integer_flush tag_integer_693 boolean_pop integer_max tag_integer_693 boolean_pop integer_max in2 integer_dup integer_max tag_integer_693 boolean_pop integer_max in2 integer_dup in1 integer_min integer_rot integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (exec_if (exec_eq exec_when (boolean_dup boolean_rot exec_swap () ())) ())) () ())
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 44
Size: 58
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 5.177
Median total errors in population: 5
Error averages by case: (0.513 0.513 0.513 0.652 0.769 0.513 0.652 0.489 0.074 0.489)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.772
Average program size in population (points): 45.132
Average percent parens in population: 0.251
Minimum age in population: 34.6235466003418
Maximum age in population: 39.0639146566391
Average age in population: 37.15538917481899
Median age in population: 37.2094943523407
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9713717
--- Timings ---
Current time: 1559314745534 milliseconds
Total Time:          74.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.8 seconds, 73.7%
Fitness Testing:     11.0 seconds, 14.8%
Report:               8.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 73                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 67                 
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -26                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 67                 
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 24                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: 56                 
Correct output: -78                 | Program output: 62                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_yank in3 in3 integer_dup in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_s_when_autoconstructing (boolean_yank exec_empty exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc boolean_rot integer_min exec_y (in2)) ())) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_yank in3 in3 integer_dup in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_s_when_autoconstructing (boolean_yank exec_empty exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc boolean_rot integer_min exec_y (in2)) ())) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 728 510 215 938 458 458 458 436 458)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (215 728 510 215 938 458 458 458 436 458)
Population mean number of perfect (error zero) cases: 4.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Best program: (in1 boolean_yank in3 in3 integer_dup in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_s_when_autoconstructing (boolean_yank exec_empty exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (integer_inc integer_empty exec_yank exec_y (in2))) ())) () ())
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 5.126
Median total errors in population: 6
Error averages by case: (0.785 0.272 0.49 0.785 0.062 0.542 0.542 0.542 0.564 0.542)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.088
Average program size in population (points): 45.532
Average percent parens in population: 0.249
Minimum age in population: 35.6235466003418
Maximum age in population: 40.66480976343155
Average age in population: 38.75848712289333
Median age in population: 38.83628591895103
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9980814
--- Timings ---
Current time: 1559314748022 milliseconds
Total Time:          76.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.8 seconds, 73.9%
Fitness Testing:     11.3 seconds, 14.7%
Report:               8.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 73                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 67                 
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -26                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 67                 
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 24                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: 56                 
Correct output: -78                 | Program output: 62                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_yank in3 in3 integer_dup in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_when (integer_max exec_empty exec_eq exec_when (boolean_dup exec_s_when_autoconstructing (exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ()) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_yank in3 in3 integer_dup in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_when (integer_max exec_empty exec_eq exec_when (boolean_dup exec_s_when_autoconstructing (exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ()) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (739 739 739 945 950 589 589 950 739 227)
Population mean number of elite cases: 7.21
Count of perfect (error zero) individuals by case: (739 739 739 945 950 589 589 950 739 227)
Population mean number of perfect (error zero) cases: 7.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Best program: (in1 boolean_yank in3 in3 integer_dup in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_do*range () exec_s_when_autoconstructing (boolean_yank exec_empty exec_eq exec_when (boolean_dup boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (integer_inc integer_empty exec_yank exec_y (in2))) ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 2.794
Median total errors in population: 2
Error averages by case: (0.261 0.261 0.261 0.055 0.05 0.411 0.411 0.05 0.261 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.762
Average program size in population (points): 43.818
Average percent parens in population: 0.249
Minimum age in population: 37.52004623413086
Maximum age in population: 41.9513221681118
Average age in population: 40.00285455274582
Median age in population: 40.02984048426151
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10289489
--- Timings ---
Current time: 1559314750533 milliseconds
Total Time:          79.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.8 seconds, 74.1%
Fitness Testing:     11.6 seconds, 14.6%
Report:               8.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 23                 
Correct output: -96                 | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: 9                   | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 18                 
Correct output: 10                  | Program output: 66                 
Correct output: 2                   | Program output: 15                 
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 80                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 58                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: -48                
Correct output: -72                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -55                
Correct output: -86                 | Program output: -34                
Correct output: -86                 | Program output: 30                 
Correct output: -52                 | Program output: -52                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: 39                 
Correct output: -62                 | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -52                
Correct output: -86                 | Program output: -71                
Correct output: -55                 | Program output: -29                
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 42                 
Correct output: -46                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -22                
Correct output: -100                | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -15                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -1                 
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: 20                 
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: 34                 
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: 21                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: 34                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -68                
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: 1                  
Correct output: 5                   | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 integer_dup in4 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_flush exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times boolean_dup boolean_rot exec_swap () ()) () ())
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 integer_dup in4 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_flush exec_stackdepth) exec_do*range () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times boolean_dup boolean_rot exec_swap () ()) () ())
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (666 8 808 347 812 349 4 260 812 8)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (666 8 808 347 812 349 4 260 812 8)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2})
Best program: (integer_flush tag_integer_693 boolean_pop integer_max in2 integer_dup in4 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_k (integer_shove integer_dec print_integer boolean_swap) (exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times exec_dup_times (exec_s_when_autoconstructing (boolean_yank exec_empty boolean_rot exec_swap (integer_inc integer_empty exec_yank exec_y (in2)) ()) () ())) () ())) ())
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 50
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 5.926
Median total errors in population: 6
Error averages by case: (0.334 0.992 0.192 0.653 0.188 0.651 0.996 0.74 0.188 0.992)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.677
Average program size in population (points): 44.846
Average percent parens in population: 0.247
Minimum age in population: 38.87481325864792
Maximum age in population: 43.50645607709885
Average age in population: 41.47029764703661
Median age in population: 41.55339890345931
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10535353
--- Timings ---
Current time: 1559314753046 milliseconds
Total Time:          81.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 74.3%
Fitness Testing:     11.9 seconds, 14.5%
Report:               9.1 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 322
Test mean error for best: 0.32200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 3                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 29                 
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 52                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 45                 
Correct output: -69                 | Program output: -54                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -75                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -32                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -47                
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output:                    
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 57                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 1818               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Lexicase best program: (in1 boolean_yank in1 boolean_yank in3 in3 exec_yank in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap) () integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Zero cases best program: (in1 boolean_yank in1 boolean_yank in3 in3 exec_yank in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap) () integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (792 157 221 300 872 459 789 940 790 419)
Population mean number of elite cases: 5.74
Count of perfect (error zero) individuals by case: (792 157 221 300 872 459 789 940 790 419)
Population mean number of perfect (error zero) cases: 5.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Best program: (in1 boolean_yank in1 boolean_yank in3 in3 exec_yank in4 integer_min boolean_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap) () integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.261
Median total errors in population: 4
Error averages by case: (0.208 0.843 0.779 0.7 0.128 0.541 0.211 0.06 0.21 0.581)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.216
Average program size in population (points): 44.28
Average percent parens in population: 0.249
Minimum age in population: 40.70358769595623
Maximum age in population: 45.08464590460062
Average age in population: 42.98163786412776
Median age in population: 42.93092194758356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10764743
--- Timings ---
Current time: 1559314755540 milliseconds
Total Time:          84.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 74.5%
Fitness Testing:     12.1 seconds, 14.4%
Report:               9.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 3                  
Correct output: 26                  | Program output: 67                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 43                 
Correct output: 23                  | Program output: 48                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 88                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -21                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: 12                 
Correct output: -53                 | Program output: 81                 
Correct output: 5                   | Program output: 32                 
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -20                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -27                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 45                 
Correct output: -76                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: -27                
Correct output: -32                 | Program output: 25                 
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -98                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: 43                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -66                 | Program output: 38                 
Correct output: -54                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -28                
Correct output: 12                  | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: 15                 
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: 57                 
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Lexicase best program: (in1 boolean_yank in1 boolean_yank in3 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_dup () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times) (exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap () ()))) ())
Lexicase best errors: [1 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Zero cases best program: (in1 boolean_yank in1 boolean_yank in3 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_dup () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times) (exec_dup_times (integer_dup_items exec_eq exec_when (boolean_dup boolean_rot exec_swap () ()))) ())
Zero cases best errors: [1 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (742 237 334 941 333 334 131 469 143 338)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (742 237 334 941 333 334 131 469 143 338)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times})
Best program: (in1 boolean_yank in1 boolean_yank in3 integer_min integer_rot print_integer integer_shove exec_dup_items exec_rot () (boolean_shove exec_flush integer_shove integer_dec print_integer boolean_swap) (integer_yankdup exec_stackdepth) exec_dup () exec_stackdepth exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times) (exec_dup_times (integer_dup_items exec_s_when_autoconstructing (boolean_yank exec_empty boolean_dup_times) () ())) ())
Errors: [1 1 0 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 5.998
Median total errors in population: 6
Error averages by case: (0.258 0.763 0.666 0.059 0.667 0.666 0.869 0.531 0.857 0.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.944
Average program size in population (points): 44.396
Average percent parens in population: 0.235
Minimum age in population: 42.0090723335743
Maximum age in population: 45.87904679775238
Average age in population: 43.71312999035791
Median age in population: 43.93958149850368
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 239
Genome diversity (% unique genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10976699
--- Timings ---
Current time: 1559314757937 milliseconds
Total Time:          86.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.8 seconds, 74.6%
Fitness Testing:     12.4 seconds, 14.3%
Report:               9.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 195
Test mean error for best: 0.19500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: -27                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -98                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Lexicase best program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 39
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Zero cases best program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 39
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (585 523 935 455 192 523 523 349 804 315)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (585 523 935 455 192 523 523 349 804 315)
Population mean number of perfect (error zero) cases: 5.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Best program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 39
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4.796
Median total errors in population: 4
Error averages by case: (0.415 0.477 0.065 0.545 0.808 0.477 0.477 0.651 0.196 0.685)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.824
Average program size in population (points): 44.183
Average percent parens in population: 0.256
Minimum age in population: 43.0090723335743
Maximum age in population: 47.38728593289852
Average age in population: 45.59302338238992
Median age in population: 45.59005573298782
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11214101
--- Timings ---
Current time: 1559314760355 milliseconds
Total Time:          89.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.7 seconds, 74.8%
Fitness Testing:     12.7 seconds, 14.2%
Report:               9.7 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 195
Test mean error for best: 0.19500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 76                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 51                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 41                 
Correct output: 13                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -46                
Correct output: -30                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: 6                  
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -89                
Correct output: -27                 | Program output: -27                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -98                 | Program output: -98                
Correct output: -41                 | Program output: -37                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -66                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 28                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 56                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Lexicase best program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Zero cases best program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (648 254 259 106 813 816 645 816 933 649)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (648 254 259 106 813 816 645 816 933 649)
Population mean number of perfect (error zero) cases: 5.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap})
Best program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () integer_dup_items -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup exec_dup_items exec_swap () ())))
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 39
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4.061
Median total errors in population: 3
Error averages by case: (0.352 0.746 0.741 0.894 0.187 0.184 0.355 0.184 0.067 0.351)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.991
Average program size in population (points): 41.444
Average percent parens in population: 0.177
Minimum age in population: 45.19160744082183
Maximum age in population: 48.66564462240785
Average age in population: 46.62900263004517
Median age in population: 46.96544728334993
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 416
Genome diversity (% unique genomes):	 0.428
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 452
Syntactic diversity (% unique Push programs):	 0.39
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11447768
--- Timings ---
Current time: 1559314762762 milliseconds
Total Time:          91.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.7 seconds, 75.0%
Fitness Testing:     12.9 seconds, 14.1%
Report:               9.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -52                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -27                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -98                
Correct output: -41                 | Program output: -41                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Lexicase best program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 45
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Zero cases best program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (646 602 589 602 924 590 926 602 925 645)
Population mean number of elite cases: 7.05
Count of perfect (error zero) individuals by case: (646 602 589 602 924 590 926 602 925 645)
Population mean number of perfect (error zero) cases: 7.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -84} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap})
Best program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 39
Size: 45
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 2.949
Median total errors in population: 2
Error averages by case: (0.354 0.398 0.411 0.398 0.076 0.41 0.074 0.398 0.075 0.355)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.886
Average program size in population (points): 39.936
Average percent parens in population: 0.152
Minimum age in population: 47.01474565826356
Maximum age in population: 49.75972710736096
Average age in population: 48.55412442055135
Median age in population: 48.56972803501412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 201
Syntactic diversity (% unique Push programs):	 0.431
Total error diversity:				 0.01
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 11596894
--- Timings ---
Current time: 1559314765051 milliseconds
Total Time:          93.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.7 seconds, 75.3%
Fitness Testing:     13.1 seconds, 13.9%
Report:              10.0 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 33
Successful program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 45


Auto-simplifying with starting size: 45
step: 0
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 500
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 1000
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 1500
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 2000
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 2500
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 3000
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 3500
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 4000
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 4500
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 5000
program: (in1 boolean_yank in1 boolean_yank in3 integer_min in4 integer_min boolean_rot boolean_yank in2 integer_min in4 integer_min boolean_rot print_integer integer_shove boolean_shove exec_flush integer_shove integer_dec print_integer print_integer boolean_swap integer_yankdup exec_stackdepth exec_do*range () exec_stackdepth -84 boolean_yank exec_empty boolean_dup_times exec_dup_times (integer_dup_items exec_eq exec_while (boolean_dup boolean_rot exec_swap () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: 40                  | Program output: 40                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -34                 | Program output: -34                
Correct output: 75                  | Program output: 75                 
Correct output: -37                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 21                  | Program output: 21                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 26                 
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -86                 | Program output: -86                
Correct output: -52                 | Program output: -52                
Correct output: -30                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -53                
Correct output: 5                   | Program output: 5                  
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: 39                  | Program output: 39                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: 9                   | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -27                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -98                
Correct output: -41                 | Program output: -41                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -26                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -54                
Correct output: -16                 | Program output: -16                
Correct output: -38                 | Program output: -38                
Correct output: 12                  | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: 26                  | Program output: 26                 
Correct output: -11                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: 5                   | Program output: 5                  
;;******************************
