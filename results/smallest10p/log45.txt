Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-24 -24 -24 47] -24] [[27 -3 -3 -3] -3] [[-78 -80 -80 -80] -80] [[37 37 -68 37] -68] [[-31 -31 -64 -31] -64] [[-32 -32 9 -32] -32] [[-87 19 -87 -87] -87] [[-68 -5 -68 -68] -68] [[-35 -85 -35 -35] -85] [[32 32 32 54] 32] [(-20 -20 -20 -20) -20] [(3 3 3 3) 3] [(92 92 92 92) 92] [(14 14 14 14) 14] [(-96 -96 -96 -96) -96] [(38 85 57 6) 6] [(66 63 82 56) 56] [(56 86 20 7) 7] [(64 43 61 62) 43] [(22 92 94 37) 22] [(66 91 56 16) 16] [(62 77 52 47) 47] [(11 96 22 99) 11] [(18 53 13 56) 13] [(93 26 28 56) 26] [(5 88 22 55) 5] [(70 63 62 82) 62] [(72 85 99 24) 24] [(79 33 40 51) 33] [(6 40 74 10) 6] [(35 84 59 90) 35] [(43 93 64 84) 43] [(33 66 26 97) 26] [(64 96 10 64) 10] [(93 73 8 66) 8] [(-44 -99 -65 -55) -99] [(-91 -72 40 68) -91] [(0 34 -15 94) -15] [(-67 11 98 91) -67] [(97 91 -4 -79) -79] [(-78 -72 -56 -99) -99] [(-32 -61 68 -1) -61] [(40 81 83 95) 40] [(-85 33 71 85) -85] [(-70 -65 -68 -96) -96] [(-37 -48 94 21) -48] [(-95 -96 27 -22) -96] [(-49 32 21 6) -49] [(-74 0 -78 78) -78] [(52 9 63 0) 0] [(23 90 -71 -7) -71] [(-83 -79 -47 -51) -83] [(-9 -19 -90 -63) -90] [(3 -85 32 14) -85] [(0 51 -85 -83) -85] [(91 58 1 -64) -64] [(39 -72 22 -13) -72] [(-87 -40 52 -54) -87] [(81 -52 -44 23) -52] [(-25 54 95 52) -25] [(86 19 -15 -73) -73] [(-24 89 78 62) -24] [(-96 68 23 -77) -96] [(92 56 -29 -87) -87] [(62 -89 39 -35) -89] [(44 -36 27 8) -36] [(43 -91 -58 -12) -91] [(-51 -6 82 11) -51] [(14 63 91 -57) -57] [(-54 74 16 -21) -54] [(54 19 -77 76) -77] [(-90 -76 3 -41) -90] [(18 -41 -24 -83) -83] [(40 0 77 -3) -3] [(-62 43 -45 64) -62] [(83 -15 92 34) -15] [(47 -97 35 34) -97] [(6 -71 -29 -98) -98] [(-46 -10 17 -79) -79] [(-32 46 85 -28) -32] [(55 -20 -11 11) -20] [(-20 48 19 64) -20] [(30 29 -21 -49) -49] [(50 53 21 36) 21] [(-59 12 -9 97) -59] [(80 61 34 33) 33] [(97 -46 5 -27) -46] [(-55 -70 96 -75) -75] [(95 61 -41 -70) -70] [(-54 75 5 39) -54] [(27 7 -30 -69) -69] [(-9 -52 -24 33) -52] [(-24 -46 -40 -84) -84] [(-3 -53 65 49) -53] [(-80 9 -88 90) -88])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-24 -24 -24 47] -24]
Train Case:   6 | Input/Output: [[27 -3 -3 -3] -3]
Train Case:   7 | Input/Output: [[-78 -80 -80 -80] -80]
Train Case:   8 | Input/Output: [[37 37 -68 37] -68]
Train Case:   9 | Input/Output: [[-31 -31 -64 -31] -64]
Train Case:  10 | Input/Output: [[-32 -32 9 -32] -32]
Train Case:  11 | Input/Output: [[-87 19 -87 -87] -87]
Train Case:  12 | Input/Output: [[-68 -5 -68 -68] -68]
Train Case:  13 | Input/Output: [[-35 -85 -35 -35] -85]
Train Case:  14 | Input/Output: [[32 32 32 54] 32]
Train Case:  15 | Input/Output: [(-20 -20 -20 -20) -20]
Train Case:  16 | Input/Output: [(3 3 3 3) 3]
Train Case:  17 | Input/Output: [(92 92 92 92) 92]
Train Case:  18 | Input/Output: [(14 14 14 14) 14]
Train Case:  19 | Input/Output: [(-96 -96 -96 -96) -96]
Train Case:  20 | Input/Output: [(38 85 57 6) 6]
Train Case:  21 | Input/Output: [(66 63 82 56) 56]
Train Case:  22 | Input/Output: [(56 86 20 7) 7]
Train Case:  23 | Input/Output: [(64 43 61 62) 43]
Train Case:  24 | Input/Output: [(22 92 94 37) 22]
Train Case:  25 | Input/Output: [(66 91 56 16) 16]
Train Case:  26 | Input/Output: [(62 77 52 47) 47]
Train Case:  27 | Input/Output: [(11 96 22 99) 11]
Train Case:  28 | Input/Output: [(18 53 13 56) 13]
Train Case:  29 | Input/Output: [(93 26 28 56) 26]
Train Case:  30 | Input/Output: [(5 88 22 55) 5]
Train Case:  31 | Input/Output: [(70 63 62 82) 62]
Train Case:  32 | Input/Output: [(72 85 99 24) 24]
Train Case:  33 | Input/Output: [(79 33 40 51) 33]
Train Case:  34 | Input/Output: [(6 40 74 10) 6]
Train Case:  35 | Input/Output: [(35 84 59 90) 35]
Train Case:  36 | Input/Output: [(43 93 64 84) 43]
Train Case:  37 | Input/Output: [(33 66 26 97) 26]
Train Case:  38 | Input/Output: [(64 96 10 64) 10]
Train Case:  39 | Input/Output: [(93 73 8 66) 8]
Train Case:  40 | Input/Output: [(-44 -99 -65 -55) -99]
Train Case:  41 | Input/Output: [(-91 -72 40 68) -91]
Train Case:  42 | Input/Output: [(0 34 -15 94) -15]
Train Case:  43 | Input/Output: [(-67 11 98 91) -67]
Train Case:  44 | Input/Output: [(97 91 -4 -79) -79]
Train Case:  45 | Input/Output: [(-78 -72 -56 -99) -99]
Train Case:  46 | Input/Output: [(-32 -61 68 -1) -61]
Train Case:  47 | Input/Output: [(40 81 83 95) 40]
Train Case:  48 | Input/Output: [(-85 33 71 85) -85]
Train Case:  49 | Input/Output: [(-70 -65 -68 -96) -96]
Train Case:  50 | Input/Output: [(-37 -48 94 21) -48]
Train Case:  51 | Input/Output: [(-95 -96 27 -22) -96]
Train Case:  52 | Input/Output: [(-49 32 21 6) -49]
Train Case:  53 | Input/Output: [(-74 0 -78 78) -78]
Train Case:  54 | Input/Output: [(52 9 63 0) 0]
Train Case:  55 | Input/Output: [(23 90 -71 -7) -71]
Train Case:  56 | Input/Output: [(-83 -79 -47 -51) -83]
Train Case:  57 | Input/Output: [(-9 -19 -90 -63) -90]
Train Case:  58 | Input/Output: [(3 -85 32 14) -85]
Train Case:  59 | Input/Output: [(0 51 -85 -83) -85]
Train Case:  60 | Input/Output: [(91 58 1 -64) -64]
Train Case:  61 | Input/Output: [(39 -72 22 -13) -72]
Train Case:  62 | Input/Output: [(-87 -40 52 -54) -87]
Train Case:  63 | Input/Output: [(81 -52 -44 23) -52]
Train Case:  64 | Input/Output: [(-25 54 95 52) -25]
Train Case:  65 | Input/Output: [(86 19 -15 -73) -73]
Train Case:  66 | Input/Output: [(-24 89 78 62) -24]
Train Case:  67 | Input/Output: [(-96 68 23 -77) -96]
Train Case:  68 | Input/Output: [(92 56 -29 -87) -87]
Train Case:  69 | Input/Output: [(62 -89 39 -35) -89]
Train Case:  70 | Input/Output: [(44 -36 27 8) -36]
Train Case:  71 | Input/Output: [(43 -91 -58 -12) -91]
Train Case:  72 | Input/Output: [(-51 -6 82 11) -51]
Train Case:  73 | Input/Output: [(14 63 91 -57) -57]
Train Case:  74 | Input/Output: [(-54 74 16 -21) -54]
Train Case:  75 | Input/Output: [(54 19 -77 76) -77]
Train Case:  76 | Input/Output: [(-90 -76 3 -41) -90]
Train Case:  77 | Input/Output: [(18 -41 -24 -83) -83]
Train Case:  78 | Input/Output: [(40 0 77 -3) -3]
Train Case:  79 | Input/Output: [(-62 43 -45 64) -62]
Train Case:  80 | Input/Output: [(83 -15 92 34) -15]
Train Case:  81 | Input/Output: [(47 -97 35 34) -97]
Train Case:  82 | Input/Output: [(6 -71 -29 -98) -98]
Train Case:  83 | Input/Output: [(-46 -10 17 -79) -79]
Train Case:  84 | Input/Output: [(-32 46 85 -28) -32]
Train Case:  85 | Input/Output: [(55 -20 -11 11) -20]
Train Case:  86 | Input/Output: [(-20 48 19 64) -20]
Train Case:  87 | Input/Output: [(30 29 -21 -49) -49]
Train Case:  88 | Input/Output: [(50 53 21 36) 21]
Train Case:  89 | Input/Output: [(-59 12 -9 97) -59]
Train Case:  90 | Input/Output: [(80 61 34 33) 33]
Train Case:  91 | Input/Output: [(97 -46 5 -27) -46]
Train Case:  92 | Input/Output: [(-55 -70 96 -75) -75]
Train Case:  93 | Input/Output: [(95 61 -41 -70) -70]
Train Case:  94 | Input/Output: [(-54 75 5 39) -54]
Train Case:  95 | Input/Output: [(27 7 -30 -69) -69]
Train Case:  96 | Input/Output: [(-9 -52 -24 33) -52]
Train Case:  97 | Input/Output: [(-24 -46 -40 -84) -84]
Train Case:  98 | Input/Output: [(-3 -53 65 49) -53]
Train Case:  99 | Input/Output: [(-80 9 -88 90) -88]
Test Case:   0 | Input/Output: [[-83 -83 -99 -83] -99]
Test Case:   1 | Input/Output: [[66 66 -50 66] -50]
Test Case:   2 | Input/Output: [[75 -41 75 75] -41]
Test Case:   3 | Input/Output: [[48 -95 -95 -95] -95]
Test Case:   4 | Input/Output: [[10 -62 -62 -62] -62]
Test Case:   5 | Input/Output: [[-93 44 44 44] -93]
Test Case:   6 | Input/Output: [[97 97 97 -35] -35]
Test Case:   7 | Input/Output: [[-35 -87 -35 -35] -87]
Test Case:   8 | Input/Output: [[36 3 36 36] 3]
Test Case:   9 | Input/Output: [[-88 56 -88 -88] -88]
Test Case:  10 | Input/Output: [[36 36 36 47] 36]
Test Case:  11 | Input/Output: [[-31 -31 -31 86] -31]
Test Case:  12 | Input/Output: [[-66 -66 -66 50] -66]
Test Case:  13 | Input/Output: [[-4 24 -4 -4] -4]
Test Case:  14 | Input/Output: [[94 94 94 23] 23]
Test Case:  15 | Input/Output: [[71 53 53 53] 53]
Test Case:  16 | Input/Output: [[87 87 87 97] 87]
Test Case:  17 | Input/Output: [[-45 -45 93 -45] -45]
Test Case:  18 | Input/Output: [[29 29 29 -73] -73]
Test Case:  19 | Input/Output: [[-29 -5 -5 -5] -29]
Test Case:  20 | Input/Output: [[-27 -27 65 -27] -27]
Test Case:  21 | Input/Output: [[92 92 80 92] 80]
Test Case:  22 | Input/Output: [[76 76 76 67] 67]
Test Case:  23 | Input/Output: [[41 -84 -84 -84] -84]
Test Case:  24 | Input/Output: [[-20 -20 -83 -20] -83]
Test Case:  25 | Input/Output: [[40 22 40 40] 22]
Test Case:  26 | Input/Output: [[-7 -22 -7 -7] -22]
Test Case:  27 | Input/Output: [[-50 -50 -50 86] -50]
Test Case:  28 | Input/Output: [[10 10 -7 10] -7]
Test Case:  29 | Input/Output: [[-61 -65 -65 -65] -65]
Test Case:  30 | Input/Output: [[33 -28 33 33] -28]
Test Case:  31 | Input/Output: [[-24 34 34 34] -24]
Test Case:  32 | Input/Output: [[-94 -94 100 -94] -94]
Test Case:  33 | Input/Output: [[35 35 35 39] 35]
Test Case:  34 | Input/Output: [[37 -52 37 37] -52]
Test Case:  35 | Input/Output: [[14 15 14 14] 14]
Test Case:  36 | Input/Output: [[81 81 81 -89] -89]
Test Case:  37 | Input/Output: [[-44 -44 -44 14] -44]
Test Case:  38 | Input/Output: [[-39 -39 -39 -1] -39]
Test Case:  39 | Input/Output: [[-82 5 5 5] -82]
Test Case:  40 | Input/Output: [[3 3 -70 3] -70]
Test Case:  41 | Input/Output: [[56 -89 -89 -89] -89]
Test Case:  42 | Input/Output: [[57 57 -98 57] -98]
Test Case:  43 | Input/Output: [[49 -26 -26 -26] -26]
Test Case:  44 | Input/Output: [[31 -56 -56 -56] -56]
Test Case:  45 | Input/Output: [[-72 97 -72 -72] -72]
Test Case:  46 | Input/Output: [[-32 -32 -32 43] -32]
Test Case:  47 | Input/Output: [[67 67 25 67] 25]
Test Case:  48 | Input/Output: [[-43 -39 -39 -39] -43]
Test Case:  49 | Input/Output: [[20 53 53 53] 20]
Test Case:  50 | Input/Output: [[-60 -60 -60 -64] -64]
Test Case:  51 | Input/Output: [[-16 -99 -16 -16] -99]
Test Case:  52 | Input/Output: [[34 36 34 34] 34]
Test Case:  53 | Input/Output: [[-69 77 77 77] -69]
Test Case:  54 | Input/Output: [[-72 -72 -72 5] -72]
Test Case:  55 | Input/Output: [[-41 -41 -41 0] -41]
Test Case:  56 | Input/Output: [[24 24 -58 24] -58]
Test Case:  57 | Input/Output: [[79 9 79 79] 9]
Test Case:  58 | Input/Output: [[80 40 80 80] 40]
Test Case:  59 | Input/Output: [[3 -33 3 3] -33]
Test Case:  60 | Input/Output: [[-32 -1 -1 -1] -32]
Test Case:  61 | Input/Output: [[57 57 57 53] 53]
Test Case:  62 | Input/Output: [[-60 -60 -60 16] -60]
Test Case:  63 | Input/Output: [[-2 18 18 18] -2]
Test Case:  64 | Input/Output: [[56 56 56 54] 54]
Test Case:  65 | Input/Output: [[-45 -45 -45 17] -45]
Test Case:  66 | Input/Output: [[84 84 -90 84] -90]
Test Case:  67 | Input/Output: [[58 18 18 18] 18]
Test Case:  68 | Input/Output: [[-94 -89 -94 -94] -94]
Test Case:  69 | Input/Output: [[100 100 -32 100] -32]
Test Case:  70 | Input/Output: [[16 74 74 74] 16]
Test Case:  71 | Input/Output: [[50 50 -52 50] -52]
Test Case:  72 | Input/Output: [[47 47 47 65] 47]
Test Case:  73 | Input/Output: [[-66 -59 -59 -59] -66]
Test Case:  74 | Input/Output: [[-63 -63 -63 -63] -63]
Test Case:  75 | Input/Output: [[-77 -27 -27 -27] -77]
Test Case:  76 | Input/Output: [[-52 -16 -16 -16] -52]
Test Case:  77 | Input/Output: [[71 96 71 71] 71]
Test Case:  78 | Input/Output: [[-85 69 -85 -85] -85]
Test Case:  79 | Input/Output: [[60 32 60 60] 32]
Test Case:  80 | Input/Output: [[39 39 39 49] 39]
Test Case:  81 | Input/Output: [[-7 -7 -87 -7] -87]
Test Case:  82 | Input/Output: [[95 -49 -49 -49] -49]
Test Case:  83 | Input/Output: [[63 -95 63 63] -95]
Test Case:  84 | Input/Output: [[13 -31 13 13] -31]
Test Case:  85 | Input/Output: [[-17 -17 -21 -17] -21]
Test Case:  86 | Input/Output: [[87 14 14 14] 14]
Test Case:  87 | Input/Output: [[72 50 72 72] 50]
Test Case:  88 | Input/Output: [[-67 -67 -67 -41] -67]
Test Case:  89 | Input/Output: [[9 22 22 22] 9]
Test Case:  90 | Input/Output: [[38 38 -21 38] -21]
Test Case:  91 | Input/Output: [[-41 77 77 77] -41]
Test Case:  92 | Input/Output: [[-22 -22 62 -22] -22]
Test Case:  93 | Input/Output: [[-86 -68 -86 -86] -86]
Test Case:  94 | Input/Output: [[-24 -24 -24 61] -24]
Test Case:  95 | Input/Output: [[93 93 93 76] 76]
Test Case:  96 | Input/Output: [[-4 -86 -86 -86] -86]
Test Case:  97 | Input/Output: [[5 -60 -60 -60] -60]
Test Case:  98 | Input/Output: [[59 -54 59 59] -54]
Test Case:  99 | Input/Output: [[-17 -77 -17 -17] -77]
Test Case: 100 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 101 | Input/Output: [(82 82 82 82) 82]
Test Case: 102 | Input/Output: [(47 47 47 47) 47]
Test Case: 103 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 104 | Input/Output: [(65 65 65 65) 65]
Test Case: 105 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 106 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 107 | Input/Output: [(78 78 78 78) 78]
Test Case: 108 | Input/Output: [(14 14 14 14) 14]
Test Case: 109 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 110 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 111 | Input/Output: [(34 34 34 34) 34]
Test Case: 112 | Input/Output: [(80 80 80 80) 80]
Test Case: 113 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 114 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 115 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 116 | Input/Output: [(46 46 46 46) 46]
Test Case: 117 | Input/Output: [(19 19 19 19) 19]
Test Case: 118 | Input/Output: [(89 89 89 89) 89]
Test Case: 119 | Input/Output: [(0 0 0 0) 0]
Test Case: 120 | Input/Output: [(72 72 72 72) 72]
Test Case: 121 | Input/Output: [(64 64 64 64) 64]
Test Case: 122 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 123 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 124 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 125 | Input/Output: [(65 65 65 65) 65]
Test Case: 126 | Input/Output: [(49 49 49 49) 49]
Test Case: 127 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 128 | Input/Output: [(6 6 6 6) 6]
Test Case: 129 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 130 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 131 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 132 | Input/Output: [(76 76 76 76) 76]
Test Case: 133 | Input/Output: [(56 56 56 56) 56]
Test Case: 134 | Input/Output: [(28 28 28 28) 28]
Test Case: 135 | Input/Output: [(7 7 7 7) 7]
Test Case: 136 | Input/Output: [(18 18 18 18) 18]
Test Case: 137 | Input/Output: [(61 61 61 61) 61]
Test Case: 138 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 139 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 140 | Input/Output: [(37 37 37 37) 37]
Test Case: 141 | Input/Output: [(94 94 94 94) 94]
Test Case: 142 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 143 | Input/Output: [(86 86 86 86) 86]
Test Case: 144 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 145 | Input/Output: [(7 7 7 7) 7]
Test Case: 146 | Input/Output: [(8 8 8 8) 8]
Test Case: 147 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 148 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 149 | Input/Output: [(43 43 43 43) 43]
Test Case: 150 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 151 | Input/Output: [(45 45 45 45) 45]
Test Case: 152 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 153 | Input/Output: [(0 0 0 0) 0]
Test Case: 154 | Input/Output: [(89 89 89 89) 89]
Test Case: 155 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 156 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 157 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 158 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 159 | Input/Output: [(89 89 89 89) 89]
Test Case: 160 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 161 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 162 | Input/Output: [(2 2 2 2) 2]
Test Case: 163 | Input/Output: [(3 3 3 3) 3]
Test Case: 164 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 165 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 166 | Input/Output: [(43 43 43 43) 43]
Test Case: 167 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 168 | Input/Output: [(38 38 38 38) 38]
Test Case: 169 | Input/Output: [(37 37 37 37) 37]
Test Case: 170 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 171 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 172 | Input/Output: [(31 31 31 31) 31]
Test Case: 173 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 174 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 175 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 176 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 177 | Input/Output: [(86 86 86 86) 86]
Test Case: 178 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 179 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 180 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 181 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 182 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 183 | Input/Output: [(33 33 33 33) 33]
Test Case: 184 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 185 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 186 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 187 | Input/Output: [(97 97 97 97) 97]
Test Case: 188 | Input/Output: [(22 22 22 22) 22]
Test Case: 189 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 190 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 191 | Input/Output: [(81 81 81 81) 81]
Test Case: 192 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 193 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 194 | Input/Output: [(28 28 28 28) 28]
Test Case: 195 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 196 | Input/Output: [(22 22 22 22) 22]
Test Case: 197 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 198 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 199 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 200 | Input/Output: [(17 85 78 85) 17]
Test Case: 201 | Input/Output: [(10 2 20 92) 2]
Test Case: 202 | Input/Output: [(38 28 26 43) 26]
Test Case: 203 | Input/Output: [(88 54 3 0) 0]
Test Case: 204 | Input/Output: [(9 59 28 80) 9]
Test Case: 205 | Input/Output: [(69 53 29 92) 29]
Test Case: 206 | Input/Output: [(25 36 87 6) 6]
Test Case: 207 | Input/Output: [(93 45 43 11) 11]
Test Case: 208 | Input/Output: [(97 13 84 99) 13]
Test Case: 209 | Input/Output: [(25 16 39 36) 16]
Test Case: 210 | Input/Output: [(86 20 99 76) 20]
Test Case: 211 | Input/Output: [(33 22 100 95) 22]
Test Case: 212 | Input/Output: [(59 16 94 38) 16]
Test Case: 213 | Input/Output: [(68 69 39 26) 26]
Test Case: 214 | Input/Output: [(70 59 47 19) 19]
Test Case: 215 | Input/Output: [(56 19 62 91) 19]
Test Case: 216 | Input/Output: [(49 91 29 64) 29]
Test Case: 217 | Input/Output: [(15 85 62 54) 15]
Test Case: 218 | Input/Output: [(27 12 61 1) 1]
Test Case: 219 | Input/Output: [(62 63 21 83) 21]
Test Case: 220 | Input/Output: [(43 95 82 51) 43]
Test Case: 221 | Input/Output: [(2 71 81 43) 2]
Test Case: 222 | Input/Output: [(19 87 84 1) 1]
Test Case: 223 | Input/Output: [(76 68 60 64) 60]
Test Case: 224 | Input/Output: [(73 11 9 74) 9]
Test Case: 225 | Input/Output: [(86 62 12 23) 12]
Test Case: 226 | Input/Output: [(47 8 63 98) 8]
Test Case: 227 | Input/Output: [(3 52 57 49) 3]
Test Case: 228 | Input/Output: [(89 53 88 21) 21]
Test Case: 229 | Input/Output: [(52 22 1 66) 1]
Test Case: 230 | Input/Output: [(9 33 92 98) 9]
Test Case: 231 | Input/Output: [(97 97 42 55) 42]
Test Case: 232 | Input/Output: [(96 61 96 64) 61]
Test Case: 233 | Input/Output: [(40 9 39 10) 9]
Test Case: 234 | Input/Output: [(41 18 41 7) 7]
Test Case: 235 | Input/Output: [(40 33 28 100) 28]
Test Case: 236 | Input/Output: [(96 68 63 36) 36]
Test Case: 237 | Input/Output: [(65 58 28 28) 28]
Test Case: 238 | Input/Output: [(6 31 19 75) 6]
Test Case: 239 | Input/Output: [(67 32 37 68) 32]
Test Case: 240 | Input/Output: [(41 13 60 10) 10]
Test Case: 241 | Input/Output: [(64 30 28 91) 28]
Test Case: 242 | Input/Output: [(67 94 29 24) 24]
Test Case: 243 | Input/Output: [(4 95 52 27) 4]
Test Case: 244 | Input/Output: [(97 32 38 20) 20]
Test Case: 245 | Input/Output: [(30 76 63 80) 30]
Test Case: 246 | Input/Output: [(96 10 48 6) 6]
Test Case: 247 | Input/Output: [(19 39 87 41) 19]
Test Case: 248 | Input/Output: [(95 24 25 62) 24]
Test Case: 249 | Input/Output: [(39 15 30 61) 15]
Test Case: 250 | Input/Output: [(93 93 63 42) 42]
Test Case: 251 | Input/Output: [(96 9 7 73) 7]
Test Case: 252 | Input/Output: [(81 68 1 72) 1]
Test Case: 253 | Input/Output: [(81 0 55 72) 0]
Test Case: 254 | Input/Output: [(92 16 44 72) 16]
Test Case: 255 | Input/Output: [(15 54 83 24) 15]
Test Case: 256 | Input/Output: [(79 17 27 6) 6]
Test Case: 257 | Input/Output: [(21 22 99 43) 21]
Test Case: 258 | Input/Output: [(61 11 87 51) 11]
Test Case: 259 | Input/Output: [(65 54 95 22) 22]
Test Case: 260 | Input/Output: [(86 91 0 42) 0]
Test Case: 261 | Input/Output: [(97 62 82 18) 18]
Test Case: 262 | Input/Output: [(58 24 98 60) 24]
Test Case: 263 | Input/Output: [(87 55 83 21) 21]
Test Case: 264 | Input/Output: [(66 0 11 59) 0]
Test Case: 265 | Input/Output: [(22 25 21 74) 21]
Test Case: 266 | Input/Output: [(55 58 64 16) 16]
Test Case: 267 | Input/Output: [(35 74 71 62) 35]
Test Case: 268 | Input/Output: [(80 18 72 33) 18]
Test Case: 269 | Input/Output: [(48 74 64 95) 48]
Test Case: 270 | Input/Output: [(53 80 48 25) 25]
Test Case: 271 | Input/Output: [(3 30 17 18) 3]
Test Case: 272 | Input/Output: [(55 0 42 46) 0]
Test Case: 273 | Input/Output: [(58 98 26 75) 26]
Test Case: 274 | Input/Output: [(56 34 14 72) 14]
Test Case: 275 | Input/Output: [(71 62 43 3) 3]
Test Case: 276 | Input/Output: [(30 18 6 28) 6]
Test Case: 277 | Input/Output: [(52 18 0 56) 0]
Test Case: 278 | Input/Output: [(92 75 13 51) 13]
Test Case: 279 | Input/Output: [(92 47 94 9) 9]
Test Case: 280 | Input/Output: [(72 30 24 48) 24]
Test Case: 281 | Input/Output: [(43 96 76 29) 29]
Test Case: 282 | Input/Output: [(79 58 96 26) 26]
Test Case: 283 | Input/Output: [(70 26 32 72) 26]
Test Case: 284 | Input/Output: [(84 65 63 100) 63]
Test Case: 285 | Input/Output: [(78 97 50 67) 50]
Test Case: 286 | Input/Output: [(38 79 95 37) 37]
Test Case: 287 | Input/Output: [(31 38 6 82) 6]
Test Case: 288 | Input/Output: [(12 72 89 34) 12]
Test Case: 289 | Input/Output: [(93 0 69 64) 0]
Test Case: 290 | Input/Output: [(73 4 38 53) 4]
Test Case: 291 | Input/Output: [(36 99 66 26) 26]
Test Case: 292 | Input/Output: [(44 13 22 71) 13]
Test Case: 293 | Input/Output: [(70 98 1 20) 1]
Test Case: 294 | Input/Output: [(28 67 3 31) 3]
Test Case: 295 | Input/Output: [(89 62 47 43) 43]
Test Case: 296 | Input/Output: [(19 84 71 4) 4]
Test Case: 297 | Input/Output: [(33 31 72 40) 31]
Test Case: 298 | Input/Output: [(68 8 51 27) 8]
Test Case: 299 | Input/Output: [(17 56 21 95) 17]
Test Case: 300 | Input/Output: [(47 86 38 42) 38]
Test Case: 301 | Input/Output: [(41 41 48 30) 30]
Test Case: 302 | Input/Output: [(8 24 75 66) 8]
Test Case: 303 | Input/Output: [(13 34 74 97) 13]
Test Case: 304 | Input/Output: [(8 99 49 15) 8]
Test Case: 305 | Input/Output: [(86 22 24 26) 22]
Test Case: 306 | Input/Output: [(56 51 18 82) 18]
Test Case: 307 | Input/Output: [(13 85 18 15) 13]
Test Case: 308 | Input/Output: [(41 36 94 96) 36]
Test Case: 309 | Input/Output: [(80 76 3 71) 3]
Test Case: 310 | Input/Output: [(99 48 58 66) 48]
Test Case: 311 | Input/Output: [(70 29 8 81) 8]
Test Case: 312 | Input/Output: [(96 59 5 54) 5]
Test Case: 313 | Input/Output: [(18 27 24 97) 18]
Test Case: 314 | Input/Output: [(64 64 46 75) 46]
Test Case: 315 | Input/Output: [(7 94 71 24) 7]
Test Case: 316 | Input/Output: [(18 88 4 59) 4]
Test Case: 317 | Input/Output: [(18 67 37 67) 18]
Test Case: 318 | Input/Output: [(3 97 85 0) 0]
Test Case: 319 | Input/Output: [(85 79 99 85) 79]
Test Case: 320 | Input/Output: [(87 13 19 1) 1]
Test Case: 321 | Input/Output: [(12 41 48 52) 12]
Test Case: 322 | Input/Output: [(17 39 41 30) 17]
Test Case: 323 | Input/Output: [(37 95 88 93) 37]
Test Case: 324 | Input/Output: [(45 9 97 15) 9]
Test Case: 325 | Input/Output: [(54 35 83 49) 35]
Test Case: 326 | Input/Output: [(98 67 76 1) 1]
Test Case: 327 | Input/Output: [(86 82 96 86) 82]
Test Case: 328 | Input/Output: [(37 0 100 55) 0]
Test Case: 329 | Input/Output: [(0 10 7 3) 0]
Test Case: 330 | Input/Output: [(12 28 38 54) 12]
Test Case: 331 | Input/Output: [(74 72 56 22) 22]
Test Case: 332 | Input/Output: [(17 17 56 64) 17]
Test Case: 333 | Input/Output: [(96 28 86 34) 28]
Test Case: 334 | Input/Output: [(36 18 15 80) 15]
Test Case: 335 | Input/Output: [(39 93 18 60) 18]
Test Case: 336 | Input/Output: [(61 32 45 15) 15]
Test Case: 337 | Input/Output: [(33 21 91 12) 12]
Test Case: 338 | Input/Output: [(29 39 65 14) 14]
Test Case: 339 | Input/Output: [(93 58 83 92) 58]
Test Case: 340 | Input/Output: [(5 42 90 27) 5]
Test Case: 341 | Input/Output: [(50 76 73 30) 30]
Test Case: 342 | Input/Output: [(30 44 87 38) 30]
Test Case: 343 | Input/Output: [(22 18 96 58) 18]
Test Case: 344 | Input/Output: [(0 36 51 28) 0]
Test Case: 345 | Input/Output: [(76 90 6 21) 6]
Test Case: 346 | Input/Output: [(97 21 32 88) 21]
Test Case: 347 | Input/Output: [(24 47 9 51) 9]
Test Case: 348 | Input/Output: [(88 12 66 35) 12]
Test Case: 349 | Input/Output: [(45 32 33 43) 32]
Test Case: 350 | Input/Output: [(4 50 6 25) 4]
Test Case: 351 | Input/Output: [(54 84 71 44) 44]
Test Case: 352 | Input/Output: [(35 26 45 88) 26]
Test Case: 353 | Input/Output: [(89 50 53 11) 11]
Test Case: 354 | Input/Output: [(13 39 3 44) 3]
Test Case: 355 | Input/Output: [(92 27 31 32) 27]
Test Case: 356 | Input/Output: [(80 70 28 38) 28]
Test Case: 357 | Input/Output: [(71 83 29 85) 29]
Test Case: 358 | Input/Output: [(78 1 98 11) 1]
Test Case: 359 | Input/Output: [(99 22 5 44) 5]
Test Case: 360 | Input/Output: [(8 25 41 17) 8]
Test Case: 361 | Input/Output: [(0 69 53 47) 0]
Test Case: 362 | Input/Output: [(48 3 55 49) 3]
Test Case: 363 | Input/Output: [(36 54 40 5) 5]
Test Case: 364 | Input/Output: [(67 79 69 47) 47]
Test Case: 365 | Input/Output: [(76 48 92 71) 48]
Test Case: 366 | Input/Output: [(84 18 51 36) 18]
Test Case: 367 | Input/Output: [(81 77 65 30) 30]
Test Case: 368 | Input/Output: [(34 1 34 38) 1]
Test Case: 369 | Input/Output: [(73 66 47 75) 47]
Test Case: 370 | Input/Output: [(26 31 28 90) 26]
Test Case: 371 | Input/Output: [(36 74 29 90) 29]
Test Case: 372 | Input/Output: [(29 18 78 87) 18]
Test Case: 373 | Input/Output: [(82 81 68 4) 4]
Test Case: 374 | Input/Output: [(84 88 72 50) 50]
Test Case: 375 | Input/Output: [(4 12 16 98) 4]
Test Case: 376 | Input/Output: [(83 74 19 20) 19]
Test Case: 377 | Input/Output: [(48 32 42 44) 32]
Test Case: 378 | Input/Output: [(4 72 27 83) 4]
Test Case: 379 | Input/Output: [(1 37 59 99) 1]
Test Case: 380 | Input/Output: [(94 89 40 36) 36]
Test Case: 381 | Input/Output: [(52 22 98 32) 22]
Test Case: 382 | Input/Output: [(70 61 79 88) 61]
Test Case: 383 | Input/Output: [(62 58 78 10) 10]
Test Case: 384 | Input/Output: [(28 32 34 39) 28]
Test Case: 385 | Input/Output: [(11 2 54 58) 2]
Test Case: 386 | Input/Output: [(91 90 33 66) 33]
Test Case: 387 | Input/Output: [(50 65 41 12) 12]
Test Case: 388 | Input/Output: [(26 76 0 69) 0]
Test Case: 389 | Input/Output: [(43 27 27 59) 27]
Test Case: 390 | Input/Output: [(51 3 46 44) 3]
Test Case: 391 | Input/Output: [(60 84 48 18) 18]
Test Case: 392 | Input/Output: [(40 79 84 57) 40]
Test Case: 393 | Input/Output: [(97 73 80 30) 30]
Test Case: 394 | Input/Output: [(46 83 63 41) 41]
Test Case: 395 | Input/Output: [(90 71 44 65) 44]
Test Case: 396 | Input/Output: [(88 77 4 27) 4]
Test Case: 397 | Input/Output: [(4 78 87 18) 4]
Test Case: 398 | Input/Output: [(81 61 88 52) 52]
Test Case: 399 | Input/Output: [(64 49 64 8) 8]
Test Case: 400 | Input/Output: [(-36 -56 34 -87) -87]
Test Case: 401 | Input/Output: [(66 -55 -72 -77) -77]
Test Case: 402 | Input/Output: [(-82 92 77 24) -82]
Test Case: 403 | Input/Output: [(68 15 -63 -49) -63]
Test Case: 404 | Input/Output: [(50 2 -65 57) -65]
Test Case: 405 | Input/Output: [(12 11 -38 -86) -86]
Test Case: 406 | Input/Output: [(5 -94 95 93) -94]
Test Case: 407 | Input/Output: [(-54 -26 -21 -79) -79]
Test Case: 408 | Input/Output: [(-12 -6 -28 -95) -95]
Test Case: 409 | Input/Output: [(1 33 -79 -60) -79]
Test Case: 410 | Input/Output: [(78 -98 10 -4) -98]
Test Case: 411 | Input/Output: [(-98 -43 3 -45) -98]
Test Case: 412 | Input/Output: [(-87 54 71 92) -87]
Test Case: 413 | Input/Output: [(-3 99 -64 18) -64]
Test Case: 414 | Input/Output: [(92 11 -75 47) -75]
Test Case: 415 | Input/Output: [(-72 10 4 -42) -72]
Test Case: 416 | Input/Output: [(-37 39 -84 94) -84]
Test Case: 417 | Input/Output: [(-51 -10 93 86) -51]
Test Case: 418 | Input/Output: [(1 33 96 100) 1]
Test Case: 419 | Input/Output: [(91 -61 38 76) -61]
Test Case: 420 | Input/Output: [(20 -46 -94 0) -94]
Test Case: 421 | Input/Output: [(19 -77 5 96) -77]
Test Case: 422 | Input/Output: [(41 20 11 -95) -95]
Test Case: 423 | Input/Output: [(23 24 39 3) 3]
Test Case: 424 | Input/Output: [(-68 72 38 -26) -68]
Test Case: 425 | Input/Output: [(87 48 27 -74) -74]
Test Case: 426 | Input/Output: [(27 50 -6 16) -6]
Test Case: 427 | Input/Output: [(58 -53 68 -24) -53]
Test Case: 428 | Input/Output: [(30 -58 72 -89) -89]
Test Case: 429 | Input/Output: [(62 31 -28 19) -28]
Test Case: 430 | Input/Output: [(64 31 10 74) 10]
Test Case: 431 | Input/Output: [(73 -41 -50 3) -50]
Test Case: 432 | Input/Output: [(-83 1 -46 84) -83]
Test Case: 433 | Input/Output: [(38 29 52 15) 15]
Test Case: 434 | Input/Output: [(53 -74 7 -37) -74]
Test Case: 435 | Input/Output: [(-47 -29 28 82) -47]
Test Case: 436 | Input/Output: [(-47 -87 99 -62) -87]
Test Case: 437 | Input/Output: [(13 26 36 -13) -13]
Test Case: 438 | Input/Output: [(90 -66 100 -75) -75]
Test Case: 439 | Input/Output: [(60 -68 66 -10) -68]
Test Case: 440 | Input/Output: [(65 -47 5 -86) -86]
Test Case: 441 | Input/Output: [(-84 5 7 44) -84]
Test Case: 442 | Input/Output: [(-98 5 98 -63) -98]
Test Case: 443 | Input/Output: [(-79 -31 -35 10) -79]
Test Case: 444 | Input/Output: [(-91 29 82 -70) -91]
Test Case: 445 | Input/Output: [(-93 -32 38 68) -93]
Test Case: 446 | Input/Output: [(-95 42 -26 76) -95]
Test Case: 447 | Input/Output: [(-87 -74 48 87) -87]
Test Case: 448 | Input/Output: [(-95 18 -32 4) -95]
Test Case: 449 | Input/Output: [(90 10 -97 -16) -97]
Test Case: 450 | Input/Output: [(1 -64 55 33) -64]
Test Case: 451 | Input/Output: [(36 -24 28 -38) -38]
Test Case: 452 | Input/Output: [(57 -53 -99 -21) -99]
Test Case: 453 | Input/Output: [(79 18 28 89) 18]
Test Case: 454 | Input/Output: [(45 40 -54 -67) -67]
Test Case: 455 | Input/Output: [(-12 -69 83 -54) -69]
Test Case: 456 | Input/Output: [(-78 -34 96 61) -78]
Test Case: 457 | Input/Output: [(-90 -5 -58 -13) -90]
Test Case: 458 | Input/Output: [(-78 -28 -49 -92) -92]
Test Case: 459 | Input/Output: [(67 -38 44 -39) -39]
Test Case: 460 | Input/Output: [(-71 -18 4 -55) -71]
Test Case: 461 | Input/Output: [(15 62 58 19) 15]
Test Case: 462 | Input/Output: [(-16 83 68 -82) -82]
Test Case: 463 | Input/Output: [(-100 -27 -68 71) -100]
Test Case: 464 | Input/Output: [(-78 89 21 -77) -78]
Test Case: 465 | Input/Output: [(-94 -1 -55 93) -94]
Test Case: 466 | Input/Output: [(-40 -22 -91 63) -91]
Test Case: 467 | Input/Output: [(-51 -90 50 41) -90]
Test Case: 468 | Input/Output: [(24 58 86 -6) -6]
Test Case: 469 | Input/Output: [(82 26 29 59) 26]
Test Case: 470 | Input/Output: [(33 6 79 54) 6]
Test Case: 471 | Input/Output: [(83 -79 -86 -3) -86]
Test Case: 472 | Input/Output: [(39 72 0 -14) -14]
Test Case: 473 | Input/Output: [(45 -67 63 64) -67]
Test Case: 474 | Input/Output: [(62 31 73 -49) -49]
Test Case: 475 | Input/Output: [(-40 9 -11 -86) -86]
Test Case: 476 | Input/Output: [(-87 -93 92 44) -93]
Test Case: 477 | Input/Output: [(96 -96 -42 -55) -96]
Test Case: 478 | Input/Output: [(-72 77 -92 51) -92]
Test Case: 479 | Input/Output: [(42 29 33 -9) -9]
Test Case: 480 | Input/Output: [(24 -20 80 68) -20]
Test Case: 481 | Input/Output: [(78 -60 -76 49) -76]
Test Case: 482 | Input/Output: [(-77 -37 40 -71) -77]
Test Case: 483 | Input/Output: [(-5 -62 -45 63) -62]
Test Case: 484 | Input/Output: [(-54 -76 -25 47) -76]
Test Case: 485 | Input/Output: [(-45 -92 -84 -56) -92]
Test Case: 486 | Input/Output: [(-32 91 -77 -58) -77]
Test Case: 487 | Input/Output: [(-48 54 -42 31) -48]
Test Case: 488 | Input/Output: [(-61 49 36 -96) -96]
Test Case: 489 | Input/Output: [(29 -63 -49 -83) -83]
Test Case: 490 | Input/Output: [(-47 -3 -92 28) -92]
Test Case: 491 | Input/Output: [(-74 -12 -23 -39) -74]
Test Case: 492 | Input/Output: [(36 6 92 -80) -80]
Test Case: 493 | Input/Output: [(62 -84 18 65) -84]
Test Case: 494 | Input/Output: [(-30 68 -51 -12) -51]
Test Case: 495 | Input/Output: [(-12 57 19 -26) -26]
Test Case: 496 | Input/Output: [(-79 -52 -33 61) -79]
Test Case: 497 | Input/Output: [(-43 -20 -83 80) -83]
Test Case: 498 | Input/Output: [(4 96 -65 -58) -65]
Test Case: 499 | Input/Output: [(-98 26 -6 96) -98]
Test Case: 500 | Input/Output: [(-26 86 -46 -45) -46]
Test Case: 501 | Input/Output: [(-26 66 19 -60) -60]
Test Case: 502 | Input/Output: [(55 60 27 -62) -62]
Test Case: 503 | Input/Output: [(98 67 66 -12) -12]
Test Case: 504 | Input/Output: [(90 46 -43 62) -43]
Test Case: 505 | Input/Output: [(21 17 92 66) 17]
Test Case: 506 | Input/Output: [(22 -31 -63 -91) -91]
Test Case: 507 | Input/Output: [(-66 58 87 -64) -66]
Test Case: 508 | Input/Output: [(29 -11 46 -99) -99]
Test Case: 509 | Input/Output: [(-94 67 -39 -49) -94]
Test Case: 510 | Input/Output: [(64 -74 -65 -65) -74]
Test Case: 511 | Input/Output: [(21 -5 20 -72) -72]
Test Case: 512 | Input/Output: [(-61 -16 -36 -19) -61]
Test Case: 513 | Input/Output: [(-19 -54 68 40) -54]
Test Case: 514 | Input/Output: [(-39 69 -36 96) -39]
Test Case: 515 | Input/Output: [(-54 -94 16 -5) -94]
Test Case: 516 | Input/Output: [(81 38 -10 -66) -66]
Test Case: 517 | Input/Output: [(23 15 -13 22) -13]
Test Case: 518 | Input/Output: [(41 23 -14 97) -14]
Test Case: 519 | Input/Output: [(65 78 40 63) 40]
Test Case: 520 | Input/Output: [(79 -45 34 73) -45]
Test Case: 521 | Input/Output: [(-46 -58 -98 -75) -98]
Test Case: 522 | Input/Output: [(98 12 64 -65) -65]
Test Case: 523 | Input/Output: [(16 87 61 -56) -56]
Test Case: 524 | Input/Output: [(-98 -47 -24 88) -98]
Test Case: 525 | Input/Output: [(23 -42 -11 72) -42]
Test Case: 526 | Input/Output: [(-4 -2 56 87) -4]
Test Case: 527 | Input/Output: [(77 -73 36 -39) -73]
Test Case: 528 | Input/Output: [(45 67 51 -48) -48]
Test Case: 529 | Input/Output: [(95 -34 42 -9) -34]
Test Case: 530 | Input/Output: [(-6 -10 59 -88) -88]
Test Case: 531 | Input/Output: [(29 -85 -28 5) -85]
Test Case: 532 | Input/Output: [(-99 -56 83 -12) -99]
Test Case: 533 | Input/Output: [(-76 -99 17 35) -99]
Test Case: 534 | Input/Output: [(61 41 62 83) 41]
Test Case: 535 | Input/Output: [(-16 37 72 9) -16]
Test Case: 536 | Input/Output: [(60 -72 12 56) -72]
Test Case: 537 | Input/Output: [(-100 -52 -3 -81) -100]
Test Case: 538 | Input/Output: [(66 22 21 31) 21]
Test Case: 539 | Input/Output: [(-93 4 29 79) -93]
Test Case: 540 | Input/Output: [(-7 -9 71 19) -9]
Test Case: 541 | Input/Output: [(50 -9 67 -98) -98]
Test Case: 542 | Input/Output: [(75 12 -83 73) -83]
Test Case: 543 | Input/Output: [(-75 -81 -63 27) -81]
Test Case: 544 | Input/Output: [(-43 58 92 69) -43]
Test Case: 545 | Input/Output: [(-12 -79 -33 -33) -79]
Test Case: 546 | Input/Output: [(-1 -5 -88 41) -88]
Test Case: 547 | Input/Output: [(8 96 32 56) 8]
Test Case: 548 | Input/Output: [(40 27 82 64) 27]
Test Case: 549 | Input/Output: [(-38 41 -89 52) -89]
Test Case: 550 | Input/Output: [(72 7 -3 -27) -27]
Test Case: 551 | Input/Output: [(-31 48 97 -62) -62]
Test Case: 552 | Input/Output: [(96 0 85 4) 0]
Test Case: 553 | Input/Output: [(66 -32 -40 -96) -96]
Test Case: 554 | Input/Output: [(-87 -33 -57 41) -87]
Test Case: 555 | Input/Output: [(38 42 14 21) 14]
Test Case: 556 | Input/Output: [(56 17 -67 -65) -67]
Test Case: 557 | Input/Output: [(8 -71 -45 -11) -71]
Test Case: 558 | Input/Output: [(-66 -70 -36 -86) -86]
Test Case: 559 | Input/Output: [(29 79 45 -39) -39]
Test Case: 560 | Input/Output: [(-36 -94 -69 54) -94]
Test Case: 561 | Input/Output: [(1 -51 49 -88) -88]
Test Case: 562 | Input/Output: [(53 -99 91 18) -99]
Test Case: 563 | Input/Output: [(-18 25 88 -19) -19]
Test Case: 564 | Input/Output: [(15 22 42 -51) -51]
Test Case: 565 | Input/Output: [(-31 -97 -38 -40) -97]
Test Case: 566 | Input/Output: [(70 -51 23 95) -51]
Test Case: 567 | Input/Output: [(67 -15 93 -91) -91]
Test Case: 568 | Input/Output: [(8 31 52 -78) -78]
Test Case: 569 | Input/Output: [(-18 -65 95 -85) -85]
Test Case: 570 | Input/Output: [(70 34 -30 87) -30]
Test Case: 571 | Input/Output: [(-22 -71 -79 32) -79]
Test Case: 572 | Input/Output: [(81 -35 59 -74) -74]
Test Case: 573 | Input/Output: [(-4 -50 25 -77) -77]
Test Case: 574 | Input/Output: [(-90 28 5 -33) -90]
Test Case: 575 | Input/Output: [(14 70 -37 -30) -37]
Test Case: 576 | Input/Output: [(99 -69 -90 -16) -90]
Test Case: 577 | Input/Output: [(-17 -84 49 88) -84]
Test Case: 578 | Input/Output: [(-99 -74 -6 -5) -99]
Test Case: 579 | Input/Output: [(96 -78 -45 10) -78]
Test Case: 580 | Input/Output: [(-60 -94 8 14) -94]
Test Case: 581 | Input/Output: [(-60 63 -27 44) -60]
Test Case: 582 | Input/Output: [(-85 -48 37 52) -85]
Test Case: 583 | Input/Output: [(97 -69 -53 33) -69]
Test Case: 584 | Input/Output: [(53 14 65 15) 14]
Test Case: 585 | Input/Output: [(20 -74 -60 40) -74]
Test Case: 586 | Input/Output: [(-4 -25 -58 94) -58]
Test Case: 587 | Input/Output: [(-79 -47 -35 -33) -79]
Test Case: 588 | Input/Output: [(5 -88 -66 85) -88]
Test Case: 589 | Input/Output: [(14 66 54 -30) -30]
Test Case: 590 | Input/Output: [(10 -63 79 28) -63]
Test Case: 591 | Input/Output: [(-8 26 53 -33) -33]
Test Case: 592 | Input/Output: [(58 -3 10 -52) -52]
Test Case: 593 | Input/Output: [(-6 63 88 -6) -6]
Test Case: 594 | Input/Output: [(24 21 -56 -34) -56]
Test Case: 595 | Input/Output: [(13 91 -76 -58) -76]
Test Case: 596 | Input/Output: [(-49 -48 66 -28) -49]
Test Case: 597 | Input/Output: [(-58 46 -68 -83) -83]
Test Case: 598 | Input/Output: [(19 -4 -23 -79) -79]
Test Case: 599 | Input/Output: [(-14 -1 21 -75) -75]
Test Case: 600 | Input/Output: [(-63 11 89 6) -63]
Test Case: 601 | Input/Output: [(48 -4 29 67) -4]
Test Case: 602 | Input/Output: [(-49 100 84 33) -49]
Test Case: 603 | Input/Output: [(48 86 34 -11) -11]
Test Case: 604 | Input/Output: [(22 -46 50 52) -46]
Test Case: 605 | Input/Output: [(-38 -60 16 -45) -60]
Test Case: 606 | Input/Output: [(9 -55 7 -90) -90]
Test Case: 607 | Input/Output: [(12 33 -75 24) -75]
Test Case: 608 | Input/Output: [(95 98 -28 48) -28]
Test Case: 609 | Input/Output: [(-97 -59 60 -16) -97]
Test Case: 610 | Input/Output: [(-1 -60 95 -69) -69]
Test Case: 611 | Input/Output: [(18 3 15 10) 3]
Test Case: 612 | Input/Output: [(27 -73 -30 -11) -73]
Test Case: 613 | Input/Output: [(71 20 45 29) 20]
Test Case: 614 | Input/Output: [(-80 60 -8 82) -80]
Test Case: 615 | Input/Output: [(-35 6 93 -74) -74]
Test Case: 616 | Input/Output: [(-63 -8 -41 -98) -98]
Test Case: 617 | Input/Output: [(13 -14 -4 -21) -21]
Test Case: 618 | Input/Output: [(78 23 -41 14) -41]
Test Case: 619 | Input/Output: [(-1 3 -78 -9) -78]
Test Case: 620 | Input/Output: [(13 50 68 -36) -36]
Test Case: 621 | Input/Output: [(79 6 -37 -85) -85]
Test Case: 622 | Input/Output: [(-23 -56 -44 -5) -56]
Test Case: 623 | Input/Output: [(27 90 -67 -47) -67]
Test Case: 624 | Input/Output: [(65 -45 -90 -66) -90]
Test Case: 625 | Input/Output: [(-59 36 60 -16) -59]
Test Case: 626 | Input/Output: [(72 -36 -56 89) -56]
Test Case: 627 | Input/Output: [(95 9 -63 14) -63]
Test Case: 628 | Input/Output: [(-76 45 54 10) -76]
Test Case: 629 | Input/Output: [(80 -91 -84 -59) -91]
Test Case: 630 | Input/Output: [(-37 -74 47 72) -74]
Test Case: 631 | Input/Output: [(-92 -56 -37 -13) -92]
Test Case: 632 | Input/Output: [(-96 68 65 47) -96]
Test Case: 633 | Input/Output: [(-97 39 34 97) -97]
Test Case: 634 | Input/Output: [(-19 -56 54 22) -56]
Test Case: 635 | Input/Output: [(-94 52 -71 81) -94]
Test Case: 636 | Input/Output: [(42 11 -2 45) -2]
Test Case: 637 | Input/Output: [(97 25 -76 -62) -76]
Test Case: 638 | Input/Output: [(22 27 4 25) 4]
Test Case: 639 | Input/Output: [(31 -95 -54 -48) -95]
Test Case: 640 | Input/Output: [(23 -3 59 8) -3]
Test Case: 641 | Input/Output: [(81 89 -18 23) -18]
Test Case: 642 | Input/Output: [(97 -9 12 14) -9]
Test Case: 643 | Input/Output: [(-88 -30 0 -53) -88]
Test Case: 644 | Input/Output: [(-71 33 -71 -82) -82]
Test Case: 645 | Input/Output: [(-61 -26 -21 -12) -61]
Test Case: 646 | Input/Output: [(60 97 54 100) 54]
Test Case: 647 | Input/Output: [(-19 -34 -24 38) -34]
Test Case: 648 | Input/Output: [(-2 52 -28 24) -28]
Test Case: 649 | Input/Output: [(-1 58 13 24) -1]
Test Case: 650 | Input/Output: [(-59 -7 -11 -87) -87]
Test Case: 651 | Input/Output: [(46 41 5 -49) -49]
Test Case: 652 | Input/Output: [(-53 33 -42 -55) -55]
Test Case: 653 | Input/Output: [(-5 -18 -62 -4) -62]
Test Case: 654 | Input/Output: [(-22 10 20 -19) -22]
Test Case: 655 | Input/Output: [(95 -63 -97 -94) -97]
Test Case: 656 | Input/Output: [(82 43 -47 -54) -54]
Test Case: 657 | Input/Output: [(25 -55 -27 13) -55]
Test Case: 658 | Input/Output: [(77 26 -77 -68) -77]
Test Case: 659 | Input/Output: [(32 -77 4 48) -77]
Test Case: 660 | Input/Output: [(55 3 46 -69) -69]
Test Case: 661 | Input/Output: [(-12 79 -55 64) -55]
Test Case: 662 | Input/Output: [(-24 91 55 37) -24]
Test Case: 663 | Input/Output: [(-11 1 -49 61) -49]
Test Case: 664 | Input/Output: [(90 -75 -53 82) -75]
Test Case: 665 | Input/Output: [(-73 -93 -83 26) -93]
Test Case: 666 | Input/Output: [(51 85 48 81) 48]
Test Case: 667 | Input/Output: [(-96 -46 -28 53) -96]
Test Case: 668 | Input/Output: [(61 17 18 47) 17]
Test Case: 669 | Input/Output: [(0 -20 -55 72) -55]
Test Case: 670 | Input/Output: [(86 7 73 4) 4]
Test Case: 671 | Input/Output: [(30 -52 41 98) -52]
Test Case: 672 | Input/Output: [(-88 82 -49 41) -88]
Test Case: 673 | Input/Output: [(-88 -46 50 -76) -88]
Test Case: 674 | Input/Output: [(-99 -51 -5 -91) -99]
Test Case: 675 | Input/Output: [(-88 -10 28 -75) -88]
Test Case: 676 | Input/Output: [(71 -16 -84 55) -84]
Test Case: 677 | Input/Output: [(-35 2 -81 56) -81]
Test Case: 678 | Input/Output: [(38 -37 -99 37) -99]
Test Case: 679 | Input/Output: [(76 90 -20 63) -20]
Test Case: 680 | Input/Output: [(63 12 69 90) 12]
Test Case: 681 | Input/Output: [(-83 -64 43 74) -83]
Test Case: 682 | Input/Output: [(35 -66 44 58) -66]
Test Case: 683 | Input/Output: [(-27 2 49 -39) -39]
Test Case: 684 | Input/Output: [(-44 -44 -1 41) -44]
Test Case: 685 | Input/Output: [(-33 75 30 -92) -92]
Test Case: 686 | Input/Output: [(5 80 -31 -93) -93]
Test Case: 687 | Input/Output: [(-48 33 -39 -49) -49]
Test Case: 688 | Input/Output: [(44 78 79 65) 44]
Test Case: 689 | Input/Output: [(22 54 -23 -17) -23]
Test Case: 690 | Input/Output: [(-47 81 57 52) -47]
Test Case: 691 | Input/Output: [(96 -21 -81 7) -81]
Test Case: 692 | Input/Output: [(-56 57 5 -55) -56]
Test Case: 693 | Input/Output: [(-56 -18 -71 41) -71]
Test Case: 694 | Input/Output: [(69 -46 52 63) -46]
Test Case: 695 | Input/Output: [(7 12 -37 35) -37]
Test Case: 696 | Input/Output: [(13 -100 39 -19) -100]
Test Case: 697 | Input/Output: [(94 34 68 -66) -66]
Test Case: 698 | Input/Output: [(43 -8 50 70) -8]
Test Case: 699 | Input/Output: [(-60 46 -51 10) -60]
Test Case: 700 | Input/Output: [(59 49 44 80) 44]
Test Case: 701 | Input/Output: [(-15 16 58 -96) -96]
Test Case: 702 | Input/Output: [(-2 -10 -59 -29) -59]
Test Case: 703 | Input/Output: [(-38 -44 -69 51) -69]
Test Case: 704 | Input/Output: [(52 21 48 -71) -71]
Test Case: 705 | Input/Output: [(92 -46 96 -34) -46]
Test Case: 706 | Input/Output: [(-64 1 78 74) -64]
Test Case: 707 | Input/Output: [(62 -91 -8 42) -91]
Test Case: 708 | Input/Output: [(76 -76 -13 -78) -78]
Test Case: 709 | Input/Output: [(31 54 43 -18) -18]
Test Case: 710 | Input/Output: [(-68 61 9 -86) -86]
Test Case: 711 | Input/Output: [(95 -56 32 95) -56]
Test Case: 712 | Input/Output: [(-21 44 -35 74) -35]
Test Case: 713 | Input/Output: [(6 95 16 57) 6]
Test Case: 714 | Input/Output: [(55 53 -88 -38) -88]
Test Case: 715 | Input/Output: [(-10 -96 68 -73) -96]
Test Case: 716 | Input/Output: [(22 20 -5 -69) -69]
Test Case: 717 | Input/Output: [(99 82 -93 81) -93]
Test Case: 718 | Input/Output: [(-16 -32 47 -60) -60]
Test Case: 719 | Input/Output: [(80 -74 39 -12) -74]
Test Case: 720 | Input/Output: [(-14 -12 -57 -37) -57]
Test Case: 721 | Input/Output: [(-49 -76 65 91) -76]
Test Case: 722 | Input/Output: [(100 -20 92 25) -20]
Test Case: 723 | Input/Output: [(33 48 8 10) 8]
Test Case: 724 | Input/Output: [(79 85 48 58) 48]
Test Case: 725 | Input/Output: [(79 90 -7 -78) -78]
Test Case: 726 | Input/Output: [(15 66 -94 12) -94]
Test Case: 727 | Input/Output: [(-70 92 -67 60) -70]
Test Case: 728 | Input/Output: [(88 77 81 -61) -61]
Test Case: 729 | Input/Output: [(-40 60 -85 -4) -85]
Test Case: 730 | Input/Output: [(-60 -41 68 72) -60]
Test Case: 731 | Input/Output: [(64 -100 -18 81) -100]
Test Case: 732 | Input/Output: [(73 -12 -6 -31) -31]
Test Case: 733 | Input/Output: [(-59 -6 42 -52) -59]
Test Case: 734 | Input/Output: [(33 25 -27 17) -27]
Test Case: 735 | Input/Output: [(-45 0 -17 99) -45]
Test Case: 736 | Input/Output: [(28 97 10 -66) -66]
Test Case: 737 | Input/Output: [(-56 69 44 -27) -56]
Test Case: 738 | Input/Output: [(-39 -4 -91 -76) -91]
Test Case: 739 | Input/Output: [(79 -44 92 -98) -98]
Test Case: 740 | Input/Output: [(45 -47 85 99) -47]
Test Case: 741 | Input/Output: [(-62 -94 -10 -2) -94]
Test Case: 742 | Input/Output: [(88 83 -82 -87) -87]
Test Case: 743 | Input/Output: [(70 -98 -46 -1) -98]
Test Case: 744 | Input/Output: [(83 -2 46 73) -2]
Test Case: 745 | Input/Output: [(33 -99 -66 47) -99]
Test Case: 746 | Input/Output: [(100 25 98 -55) -55]
Test Case: 747 | Input/Output: [(-47 24 67 -98) -98]
Test Case: 748 | Input/Output: [(99 86 -57 71) -57]
Test Case: 749 | Input/Output: [(-77 39 -41 64) -77]
Test Case: 750 | Input/Output: [(27 -86 95 -32) -86]
Test Case: 751 | Input/Output: [(18 -51 -19 -36) -51]
Test Case: 752 | Input/Output: [(-3 81 95 47) -3]
Test Case: 753 | Input/Output: [(-90 -5 -59 83) -90]
Test Case: 754 | Input/Output: [(-27 62 84 -35) -35]
Test Case: 755 | Input/Output: [(58 -43 93 -16) -43]
Test Case: 756 | Input/Output: [(33 -3 -60 -16) -60]
Test Case: 757 | Input/Output: [(-71 78 -57 -69) -71]
Test Case: 758 | Input/Output: [(-85 -57 -64 7) -85]
Test Case: 759 | Input/Output: [(3 -56 -100 51) -100]
Test Case: 760 | Input/Output: [(89 32 -92 25) -92]
Test Case: 761 | Input/Output: [(37 -84 -9 10) -84]
Test Case: 762 | Input/Output: [(-68 61 -82 -45) -82]
Test Case: 763 | Input/Output: [(-5 77 23 60) -5]
Test Case: 764 | Input/Output: [(9 65 56 -13) -13]
Test Case: 765 | Input/Output: [(-72 -90 -60 -90) -90]
Test Case: 766 | Input/Output: [(-82 -82 -74 -66) -82]
Test Case: 767 | Input/Output: [(10 73 -30 71) -30]
Test Case: 768 | Input/Output: [(61 -3 45 69) -3]
Test Case: 769 | Input/Output: [(-25 -12 -16 -77) -77]
Test Case: 770 | Input/Output: [(-85 -8 -100 43) -100]
Test Case: 771 | Input/Output: [(-51 33 -60 -59) -60]
Test Case: 772 | Input/Output: [(-19 77 3 16) -19]
Test Case: 773 | Input/Output: [(-78 55 30 28) -78]
Test Case: 774 | Input/Output: [(-84 -80 -2 -48) -84]
Test Case: 775 | Input/Output: [(-1 3 -29 -72) -72]
Test Case: 776 | Input/Output: [(-89 -4 -5 -59) -89]
Test Case: 777 | Input/Output: [(99 2 -92 12) -92]
Test Case: 778 | Input/Output: [(-4 -73 -30 -67) -73]
Test Case: 779 | Input/Output: [(-19 30 -43 -93) -93]
Test Case: 780 | Input/Output: [(-59 -7 11 49) -59]
Test Case: 781 | Input/Output: [(33 39 -15 43) -15]
Test Case: 782 | Input/Output: [(29 -27 0 99) -27]
Test Case: 783 | Input/Output: [(52 6 -48 70) -48]
Test Case: 784 | Input/Output: [(-65 -2 -46 58) -65]
Test Case: 785 | Input/Output: [(-76 -99 -37 -71) -99]
Test Case: 786 | Input/Output: [(93 24 26 48) 24]
Test Case: 787 | Input/Output: [(-69 91 26 63) -69]
Test Case: 788 | Input/Output: [(84 7 99 76) 7]
Test Case: 789 | Input/Output: [(1 -62 -96 -3) -96]
Test Case: 790 | Input/Output: [(-43 -76 -20 89) -76]
Test Case: 791 | Input/Output: [(-59 -82 -47 -63) -82]
Test Case: 792 | Input/Output: [(29 71 96 -66) -66]
Test Case: 793 | Input/Output: [(39 -49 -26 75) -49]
Test Case: 794 | Input/Output: [(33 62 -70 70) -70]
Test Case: 795 | Input/Output: [(-57 -81 61 -98) -98]
Test Case: 796 | Input/Output: [(45 -46 42 -48) -48]
Test Case: 797 | Input/Output: [(-37 80 32 -86) -86]
Test Case: 798 | Input/Output: [(-50 -33 54 -21) -50]
Test Case: 799 | Input/Output: [(61 2 -63 -95) -95]
Test Case: 800 | Input/Output: [(34 52 57 -82) -82]
Test Case: 801 | Input/Output: [(-29 61 3 -94) -94]
Test Case: 802 | Input/Output: [(29 19 95 90) 19]
Test Case: 803 | Input/Output: [(-63 -7 96 95) -63]
Test Case: 804 | Input/Output: [(-64 -67 57 -52) -67]
Test Case: 805 | Input/Output: [(-93 52 -32 96) -93]
Test Case: 806 | Input/Output: [(59 -84 -27 81) -84]
Test Case: 807 | Input/Output: [(-99 -81 90 -48) -99]
Test Case: 808 | Input/Output: [(-32 -23 -74 24) -74]
Test Case: 809 | Input/Output: [(-8 90 -37 83) -37]
Test Case: 810 | Input/Output: [(51 -73 9 75) -73]
Test Case: 811 | Input/Output: [(-55 7 2 2) -55]
Test Case: 812 | Input/Output: [(-98 -51 -26 -22) -98]
Test Case: 813 | Input/Output: [(71 21 23 -27) -27]
Test Case: 814 | Input/Output: [(87 9 62 -2) -2]
Test Case: 815 | Input/Output: [(37 71 -35 32) -35]
Test Case: 816 | Input/Output: [(24 -18 31 -9) -18]
Test Case: 817 | Input/Output: [(-99 84 50 49) -99]
Test Case: 818 | Input/Output: [(1 52 -44 6) -44]
Test Case: 819 | Input/Output: [(-18 87 42 -74) -74]
Test Case: 820 | Input/Output: [(-9 95 -81 95) -81]
Test Case: 821 | Input/Output: [(-19 15 56 72) -19]
Test Case: 822 | Input/Output: [(83 -98 -60 2) -98]
Test Case: 823 | Input/Output: [(-56 32 20 -90) -90]
Test Case: 824 | Input/Output: [(95 70 80 -54) -54]
Test Case: 825 | Input/Output: [(16 9 -18 54) -18]
Test Case: 826 | Input/Output: [(-35 4 -70 -49) -70]
Test Case: 827 | Input/Output: [(-12 99 -97 -15) -97]
Test Case: 828 | Input/Output: [(98 -87 -49 26) -87]
Test Case: 829 | Input/Output: [(34 -15 -61 94) -61]
Test Case: 830 | Input/Output: [(-36 -65 42 86) -65]
Test Case: 831 | Input/Output: [(-66 56 18 43) -66]
Test Case: 832 | Input/Output: [(5 7 37 -28) -28]
Test Case: 833 | Input/Output: [(-14 -93 -61 26) -93]
Test Case: 834 | Input/Output: [(-45 79 4 1) -45]
Test Case: 835 | Input/Output: [(75 -32 19 -73) -73]
Test Case: 836 | Input/Output: [(-73 51 47 0) -73]
Test Case: 837 | Input/Output: [(-65 -22 16 -51) -65]
Test Case: 838 | Input/Output: [(-43 26 79 73) -43]
Test Case: 839 | Input/Output: [(26 8 -33 -66) -66]
Test Case: 840 | Input/Output: [(-78 -32 -81 37) -81]
Test Case: 841 | Input/Output: [(53 -77 2 -51) -77]
Test Case: 842 | Input/Output: [(64 -76 -98 40) -98]
Test Case: 843 | Input/Output: [(52 13 -68 10) -68]
Test Case: 844 | Input/Output: [(100 65 37 -62) -62]
Test Case: 845 | Input/Output: [(-63 -1 38 -71) -71]
Test Case: 846 | Input/Output: [(10 -27 99 -80) -80]
Test Case: 847 | Input/Output: [(50 98 -80 93) -80]
Test Case: 848 | Input/Output: [(70 -92 90 -23) -92]
Test Case: 849 | Input/Output: [(-57 -19 68 -89) -89]
Test Case: 850 | Input/Output: [(35 -47 64 -59) -59]
Test Case: 851 | Input/Output: [(-78 -64 26 95) -78]
Test Case: 852 | Input/Output: [(-98 11 10 -66) -98]
Test Case: 853 | Input/Output: [(-24 -72 -94 -73) -94]
Test Case: 854 | Input/Output: [(19 -45 -29 -1) -45]
Test Case: 855 | Input/Output: [(88 16 69 26) 16]
Test Case: 856 | Input/Output: [(-45 -73 -32 8) -73]
Test Case: 857 | Input/Output: [(19 -42 0 -9) -42]
Test Case: 858 | Input/Output: [(9 73 -19 32) -19]
Test Case: 859 | Input/Output: [(-1 31 -43 18) -43]
Test Case: 860 | Input/Output: [(-17 -94 -88 -63) -94]
Test Case: 861 | Input/Output: [(-57 68 -77 57) -77]
Test Case: 862 | Input/Output: [(25 -84 100 -55) -84]
Test Case: 863 | Input/Output: [(-52 -11 4 67) -52]
Test Case: 864 | Input/Output: [(-57 -82 30 -37) -82]
Test Case: 865 | Input/Output: [(88 -16 -37 -96) -96]
Test Case: 866 | Input/Output: [(98 67 -3 64) -3]
Test Case: 867 | Input/Output: [(3 71 91 44) 3]
Test Case: 868 | Input/Output: [(27 -38 -97 61) -97]
Test Case: 869 | Input/Output: [(91 -91 -69 -40) -91]
Test Case: 870 | Input/Output: [(62 74 -78 67) -78]
Test Case: 871 | Input/Output: [(-48 -18 17 54) -48]
Test Case: 872 | Input/Output: [(64 -36 -39 11) -39]
Test Case: 873 | Input/Output: [(-16 -4 4 25) -16]
Test Case: 874 | Input/Output: [(-15 41 -44 9) -44]
Test Case: 875 | Input/Output: [(81 -39 22 37) -39]
Test Case: 876 | Input/Output: [(-10 -31 92 61) -31]
Test Case: 877 | Input/Output: [(70 -64 62 -3) -64]
Test Case: 878 | Input/Output: [(19 92 -35 1) -35]
Test Case: 879 | Input/Output: [(-32 -76 86 63) -76]
Test Case: 880 | Input/Output: [(-90 36 25 -5) -90]
Test Case: 881 | Input/Output: [(62 -47 -19 -58) -58]
Test Case: 882 | Input/Output: [(52 -46 24 7) -46]
Test Case: 883 | Input/Output: [(-53 41 -3 3) -53]
Test Case: 884 | Input/Output: [(-36 -72 -60 -4) -72]
Test Case: 885 | Input/Output: [(-49 79 59 -98) -98]
Test Case: 886 | Input/Output: [(-52 58 1 75) -52]
Test Case: 887 | Input/Output: [(37 81 -68 -29) -68]
Test Case: 888 | Input/Output: [(-62 62 73 52) -62]
Test Case: 889 | Input/Output: [(-9 15 40 45) -9]
Test Case: 890 | Input/Output: [(-71 -2 -4 -98) -98]
Test Case: 891 | Input/Output: [(-97 72 -3 42) -97]
Test Case: 892 | Input/Output: [(12 67 1 42) 1]
Test Case: 893 | Input/Output: [(-34 -47 18 -33) -47]
Test Case: 894 | Input/Output: [(-43 12 -83 -50) -83]
Test Case: 895 | Input/Output: [(86 -58 -5 -47) -58]
Test Case: 896 | Input/Output: [(14 29 7 -19) -19]
Test Case: 897 | Input/Output: [(27 -74 41 -56) -74]
Test Case: 898 | Input/Output: [(99 96 -99 -19) -99]
Test Case: 899 | Input/Output: [(56 -41 -24 10) -41]
Test Case: 900 | Input/Output: [(19 78 43 -33) -33]
Test Case: 901 | Input/Output: [(-61 14 -20 13) -61]
Test Case: 902 | Input/Output: [(7 -62 2 -60) -62]
Test Case: 903 | Input/Output: [(9 -75 86 -1) -75]
Test Case: 904 | Input/Output: [(-90 -67 -20 78) -90]
Test Case: 905 | Input/Output: [(15 -63 80 52) -63]
Test Case: 906 | Input/Output: [(-24 -16 74 -71) -71]
Test Case: 907 | Input/Output: [(74 30 -15 82) -15]
Test Case: 908 | Input/Output: [(-70 76 10 55) -70]
Test Case: 909 | Input/Output: [(-78 45 6 97) -78]
Test Case: 910 | Input/Output: [(-11 -30 40 47) -30]
Test Case: 911 | Input/Output: [(80 -98 -11 -11) -98]
Test Case: 912 | Input/Output: [(87 0 81 29) 0]
Test Case: 913 | Input/Output: [(-56 46 35 -36) -56]
Test Case: 914 | Input/Output: [(-39 -31 -91 -18) -91]
Test Case: 915 | Input/Output: [(-59 89 23 -78) -78]
Test Case: 916 | Input/Output: [(90 79 100 42) 42]
Test Case: 917 | Input/Output: [(-37 -98 35 -55) -98]
Test Case: 918 | Input/Output: [(-93 -84 77 74) -93]
Test Case: 919 | Input/Output: [(-25 -87 64 -85) -87]
Test Case: 920 | Input/Output: [(61 36 28 -25) -25]
Test Case: 921 | Input/Output: [(-6 55 -34 -10) -34]
Test Case: 922 | Input/Output: [(32 -99 97 94) -99]
Test Case: 923 | Input/Output: [(-81 67 -84 -71) -84]
Test Case: 924 | Input/Output: [(-70 -51 -99 24) -99]
Test Case: 925 | Input/Output: [(-49 38 83 -31) -49]
Test Case: 926 | Input/Output: [(26 73 -79 -87) -87]
Test Case: 927 | Input/Output: [(68 100 74 46) 46]
Test Case: 928 | Input/Output: [(-78 -28 -96 41) -96]
Test Case: 929 | Input/Output: [(47 49 87 -54) -54]
Test Case: 930 | Input/Output: [(54 87 42 13) 13]
Test Case: 931 | Input/Output: [(-50 76 -71 23) -71]
Test Case: 932 | Input/Output: [(-53 49 0 11) -53]
Test Case: 933 | Input/Output: [(-50 -71 -36 11) -71]
Test Case: 934 | Input/Output: [(-94 32 18 -3) -94]
Test Case: 935 | Input/Output: [(-83 -62 -64 -33) -83]
Test Case: 936 | Input/Output: [(-43 -5 82 22) -43]
Test Case: 937 | Input/Output: [(-23 86 -79 26) -79]
Test Case: 938 | Input/Output: [(-72 71 -78 34) -78]
Test Case: 939 | Input/Output: [(-43 78 54 68) -43]
Test Case: 940 | Input/Output: [(19 82 -97 -64) -97]
Test Case: 941 | Input/Output: [(-9 71 56 -97) -97]
Test Case: 942 | Input/Output: [(-91 -83 -63 -5) -91]
Test Case: 943 | Input/Output: [(98 -92 59 -14) -92]
Test Case: 944 | Input/Output: [(56 25 65 70) 25]
Test Case: 945 | Input/Output: [(56 92 58 31) 31]
Test Case: 946 | Input/Output: [(51 -89 -77 11) -89]
Test Case: 947 | Input/Output: [(-41 38 32 -92) -92]
Test Case: 948 | Input/Output: [(93 -37 -86 -28) -86]
Test Case: 949 | Input/Output: [(-91 -10 -1 76) -91]
Test Case: 950 | Input/Output: [(50 -73 -67 24) -73]
Test Case: 951 | Input/Output: [(90 13 17 86) 13]
Test Case: 952 | Input/Output: [(-1 61 35 69) -1]
Test Case: 953 | Input/Output: [(90 11 -18 -47) -47]
Test Case: 954 | Input/Output: [(34 23 -88 -95) -95]
Test Case: 955 | Input/Output: [(-4 16 -6 -5) -6]
Test Case: 956 | Input/Output: [(5 -62 -42 57) -62]
Test Case: 957 | Input/Output: [(54 67 -76 36) -76]
Test Case: 958 | Input/Output: [(-61 -90 -44 -74) -90]
Test Case: 959 | Input/Output: [(20 53 25 -3) -3]
Test Case: 960 | Input/Output: [(0 51 11 -95) -95]
Test Case: 961 | Input/Output: [(-17 92 5 10) -17]
Test Case: 962 | Input/Output: [(-21 -46 -70 76) -70]
Test Case: 963 | Input/Output: [(29 -16 98 16) -16]
Test Case: 964 | Input/Output: [(98 -12 18 -36) -36]
Test Case: 965 | Input/Output: [(-65 36 43 -66) -66]
Test Case: 966 | Input/Output: [(95 49 -68 94) -68]
Test Case: 967 | Input/Output: [(7 22 -55 67) -55]
Test Case: 968 | Input/Output: [(67 61 67 59) 59]
Test Case: 969 | Input/Output: [(97 13 75 11) 11]
Test Case: 970 | Input/Output: [(-60 -15 -82 -72) -82]
Test Case: 971 | Input/Output: [(47 77 23 29) 23]
Test Case: 972 | Input/Output: [(93 -91 -78 42) -91]
Test Case: 973 | Input/Output: [(82 -28 -67 -59) -67]
Test Case: 974 | Input/Output: [(89 7 42 43) 7]
Test Case: 975 | Input/Output: [(87 54 37 68) 37]
Test Case: 976 | Input/Output: [(-90 -95 -23 90) -95]
Test Case: 977 | Input/Output: [(11 -65 40 25) -65]
Test Case: 978 | Input/Output: [(76 -65 -49 -74) -74]
Test Case: 979 | Input/Output: [(-70 -27 -23 45) -70]
Test Case: 980 | Input/Output: [(11 -51 47 -59) -59]
Test Case: 981 | Input/Output: [(-29 -63 -17 -66) -66]
Test Case: 982 | Input/Output: [(-84 54 37 -9) -84]
Test Case: 983 | Input/Output: [(73 -46 53 -53) -53]
Test Case: 984 | Input/Output: [(-14 49 3 -83) -83]
Test Case: 985 | Input/Output: [(46 -45 -62 82) -62]
Test Case: 986 | Input/Output: [(-39 7 -32 -99) -99]
Test Case: 987 | Input/Output: [(-65 49 -95 -2) -95]
Test Case: 988 | Input/Output: [(51 48 -3 7) -3]
Test Case: 989 | Input/Output: [(71 -16 -100 49) -100]
Test Case: 990 | Input/Output: [(-19 -49 3 -50) -50]
Test Case: 991 | Input/Output: [(-40 -7 53 -55) -55]
Test Case: 992 | Input/Output: [(-19 99 60 5) -19]
Test Case: 993 | Input/Output: [(1 -27 -7 1) -27]
Test Case: 994 | Input/Output: [(-86 -56 98 -75) -86]
Test Case: 995 | Input/Output: [(-48 27 -81 3) -81]
Test Case: 996 | Input/Output: [(13 -6 93 20) -6]
Test Case: 997 | Input/Output: [(62 97 69 -43) -43]
Test Case: 998 | Input/Output: [(-20 -87 32 -76) -87]
Test Case: 999 | Input/Output: [(99 63 8 71) 8]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -109 -9 67 -33 -78 -88 44 120 -70 78 6 -126 18 109 -54 -35
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-24 -24 -24 47] -24] [[27 -3 -3 -3] -3] [[-78 -80 -80 -80] -80] [[37 37 -68 37] -68] [[-31 -31 -64 -31] -64] [[-32 -32 9 -32] -32] [[-87 19 -87 -87] -87] [[-68 -5 -68 -68] -68] [[-35 -85 -35 -35] -85] [[32 32 32 54] 32] [(-20 -20 -20 -20) -20] [(3 3 3 3) 3] [(92 92 92 92) 92] [(14 14 14 14) 14] [(-96 -96 -96 -96) -96] [(38 85 57 6) 6] [(66 63 82 56) 56] [(56 86 20 7) 7] [(64 43 61 62) 43] [(22 92 94 37) 22] [(66 91 56 16) 16] [(62 77 52 47) 47] [(11 96 22 99) 11] [(18 53 13 56) 13] [(93 26 28 56) 26] [(5 88 22 55) 5] [(70 63 62 82) 62] [(72 85 99 24) 24] [(79 33 40 51) 33] [(6 40 74 10) 6] [(35 84 59 90) 35] [(43 93 64 84) 43] [(33 66 26 97) 26] [(64 96 10 64) 10] [(93 73 8 66) 8] [(-44 -99 -65 -55) -99] [(-91 -72 40 68) -91] [(0 34 -15 94) -15] [(-67 11 98 91) -67] [(97 91 -4 -79) -79] [(-78 -72 -56 -99) -99] [(-32 -61 68 -1) -61] [(40 81 83 95) 40] [(-85 33 71 85) -85] [(-70 -65 -68 -96) -96] [(-37 -48 94 21) -48] [(-95 -96 27 -22) -96] [(-49 32 21 6) -49] [(-74 0 -78 78) -78] [(52 9 63 0) 0] [(23 90 -71 -7) -71] [(-83 -79 -47 -51) -83] [(-9 -19 -90 -63) -90] [(3 -85 32 14) -85] [(0 51 -85 -83) -85] [(91 58 1 -64) -64] [(39 -72 22 -13) -72] [(-87 -40 52 -54) -87] [(81 -52 -44 23) -52] [(-25 54 95 52) -25] [(86 19 -15 -73) -73] [(-24 89 78 62) -24] [(-96 68 23 -77) -96] [(92 56 -29 -87) -87] [(62 -89 39 -35) -89] [(44 -36 27 8) -36] [(43 -91 -58 -12) -91] [(-51 -6 82 11) -51] [(14 63 91 -57) -57] [(-54 74 16 -21) -54] [(54 19 -77 76) -77] [(-90 -76 3 -41) -90] [(18 -41 -24 -83) -83] [(40 0 77 -3) -3] [(-62 43 -45 64) -62] [(83 -15 92 34) -15] [(47 -97 35 34) -97] [(6 -71 -29 -98) -98] [(-46 -10 17 -79) -79] [(-32 46 85 -28) -32] [(55 -20 -11 11) -20] [(-20 48 19 64) -20] [(30 29 -21 -49) -49] [(50 53 21 36) 21] [(-59 12 -9 97) -59] [(80 61 34 33) 33] [(97 -46 5 -27) -46] [(-55 -70 96 -75) -75] [(95 61 -41 -70) -70] [(-54 75 5 39) -54] [(27 7 -30 -69) -69] [(-9 -52 -24 33) -52] [(-24 -46 -40 -84) -84] [(-3 -53 65 49) -53] [(-80 9 -88 90) -88])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: 19                 
Correct output: -68                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 85                 
Correct output: 56                  | Program output: 63                 
Correct output: 7                   | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 92                 
Correct output: 16                  | Program output: 91                 
Correct output: 47                  | Program output: 77                 
Correct output: 11                  | Program output: 96                 
Correct output: 13                  | Program output: 53                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 88                 
Correct output: 62                  | Program output: 63                 
Correct output: 24                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: 6                   | Program output: 40                 
Correct output: 35                  | Program output: 84                 
Correct output: 43                  | Program output: 93                 
Correct output: 26                  | Program output: 66                 
Correct output: 10                  | Program output: 96                 
Correct output: 8                   | Program output: 73                 
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -72                
Correct output: -15                 | Program output: 34                 
Correct output: -67                 | Program output: 11                 
Correct output: -79                 | Program output: 91                 
Correct output: -99                 | Program output: -72                
Correct output: -61                 | Program output: -61                
Correct output: 40                  | Program output: 81                 
Correct output: -85                 | Program output: 33                 
Correct output: -96                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 32                 
Correct output: -78                 | Program output: 0                  
Correct output: 0                   | Program output: 9                  
Correct output: -71                 | Program output: 90                 
Correct output: -83                 | Program output: -79                
Correct output: -90                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: 51                 
Correct output: -64                 | Program output: 58                 
Correct output: -72                 | Program output: -72                
Correct output: -87                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: 54                 
Correct output: -73                 | Program output: 19                 
Correct output: -24                 | Program output: 89                 
Correct output: -96                 | Program output: 68                 
Correct output: -87                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -6                 
Correct output: -57                 | Program output: 63                 
Correct output: -54                 | Program output: 74                 
Correct output: -77                 | Program output: 19                 
Correct output: -90                 | Program output: -76                
Correct output: -83                 | Program output: -41                
Correct output: -3                  | Program output: 0                  
Correct output: -62                 | Program output: 43                 
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output: -71                
Correct output: -79                 | Program output: -10                
Correct output: -32                 | Program output: 46                 
Correct output: -20                 | Program output: -20                
Correct output: -20                 | Program output: 48                 
Correct output: -49                 | Program output: 29                 
Correct output: 21                  | Program output: 53                 
Correct output: -59                 | Program output: 12                 
Correct output: 33                  | Program output: 61                 
Correct output: -46                 | Program output: -46                
Correct output: -75                 | Program output: -70                
Correct output: -70                 | Program output: 61                 
Correct output: -54                 | Program output: 75                 
Correct output: -69                 | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -46                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: 9                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction -38} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_items})
Lexicase best program: (boolean_not exec_shove (integer_rot integer_fromboolean exec_k_when_autoconstructing () (in2 print_integer) integer_dup_times exec_s (integer_swap integer_mod boolean_rot integer_yankdup exec_k (integer_lte in2 exec_dup_items integer_div) (integer_dup boolean_and -38 boolean_dup_items integer_dup_times print_integer) exec_do*times (integer_dup_times boolean_dup_items)) () ()))
Lexicase best errors: [0 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction -38} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_items})
Zero cases best program: (boolean_not exec_shove (integer_rot integer_fromboolean exec_k_when_autoconstructing () (in2 print_integer) integer_dup_times exec_s (integer_swap integer_mod boolean_rot integer_yankdup exec_k (integer_lte in2 exec_dup_items integer_div) (integer_dup boolean_and -38 boolean_dup_items integer_dup_times print_integer) exec_do*times (integer_dup_times boolean_dup_items)) () ()))
Zero cases best errors: [0 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 13 3 1 9 4 1 1 1000 3)
Population mean number of elite cases: 1.04
Count of perfect (error zero) individuals by case: (2 13 3 1 9 4 1 1 0 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*count () in2 exec_do*while () integer_gte boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove (print_newline exec_s (boolean_rot) (boolean_flush exec_pop (exec_y (integer_mod print_integer print_exec (boolean_swap integer_dup boolean_stackdepth in4) exec_flush integer_shove exec_do*range (integer_empty boolean_eq integer_gte integer_dup_items integer_mod) integer_inc boolean_dup integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup exec_when (boolean_not integer_sub boolean_empty) exec_y_when_autoconstructing ())) ())) () ())))
Errors: [0 0 0 1 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 60
Size: 80
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.998 0.987 0.997 0.999 0.991 0.996 0.999 0.999 1.0 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 50.372
Average program size in population (points): 68.954
Average percent parens in population: 0.274
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 470085
--- Timings ---
Current time: 1559314461583 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 31.8%
Fitness Testing:      1.5 seconds, 63.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: 47                 
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 54                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 62                 
Correct output: 22                  | Program output: 37                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 99                 
Correct output: 13                  | Program output: 56                 
Correct output: 26                  | Program output: 56                 
Correct output: 5                   | Program output: 55                 
Correct output: 62                  | Program output: 82                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 51                 
Correct output: 6                   | Program output: 10                 
Correct output: 35                  | Program output: 90                 
Correct output: 43                  | Program output: 84                 
Correct output: 26                  | Program output: 97                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 66                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: 68                 
Correct output: -15                 | Program output: 94                 
Correct output: -67                 | Program output: 91                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 95                 
Correct output: -85                 | Program output: 85                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 21                 
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output: 6                  
Correct output: -78                 | Program output: 78                 
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output: 14                 
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: 23                 
Correct output: -25                 | Program output: 52                 
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: 62                 
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: 76                 
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: 64                 
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output: 34                 
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: 11                 
Correct output: -20                 | Program output: 64                 
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: 33                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: 49                 
Correct output: -88                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_273} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_rot () (exec_eq) (boolean_dup_times exec_eq) exec_dup_items integer_eq integer_dup_times exec_k (exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot exec_while () integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) print_integer boolean_yank tag_boolean_273) (print_boolean))
Lexicase best errors: [0 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_273} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_rot () (exec_eq) (boolean_dup_times exec_eq) exec_dup_items integer_eq integer_dup_times exec_k (exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot exec_while () integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) print_integer boolean_yank tag_boolean_273) (print_boolean))
Zero cases best errors: [0 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 205 359 360 205 32 299 300 603 862)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (297 205 359 360 205 32 299 300 603 862)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_273} {:close 0, :instruction print_boolean})
Best program: (exec_dup_items integer_empty exec_while (boolean_dup) integer_mult exec_rot () (exec_eq) (boolean_dup_times exec_eq) exec_dup_items integer_eq integer_dup_times exec_k (exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot exec_while () integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) print_integer boolean_yank tag_boolean_273) (print_boolean))
Errors: [0 1 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.478
Median total errors in population: 6
Error averages by case: (0.703 0.795 0.641 0.64 0.795 0.968 0.701 0.7 0.397 0.138)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.584
Average program size in population (points): 54.219
Average percent parens in population: 0.271
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.512
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 230
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 232
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 784704
--- Timings ---
Current time: 1559314463845 milliseconds
Total Time:           4.7 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         2.3 seconds, 49.2%
Fitness Testing:      2.0 seconds, 41.9%
Report:               0.3 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: 27                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 56                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 52                 
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: 62                 
Correct output: -36                 | Program output: 44                 
Correct output: -91                 | Program output: 43                 
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 18                 
Correct output: -3                  | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output: 6                  
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: 97                 
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_631} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 1, :instruction in1} {:close 0, :instruction -53} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_458} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction 58} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items})
Lexicase best program: (boolean_frominteger integer_stackdepth exec_shove (tag_integer_631 integer_stackdepth) exec_do*times (integer_lte) boolean_swap exec_noop boolean_not exec_k_when_autoconstructing (integer_dup_items exec_noop exec_s () (exec_yankdup integer_mod exec_noop integer_gt) (boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (exec_noop in1) -53 exec_do*count (integer_min exec_dup (boolean_or in1 exec_s (exec_do*times (integer_shove) exec_do*count (exec_yankdup) integer_dec) (exec_rot (exec_s_when_autoconstructing (boolean_rot boolean_invert_first_then_and) (boolean_or boolean_dup boolean_dup_items boolean_stackdepth integer_fromboolean tagged_458 exec_flush integer_flush boolean_xor integer_div) (exec_do*times (print_exec (boolean_invert_first_then_and) exec_dup_items integer_mult integer_sub 58 exec_k (exec_k (boolean_pop integer_shove exec_dup () integer_dup_items) ()) ()))) () ()) ()))) () ())) ())
Lexicase best errors: [1 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 97
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_631} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 1, :instruction in1} {:close 0, :instruction -53} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_458} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction 58} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items})
Zero cases best program: (boolean_frominteger integer_stackdepth exec_shove (tag_integer_631 integer_stackdepth) exec_do*times (integer_lte) boolean_swap exec_noop boolean_not exec_k_when_autoconstructing (integer_dup_items exec_noop exec_s () (exec_yankdup integer_mod exec_noop integer_gt) (boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (exec_noop in1) -53 exec_do*count (integer_min exec_dup (boolean_or in1 exec_s (exec_do*times (integer_shove) exec_do*count (exec_yankdup) integer_dec) (exec_rot (exec_s_when_autoconstructing (boolean_rot boolean_invert_first_then_and) (boolean_or boolean_dup boolean_dup_items boolean_stackdepth integer_fromboolean tagged_458 exec_flush integer_flush boolean_xor integer_div) (exec_do*times (print_exec (boolean_invert_first_then_and) exec_dup_items integer_mult integer_sub 58 exec_k (exec_k (boolean_pop integer_shove exec_dup () integer_dup_items) ()) ()))) () ()) ()))) () ())) ())
Zero cases best errors: [1 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 97
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (394 1000 1000 226 226 851 225 230 842 230)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (394 0 0 226 226 851 225 230 842 230)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_add} {:close 0, :instruction tag_exec_848} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_616} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_218} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_integer_904} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction tag_boolean_573} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap})
Best program: (boolean_dup_items in1 boolean_not integer_dup integer_pop boolean_yankdup print_integer integer_dup_times boolean_flush exec_dup (exec_k_when_autoconstructing (exec_shove (exec_do*while (integer_lte integer_swap in4 exec_noop boolean_not) exec_s (integer_yankdup boolean_dup_items integer_inc integer_pop integer_shove integer_min exec_while (boolean_shove boolean_eq exec_dup_times (boolean_swap integer_add) tag_exec_848 (exec_rot (in1 integer_gte integer_lte tag_exec_616 (integer_sub boolean_pop boolean_dup_times boolean_yankdup exec_do*times (integer_gt integer_inc integer_rot print_boolean exec_noop exec_do*times () print_integer tagged_218 integer_inc) tag_integer_904 boolean_shove) boolean_invert_second_then_and boolean_pop) (exec_k (integer_add exec_do*count (tag_boolean_573) boolean_shove print_integer integer_dup_times) (integer_shove exec_do*count (exec_flush exec_k (boolean_xor exec_dup_items exec_rot (integer_swap) () ()) ()))) ()))) () ())) ()))
Errors: [1 1 1 0 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 70
Size: 97
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.776
Median total errors in population: 7
Error averages by case: (0.606 1.0 1.0 0.774 0.774 0.149 0.775 0.77 0.158 0.77)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 37.588
Average program size in population (points): 51.978
Average percent parens in population: 0.276
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1305
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1053378
--- Timings ---
Current time: 1559314466318 milliseconds
Total Time:           7.1 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         4.1 seconds, 57.7%
Fitness Testing:      2.3 seconds, 31.9%
Report:               0.6 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: 47                 
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 54                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 62                 
Correct output: 22                  | Program output: 37                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 99                 
Correct output: 13                  | Program output: 56                 
Correct output: 26                  | Program output: 56                 
Correct output: 5                   | Program output: 55                 
Correct output: 62                  | Program output: 82                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 51                 
Correct output: 6                   | Program output: 10                 
Correct output: 35                  | Program output: 90                 
Correct output: 43                  | Program output: 84                 
Correct output: 26                  | Program output: 97                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 66                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: 68                 
Correct output: -15                 | Program output: 94                 
Correct output: -67                 | Program output: 91                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 95                 
Correct output: -85                 | Program output: 85                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 21                 
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output: 6                  
Correct output: -78                 | Program output: 78                 
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output: 14                 
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: 23                 
Correct output: -25                 | Program output: 52                 
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: 62                 
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: 76                 
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: 64                 
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output: 34                 
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: 11                 
Correct output: -20                 | Program output: 64                 
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: 33                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: 49                 
Correct output: -88                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_273} {:close 0, :instruction print_boolean})
Lexicase best program: (in4 integer_empty exec_while (boolean_dup) integer_mult exec_rot (exec_eq) (boolean_dup_times exec_eq) () exec_dup_items integer_eq integer_dup_times exec_k (exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot exec_while () integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) print_integer boolean_yank tag_boolean_273) (print_boolean))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_273} {:close 0, :instruction print_boolean})
Zero cases best program: (in4 integer_empty exec_while (boolean_dup) integer_mult exec_rot (exec_eq) (boolean_dup_times exec_eq) () exec_dup_items integer_eq integer_dup_times exec_k (exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot exec_while () integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) print_integer boolean_yank tag_boolean_273) (print_boolean))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (130 1 441 1 130 300 130 753 572 302)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (130 1 441 1 130 300 130 753 572 302)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_273} {:close 0, :instruction print_boolean})
Best program: (in4 integer_empty integer_shove boolean_dup integer_mult exec_rot () (exec_rot () (boolean_dup_times exec_eq) () exec_dup_items integer_eq integer_dup_times exec_k (exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot exec_while () integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) print_integer boolean_yank tag_boolean_273) (print_boolean)) ())
Errors: [0 1 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 44
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 7.24
Median total errors in population: 7
Error averages by case: (0.87 0.999 0.559 0.999 0.87 0.7 0.87 0.247 0.428 0.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.957
Average program size in population (points): 52.036
Average percent parens in population: 0.267
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5505
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1351911
--- Timings ---
Current time: 1559314468959 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         6.1 seconds, 62.3%
Fitness Testing:      2.6 seconds, 26.3%
Report:               1.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: 27                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 56                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 52                 
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: 62                 
Correct output: -36                 | Program output: 44                 
Correct output: -91                 | Program output: 43                 
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 18                 
Correct output: -3                  | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output: 6                  
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: 97                 
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod})
Lexicase best program: (in1 exec_when () print_integer integer_gte boolean_swap integer_mod)
Lexicase best errors: [0 1 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 8
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod})
Zero cases best program: (in1 exec_when () print_integer integer_gte boolean_swap integer_mod)
Zero cases best errors: [0 1 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 8
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (893 226 125 264 226 275 886 125 126 264)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (893 226 125 264 226 275 886 125 126 264)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_add} {:close 0, :instruction tag_exec_848} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_616} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_218} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_integer_904} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction tag_boolean_573} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_dup_items in1 boolean_not integer_dup integer_pop boolean_yankdup print_integer integer_dup_times boolean_flush exec_dup (exec_k_when_autoconstructing (exec_shove (exec_do*while (integer_lte integer_swap in4 exec_noop boolean_not) exec_s (integer_yankdup boolean_dup_items integer_inc integer_pop integer_shove integer_min exec_while (boolean_shove boolean_eq exec_dup_times (boolean_swap integer_add) tag_exec_848 (exec_rot (in1 integer_gte integer_lte tag_exec_616 (integer_sub boolean_pop boolean_dup_times boolean_yankdup exec_do*times (integer_gt integer_inc integer_rot print_boolean exec_noop exec_do*times () print_integer tagged_218 integer_inc) tag_integer_904 boolean_shove) boolean_invert_second_then_and boolean_pop) (exec_k (integer_add exec_do*count (tag_boolean_573) boolean_empty) (exec_y_when_autoconstructing ())) ()))) () ())) ()))
Errors: [0 1 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 61
Size: 83
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.59
Median total errors in population: 6
Error averages by case: (0.107 0.774 0.875 0.736 0.774 0.725 0.114 0.875 0.874 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.837
Average program size in population (points): 55.356
Average percent parens in population: 0.265
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.198
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1551802
--- Timings ---
Current time: 1559314471476 milliseconds
Total Time:          12.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         8.1 seconds, 65.6%
Fitness Testing:      2.8 seconds, 22.9%
Report:               1.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: 27                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 56                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 52                 
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: 62                 
Correct output: -36                 | Program output: 44                 
Correct output: -91                 | Program output: 43                 
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 18                 
Correct output: -3                  | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output: 6                  
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: 97                 
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap})
Lexicase best program: (in1 exec_when () print_integer integer_gte boolean_swap)
Lexicase best errors: [1 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 7
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap})
Zero cases best program: (in1 exec_when () print_integer integer_gte boolean_swap)
Zero cases best errors: [1 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 7
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 331 264 213 695 543 331 211 331 100)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (98 331 264 213 695 543 331 211 331 100)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod})
Best program: (in1 exec_when () print_integer integer_gte boolean_swap integer_mod)
Errors: [1 0 1 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 6
Size: 8
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.883
Median total errors in population: 7
Error averages by case: (0.902 0.669 0.736 0.787 0.305 0.457 0.669 0.789 0.669 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.303
Average program size in population (points): 53.439
Average percent parens in population: 0.265
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.7049375
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1763869
--- Timings ---
Current time: 1559314474177 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.3 seconds, 68.3%
Fitness Testing:      3.0 seconds, 20.1%
Report:               1.6 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: 27                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 56                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 52                 
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: 62                 
Correct output: -36                 | Program output: 44                 
Correct output: -91                 | Program output: 43                 
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 18                 
Correct output: -3                  | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output: 6                  
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: 97                 
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod})
Lexicase best program: (in1 exec_when () print_integer exec_k_when_autoconstructing () (boolean_swap integer_mod))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod})
Zero cases best program: (in1 exec_when () print_integer exec_k_when_autoconstructing () (boolean_swap integer_mod))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 430 175 430 433 430 193 193 109 430)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (175 430 175 430 433 430 193 193 109 430)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod})
Best program: (in1 exec_when () print_integer integer_gte exec_while (boolean_dup) integer_mult exec_rot () (exec_eq) (integer_yankdup exec_eq) exec_dup_items integer_eq exec_when () print_integer integer_gte boolean_swap integer_mod)
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.002
Median total errors in population: 8
Error averages by case: (0.825 0.57 0.825 0.57 0.567 0.57 0.807 0.807 0.891 0.57)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.784
Average program size in population (points): 46.444
Average percent parens in population: 0.272
Minimum age in population: 6.0
Maximum age in population: 11.0
Average age in population: 9.19778125
Median age in population: 9.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 1976277
--- Timings ---
Current time: 1559314477133 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.9 seconds, 71.2%
Fitness Testing:      3.3 seconds, 18.1%
Report:               1.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -64                 | Program output: -64                
Correct output: -32                 | Program output: 9                  
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 57                 
Correct output: 56                  | Program output: 82                 
Correct output: 7                   | Program output: 20                 
Correct output: 43                  | Program output: 61                 
Correct output: 22                  | Program output: 94                 
Correct output: 16                  | Program output: 56                 
Correct output: 47                  | Program output: 52                 
Correct output: 11                  | Program output: 22                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 28                 
Correct output: 5                   | Program output: 22                 
Correct output: 62                  | Program output: 62                 
Correct output: 24                  | Program output: 99                 
Correct output: 33                  | Program output: 40                 
Correct output: 6                   | Program output: 74                 
Correct output: 35                  | Program output: 59                 
Correct output: 43                  | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: -99                 | Program output: -65                
Correct output: -91                 | Program output: 40                 
Correct output: -15                 | Program output: -15                
Correct output: -67                 | Program output: 98                 
Correct output: -79                 | Program output: -4                 
Correct output: -99                 | Program output: -56                
Correct output: -61                 | Program output: 68                 
Correct output: 40                  | Program output: 83                 
Correct output: -85                 | Program output: 71                 
Correct output: -96                 | Program output: -68                
Correct output: -48                 | Program output: 94                 
Correct output: -96                 | Program output: 27                 
Correct output: -49                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: 0                   | Program output: 63                 
Correct output: -71                 | Program output: -71                
Correct output: -83                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: 1                  
Correct output: -72                 | Program output: 22                 
Correct output: -87                 | Program output: 52                 
Correct output: -52                 | Program output: -44                
Correct output: -25                 | Program output: 95                 
Correct output: -73                 | Program output: -15                
Correct output: -24                 | Program output: 78                 
Correct output: -96                 | Program output: 23                 
Correct output: -87                 | Program output: -29                
Correct output: -89                 | Program output: 39                 
Correct output: -36                 | Program output: 27                 
Correct output: -91                 | Program output: -58                
Correct output: -51                 | Program output: 82                 
Correct output: -57                 | Program output: 91                 
Correct output: -54                 | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: 3                  
Correct output: -83                 | Program output: -24                
Correct output: -3                  | Program output: 77                 
Correct output: -62                 | Program output: -45                
Correct output: -15                 | Program output: 92                 
Correct output: -97                 | Program output: 35                 
Correct output: -98                 | Program output: -29                
Correct output: -79                 | Program output: 17                 
Correct output: -32                 | Program output: 85                 
Correct output: -20                 | Program output: -11                
Correct output: -20                 | Program output: 19                 
Correct output: -49                 | Program output: -21                
Correct output: 21                  | Program output: 21                 
Correct output: -59                 | Program output: -9                 
Correct output: 33                  | Program output: 34                 
Correct output: -46                 | Program output: 5                  
Correct output: -75                 | Program output: 96                 
Correct output: -70                 | Program output: -41                
Correct output: -54                 | Program output: 5                  
Correct output: -69                 | Program output: -30                
Correct output: -52                 | Program output: -24                
Correct output: -84                 | Program output: -40                
Correct output: -53                 | Program output: 65                 
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_dup_items in3 boolean_not boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range ())
Lexicase best errors: [1 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_dup_items in3 boolean_not boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range ())
Zero cases best errors: [1 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 195 452 90 90 166 170 90 195 90)
Population mean number of elite cases: 1.73
Count of perfect (error zero) individuals by case: (195 195 452 90 90 166 170 90 195 90)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_dup_items in3 boolean_not boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove (print_newline exec_s (boolean_rot) (boolean_flush exec_pop (exec_y (integer_mod print_integer print_exec (boolean_swap integer_dup boolean_stackdepth in4) exec_flush integer_shove exec_do*range (integer_empty boolean_eq integer_gte integer_dup_items integer_mod) integer_inc integer_dup_items integer_mod) integer_inc boolean_dup integer_sub in1) exec_flush) (exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup exec_when (boolean_not integer_sub boolean_empty) exec_y_when_autoconstructing ())))) () ())))
Errors: [1 1 1 0 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 62
Size: 80
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 8.267
Median total errors in population: 9
Error averages by case: (0.805 0.805 0.548 0.91 0.91 0.834 0.83 0.91 0.805 0.91)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.642
Average program size in population (points): 42.552
Average percent parens in population: 0.276
Minimum age in population: 7.0
Maximum age in population: 12.4375
Average age in population: 10.66678125
Median age in population: 10.7578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2212184
--- Timings ---
Current time: 1559314479669 milliseconds
Total Time:          20.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.0 seconds, 72.6%
Fitness Testing:      3.5 seconds, 17.0%
Report:               2.0 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -64                 | Program output: -64                
Correct output: -32                 | Program output: 9                  
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 57                 
Correct output: 56                  | Program output: 82                 
Correct output: 7                   | Program output: 20                 
Correct output: 43                  | Program output: 61                 
Correct output: 22                  | Program output: 94                 
Correct output: 16                  | Program output: 56                 
Correct output: 47                  | Program output: 52                 
Correct output: 11                  | Program output: 22                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 28                 
Correct output: 5                   | Program output: 22                 
Correct output: 62                  | Program output: 62                 
Correct output: 24                  | Program output: 99                 
Correct output: 33                  | Program output: 40                 
Correct output: 6                   | Program output: 74                 
Correct output: 35                  | Program output: 59                 
Correct output: 43                  | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: -99                 | Program output: -65                
Correct output: -91                 | Program output: 40                 
Correct output: -15                 | Program output: -15                
Correct output: -67                 | Program output: 98                 
Correct output: -79                 | Program output: -4                 
Correct output: -99                 | Program output: -56                
Correct output: -61                 | Program output: 68                 
Correct output: 40                  | Program output: 83                 
Correct output: -85                 | Program output: 71                 
Correct output: -96                 | Program output: -68                
Correct output: -48                 | Program output: 94                 
Correct output: -96                 | Program output: 27                 
Correct output: -49                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: 0                   | Program output: 63                 
Correct output: -71                 | Program output: -71                
Correct output: -83                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: 1                  
Correct output: -72                 | Program output: 22                 
Correct output: -87                 | Program output: 52                 
Correct output: -52                 | Program output: -44                
Correct output: -25                 | Program output: 95                 
Correct output: -73                 | Program output: -15                
Correct output: -24                 | Program output: 78                 
Correct output: -96                 | Program output: 23                 
Correct output: -87                 | Program output: -29                
Correct output: -89                 | Program output: 39                 
Correct output: -36                 | Program output: 27                 
Correct output: -91                 | Program output: -58                
Correct output: -51                 | Program output: 82                 
Correct output: -57                 | Program output: 91                 
Correct output: -54                 | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: 3                  
Correct output: -83                 | Program output: -24                
Correct output: -3                  | Program output: 77                 
Correct output: -62                 | Program output: -45                
Correct output: -15                 | Program output: 92                 
Correct output: -97                 | Program output: 35                 
Correct output: -98                 | Program output: -29                
Correct output: -79                 | Program output: 17                 
Correct output: -32                 | Program output: 85                 
Correct output: -20                 | Program output: -11                
Correct output: -20                 | Program output: 19                 
Correct output: -49                 | Program output: -21                
Correct output: 21                  | Program output: 21                 
Correct output: -59                 | Program output: -9                 
Correct output: 33                  | Program output: 34                 
Correct output: -46                 | Program output: 5                  
Correct output: -75                 | Program output: 96                 
Correct output: -70                 | Program output: -41                
Correct output: -54                 | Program output: 5                  
Correct output: -69                 | Program output: -30                
Correct output: -52                 | Program output: -24                
Correct output: -84                 | Program output: -40                
Correct output: -53                 | Program output: 65                 
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_dup_items in3 boolean_not boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove () print_newline exec_s (boolean_rot) (boolean_flush exec_pop (exec_y (integer_mod print_integer print_exec (boolean_swap integer_dup boolean_stackdepth in4)) exec_flush integer_shove exec_do*range (integer_empty boolean_eq integer_gte integer_dup_items integer_mod) integer_inc boolean_dup integer_sub in1) exec_flush) (exec_dup () boolean_empty integer_gte boolean_or integer_lte boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup exec_when ())) () ())))
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_dup_items in3 boolean_not boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove () print_newline exec_s (boolean_rot) (boolean_flush exec_pop (exec_y (integer_mod print_integer print_exec (boolean_swap integer_dup boolean_stackdepth in4)) exec_flush integer_shove exec_do*range (integer_empty boolean_eq integer_gte integer_dup_items integer_mod) integer_inc boolean_dup integer_sub in1) exec_flush) (exec_dup () boolean_empty integer_gte boolean_or integer_lte boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup exec_when ())) () ())))
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 275 921 152 275 90 402 153 402 402)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (402 275 921 152 275 90 402 153 402 402)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_dup_items in3 boolean_not boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove (print_newline exec_s (boolean_rot) (boolean_dup_times exec_pop (exec_y (integer_mod print_integer print_exec (boolean_swap integer_dup boolean_stackdepth) in4) exec_flush) integer_shove) (exec_do*range (integer_empty integer_fromboolean integer_gte integer_dup_items integer_mod integer_inc boolean_dup integer_sub in1) exec_flush exec_dup () boolean_empty integer_gte boolean_or exec_do*count () boolean_not exec_empty boolean_and exec_yank exec_dup_items boolean_eq integer_dup exec_when (boolean_not integer_sub boolean_empty) exec_y_when_autoconstructing ()))) () ())))
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 59
Size: 77
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 6.526
Median total errors in population: 7
Error averages by case: (0.598 0.725 0.079 0.848 0.725 0.91 0.598 0.847 0.598 0.598)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.699
Average program size in population (points): 51.634
Average percent parens in population: 0.268
Minimum age in population: 9.0
Maximum age in population: 14.15625
Average age in population: 12.241296875
Median age in population: 12.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2399327
--- Timings ---
Current time: 1559314482409 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        17.4 seconds, 74.3%
Fitness Testing:      3.7 seconds, 15.8%
Report:               2.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: 19                 
Correct output: -68                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 85                 
Correct output: 56                  | Program output: 63                 
Correct output: 7                   | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 92                 
Correct output: 16                  | Program output: 91                 
Correct output: 47                  | Program output: 77                 
Correct output: 11                  | Program output: 96                 
Correct output: 13                  | Program output: 53                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 88                 
Correct output: 62                  | Program output: 63                 
Correct output: 24                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: 6                   | Program output: 40                 
Correct output: 35                  | Program output: 84                 
Correct output: 43                  | Program output: 93                 
Correct output: 26                  | Program output: 66                 
Correct output: 10                  | Program output: 96                 
Correct output: 8                   | Program output: 73                 
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -72                
Correct output: -15                 | Program output: 34                 
Correct output: -67                 | Program output: 11                 
Correct output: -79                 | Program output: 91                 
Correct output: -99                 | Program output: -72                
Correct output: -61                 | Program output: -61                
Correct output: 40                  | Program output: 81                 
Correct output: -85                 | Program output: 33                 
Correct output: -96                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 32                 
Correct output: -78                 | Program output: 0                  
Correct output: 0                   | Program output: 9                  
Correct output: -71                 | Program output: 90                 
Correct output: -83                 | Program output: -79                
Correct output: -90                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: 51                 
Correct output: -64                 | Program output: 58                 
Correct output: -72                 | Program output: -72                
Correct output: -87                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: 54                 
Correct output: -73                 | Program output: 19                 
Correct output: -24                 | Program output: 89                 
Correct output: -96                 | Program output: 68                 
Correct output: -87                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -6                 
Correct output: -57                 | Program output: 63                 
Correct output: -54                 | Program output: 74                 
Correct output: -77                 | Program output: 19                 
Correct output: -90                 | Program output: -76                
Correct output: -83                 | Program output: -41                
Correct output: -3                  | Program output: 0                  
Correct output: -62                 | Program output: 43                 
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output: -71                
Correct output: -79                 | Program output: -10                
Correct output: -32                 | Program output: 46                 
Correct output: -20                 | Program output: -20                
Correct output: -20                 | Program output: 48                 
Correct output: -49                 | Program output: 29                 
Correct output: 21                  | Program output: 53                 
Correct output: -59                 | Program output: 12                 
Correct output: 33                  | Program output: 61                 
Correct output: -46                 | Program output: -46                
Correct output: -75                 | Program output: -70                
Correct output: -70                 | Program output: 61                 
Correct output: -54                 | Program output: 75                 
Correct output: -69                 | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -46                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: 9                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_items})
Lexicase best program: (boolean_frominteger integer_stackdepth exec_shove (exec_do*count () in2 exec_do*while () integer_gte boolean_shove print_integer) exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove (print_newline exec_s (integer_mult) (boolean_flush exec_pop (exec_y (integer_mod print_integer print_exec (boolean_swap integer_dup boolean_stackdepth in4) integer_min exec_pop (exec_do*range (integer_empty boolean_eq integer_gte integer_dup_items boolean_dup_items))))) ())) () ())))
Lexicase best errors: [1 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_items})
Zero cases best program: (boolean_frominteger integer_stackdepth exec_shove (exec_do*count () in2 exec_do*while () integer_gte boolean_shove print_integer) exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove (print_newline exec_s (integer_mult) (boolean_flush exec_pop (exec_y (integer_mod print_integer print_exec (boolean_swap integer_dup boolean_stackdepth in4) integer_min exec_pop (exec_do*range (integer_empty boolean_eq integer_gte integer_dup_items boolean_dup_items))))) ())) () ())))
Zero cases best errors: [1 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 196 914 179 432 196 196 179 195 195)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (432 196 914 179 432 196 196 179 195 195)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank})
Best program: (exec_do*count () in2 exec_do*while () boolean_eq boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove (exec_rot (exec_s (boolean_rot) (print_integer boolean_yank) ()) () ())) () ()) () ())))
Errors: [1 0 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 42
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 6.886
Median total errors in population: 7
Error averages by case: (0.568 0.804 0.086 0.821 0.568 0.804 0.804 0.821 0.805 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.854
Average program size in population (points): 50.467
Average percent parens in population: 0.268
Minimum age in population: 10.875
Maximum age in population: 15.53515625
Average age in population: 13.67314453125
Median age in population: 13.7265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2584087
--- Timings ---
Current time: 1559314484852 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.4 seconds, 75.3%
Fitness Testing:      3.9 seconds, 15.1%
Report:               2.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: 27                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 56                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 52                 
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: 62                 
Correct output: -36                 | Program output: 44                 
Correct output: -91                 | Program output: 43                 
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 18                 
Correct output: -3                  | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output: 6                  
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: 97                 
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_631} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_153} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_dup_items integer_inc exec_shove (tag_integer_631 integer_stackdepth) exec_do*times (integer_lte) boolean_swap exec_rot () (exec_eq) (boolean_dup_times exec_eq) exec_dup_items integer_eq exec_yankdup in1 exec_rot (integer_eq boolean_invert_first_then_and in4) (exec_do*while (boolean_rot exec_while () integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) (print_integer boolean_yank tag_boolean_153 print_boolean))
Lexicase best errors: [1 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_631} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_153} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_dup_items integer_inc exec_shove (tag_integer_631 integer_stackdepth) exec_do*times (integer_lte) boolean_swap exec_rot () (exec_eq) (boolean_dup_times exec_eq) exec_dup_items integer_eq exec_yankdup in1 exec_rot (integer_eq boolean_invert_first_then_and in4) (exec_do*while (boolean_rot exec_while () integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) (print_integer boolean_yank tag_boolean_153 print_boolean))
Zero cases best errors: [1 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (507 185 2 2 2 2 185 507 507 2)
Population mean number of elite cases: 1.90
Count of perfect (error zero) individuals by case: (507 185 2 2 2 2 185 507 507 2)
Population mean number of perfect (error zero) cases: 1.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_631} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_273} {:close 0, :instruction print_boolean})
Best program: (boolean_invert_first_then_and integer_stackdepth exec_shove (tag_integer_631 integer_stackdepth) exec_dup_items integer_eq in1 exec_k (exec_k (exec_rot (integer_eq boolean_invert_first_then_and) (integer_lte) (exec_pop (boolean_rot exec_while () integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) print_integer boolean_yank tag_boolean_273) (print_boolean)) ())
Errors: [1 1 0 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 38
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 8.099
Median total errors in population: 7
Error averages by case: (0.493 0.815 0.998 0.998 0.998 0.998 0.815 0.493 0.493 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.16
Average program size in population (points): 48.55
Average percent parens in population: 0.277
Minimum age in population: 12.03125
Maximum age in population: 17.326171875
Average age in population: 15.204875
Median age in population: 15.2880859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 2753428
--- Timings ---
Current time: 1559314487839 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        22.0 seconds, 76.6%
Fitness Testing:      4.1 seconds, 14.2%
Report:               2.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: 19                 
Correct output: -68                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 85                 
Correct output: 56                  | Program output: 63                 
Correct output: 7                   | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 92                 
Correct output: 16                  | Program output: 91                 
Correct output: 47                  | Program output: 77                 
Correct output: 11                  | Program output: 96                 
Correct output: 13                  | Program output: 53                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 88                 
Correct output: 62                  | Program output: 63                 
Correct output: 24                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: 6                   | Program output: 40                 
Correct output: 35                  | Program output: 84                 
Correct output: 43                  | Program output: 93                 
Correct output: 26                  | Program output: 66                 
Correct output: 10                  | Program output: 96                 
Correct output: 8                   | Program output: 73                 
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -72                
Correct output: -15                 | Program output: 34                 
Correct output: -67                 | Program output: 11                 
Correct output: -79                 | Program output: 91                 
Correct output: -99                 | Program output: -72                
Correct output: -61                 | Program output: -61                
Correct output: 40                  | Program output: 81                 
Correct output: -85                 | Program output: 33                 
Correct output: -96                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 32                 
Correct output: -78                 | Program output: 0                  
Correct output: 0                   | Program output: 9                  
Correct output: -71                 | Program output: 90                 
Correct output: -83                 | Program output: -79                
Correct output: -90                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: 51                 
Correct output: -64                 | Program output: 58                 
Correct output: -72                 | Program output: -72                
Correct output: -87                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: 54                 
Correct output: -73                 | Program output: 19                 
Correct output: -24                 | Program output: 89                 
Correct output: -96                 | Program output: 68                 
Correct output: -87                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -6                 
Correct output: -57                 | Program output: 63                 
Correct output: -54                 | Program output: 74                 
Correct output: -77                 | Program output: 19                 
Correct output: -90                 | Program output: -76                
Correct output: -83                 | Program output: -41                
Correct output: -3                  | Program output: 0                  
Correct output: -62                 | Program output: 43                 
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output: -71                
Correct output: -79                 | Program output: -10                
Correct output: -32                 | Program output: 46                 
Correct output: -20                 | Program output: -20                
Correct output: -20                 | Program output: 48                 
Correct output: -49                 | Program output: 29                 
Correct output: 21                  | Program output: 53                 
Correct output: -59                 | Program output: 12                 
Correct output: 33                  | Program output: 61                 
Correct output: -46                 | Program output: -46                
Correct output: -75                 | Program output: -70                
Correct output: -70                 | Program output: 61                 
Correct output: -54                 | Program output: 75                 
Correct output: -69                 | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -46                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: 9                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot})
Lexicase best program: (exec_do*count () in2 exec_do*while () print_boolean boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove (print_newline exec_s (boolean_rot) (boolean_flush exec_pop (exec_y (integer_mod print_integer print_exec (boolean_swap integer_dup boolean_stackdepth in4) exec_flush integer_shove exec_do*range (integer_empty boolean_eq integer_gte integer_dup_items integer_mod) integer_inc boolean_dup integer_sub in1)) exec_flush) (exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq boolean_eq integer_dup exec_when (boolean_not integer_rot))))) () ())))
Lexicase best errors: [1 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot})
Zero cases best program: (exec_do*count () in2 exec_do*while () print_boolean boolean_shove print_integer exec_empty integer_add integer_mult exec_flush boolean_empty exec_do*range (exec_dup_times (integer_yankdup exec_s_when_autoconstructing (exec_yankdup exec_shove (print_newline exec_s (boolean_rot) (boolean_flush exec_pop (exec_y (integer_mod print_integer print_exec (boolean_swap integer_dup boolean_stackdepth in4) exec_flush integer_shove exec_do*range (integer_empty boolean_eq integer_gte integer_dup_items integer_mod) integer_inc boolean_dup integer_sub in1)) exec_flush) (exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq boolean_eq integer_dup exec_when (boolean_not integer_rot))))) () ())))
Zero cases best errors: [1 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 271 159 271 271 1 405 675 1 437)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (1 271 159 271 271 1 405 675 1 437)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -38} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_273} {:close 0, :instruction print_boolean})
Best program: (boolean_not exec_shove (integer_rot integer_fromboolean exec_k_when_autoconstructing () (in2 print_integer) exec_k (integer_lte in2 exec_dup_items integer_div) (integer_dup boolean_yankdup -38 boolean_dup_items integer_dup_times print_integer) integer_dup_times print_integer) exec_do*times (integer_lte exec_noop) print_integer boolean_yank tag_boolean_273 print_boolean)
Errors: [1 0 1 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 7.508
Median total errors in population: 8
Error averages by case: (0.999 0.729 0.841 0.729 0.729 0.999 0.595 0.325 0.999 0.563)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.837
Average program size in population (points): 43.942
Average percent parens in population: 0.276
Minimum age in population: 13.03125
Maximum age in population: 18.65625
Average age in population: 16.5784833984375
Median age in population: 16.72998046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 2993922
--- Timings ---
Current time: 1559314490082 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        23.8 seconds, 76.7%
Fitness Testing:      4.3 seconds, 13.9%
Report:               2.8 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: 27                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: 6                  
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 52                 
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: 62                 
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: 43                 
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 18                 
Correct output: -3                  | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output: 6                  
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: 97                 
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in4 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ())
Lexicase best errors: [0 0 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in4 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ())
Zero cases best errors: [0 0 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (81 85 434 90 348 385 348 80 91 81)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (81 85 434 90 348 385 348 80 91 81)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in4 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ())
Errors: [0 0 0 0 1 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.977
Median total errors in population: 8
Error averages by case: (0.919 0.915 0.566 0.91 0.652 0.615 0.652 0.92 0.909 0.919)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.876
Average program size in population (points): 47.639
Average percent parens in population: 0.269
Minimum age in population: 14.25
Maximum age in population: 20.318359375
Average age in population: 18.689408203125
Median age in population: 18.962158203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3170736
--- Timings ---
Current time: 1559314492624 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.8 seconds, 77.1%
Fitness Testing:      4.5 seconds, 13.4%
Report:               3.1 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: 47                 
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 54                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 62                 
Correct output: 22                  | Program output: 37                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 99                 
Correct output: 13                  | Program output: 56                 
Correct output: 26                  | Program output: 56                 
Correct output: 5                   | Program output: 55                 
Correct output: 62                  | Program output: 82                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 51                 
Correct output: 6                   | Program output: 10                 
Correct output: 35                  | Program output: 90                 
Correct output: 43                  | Program output: 84                 
Correct output: 26                  | Program output: 97                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 66                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: 68                 
Correct output: -15                 | Program output: 94                 
Correct output: -67                 | Program output: 91                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 95                 
Correct output: -85                 | Program output: 85                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 21                 
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output: 6                  
Correct output: -78                 | Program output: 78                 
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output: 14                 
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: 23                 
Correct output: -25                 | Program output: 52                 
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: 62                 
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: 76                 
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: 64                 
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output: 34                 
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: 11                 
Correct output: -20                 | Program output: 64                 
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: 97                 
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: 33                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: 49                 
Correct output: -88                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in4 in4 exec_pop (boolean_rot integer_dup) integer_rot integer_gt boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ())
Lexicase best errors: [1 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in4 in4 exec_pop (boolean_rot integer_dup) integer_rot integer_gt boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ())
Zero cases best errors: [1 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 119 458 99 122 119 122 529 455 122)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (182 119 458 99 122 119 122 529 455 122)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -27} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_273} {:close 0, :instruction exec_while})
Best program: (-27 boolean_invert_first_then_and exec_while (boolean_dup) integer_mult exec_rot () (exec_eq) (boolean_dup_times exec_eq) exec_dup_items integer_eq integer_dup_times exec_y_when_autoconstructing (exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_pop) integer_rot boolean_yankdup integer_dup_items) exec_noop integer_lte exec_noop) print_integer boolean_yank tag_boolean_273 exec_while ())
Errors: [1 0 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 41
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.673
Median total errors in population: 7
Error averages by case: (0.818 0.881 0.542 0.901 0.878 0.881 0.878 0.471 0.545 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.85
Average program size in population (points): 56.494
Average percent parens in population: 0.261
Minimum age in population: 16.86083984375
Maximum age in population: 21.8310546875
Average age in population: 19.03591625976562
Median age in population: 18.7724609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 262
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 265
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3452864
--- Timings ---
Current time: 1559314495151 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.8 seconds, 77.1%
Fitness Testing:      4.8 seconds, 13.3%
Report:               3.4 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: 27                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: 6                  
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 52                 
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: 62                 
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: 43                 
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 18                 
Correct output: -3                  | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output: 6                  
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: 97                 
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in4 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq exec_stackdepth) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) (exec_y_when_autoconstructing ()) ())
Lexicase best errors: [1 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in4 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq exec_stackdepth) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) (exec_y_when_autoconstructing ()) ())
Zero cases best errors: [1 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 215 200 216 471 87 469 303 215 87)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (100 215 200 216 471 87 469 303 215 87)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in4 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ())
Errors: [1 0 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.637
Median total errors in population: 8
Error averages by case: (0.9 0.785 0.8 0.784 0.529 0.913 0.531 0.697 0.785 0.913)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.788
Average program size in population (points): 52.788
Average percent parens in population: 0.266
Minimum age in population: 18.1123046875
Maximum age in population: 23.26953125
Average age in population: 20.70846997070312
Median age in population: 20.7724609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 3728421
--- Timings ---
Current time: 1559314497556 milliseconds
Total Time:          38.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.6 seconds, 77.1%
Fitness Testing:      5.1 seconds, 13.2%
Report:               3.6 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: 27                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 56                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 52                 
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: 62                 
Correct output: -36                 | Program output: 44                 
Correct output: -91                 | Program output: 43                 
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 18                 
Correct output: -3                  | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output: 6                  
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: 97                 
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in4 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank) exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ())
Lexicase best errors: [0 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in4 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank) exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ())
Zero cases best errors: [0 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (67 326 326 240 165 325 246 112 326 208)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (67 326 326 240 165 325 246 112 326 208)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in4 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1 exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ())) () ()))
Errors: [0 0 0 1 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.659
Median total errors in population: 8
Error averages by case: (0.933 0.674 0.674 0.76 0.835 0.675 0.754 0.888 0.674 0.792)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.392
Average program size in population (points): 57.293
Average percent parens in population: 0.262
Minimum age in population: 19.67919921875
Maximum age in population: 24.9793701171875
Average age in population: 22.10841430664062
Median age in population: 22.16583251953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 4028117
--- Timings ---
Current time: 1559314500079 milliseconds
Total Time:          40.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.6 seconds, 77.1%
Fitness Testing:      5.3 seconds, 13.0%
Report:               3.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 597
Test mean error for best: 0.59700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: 27                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 54                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 62                 
Correct output: 22                  | Program output: 37                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 99                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 56                 
Correct output: 5                   | Program output:                    
Correct output: 62                  | Program output: 82                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 51                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 90                 
Correct output: 43                  | Program output: 84                 
Correct output: 26                  | Program output: 97                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 95                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: 43                 
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 18                 
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output: 34                 
Correct output: -98                 | Program output:                    
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*count () in3 in4 boolean_dup_items exec_yank boolean_dup_times in1 exec_dup_items in1 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ()) ())
Lexicase best errors: [1 0 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 81
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*count () in3 in4 boolean_dup_items exec_yank boolean_dup_times in1 exec_dup_items in1 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ()) ())
Zero cases best errors: [1 0 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 81
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (84 262 462 462 84 210 423 97 101 467)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (84 262 462 462 84 210 423 97 101 467)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*count () in3 in4 boolean_dup_items exec_yank boolean_dup_times in1 exec_dup_items in1 integer_empty exec_while (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ()) ())
Errors: [1 0 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 81
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 7.348
Median total errors in population: 8
Error averages by case: (0.916 0.738 0.538 0.538 0.916 0.79 0.577 0.903 0.899 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.961
Average program size in population (points): 60.204
Average percent parens in population: 0.254
Minimum age in population: 20.7724609375
Maximum age in population: 25.9793701171875
Average age in population: 23.37362518310547
Median age in population: 23.40191650390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4366275
--- Timings ---
Current time: 1559314502673 milliseconds
Total Time:          43.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        33.4 seconds, 77.0%
Fitness Testing:      5.7 seconds, 13.0%
Report:               4.2 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 599
Test mean error for best: 0.59900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output:                    
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 56                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output:                    
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output:                    
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output:                    
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 44                 
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items in1 exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) boolean_or integer_sub in1) exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items integer_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ()))) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 79
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items in1 exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) boolean_or integer_sub in1) exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items integer_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ()))) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 79
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (513 643 378 376 307 466 307 191 377 311)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (513 643 378 376 307 466 307 191 377 311)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items in1 exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) boolean_or integer_sub in1) exec_flush) (exec_dup () boolean_empty integer_max boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq print_boolean integer_sub boolean_empty) exec_y_when_autoconstructing ()) ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 55
Size: 71
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 6.131
Median total errors in population: 6
Error averages by case: (0.487 0.357 0.622 0.624 0.693 0.534 0.693 0.809 0.623 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.588
Average program size in population (points): 68.704
Average percent parens in population: 0.251
Minimum age in population: 23.11465454101562
Maximum age in population: 26.9793701171875
Average age in population: 24.81567988586426
Median age in population: 24.943115234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.01
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4749760
--- Timings ---
Current time: 1559314505418 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.3 seconds, 76.7%
Fitness Testing:      6.0 seconds, 13.1%
Report:               4.6 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 587
Test mean error for best: 0.58700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -78                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 54                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 62                 
Correct output: 22                  | Program output: 37                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output:                    
Correct output: 26                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 82                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 51                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 90                 
Correct output: 43                  | Program output: 84                 
Correct output: 26                  | Program output: 97                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 66                 
Correct output: -99                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 95                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -9                 
Correct output: -85                 | Program output: 14                 
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 23                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output:                    
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output:                    
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output: 34                 
Correct output: -98                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 11                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -24                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items in1 exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_mult boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_invert_first_then_and exec_y_when_autoconstructing ()))) () ()))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 80
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items in1 exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_mult boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_invert_first_then_and exec_y_when_autoconstructing ()))) () ()))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 80
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (69 747 743 1 728 1 728 754 731 728)
Population mean number of elite cases: 5.23
Count of perfect (error zero) individuals by case: (69 747 743 1 728 1 728 754 731 728)
Population mean number of perfect (error zero) cases: 5.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_or in3 in4 boolean_dup_items exec_yank boolean_dup_times in1 exec_dup_items in1 integer_empty exec_dup (boolean_dup_times in1) exec_dup_items integer_eq boolean_dup_items in1 boolean_and integer_eq boolean_invert_first_then_and boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (in4) exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap (boolean_yankdup print_integer) (in4 in1) -52 exec_do*count (integer_min exec_dup (boolean_or integer_sub in1) exec_flush) exec_dup () boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub boolean_empty) exec_y_when_autoconstructing ()) () ())
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 63
Size: 80
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 4.77
Median total errors in population: 3
Error averages by case: (0.931 0.253 0.257 0.999 0.272 0.999 0.272 0.246 0.269 0.272)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.98
Average program size in population (points): 70.768
Average percent parens in population: 0.237
Minimum age in population: 24.2540283203125
Maximum age in population: 27.94668579101562
Average age in population: 26.62269439697266
Median age in population: 26.75367736816406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.009
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 5269584
--- Timings ---
Current time: 1559314508319 milliseconds
Total Time:          48.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.2 seconds, 76.0%
Fitness Testing:      6.5 seconds, 13.4%
Report:               5.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 586
Test mean error for best: 0.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output:                    
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 56                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 44                 
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items integer_pop exec_stackdepth integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ()))) () ())
Lexicase best errors: [0 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items integer_pop exec_stackdepth integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ()))) () ())
Zero cases best errors: [0 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 3 734 866 783 383 3 10 448 783)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (538 3 734 866 783 383 3 10 448 783)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items integer_dup exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ()))) () ())
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 52
Size: 68
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.449
Median total errors in population: 6
Error averages by case: (0.462 0.997 0.266 0.134 0.217 0.617 0.997 0.99 0.552 0.217)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.067
Average program size in population (points): 71.316
Average percent parens in population: 0.242
Minimum age in population: 26.82150268554688
Maximum age in population: 29.52169799804688
Average age in population: 28.20340624237061
Median age in population: 28.13782501220703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 5699004
--- Timings ---
Current time: 1559314510945 milliseconds
Total Time:          51.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.0 seconds, 75.4%
Fitness Testing:      6.9 seconds, 13.4%
Report:               5.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 860
Test mean error for best: 0.86000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -24                 | Program output:                    
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output:                    
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: 19                 
Correct output: -68                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 32                  | Program output:                    
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: 56                  | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 43                  | Program output:                    
Correct output: 22                  | Program output:                    
Correct output: 16                  | Program output:                    
Correct output: 47                  | Program output:                    
Correct output: 11                  | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 26                  | Program output:                    
Correct output: 5                   | Program output:                    
Correct output: 62                  | Program output:                    
Correct output: 24                  | Program output:                    
Correct output: 33                  | Program output:                    
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output:                    
Correct output: 43                  | Program output:                    
Correct output: 26                  | Program output:                    
Correct output: 10                  | Program output:                    
Correct output: 8                   | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output:                    
Correct output: -15                 | Program output:                    
Correct output: -67                 | Program output:                    
Correct output: -79                 | Program output: 91                 
Correct output: -99                 | Program output: -72                
Correct output: -61                 | Program output: -61                
Correct output: 40                  | Program output:                    
Correct output: -85                 | Program output:                    
Correct output: -96                 | Program output: -65                
Correct output: -48                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output:                    
Correct output: -78                 | Program output:                    
Correct output: 0                   | Program output: 9                  
Correct output: -71                 | Program output: 90                 
Correct output: -83                 | Program output: -79                
Correct output: -90                 | Program output: -19                
Correct output: -85                 | Program output:                    
Correct output: -85                 | Program output: 51                 
Correct output: -64                 | Program output: 58                 
Correct output: -72                 | Program output: -72                
Correct output: -87                 | Program output: -40                
Correct output: -52                 | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -73                 | Program output: 19                 
Correct output: -24                 | Program output:                    
Correct output: -96                 | Program output: 68                 
Correct output: -87                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output:                    
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output:                    
Correct output: -57                 | Program output: 63                 
Correct output: -54                 | Program output: 74                 
Correct output: -77                 | Program output:                    
Correct output: -90                 | Program output: -76                
Correct output: -83                 | Program output: -41                
Correct output: -3                  | Program output: 0                  
Correct output: -62                 | Program output:                    
Correct output: -15                 | Program output:                    
Correct output: -97                 | Program output:                    
Correct output: -98                 | Program output: -71                
Correct output: -79                 | Program output: -10                
Correct output: -32                 | Program output: 46                 
Correct output: -20                 | Program output:                    
Correct output: -20                 | Program output:                    
Correct output: -49                 | Program output: 29                 
Correct output: 21                  | Program output:                    
Correct output: -59                 | Program output:                    
Correct output: 33                  | Program output:                    
Correct output: -46                 | Program output: -46                
Correct output: -75                 | Program output: -70                
Correct output: -70                 | Program output: 61                 
Correct output: -54                 | Program output:                    
Correct output: -69                 | Program output: 7                  
Correct output: -52                 | Program output:                    
Correct output: -84                 | Program output: -46                
Correct output: -53                 | Program output:                    
Correct output: -88                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*count () in1 exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte exec_dup_times (exec_do*count (boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ())
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*count () in1 exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte exec_dup_times (exec_do*count (boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ())
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 221 453 113 213 181 452 17 113 113)
Population mean number of elite cases: 2.20
Count of perfect (error zero) individuals by case: (326 221 453 113 213 181 452 17 113 113)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items integer_eq boolean_invert_first_then_and in2 exec_pop (boolean_rot integer_dup) integer_rot integer_gt boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 in1) (-52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte boolean_frominteger exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ()))) ())
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 52
Size: 65
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.798
Median total errors in population: 8
Error averages by case: (0.674 0.779 0.547 0.887 0.787 0.819 0.548 0.983 0.887 0.887)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.548
Average program size in population (points): 70.973
Average percent parens in population: 0.245
Minimum age in population: 27.82150268554688
Maximum age in population: 31.14107513427734
Average age in population: 29.54879627990723
Median age in population: 29.62643432617188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.006
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6213503
--- Timings ---
Current time: 1559314513637 milliseconds
Total Time:          54.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.8 seconds, 75.0%
Fitness Testing:      7.4 seconds, 13.7%
Report:               6.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: 19                 
Correct output: -68                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 85                 
Correct output: 56                  | Program output: 63                 
Correct output: 7                   | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 92                 
Correct output: 16                  | Program output: 91                 
Correct output: 47                  | Program output: 77                 
Correct output: 11                  | Program output: 96                 
Correct output: 13                  | Program output: 53                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 88                 
Correct output: 62                  | Program output: 63                 
Correct output: 24                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 84                 
Correct output: 43                  | Program output: 93                 
Correct output: 26                  | Program output: 66                 
Correct output: 10                  | Program output: 96                 
Correct output: 8                   | Program output: 73                 
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -72                
Correct output: -15                 | Program output: 34                 
Correct output: -67                 | Program output: 11                 
Correct output: -79                 | Program output: 91                 
Correct output: -99                 | Program output: -72                
Correct output: -61                 | Program output: -61                
Correct output: 40                  | Program output: 81                 
Correct output: -85                 | Program output: 33                 
Correct output: -96                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 32                 
Correct output: -78                 | Program output: 0                  
Correct output: 0                   | Program output: 9                  
Correct output: -71                 | Program output: 90                 
Correct output: -83                 | Program output: -79                
Correct output: -90                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: 51                 
Correct output: -64                 | Program output: 58                 
Correct output: -72                 | Program output: -72                
Correct output: -87                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: 54                 
Correct output: -73                 | Program output: 19                 
Correct output: -24                 | Program output: 89                 
Correct output: -96                 | Program output: 68                 
Correct output: -87                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -6                 
Correct output: -57                 | Program output: 63                 
Correct output: -54                 | Program output: 74                 
Correct output: -77                 | Program output: 19                 
Correct output: -90                 | Program output: -76                
Correct output: -83                 | Program output: -41                
Correct output: -3                  | Program output: 0                  
Correct output: -62                 | Program output: 43                 
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output:                    
Correct output: -79                 | Program output: -10                
Correct output: -32                 | Program output: 46                 
Correct output: -20                 | Program output: -20                
Correct output: -20                 | Program output: 48                 
Correct output: -49                 | Program output: 29                 
Correct output: 21                  | Program output: 53                 
Correct output: -59                 | Program output: 12                 
Correct output: 33                  | Program output: 61                 
Correct output: -46                 | Program output: -46                
Correct output: -75                 | Program output: -70                
Correct output: -70                 | Program output: 61                 
Correct output: -54                 | Program output: 75                 
Correct output: -69                 | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -46                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: 9                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*count () exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items in1 exec_dup_items exec_when (boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) boolean_and integer_gt) boolean_eq exec_s (exec_swap () (boolean_not print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (exec_y (integer_gte exec_dup_times (boolean_yank boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ()))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*count () exec_do*count () in3 in4 integer_empty boolean_invert_second_then_and boolean_dup_times in1 exec_dup_items in1 exec_dup_items exec_when (boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) boolean_and integer_gt) boolean_eq exec_s (exec_swap () (boolean_not print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (exec_y (integer_gte exec_dup_times (boolean_yank boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ()))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (127 205 756 208 261 388 136 211 208 125)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (127 205 756 208 261 388 136 211 208 125)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*count () in1 exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte exec_dup_times (exec_do*count (boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ())
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 62
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 7.375
Median total errors in population: 7
Error averages by case: (0.873 0.795 0.244 0.792 0.739 0.612 0.864 0.789 0.792 0.875)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.701
Average program size in population (points): 70.745
Average percent parens in population: 0.242
Minimum age in population: 29.4591064453125
Maximum age in population: 32.69780731201172
Average age in population: 31.3182377204895
Median age in population: 31.33398818969727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 6595954
--- Timings ---
Current time: 1559314516128 milliseconds
Total Time:          57.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.6 seconds, 74.8%
Fitness Testing:      7.8 seconds, 13.7%
Report:               6.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 579
Test mean error for best: 0.57900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 56                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -72                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: 97                 
Correct output: -99                 | Program output: -72                
Correct output: -61                 | Program output: -61                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: 0                  
Correct output: 0                   | Program output: 52                 
Correct output: -71                 | Program output: 23                 
Correct output: -83                 | Program output: -79                
Correct output: -90                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: 0                  
Correct output: -64                 | Program output: 91                 
Correct output: -72                 | Program output: -72                
Correct output: -87                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 86                 
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: 92                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -6                 
Correct output: -57                 | Program output: 14                 
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -76                
Correct output: -83                 | Program output: -41                
Correct output: -3                  | Program output: 0                  
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output: -71                
Correct output: -79                 | Program output: -10                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: -20                
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: 30                 
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -75                 | Program output: -70                
Correct output: -70                 | Program output: 95                 
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -46                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*count () boolean_dup_times in1 integer_dup_items in1 exec_dup_items integer_pop boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) exec_do*times (exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte exec_dup_times (exec_do*count (boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ()))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*count () boolean_dup_times in1 integer_dup_items in1 exec_dup_items integer_pop boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) exec_do*times (exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte exec_dup_times (exec_do*count (boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ()))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 782 144 142 313 861 389 861 151 142)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (289 782 144 142 313 861 389 861 151 142)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*count () boolean_dup_times in1 integer_dup_items in1 exec_dup_items integer_pop boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) exec_do*times (exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte exec_dup_times (exec_do*count (boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ()))
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 5.926
Median total errors in population: 6
Error averages by case: (0.711 0.218 0.856 0.858 0.687 0.139 0.611 0.139 0.849 0.858)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.353
Average program size in population (points): 69.705
Average percent parens in population: 0.250
Minimum age in population: 30.82150268554688
Maximum age in population: 34.53413391113281
Average age in population: 32.80736533546448
Median age in population: 32.84525871276855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 6984463
--- Timings ---
Current time: 1559314518677 milliseconds
Total Time:          59.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.4 seconds, 74.7%
Fitness Testing:      8.2 seconds, 13.7%
Report:               6.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: 19                 
Correct output: -68                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 85                 
Correct output: 56                  | Program output: 63                 
Correct output: 7                   | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 92                 
Correct output: 16                  | Program output: 91                 
Correct output: 47                  | Program output: 77                 
Correct output: 11                  | Program output: 96                 
Correct output: 13                  | Program output: 53                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 88                 
Correct output: 62                  | Program output: 63                 
Correct output: 24                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: 6                   | Program output: 40                 
Correct output: 35                  | Program output: 84                 
Correct output: 43                  | Program output: 93                 
Correct output: 26                  | Program output: 66                 
Correct output: 10                  | Program output: 96                 
Correct output: 8                   | Program output: 73                 
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -72                
Correct output: -15                 | Program output: 34                 
Correct output: -67                 | Program output: 11                 
Correct output: -79                 | Program output: 91                 
Correct output: -99                 | Program output: -72                
Correct output: -61                 | Program output: -61                
Correct output: 40                  | Program output: 81                 
Correct output: -85                 | Program output: 33                 
Correct output: -96                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 32                 
Correct output: -78                 | Program output: 0                  
Correct output: 0                   | Program output: 9                  
Correct output: -71                 | Program output: 90                 
Correct output: -83                 | Program output: -79                
Correct output: -90                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: 51                 
Correct output: -64                 | Program output: 58                 
Correct output: -72                 | Program output: -72                
Correct output: -87                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: 54                 
Correct output: -73                 | Program output: 19                 
Correct output: -24                 | Program output: 89                 
Correct output: -96                 | Program output: 68                 
Correct output: -87                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -6                 
Correct output: -57                 | Program output: 63                 
Correct output: -54                 | Program output: 74                 
Correct output: -77                 | Program output: 19                 
Correct output: -90                 | Program output: -76                
Correct output: -83                 | Program output: -41                
Correct output: -3                  | Program output: 0                  
Correct output: -62                 | Program output: 43                 
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output: -71                
Correct output: -79                 | Program output: -10                
Correct output: -32                 | Program output: 46                 
Correct output: -20                 | Program output: -20                
Correct output: -20                 | Program output: 48                 
Correct output: -49                 | Program output: 29                 
Correct output: 21                  | Program output: 53                 
Correct output: -59                 | Program output: 12                 
Correct output: 33                  | Program output: 61                 
Correct output: -46                 | Program output: -46                
Correct output: -75                 | Program output: -70                
Correct output: -70                 | Program output: 61                 
Correct output: -54                 | Program output: 75                 
Correct output: -69                 | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -46                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: 9                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*count () boolean_dup_times in1 integer_dup_items in1 exec_dup_items integer_pop boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte exec_dup_times (exec_do*count (boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ())
Lexicase best errors: [1 1 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 64
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*count () boolean_dup_times in1 integer_dup_items in1 exec_dup_items integer_pop boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte exec_dup_times (exec_do*count (boolean_not boolean_yankdup exec_eq exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_empty exec_y_when_autoconstructing ())))) () ())
Zero cases best errors: [1 1 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 64
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 391 4 388 386 856 389 59 458 5)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (265 391 4 388 386 856 389 59 458 5)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_do*count () boolean_dup_times in1 integer_dup_items in1 exec_dup_items integer_pop boolean_dup_items boolean_swap exec_rot (integer_eq boolean_invert_first_then_and) (in2) (exec_pop (boolean_rot integer_dup) integer_rot integer_eq boolean_invert_first_then_and) in4 exec_pop (boolean_rot integer_dup) integer_shove integer_gt boolean_eq exec_s (exec_swap () (boolean_yankdup print_integer in4 in1) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup in1) exec_flush exec_dup (boolean_empty integer_gte boolean_or exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) boolean_invert_first_then_and exec_y_when_autoconstructing ())))) () ())
Errors: [1 1 0 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 73
Size: 92
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 6.799
Median total errors in population: 6
Error averages by case: (0.735 0.609 0.996 0.612 0.614 0.144 0.611 0.941 0.542 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.186
Average program size in population (points): 70.589
Average percent parens in population: 0.248
Minimum age in population: 32.16651153564453
Maximum age in population: 35.94098329544067
Average age in population: 34.41799563884735
Median age in population: 34.50816440582275
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7386623
--- Timings ---
Current time: 1559314521224 milliseconds
Total Time:          62.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.3 seconds, 74.6%
Fitness Testing:      8.5 seconds, 13.8%
Report:               7.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 596
Test mean error for best: 0.59600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 56                 
Correct output: 26                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output:                    
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output:                    
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output:                    
Correct output: -97                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Lexicase best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub)))) () ()))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Zero cases best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub)))) () ()))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (58 318 275 261 43 149 315 157 492 311)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (58 318 275 261 43 149 315 157 492 311)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub)))) () ()))
Errors: [0 1 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 78
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.621
Median total errors in population: 7
Error averages by case: (0.942 0.682 0.725 0.739 0.957 0.851 0.685 0.843 0.508 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.075
Average program size in population (points): 74.564
Average percent parens in population: 0.236
Minimum age in population: 33.59342384338379
Maximum age in population: 37.79735469818115
Average age in population: 35.91959648609161
Median age in population: 36.03852653503418
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 7865715
--- Timings ---
Current time: 1559314523910 milliseconds
Total Time:          64.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.1 seconds, 74.4%
Fitness Testing:      9.0 seconds, 13.9%
Report:               7.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 596
Test mean error for best: 0.59600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 56                 
Correct output: 26                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output:                    
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output:                    
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output:                    
Correct output: -97                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Lexicase best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub)))) () ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 78
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Zero cases best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub)))) () ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 78
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 296 5 287 566 419 341 418 334 5)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (334 296 5 287 566 419 341 418 334 5)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub)))) () ()))
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 57
Size: 78
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 7
Error averages by case: (0.666 0.704 0.995 0.713 0.434 0.581 0.659 0.582 0.666 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.997
Average program size in population (points): 72.995
Average percent parens in population: 0.246
Minimum age in population: 35.01592826843262
Maximum age in population: 39.30001020431519
Average age in population: 37.23804339325428
Median age in population: 37.2662148475647
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.009
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8248936
--- Timings ---
Current time: 1559314526511 milliseconds
Total Time:          67.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.9 seconds, 74.2%
Fitness Testing:      9.4 seconds, 13.9%
Report:               7.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 596
Test mean error for best: 0.59600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 56                 
Correct output: 26                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 93                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output:                    
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output:                    
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output:                    
Correct output: -97                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Lexicase best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub)))) () ()))
Lexicase best errors: [0 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Zero cases best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub)))) () ()))
Zero cases best errors: [0 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (784 604 606 608 1000 1000 1000 176 68 620)
Population mean number of elite cases: 6.47
Count of perfect (error zero) individuals by case: (784 604 606 608 0 0 0 176 68 620)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not boolean_yankdup boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub)))) () ()))
Errors: [0 0 0 0 1 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 57
Size: 78
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.534
Median total errors in population: 5
Error averages by case: (0.216 0.396 0.394 0.392 1.0 1.0 1.0 0.824 0.932 0.38)
Error minima by case: (0 0 0 0 1 1 1 0 0 0)
Average genome size in population (length): 55.396
Average program size in population (points): 75.011
Average percent parens in population: 0.259
Minimum age in population: 36.81667017936707
Maximum age in population: 40.40726327896118
Average age in population: 38.3848276347518
Median age in population: 38.45953875780106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 251
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8586471
--- Timings ---
Current time: 1559314529087 milliseconds
Total Time:          69.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.7 seconds, 74.1%
Fitness Testing:      9.7 seconds, 13.9%
Report:               8.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output:                    
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 22                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 93                 
Correct output: 5                   | Program output:                    
Correct output: 62                  | Program output: 62                 
Correct output: 24                  | Program output: 72                 
Correct output: 33                  | Program output: 40                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 66                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output:                    
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output:                    
Correct output: -78                 | Program output: -78                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output:                    
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: 81                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: -11                
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 80                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -24                
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Lexicase best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) () ())))) () ()))
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 93
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Zero cases best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) () ())))) () ()))
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 93
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 1 537 550 36 122 97 415 423 800)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (97 1 537 550 36 122 97 415 423 800)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) () ())))) () ()))
Errors: [0 1 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 66
Size: 93
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 6.922
Median total errors in population: 6
Error averages by case: (0.903 0.999 0.463 0.45 0.964 0.878 0.903 0.585 0.577 0.2)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.214
Average program size in population (points): 77.249
Average percent parens in population: 0.257
Minimum age in population: 37.81667017936707
Maximum age in population: 41.85695785284042
Average age in population: 39.86174219015241
Median age in population: 39.90465644001961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.008
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9064094
--- Timings ---
Current time: 1559314531863 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.6 seconds, 73.9%
Fitness Testing:     10.2 seconds, 14.0%
Report:               8.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 588
Test mean error for best: 0.58800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output:                    
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: 56                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 61                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output:                    
Correct output: 47                  | Program output: 52                 
Correct output: 11                  | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 26                  | Program output: 28                 
Correct output: 5                   | Program output:                    
Correct output: 62                  | Program output: 62                 
Correct output: 24                  | Program output:                    
Correct output: 33                  | Program output: 40                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output:                    
Correct output: -15                 | Program output:                    
Correct output: -67                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output:                    
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output:                    
Correct output: -78                 | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output:                    
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output:                    
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output:                    
Correct output: -15                 | Program output: 83                 
Correct output: -97                 | Program output: 35                 
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: 11                 
Correct output: -20                 | Program output:                    
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 21                 
Correct output: -59                 | Program output:                    
Correct output: 33                  | Program output:                    
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output:                    
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output:                    
Correct output: -88                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte})
Lexicase best program: (exec_do*count () in3 in4 in1 exec_do*while (boolean_pop) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte))) () ()))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 80
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte})
Zero cases best program: (exec_do*count () in3 in4 in1 exec_do*while (boolean_pop) exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte))) () ()))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 80
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 385 833 833 381 147 345 345 738 7)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (345 385 833 833 381 147 345 345 738 7)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_k} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_sub})
Best program: (exec_do*count () in3 integer_stackdepth in1 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_k (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_dup_items boolean_eq boolean_or integer_sub) () ())))) ()) () ()))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 73
Size: 104
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 5.641
Median total errors in population: 5
Error averages by case: (0.655 0.615 0.167 0.167 0.619 0.853 0.655 0.655 0.262 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.868
Average program size in population (points): 76.972
Average percent parens in population: 0.269
Minimum age in population: 39.13113737106323
Maximum age in population: 42.80150187015533
Average age in population: 41.63699957966805
Median age in population: 41.65668338537216
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 9419215
--- Timings ---
Current time: 1559314534540 milliseconds
Total Time:          75.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.4 seconds, 73.7%
Fitness Testing:     10.6 seconds, 14.0%
Report:               9.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 518
Test mean error for best: 0.51800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 54                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output:                    
Correct output: 56                  | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 43                  | Program output: 62                 
Correct output: 22                  | Program output: 37                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 28                 
Correct output: 5                   | Program output: 55                 
Correct output: 62                  | Program output: 62                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output:                    
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output:                    
Correct output: -78                 | Program output: -78                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output:                    
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: -44                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: 62                 
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output:                    
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output:                    
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output:                    
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: 33                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Lexicase best program: (exec_do*count () in3 in4 integer_empty exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer exec_if (exec_flush) (-52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) () ())))))) () ()))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 95
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Zero cases best program: (exec_do*count () in3 in4 integer_empty exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_s (exec_swap () (exec_yank print_integer exec_if (exec_flush) (-52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) () ())))))) () ()))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 95
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 375 884 163 35 377 321 449 578 67)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (174 375 884 163 35 377 321 449 578 67)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Best program: (exec_do*count () in3 in4 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (boolean_eq exec_noop exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) () ())))))
Errors: [1 0 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 65
Size: 89
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.577
Median total errors in population: 6
Error averages by case: (0.826 0.625 0.116 0.837 0.965 0.623 0.679 0.551 0.422 0.933)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.265
Average program size in population (points): 78.43
Average percent parens in population: 0.278
Minimum age in population: 41.22245860099792
Maximum age in population: 44.7618420124054
Average age in population: 43.34491673517972
Median age in population: 43.43378931283951
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 9819122
--- Timings ---
Current time: 1559314537300 milliseconds
Total Time:          78.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.4 seconds, 73.5%
Fitness Testing:     11.0 seconds, 14.1%
Report:               9.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output:                    
Correct output: -64                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 38                 
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 20                 
Correct output: 43                  | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 66                 
Correct output: 47                  | Program output:                    
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output:                    
Correct output: 5                   | Program output: 01234              
Correct output: 62                  | Program output:                    
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output:                    
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output:                    
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output:                    
Correct output: -99                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -78                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -70                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 39                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output:                    
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 27                 
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output:                    
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output: 47                 
Correct output: -98                 | Program output:                    
Correct output: -79                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 11                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output:                    
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -24                
Correct output: -84                 | Program output: -40                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Lexicase best program: (exec_do*count () in3 in4 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (exec_pop (boolean_rot integer_mult) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank print_integer boolean_eq integer_dup integer_sub) () ()))))) () ()))
Lexicase best errors: [0 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 92
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Zero cases best program: (exec_do*count () in3 in4 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (exec_pop (boolean_rot integer_mult) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank print_integer boolean_eq integer_dup integer_sub) () ()))))) () ()))
Zero cases best errors: [0 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 92
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 383 186 183 267 277 176 319 140 355)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (341 383 186 183 267 277 176 319 140 355)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Best program: (exec_do*count () in3 in4 exec_dup_items boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq in1) () (in3 exec_eq in1) integer_min boolean_pop in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) boolean_eq exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty exec_flush) -52 exec_do*count (exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty boolean_yank integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_dup_items boolean_eq integer_dup integer_sub) () ()))))) () ()))
Errors: [0 1 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 67
Size: 92
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 7.373
Median total errors in population: 7
Error averages by case: (0.659 0.617 0.814 0.817 0.733 0.723 0.824 0.681 0.86 0.645)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.679
Average program size in population (points): 87.978
Average percent parens in population: 0.287
Minimum age in population: 44.16674068570137
Maximum age in population: 46.7618420124054
Average age in population: 45.21484671936557
Median age in population: 45.30831962823868
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.007
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.208
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10215740
--- Timings ---
Current time: 1559314539914 milliseconds
Total Time:          80.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 73.4%
Fitness Testing:     11.4 seconds, 14.1%
Report:              10.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 450
Test mean error for best: 0.45000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 37                 
Correct output: -64                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 62                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 18                 
Correct output: 26                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 62                  | Program output: 70                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 51                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 43                  | Program output: 43                 
Correct output: 26                  | Program output: 33                 
Correct output: 10                  | Program output: 64                 
Correct output: 8                   | Program output: 66                 
Correct output: -99                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -32                
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -37                
Correct output: -96                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -74                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -7                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -63                
Correct output: -85                 | Program output: 3                  
Correct output: -85                 | Program output: -83                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: 23                 
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -54                
Correct output: -77                 | Program output: 54                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -62                
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output: 34                 
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: 11                 
Correct output: -20                 | Program output: -20                
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -3                 
Correct output: -88                 | Program output: -80                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Lexicase best program: (exec_do*count () in3 boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot in1)) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 92
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Zero cases best program: (exec_do*count () in3 boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot in1)) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 92
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (436 198 828 454 408 415 243 249 282 412)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (436 198 828 454 408 415 243 249 282 412)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Best program: (exec_do*count () in3 boolean_pop exec_dup_items integer_eq boolean_dup_items in1 exec_rot (integer_eq boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot in1)) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub in1) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 64
Size: 92
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.075
Median total errors in population: 6
Error averages by case: (0.564 0.802 0.172 0.546 0.592 0.585 0.757 0.751 0.718 0.588)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.394
Average program size in population (points): 91.114
Average percent parens in population: 0.293
Minimum age in population: 45.26252387464046
Maximum age in population: 48.17150255292654
Average age in population: 46.65057109586522
Median age in population: 46.69139362871647
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.008
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 10590608
--- Timings ---
Current time: 1559314542583 milliseconds
Total Time:          83.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 73.2%
Fitness Testing:     11.8 seconds, 14.2%
Report:              10.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 428
Test mean error for best: 0.42800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -64                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 61                 
Correct output: 22                  | Program output: 37                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 22                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 28                 
Correct output: 5                   | Program output: 22                 
Correct output: 62                  | Program output: 62                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 40                 
Correct output: 6                   | Program output: 10                 
Correct output: 35                  | Program output: 59                 
Correct output: 43                  | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: -99                 | Program output: -65                
Correct output: -91                 | Program output: 40                 
Correct output: -15                 | Program output: -15                
Correct output: -67                 | Program output: 91                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 83                 
Correct output: -85                 | Program output: 71                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 21                 
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: -44                
Correct output: -25                 | Program output: 52                 
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: 62                 
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -58                
Correct output: -51                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -45                
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output: 34                 
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: -11                
Correct output: -20                 | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 21                 
Correct output: -59                 | Program output: -9                 
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -24                
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: 49                 
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Lexicase best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq exec_when (boolean_invert_first_then_and) in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub integer_flush) exec_k_when_autoconstructing (exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 92
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Zero cases best program: (exec_do*count () in3 in4 in1 exec_dup_items boolean_pop exec_dup_items integer_eq exec_when (boolean_invert_first_then_and) in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub integer_flush) exec_k_when_autoconstructing (exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 92
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (813 339 26 680 18 300 527 20 523 307)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (813 339 26 680 18 300 527 20 523 307)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction -52} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub})
Best program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 58
Size: 83
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 6.447
Median total errors in population: 6
Error averages by case: (0.187 0.661 0.974 0.32 0.982 0.7 0.473 0.98 0.477 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.564
Average program size in population (points): 97.889
Average percent parens in population: 0.299
Minimum age in population: 46.42037050053477
Maximum age in population: 49.2689291909337
Average age in population: 47.96714368760586
Median age in population: 47.93635182082653
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.01
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.186
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11068648
--- Timings ---
Current time: 1559314545328 milliseconds
Total Time:          86.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 73.0%
Fitness Testing:     12.3 seconds, 14.3%
Report:              10.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 32
Successful program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 83


Auto-simplifying with starting size: 83
step: 0
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 500
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 1000
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 1500
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 2000
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 2500
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 3000
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 3500
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 4000
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 4500
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 5000
program: (exec_do*count () in3 boolean_pop boolean_invert_first_then_and in4 exec_pop (boolean_rot in1) integer_min boolean_pop in1 exec_rot (integer_lte boolean_invert_first_then_and) (in4) (exec_pop (boolean_rot integer_dup) integer_shove integer_gt) boolean_eq exec_s (exec_swap () (boolean_invert_first_then_and) in4) (exec_pop (boolean_rot integer_dup) integer_rot integer_gt) (integer_mod exec_s (exec_swap () (exec_yank print_integer in4 exec_flush) -52 integer_yankdup exec_dup_items exec_dup (boolean_or integer_sub boolean_empty) exec_flush exec_dup (boolean_empty integer_gte integer_pop exec_do*count (boolean_not exec_s_when_autoconstructing (boolean_and exec_yank exec_shove (boolean_eq integer_dup integer_sub)) () ()))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 428
Test mean error for best: 0.42800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: -3                  | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -64                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -85                 | Program output: -35                
Correct output: 32                  | Program output: 32                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: 92                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: 6                   | Program output: 6                  
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 43                  | Program output: 61                 
Correct output: 22                  | Program output: 37                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 11                  | Program output: 22                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 28                 
Correct output: 5                   | Program output: 22                 
Correct output: 62                  | Program output: 62                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 40                 
Correct output: 6                   | Program output: 10                 
Correct output: 35                  | Program output: 59                 
Correct output: 43                  | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: -99                 | Program output: -65                
Correct output: -91                 | Program output: 40                 
Correct output: -15                 | Program output: -15                
Correct output: -67                 | Program output: 91                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -1                 
Correct output: 40                  | Program output: 83                 
Correct output: -85                 | Program output: 71                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 21                 
Correct output: -96                 | Program output: -22                
Correct output: -49                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: 0                   | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -83                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -13                
Correct output: -87                 | Program output: -54                
Correct output: -52                 | Program output: -44                
Correct output: -25                 | Program output: 52                 
Correct output: -73                 | Program output: -73                
Correct output: -24                 | Program output: 62                 
Correct output: -96                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -35                
Correct output: -36                 | Program output: 8                  
Correct output: -91                 | Program output: -58                
Correct output: -51                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -21                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -3                  | Program output: -3                 
Correct output: -62                 | Program output: -45                
Correct output: -15                 | Program output: 34                 
Correct output: -97                 | Program output: 34                 
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -28                
Correct output: -20                 | Program output: -11                
Correct output: -20                 | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: 21                  | Program output: 21                 
Correct output: -59                 | Program output: -9                 
Correct output: 33                  | Program output: 33                 
Correct output: -46                 | Program output: -27                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -24                
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: 49                 
Correct output: -88                 | Program output: -88                
;;******************************
