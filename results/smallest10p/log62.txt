Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[92 92 92 77] 77] [[62 62 62 -11] -11] [[29 86 29 29] 29] [[-95 -95 -77 -95] -95] [[-51 -51 51 -51] -51] [[43 -2 -2 -2] -2] [[66 -78 66 66] -78] [[14 -57 -57 -57] -57] [[-86 -63 -86 -86] -86] [[-31 -31 2 -31] -31] [(84 84 84 84) 84] [(88 88 88 88) 88] [(32 32 32 32) 32] [(-62 -62 -62 -62) -62] [(100 100 100 100) 100] [(10 5 84 75) 5] [(72 2 90 14) 2] [(10 76 92 23) 10] [(33 95 48 23) 23] [(38 4 16 59) 4] [(57 24 37 68) 24] [(21 70 62 49) 21] [(43 11 91 23) 11] [(28 22 100 30) 22] [(72 4 26 73) 4] [(18 32 24 3) 3] [(50 64 28 98) 28] [(13 38 32 63) 13] [(74 55 35 58) 35] [(27 32 34 84) 27] [(90 26 0 23) 0] [(35 42 33 7) 7] [(3 14 54 91) 3] [(83 68 12 44) 12] [(87 20 89 44) 20] [(-7 75 -76 -3) -76] [(-7 18 -39 -28) -39] [(12 24 -51 22) -51] [(24 52 40 80) 24] [(-65 -2 65 -43) -65] [(82 21 62 -47) -47] [(31 69 13 -58) -58] [(-94 28 58 18) -94] [(80 -7 -68 -93) -93] [(49 -95 83 -88) -95] [(56 76 -8 -39) -39] [(-51 76 -61 60) -61] [(-48 75 5 -90) -90] [(2 84 73 -68) -68] [(87 39 -16 63) -16] [(6 92 -3 28) -3] [(-75 -81 -17 64) -81] [(-6 31 82 -13) -13] [(-41 -32 0 24) -41] [(-38 -77 28 -17) -77] [(56 -6 6 -79) -79] [(88 -71 -83 80) -83] [(-5 -23 -49 100) -49] [(-95 -52 -51 13) -95] [(-60 42 43 -35) -60] [(18 11 28 -84) -84] [(26 48 -54 28) -54] [(17 88 41 -2) -2] [(25 -44 71 -94) -94] [(-7 -91 71 25) -91] [(76 34 33 -10) -10] [(66 -25 43 -82) -82] [(52 -20 -86 72) -86] [(75 12 -46 3) -46] [(-51 -74 -53 42) -74] [(65 -15 -46 -95) -95] [(-91 1 91 -35) -91] [(-4 -94 -71 18) -94] [(-11 -72 82 57) -72] [(-54 -86 -21 85) -86] [(47 0 -60 -8) -60] [(-59 -55 -94 38) -94] [(-80 -21 -86 -10) -86] [(-14 88 81 -59) -59] [(32 45 48 -74) -74] [(-85 -25 -17 92) -85] [(-22 42 -66 -31) -66] [(20 -32 3 -28) -32] [(-57 -39 14 -84) -84] [(3 97 42 41) 3] [(-45 100 23 50) -45] [(-2 55 -31 -20) -31] [(68 7 -55 -24) -55] [(-82 72 -64 55) -82] [(-60 14 7 -40) -60] [(87 -7 26 11) -7] [(-61 1 -72 58) -72] [(29 75 -18 57) -18] [(19 -14 -77 65) -77] [(67 82 16 -40) -40])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[92 92 92 77] 77]
Train Case:   6 | Input/Output: [[62 62 62 -11] -11]
Train Case:   7 | Input/Output: [[29 86 29 29] 29]
Train Case:   8 | Input/Output: [[-95 -95 -77 -95] -95]
Train Case:   9 | Input/Output: [[-51 -51 51 -51] -51]
Train Case:  10 | Input/Output: [[43 -2 -2 -2] -2]
Train Case:  11 | Input/Output: [[66 -78 66 66] -78]
Train Case:  12 | Input/Output: [[14 -57 -57 -57] -57]
Train Case:  13 | Input/Output: [[-86 -63 -86 -86] -86]
Train Case:  14 | Input/Output: [[-31 -31 2 -31] -31]
Train Case:  15 | Input/Output: [(84 84 84 84) 84]
Train Case:  16 | Input/Output: [(88 88 88 88) 88]
Train Case:  17 | Input/Output: [(32 32 32 32) 32]
Train Case:  18 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  19 | Input/Output: [(100 100 100 100) 100]
Train Case:  20 | Input/Output: [(10 5 84 75) 5]
Train Case:  21 | Input/Output: [(72 2 90 14) 2]
Train Case:  22 | Input/Output: [(10 76 92 23) 10]
Train Case:  23 | Input/Output: [(33 95 48 23) 23]
Train Case:  24 | Input/Output: [(38 4 16 59) 4]
Train Case:  25 | Input/Output: [(57 24 37 68) 24]
Train Case:  26 | Input/Output: [(21 70 62 49) 21]
Train Case:  27 | Input/Output: [(43 11 91 23) 11]
Train Case:  28 | Input/Output: [(28 22 100 30) 22]
Train Case:  29 | Input/Output: [(72 4 26 73) 4]
Train Case:  30 | Input/Output: [(18 32 24 3) 3]
Train Case:  31 | Input/Output: [(50 64 28 98) 28]
Train Case:  32 | Input/Output: [(13 38 32 63) 13]
Train Case:  33 | Input/Output: [(74 55 35 58) 35]
Train Case:  34 | Input/Output: [(27 32 34 84) 27]
Train Case:  35 | Input/Output: [(90 26 0 23) 0]
Train Case:  36 | Input/Output: [(35 42 33 7) 7]
Train Case:  37 | Input/Output: [(3 14 54 91) 3]
Train Case:  38 | Input/Output: [(83 68 12 44) 12]
Train Case:  39 | Input/Output: [(87 20 89 44) 20]
Train Case:  40 | Input/Output: [(-7 75 -76 -3) -76]
Train Case:  41 | Input/Output: [(-7 18 -39 -28) -39]
Train Case:  42 | Input/Output: [(12 24 -51 22) -51]
Train Case:  43 | Input/Output: [(24 52 40 80) 24]
Train Case:  44 | Input/Output: [(-65 -2 65 -43) -65]
Train Case:  45 | Input/Output: [(82 21 62 -47) -47]
Train Case:  46 | Input/Output: [(31 69 13 -58) -58]
Train Case:  47 | Input/Output: [(-94 28 58 18) -94]
Train Case:  48 | Input/Output: [(80 -7 -68 -93) -93]
Train Case:  49 | Input/Output: [(49 -95 83 -88) -95]
Train Case:  50 | Input/Output: [(56 76 -8 -39) -39]
Train Case:  51 | Input/Output: [(-51 76 -61 60) -61]
Train Case:  52 | Input/Output: [(-48 75 5 -90) -90]
Train Case:  53 | Input/Output: [(2 84 73 -68) -68]
Train Case:  54 | Input/Output: [(87 39 -16 63) -16]
Train Case:  55 | Input/Output: [(6 92 -3 28) -3]
Train Case:  56 | Input/Output: [(-75 -81 -17 64) -81]
Train Case:  57 | Input/Output: [(-6 31 82 -13) -13]
Train Case:  58 | Input/Output: [(-41 -32 0 24) -41]
Train Case:  59 | Input/Output: [(-38 -77 28 -17) -77]
Train Case:  60 | Input/Output: [(56 -6 6 -79) -79]
Train Case:  61 | Input/Output: [(88 -71 -83 80) -83]
Train Case:  62 | Input/Output: [(-5 -23 -49 100) -49]
Train Case:  63 | Input/Output: [(-95 -52 -51 13) -95]
Train Case:  64 | Input/Output: [(-60 42 43 -35) -60]
Train Case:  65 | Input/Output: [(18 11 28 -84) -84]
Train Case:  66 | Input/Output: [(26 48 -54 28) -54]
Train Case:  67 | Input/Output: [(17 88 41 -2) -2]
Train Case:  68 | Input/Output: [(25 -44 71 -94) -94]
Train Case:  69 | Input/Output: [(-7 -91 71 25) -91]
Train Case:  70 | Input/Output: [(76 34 33 -10) -10]
Train Case:  71 | Input/Output: [(66 -25 43 -82) -82]
Train Case:  72 | Input/Output: [(52 -20 -86 72) -86]
Train Case:  73 | Input/Output: [(75 12 -46 3) -46]
Train Case:  74 | Input/Output: [(-51 -74 -53 42) -74]
Train Case:  75 | Input/Output: [(65 -15 -46 -95) -95]
Train Case:  76 | Input/Output: [(-91 1 91 -35) -91]
Train Case:  77 | Input/Output: [(-4 -94 -71 18) -94]
Train Case:  78 | Input/Output: [(-11 -72 82 57) -72]
Train Case:  79 | Input/Output: [(-54 -86 -21 85) -86]
Train Case:  80 | Input/Output: [(47 0 -60 -8) -60]
Train Case:  81 | Input/Output: [(-59 -55 -94 38) -94]
Train Case:  82 | Input/Output: [(-80 -21 -86 -10) -86]
Train Case:  83 | Input/Output: [(-14 88 81 -59) -59]
Train Case:  84 | Input/Output: [(32 45 48 -74) -74]
Train Case:  85 | Input/Output: [(-85 -25 -17 92) -85]
Train Case:  86 | Input/Output: [(-22 42 -66 -31) -66]
Train Case:  87 | Input/Output: [(20 -32 3 -28) -32]
Train Case:  88 | Input/Output: [(-57 -39 14 -84) -84]
Train Case:  89 | Input/Output: [(3 97 42 41) 3]
Train Case:  90 | Input/Output: [(-45 100 23 50) -45]
Train Case:  91 | Input/Output: [(-2 55 -31 -20) -31]
Train Case:  92 | Input/Output: [(68 7 -55 -24) -55]
Train Case:  93 | Input/Output: [(-82 72 -64 55) -82]
Train Case:  94 | Input/Output: [(-60 14 7 -40) -60]
Train Case:  95 | Input/Output: [(87 -7 26 11) -7]
Train Case:  96 | Input/Output: [(-61 1 -72 58) -72]
Train Case:  97 | Input/Output: [(29 75 -18 57) -18]
Train Case:  98 | Input/Output: [(19 -14 -77 65) -77]
Train Case:  99 | Input/Output: [(67 82 16 -40) -40]
Test Case:   0 | Input/Output: [[78 78 78 -72] -72]
Test Case:   1 | Input/Output: [[71 71 58 71] 58]
Test Case:   2 | Input/Output: [[-100 -88 -88 -88] -100]
Test Case:   3 | Input/Output: [[-21 53 53 53] -21]
Test Case:   4 | Input/Output: [[-20 -85 -20 -20] -85]
Test Case:   5 | Input/Output: [[-67 -67 -64 -67] -67]
Test Case:   6 | Input/Output: [[-39 -14 -14 -14] -39]
Test Case:   7 | Input/Output: [[-3 23 23 23] -3]
Test Case:   8 | Input/Output: [[95 95 95 -99] -99]
Test Case:   9 | Input/Output: [[56 43 43 43] 43]
Test Case:  10 | Input/Output: [[5 -75 -75 -75] -75]
Test Case:  11 | Input/Output: [[-2 -2 -2 39] -2]
Test Case:  12 | Input/Output: [[23 -85 -85 -85] -85]
Test Case:  13 | Input/Output: [[74 74 16 74] 16]
Test Case:  14 | Input/Output: [[-38 -38 -38 45] -38]
Test Case:  15 | Input/Output: [[12 76 12 12] 12]
Test Case:  16 | Input/Output: [[-89 31 -89 -89] -89]
Test Case:  17 | Input/Output: [[49 16 16 16] 16]
Test Case:  18 | Input/Output: [[-92 -2 -2 -2] -92]
Test Case:  19 | Input/Output: [[-51 -22 -22 -22] -51]
Test Case:  20 | Input/Output: [[22 50 22 22] 22]
Test Case:  21 | Input/Output: [[73 73 -87 73] -87]
Test Case:  22 | Input/Output: [[-14 -14 -14 -82] -82]
Test Case:  23 | Input/Output: [[23 13 23 23] 13]
Test Case:  24 | Input/Output: [[-18 -18 87 -18] -18]
Test Case:  25 | Input/Output: [[67 67 -78 67] -78]
Test Case:  26 | Input/Output: [[-92 38 -92 -92] -92]
Test Case:  27 | Input/Output: [[-62 73 73 73] -62]
Test Case:  28 | Input/Output: [[-21 23 -21 -21] -21]
Test Case:  29 | Input/Output: [[24 24 -84 24] -84]
Test Case:  30 | Input/Output: [[-84 -84 -84 -42] -84]
Test Case:  31 | Input/Output: [[-79 -79 -79 24] -79]
Test Case:  32 | Input/Output: [[-35 -65 -35 -35] -65]
Test Case:  33 | Input/Output: [[-93 68 68 68] -93]
Test Case:  34 | Input/Output: [[3 -39 3 3] -39]
Test Case:  35 | Input/Output: [[-83 -83 -83 41] -83]
Test Case:  36 | Input/Output: [[-8 39 39 39] -8]
Test Case:  37 | Input/Output: [[-52 -52 -52 20] -52]
Test Case:  38 | Input/Output: [[-24 22 22 22] -24]
Test Case:  39 | Input/Output: [[-55 -55 -55 -67] -67]
Test Case:  40 | Input/Output: [[60 44 44 44] 44]
Test Case:  41 | Input/Output: [[77 68 77 77] 68]
Test Case:  42 | Input/Output: [[54 54 54 -45] -45]
Test Case:  43 | Input/Output: [[-65 -65 -65 -90] -90]
Test Case:  44 | Input/Output: [[84 -67 -67 -67] -67]
Test Case:  45 | Input/Output: [[-19 -72 -72 -72] -72]
Test Case:  46 | Input/Output: [[87 87 87 89] 87]
Test Case:  47 | Input/Output: [[-5 -5 12 -5] -5]
Test Case:  48 | Input/Output: [[-74 -74 -74 85] -74]
Test Case:  49 | Input/Output: [[91 14 91 91] 14]
Test Case:  50 | Input/Output: [[72 72 11 72] 11]
Test Case:  51 | Input/Output: [[8 8 8 -15] -15]
Test Case:  52 | Input/Output: [[-74 -74 -74 86] -74]
Test Case:  53 | Input/Output: [[-9 -9 20 -9] -9]
Test Case:  54 | Input/Output: [[-43 -43 -43 23] -43]
Test Case:  55 | Input/Output: [[-76 49 -76 -76] -76]
Test Case:  56 | Input/Output: [[-14 -42 -42 -42] -42]
Test Case:  57 | Input/Output: [[61 -99 -99 -99] -99]
Test Case:  58 | Input/Output: [[82 82 16 82] 16]
Test Case:  59 | Input/Output: [[-95 -37 -37 -37] -95]
Test Case:  60 | Input/Output: [[-83 -97 -97 -97] -97]
Test Case:  61 | Input/Output: [[-58 -58 -27 -58] -58]
Test Case:  62 | Input/Output: [[73 77 77 77] 73]
Test Case:  63 | Input/Output: [[17 17 -6 17] -6]
Test Case:  64 | Input/Output: [[83 80 80 80] 80]
Test Case:  65 | Input/Output: [[13 13 11 13] 11]
Test Case:  66 | Input/Output: [[60 60 -36 60] -36]
Test Case:  67 | Input/Output: [[13 13 -94 13] -94]
Test Case:  68 | Input/Output: [[-43 -21 -21 -21] -43]
Test Case:  69 | Input/Output: [[-95 -49 -95 -95] -95]
Test Case:  70 | Input/Output: [[-47 -47 -47 1] -47]
Test Case:  71 | Input/Output: [[-15 -15 45 -15] -15]
Test Case:  72 | Input/Output: [[29 -57 -57 -57] -57]
Test Case:  73 | Input/Output: [[-7 -7 85 -7] -7]
Test Case:  74 | Input/Output: [[84 84 84 84] 84]
Test Case:  75 | Input/Output: [[53 -70 53 53] -70]
Test Case:  76 | Input/Output: [[66 66 17 66] 17]
Test Case:  77 | Input/Output: [[-53 -49 -53 -53] -53]
Test Case:  78 | Input/Output: [[88 88 -67 88] -67]
Test Case:  79 | Input/Output: [[61 -78 61 61] -78]
Test Case:  80 | Input/Output: [[-62 -62 8 -62] -62]
Test Case:  81 | Input/Output: [[-15 -15 43 -15] -15]
Test Case:  82 | Input/Output: [[90 5 90 90] 5]
Test Case:  83 | Input/Output: [[61 -73 61 61] -73]
Test Case:  84 | Input/Output: [[53 56 53 53] 53]
Test Case:  85 | Input/Output: [[21 21 21 -12] -12]
Test Case:  86 | Input/Output: [[88 -45 88 88] -45]
Test Case:  87 | Input/Output: [[-77 -77 -12 -77] -77]
Test Case:  88 | Input/Output: [[-60 -60 -60 -67] -67]
Test Case:  89 | Input/Output: [[46 21 21 21] 21]
Test Case:  90 | Input/Output: [[-96 19 -96 -96] -96]
Test Case:  91 | Input/Output: [[-33 -33 -33 -10] -33]
Test Case:  92 | Input/Output: [[-36 -65 -36 -36] -65]
Test Case:  93 | Input/Output: [[-68 -68 76 -68] -68]
Test Case:  94 | Input/Output: [[-97 -46 -46 -46] -97]
Test Case:  95 | Input/Output: [[93 -70 93 93] -70]
Test Case:  96 | Input/Output: [[78 97 78 78] 78]
Test Case:  97 | Input/Output: [[-41 -41 -41 43] -41]
Test Case:  98 | Input/Output: [[52 52 -11 52] -11]
Test Case:  99 | Input/Output: [[-78 28 -78 -78] -78]
Test Case: 100 | Input/Output: [(61 61 61 61) 61]
Test Case: 101 | Input/Output: [(24 24 24 24) 24]
Test Case: 102 | Input/Output: [(68 68 68 68) 68]
Test Case: 103 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 104 | Input/Output: [(67 67 67 67) 67]
Test Case: 105 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 106 | Input/Output: [(32 32 32 32) 32]
Test Case: 107 | Input/Output: [(41 41 41 41) 41]
Test Case: 108 | Input/Output: [(12 12 12 12) 12]
Test Case: 109 | Input/Output: [(22 22 22 22) 22]
Test Case: 110 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 111 | Input/Output: [(69 69 69 69) 69]
Test Case: 112 | Input/Output: [(95 95 95 95) 95]
Test Case: 113 | Input/Output: [(72 72 72 72) 72]
Test Case: 114 | Input/Output: [(1 1 1 1) 1]
Test Case: 115 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 116 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 117 | Input/Output: [(86 86 86 86) 86]
Test Case: 118 | Input/Output: [(72 72 72 72) 72]
Test Case: 119 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 120 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 121 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 122 | Input/Output: [(79 79 79 79) 79]
Test Case: 123 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 124 | Input/Output: [(11 11 11 11) 11]
Test Case: 125 | Input/Output: [(89 89 89 89) 89]
Test Case: 126 | Input/Output: [(38 38 38 38) 38]
Test Case: 127 | Input/Output: [(88 88 88 88) 88]
Test Case: 128 | Input/Output: [(26 26 26 26) 26]
Test Case: 129 | Input/Output: [(64 64 64 64) 64]
Test Case: 130 | Input/Output: [(48 48 48 48) 48]
Test Case: 131 | Input/Output: [(52 52 52 52) 52]
Test Case: 132 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 133 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 134 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 135 | Input/Output: [(83 83 83 83) 83]
Test Case: 136 | Input/Output: [(17 17 17 17) 17]
Test Case: 137 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 138 | Input/Output: [(25 25 25 25) 25]
Test Case: 139 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 140 | Input/Output: [(47 47 47 47) 47]
Test Case: 141 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 142 | Input/Output: [(90 90 90 90) 90]
Test Case: 143 | Input/Output: [(30 30 30 30) 30]
Test Case: 144 | Input/Output: [(22 22 22 22) 22]
Test Case: 145 | Input/Output: [(67 67 67 67) 67]
Test Case: 146 | Input/Output: [(30 30 30 30) 30]
Test Case: 147 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 148 | Input/Output: [(19 19 19 19) 19]
Test Case: 149 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 150 | Input/Output: [(65 65 65 65) 65]
Test Case: 151 | Input/Output: [(21 21 21 21) 21]
Test Case: 152 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 153 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 154 | Input/Output: [(56 56 56 56) 56]
Test Case: 155 | Input/Output: [(79 79 79 79) 79]
Test Case: 156 | Input/Output: [(49 49 49 49) 49]
Test Case: 157 | Input/Output: [(22 22 22 22) 22]
Test Case: 158 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 159 | Input/Output: [(11 11 11 11) 11]
Test Case: 160 | Input/Output: [(52 52 52 52) 52]
Test Case: 161 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 162 | Input/Output: [(48 48 48 48) 48]
Test Case: 163 | Input/Output: [(14 14 14 14) 14]
Test Case: 164 | Input/Output: [(54 54 54 54) 54]
Test Case: 165 | Input/Output: [(49 49 49 49) 49]
Test Case: 166 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 167 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 168 | Input/Output: [(81 81 81 81) 81]
Test Case: 169 | Input/Output: [(67 67 67 67) 67]
Test Case: 170 | Input/Output: [(77 77 77 77) 77]
Test Case: 171 | Input/Output: [(50 50 50 50) 50]
Test Case: 172 | Input/Output: [(38 38 38 38) 38]
Test Case: 173 | Input/Output: [(93 93 93 93) 93]
Test Case: 174 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 175 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 176 | Input/Output: [(20 20 20 20) 20]
Test Case: 177 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 178 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 179 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 180 | Input/Output: [(78 78 78 78) 78]
Test Case: 181 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 182 | Input/Output: [(36 36 36 36) 36]
Test Case: 183 | Input/Output: [(50 50 50 50) 50]
Test Case: 184 | Input/Output: [(23 23 23 23) 23]
Test Case: 185 | Input/Output: [(79 79 79 79) 79]
Test Case: 186 | Input/Output: [(7 7 7 7) 7]
Test Case: 187 | Input/Output: [(33 33 33 33) 33]
Test Case: 188 | Input/Output: [(2 2 2 2) 2]
Test Case: 189 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 190 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 191 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 192 | Input/Output: [(79 79 79 79) 79]
Test Case: 193 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 194 | Input/Output: [(29 29 29 29) 29]
Test Case: 195 | Input/Output: [(67 67 67 67) 67]
Test Case: 196 | Input/Output: [(63 63 63 63) 63]
Test Case: 197 | Input/Output: [(80 80 80 80) 80]
Test Case: 198 | Input/Output: [(80 80 80 80) 80]
Test Case: 199 | Input/Output: [(80 80 80 80) 80]
Test Case: 200 | Input/Output: [(19 56 87 19) 19]
Test Case: 201 | Input/Output: [(37 23 9 40) 9]
Test Case: 202 | Input/Output: [(10 53 63 59) 10]
Test Case: 203 | Input/Output: [(39 24 24 54) 24]
Test Case: 204 | Input/Output: [(54 14 36 64) 14]
Test Case: 205 | Input/Output: [(95 6 20 33) 6]
Test Case: 206 | Input/Output: [(88 14 1 50) 1]
Test Case: 207 | Input/Output: [(88 28 55 6) 6]
Test Case: 208 | Input/Output: [(53 94 36 96) 36]
Test Case: 209 | Input/Output: [(50 70 63 7) 7]
Test Case: 210 | Input/Output: [(27 23 52 31) 23]
Test Case: 211 | Input/Output: [(47 39 55 22) 22]
Test Case: 212 | Input/Output: [(28 56 58 76) 28]
Test Case: 213 | Input/Output: [(64 4 80 88) 4]
Test Case: 214 | Input/Output: [(46 100 68 64) 46]
Test Case: 215 | Input/Output: [(93 82 31 46) 31]
Test Case: 216 | Input/Output: [(56 85 35 95) 35]
Test Case: 217 | Input/Output: [(59 39 22 91) 22]
Test Case: 218 | Input/Output: [(97 57 49 96) 49]
Test Case: 219 | Input/Output: [(90 21 68 61) 21]
Test Case: 220 | Input/Output: [(10 65 13 74) 10]
Test Case: 221 | Input/Output: [(70 79 20 97) 20]
Test Case: 222 | Input/Output: [(21 15 75 2) 2]
Test Case: 223 | Input/Output: [(25 4 68 68) 4]
Test Case: 224 | Input/Output: [(38 85 80 37) 37]
Test Case: 225 | Input/Output: [(34 26 7 98) 7]
Test Case: 226 | Input/Output: [(81 92 100 45) 45]
Test Case: 227 | Input/Output: [(12 15 4 39) 4]
Test Case: 228 | Input/Output: [(61 34 31 42) 31]
Test Case: 229 | Input/Output: [(68 26 12 94) 12]
Test Case: 230 | Input/Output: [(77 23 13 35) 13]
Test Case: 231 | Input/Output: [(87 73 53 76) 53]
Test Case: 232 | Input/Output: [(23 47 54 1) 1]
Test Case: 233 | Input/Output: [(85 9 2 40) 2]
Test Case: 234 | Input/Output: [(88 82 52 80) 52]
Test Case: 235 | Input/Output: [(69 77 4 65) 4]
Test Case: 236 | Input/Output: [(81 80 86 49) 49]
Test Case: 237 | Input/Output: [(76 68 96 90) 68]
Test Case: 238 | Input/Output: [(16 6 59 88) 6]
Test Case: 239 | Input/Output: [(37 50 72 14) 14]
Test Case: 240 | Input/Output: [(17 53 33 82) 17]
Test Case: 241 | Input/Output: [(34 21 49 5) 5]
Test Case: 242 | Input/Output: [(5 59 55 82) 5]
Test Case: 243 | Input/Output: [(91 90 15 93) 15]
Test Case: 244 | Input/Output: [(82 14 3 83) 3]
Test Case: 245 | Input/Output: [(2 32 53 13) 2]
Test Case: 246 | Input/Output: [(19 97 55 6) 6]
Test Case: 247 | Input/Output: [(68 12 62 17) 12]
Test Case: 248 | Input/Output: [(28 18 26 72) 18]
Test Case: 249 | Input/Output: [(18 26 51 56) 18]
Test Case: 250 | Input/Output: [(59 2 17 49) 2]
Test Case: 251 | Input/Output: [(74 5 27 72) 5]
Test Case: 252 | Input/Output: [(10 7 27 48) 7]
Test Case: 253 | Input/Output: [(43 40 33 12) 12]
Test Case: 254 | Input/Output: [(81 69 40 24) 24]
Test Case: 255 | Input/Output: [(44 46 47 38) 38]
Test Case: 256 | Input/Output: [(70 41 9 76) 9]
Test Case: 257 | Input/Output: [(8 75 76 25) 8]
Test Case: 258 | Input/Output: [(41 27 78 21) 21]
Test Case: 259 | Input/Output: [(94 43 83 23) 23]
Test Case: 260 | Input/Output: [(19 24 4 45) 4]
Test Case: 261 | Input/Output: [(11 46 73 85) 11]
Test Case: 262 | Input/Output: [(45 2 12 36) 2]
Test Case: 263 | Input/Output: [(62 18 48 64) 18]
Test Case: 264 | Input/Output: [(87 35 92 14) 14]
Test Case: 265 | Input/Output: [(92 30 43 43) 30]
Test Case: 266 | Input/Output: [(43 8 83 66) 8]
Test Case: 267 | Input/Output: [(48 64 90 36) 36]
Test Case: 268 | Input/Output: [(61 51 11 72) 11]
Test Case: 269 | Input/Output: [(23 96 85 28) 23]
Test Case: 270 | Input/Output: [(44 7 86 93) 7]
Test Case: 271 | Input/Output: [(40 77 12 84) 12]
Test Case: 272 | Input/Output: [(97 89 2 23) 2]
Test Case: 273 | Input/Output: [(90 31 30 13) 13]
Test Case: 274 | Input/Output: [(97 1 98 99) 1]
Test Case: 275 | Input/Output: [(58 8 42 98) 8]
Test Case: 276 | Input/Output: [(0 2 33 62) 0]
Test Case: 277 | Input/Output: [(35 66 87 86) 35]
Test Case: 278 | Input/Output: [(5 93 66 57) 5]
Test Case: 279 | Input/Output: [(96 87 2 44) 2]
Test Case: 280 | Input/Output: [(81 52 27 57) 27]
Test Case: 281 | Input/Output: [(26 48 42 68) 26]
Test Case: 282 | Input/Output: [(28 3 18 69) 3]
Test Case: 283 | Input/Output: [(23 39 22 6) 6]
Test Case: 284 | Input/Output: [(78 61 30 7) 7]
Test Case: 285 | Input/Output: [(97 5 36 70) 5]
Test Case: 286 | Input/Output: [(68 25 37 11) 11]
Test Case: 287 | Input/Output: [(26 96 20 34) 20]
Test Case: 288 | Input/Output: [(71 48 94 2) 2]
Test Case: 289 | Input/Output: [(73 4 6 17) 4]
Test Case: 290 | Input/Output: [(96 90 8 67) 8]
Test Case: 291 | Input/Output: [(10 64 89 9) 9]
Test Case: 292 | Input/Output: [(92 22 91 44) 22]
Test Case: 293 | Input/Output: [(93 4 13 39) 4]
Test Case: 294 | Input/Output: [(9 30 14 29) 9]
Test Case: 295 | Input/Output: [(77 82 58 38) 38]
Test Case: 296 | Input/Output: [(21 61 47 79) 21]
Test Case: 297 | Input/Output: [(43 85 33 15) 15]
Test Case: 298 | Input/Output: [(75 42 30 46) 30]
Test Case: 299 | Input/Output: [(14 81 67 16) 14]
Test Case: 300 | Input/Output: [(78 1 100 21) 1]
Test Case: 301 | Input/Output: [(82 94 46 65) 46]
Test Case: 302 | Input/Output: [(50 16 45 27) 16]
Test Case: 303 | Input/Output: [(16 34 13 81) 13]
Test Case: 304 | Input/Output: [(13 89 76 84) 13]
Test Case: 305 | Input/Output: [(13 50 46 38) 13]
Test Case: 306 | Input/Output: [(56 78 28 5) 5]
Test Case: 307 | Input/Output: [(50 24 17 50) 17]
Test Case: 308 | Input/Output: [(14 70 26 61) 14]
Test Case: 309 | Input/Output: [(71 45 61 5) 5]
Test Case: 310 | Input/Output: [(52 44 80 68) 44]
Test Case: 311 | Input/Output: [(18 32 68 1) 1]
Test Case: 312 | Input/Output: [(96 34 14 26) 14]
Test Case: 313 | Input/Output: [(74 59 25 99) 25]
Test Case: 314 | Input/Output: [(84 54 99 96) 54]
Test Case: 315 | Input/Output: [(87 8 68 16) 8]
Test Case: 316 | Input/Output: [(95 79 23 1) 1]
Test Case: 317 | Input/Output: [(53 88 96 77) 53]
Test Case: 318 | Input/Output: [(37 66 42 77) 37]
Test Case: 319 | Input/Output: [(90 16 84 25) 16]
Test Case: 320 | Input/Output: [(11 86 71 33) 11]
Test Case: 321 | Input/Output: [(4 23 85 36) 4]
Test Case: 322 | Input/Output: [(9 36 91 1) 1]
Test Case: 323 | Input/Output: [(48 34 31 79) 31]
Test Case: 324 | Input/Output: [(37 53 26 65) 26]
Test Case: 325 | Input/Output: [(78 95 53 43) 43]
Test Case: 326 | Input/Output: [(52 18 35 4) 4]
Test Case: 327 | Input/Output: [(14 100 16 9) 9]
Test Case: 328 | Input/Output: [(75 53 80 41) 41]
Test Case: 329 | Input/Output: [(0 24 69 75) 0]
Test Case: 330 | Input/Output: [(57 100 15 93) 15]
Test Case: 331 | Input/Output: [(76 16 5 93) 5]
Test Case: 332 | Input/Output: [(15 44 58 49) 15]
Test Case: 333 | Input/Output: [(42 28 61 53) 28]
Test Case: 334 | Input/Output: [(54 58 15 78) 15]
Test Case: 335 | Input/Output: [(68 19 99 51) 19]
Test Case: 336 | Input/Output: [(54 80 4 79) 4]
Test Case: 337 | Input/Output: [(55 29 98 33) 29]
Test Case: 338 | Input/Output: [(42 33 24 45) 24]
Test Case: 339 | Input/Output: [(15 91 7 32) 7]
Test Case: 340 | Input/Output: [(46 70 72 54) 46]
Test Case: 341 | Input/Output: [(8 100 61 7) 7]
Test Case: 342 | Input/Output: [(7 44 48 66) 7]
Test Case: 343 | Input/Output: [(59 49 11 51) 11]
Test Case: 344 | Input/Output: [(63 95 69 15) 15]
Test Case: 345 | Input/Output: [(20 73 62 60) 20]
Test Case: 346 | Input/Output: [(14 73 18 28) 14]
Test Case: 347 | Input/Output: [(71 50 47 44) 44]
Test Case: 348 | Input/Output: [(18 24 65 24) 18]
Test Case: 349 | Input/Output: [(27 42 3 28) 3]
Test Case: 350 | Input/Output: [(56 41 91 62) 41]
Test Case: 351 | Input/Output: [(51 95 84 43) 43]
Test Case: 352 | Input/Output: [(25 46 78 85) 25]
Test Case: 353 | Input/Output: [(29 15 72 69) 15]
Test Case: 354 | Input/Output: [(35 78 33 20) 20]
Test Case: 355 | Input/Output: [(77 58 32 68) 32]
Test Case: 356 | Input/Output: [(20 68 44 47) 20]
Test Case: 357 | Input/Output: [(68 9 97 85) 9]
Test Case: 358 | Input/Output: [(7 92 95 28) 7]
Test Case: 359 | Input/Output: [(86 44 69 73) 44]
Test Case: 360 | Input/Output: [(24 47 58 89) 24]
Test Case: 361 | Input/Output: [(39 15 84 73) 15]
Test Case: 362 | Input/Output: [(71 38 70 15) 15]
Test Case: 363 | Input/Output: [(85 57 69 4) 4]
Test Case: 364 | Input/Output: [(63 40 61 95) 40]
Test Case: 365 | Input/Output: [(6 100 86 45) 6]
Test Case: 366 | Input/Output: [(76 5 87 69) 5]
Test Case: 367 | Input/Output: [(34 92 4 71) 4]
Test Case: 368 | Input/Output: [(59 25 30 52) 25]
Test Case: 369 | Input/Output: [(40 6 51 31) 6]
Test Case: 370 | Input/Output: [(70 23 78 62) 23]
Test Case: 371 | Input/Output: [(14 72 17 73) 14]
Test Case: 372 | Input/Output: [(70 53 11 56) 11]
Test Case: 373 | Input/Output: [(69 94 57 26) 26]
Test Case: 374 | Input/Output: [(2 59 55 18) 2]
Test Case: 375 | Input/Output: [(66 98 82 49) 49]
Test Case: 376 | Input/Output: [(87 86 84 43) 43]
Test Case: 377 | Input/Output: [(49 87 91 71) 49]
Test Case: 378 | Input/Output: [(96 11 62 76) 11]
Test Case: 379 | Input/Output: [(57 53 17 9) 9]
Test Case: 380 | Input/Output: [(100 70 19 2) 2]
Test Case: 381 | Input/Output: [(68 42 48 24) 24]
Test Case: 382 | Input/Output: [(59 76 84 86) 59]
Test Case: 383 | Input/Output: [(74 81 99 15) 15]
Test Case: 384 | Input/Output: [(9 70 21 75) 9]
Test Case: 385 | Input/Output: [(87 97 1 23) 1]
Test Case: 386 | Input/Output: [(100 47 37 2) 2]
Test Case: 387 | Input/Output: [(11 58 73 19) 11]
Test Case: 388 | Input/Output: [(86 29 53 36) 29]
Test Case: 389 | Input/Output: [(40 52 79 42) 40]
Test Case: 390 | Input/Output: [(39 2 3 89) 2]
Test Case: 391 | Input/Output: [(75 49 39 1) 1]
Test Case: 392 | Input/Output: [(32 46 65 41) 32]
Test Case: 393 | Input/Output: [(45 59 57 24) 24]
Test Case: 394 | Input/Output: [(54 20 69 72) 20]
Test Case: 395 | Input/Output: [(30 44 72 0) 0]
Test Case: 396 | Input/Output: [(99 70 33 18) 18]
Test Case: 397 | Input/Output: [(75 11 37 75) 11]
Test Case: 398 | Input/Output: [(48 83 38 66) 38]
Test Case: 399 | Input/Output: [(82 57 63 86) 57]
Test Case: 400 | Input/Output: [(84 -45 64 70) -45]
Test Case: 401 | Input/Output: [(-75 35 65 -67) -75]
Test Case: 402 | Input/Output: [(-49 62 16 7) -49]
Test Case: 403 | Input/Output: [(95 -35 96 19) -35]
Test Case: 404 | Input/Output: [(-60 38 -44 97) -60]
Test Case: 405 | Input/Output: [(44 -7 16 -40) -40]
Test Case: 406 | Input/Output: [(60 25 -76 -25) -76]
Test Case: 407 | Input/Output: [(-29 25 86 97) -29]
Test Case: 408 | Input/Output: [(93 27 -47 -33) -47]
Test Case: 409 | Input/Output: [(27 -3 -67 56) -67]
Test Case: 410 | Input/Output: [(83 74 42 9) 9]
Test Case: 411 | Input/Output: [(-7 99 -88 68) -88]
Test Case: 412 | Input/Output: [(7 -46 -50 -60) -60]
Test Case: 413 | Input/Output: [(-37 50 -33 -33) -37]
Test Case: 414 | Input/Output: [(-18 -73 23 -36) -73]
Test Case: 415 | Input/Output: [(62 41 -2 -35) -35]
Test Case: 416 | Input/Output: [(74 -40 -33 -15) -40]
Test Case: 417 | Input/Output: [(-30 48 58 -68) -68]
Test Case: 418 | Input/Output: [(66 -49 -27 -23) -49]
Test Case: 419 | Input/Output: [(43 -89 97 -95) -95]
Test Case: 420 | Input/Output: [(-22 -50 -49 -31) -50]
Test Case: 421 | Input/Output: [(-44 -37 -9 -57) -57]
Test Case: 422 | Input/Output: [(-67 40 -65 63) -67]
Test Case: 423 | Input/Output: [(18 -90 13 22) -90]
Test Case: 424 | Input/Output: [(72 56 -54 93) -54]
Test Case: 425 | Input/Output: [(-77 -16 -76 -66) -77]
Test Case: 426 | Input/Output: [(16 -4 96 9) -4]
Test Case: 427 | Input/Output: [(72 89 -8 -57) -57]
Test Case: 428 | Input/Output: [(16 15 39 -74) -74]
Test Case: 429 | Input/Output: [(-65 -15 -16 -2) -65]
Test Case: 430 | Input/Output: [(88 -93 -81 -51) -93]
Test Case: 431 | Input/Output: [(38 75 1 -25) -25]
Test Case: 432 | Input/Output: [(-42 64 -64 -30) -64]
Test Case: 433 | Input/Output: [(36 -21 41 44) -21]
Test Case: 434 | Input/Output: [(7 94 38 13) 7]
Test Case: 435 | Input/Output: [(17 69 56 -60) -60]
Test Case: 436 | Input/Output: [(99 6 51 100) 6]
Test Case: 437 | Input/Output: [(-89 63 7 76) -89]
Test Case: 438 | Input/Output: [(12 -71 14 -16) -71]
Test Case: 439 | Input/Output: [(21 -51 64 43) -51]
Test Case: 440 | Input/Output: [(-77 -87 -26 62) -87]
Test Case: 441 | Input/Output: [(59 22 93 -12) -12]
Test Case: 442 | Input/Output: [(72 -1 -92 4) -92]
Test Case: 443 | Input/Output: [(-19 21 7 -34) -34]
Test Case: 444 | Input/Output: [(54 92 92 54) 54]
Test Case: 445 | Input/Output: [(54 2 -25 58) -25]
Test Case: 446 | Input/Output: [(84 -28 9 7) -28]
Test Case: 447 | Input/Output: [(44 -91 92 -40) -91]
Test Case: 448 | Input/Output: [(59 83 30 -32) -32]
Test Case: 449 | Input/Output: [(-72 80 61 84) -72]
Test Case: 450 | Input/Output: [(82 21 -90 88) -90]
Test Case: 451 | Input/Output: [(-64 26 54 -65) -65]
Test Case: 452 | Input/Output: [(37 13 -55 97) -55]
Test Case: 453 | Input/Output: [(-2 -37 -76 -23) -76]
Test Case: 454 | Input/Output: [(-92 9 4 -76) -92]
Test Case: 455 | Input/Output: [(-70 8 -81 -34) -81]
Test Case: 456 | Input/Output: [(61 -75 -16 61) -75]
Test Case: 457 | Input/Output: [(46 3 -43 -37) -43]
Test Case: 458 | Input/Output: [(-96 -18 41 47) -96]
Test Case: 459 | Input/Output: [(9 -31 93 -36) -36]
Test Case: 460 | Input/Output: [(-29 -92 -54 -97) -97]
Test Case: 461 | Input/Output: [(-23 70 -19 -89) -89]
Test Case: 462 | Input/Output: [(19 13 -45 11) -45]
Test Case: 463 | Input/Output: [(-64 -99 -2 -48) -99]
Test Case: 464 | Input/Output: [(-57 -46 70 4) -57]
Test Case: 465 | Input/Output: [(-27 -75 85 33) -75]
Test Case: 466 | Input/Output: [(92 93 -59 63) -59]
Test Case: 467 | Input/Output: [(-87 34 -26 -37) -87]
Test Case: 468 | Input/Output: [(92 6 36 59) 6]
Test Case: 469 | Input/Output: [(11 -61 79 63) -61]
Test Case: 470 | Input/Output: [(-71 -19 -80 -58) -80]
Test Case: 471 | Input/Output: [(-11 85 4 81) -11]
Test Case: 472 | Input/Output: [(79 -36 -2 86) -36]
Test Case: 473 | Input/Output: [(-91 48 79 27) -91]
Test Case: 474 | Input/Output: [(29 -42 51 -52) -52]
Test Case: 475 | Input/Output: [(24 90 -99 52) -99]
Test Case: 476 | Input/Output: [(-40 0 72 -6) -40]
Test Case: 477 | Input/Output: [(28 57 45 -50) -50]
Test Case: 478 | Input/Output: [(59 70 83 58) 58]
Test Case: 479 | Input/Output: [(-64 61 96 19) -64]
Test Case: 480 | Input/Output: [(-72 -29 -91 -57) -91]
Test Case: 481 | Input/Output: [(-21 42 -73 -64) -73]
Test Case: 482 | Input/Output: [(82 44 -72 -91) -91]
Test Case: 483 | Input/Output: [(-19 -10 -38 -41) -41]
Test Case: 484 | Input/Output: [(51 -98 -21 -1) -98]
Test Case: 485 | Input/Output: [(4 -97 17 -18) -97]
Test Case: 486 | Input/Output: [(52 -56 73 92) -56]
Test Case: 487 | Input/Output: [(-31 19 -30 31) -31]
Test Case: 488 | Input/Output: [(-95 -38 26 5) -95]
Test Case: 489 | Input/Output: [(18 -7 84 -51) -51]
Test Case: 490 | Input/Output: [(-57 -70 -92 -47) -92]
Test Case: 491 | Input/Output: [(-95 14 44 87) -95]
Test Case: 492 | Input/Output: [(34 89 -13 58) -13]
Test Case: 493 | Input/Output: [(-97 -46 -29 -86) -97]
Test Case: 494 | Input/Output: [(70 84 -34 87) -34]
Test Case: 495 | Input/Output: [(-90 11 -78 -52) -90]
Test Case: 496 | Input/Output: [(-43 87 58 44) -43]
Test Case: 497 | Input/Output: [(34 59 -96 -12) -96]
Test Case: 498 | Input/Output: [(-66 -95 -89 29) -95]
Test Case: 499 | Input/Output: [(-92 85 82 79) -92]
Test Case: 500 | Input/Output: [(-38 35 63 -97) -97]
Test Case: 501 | Input/Output: [(29 -6 51 -14) -14]
Test Case: 502 | Input/Output: [(91 -60 -10 8) -60]
Test Case: 503 | Input/Output: [(-100 -95 -86 20) -100]
Test Case: 504 | Input/Output: [(-20 -4 80 31) -20]
Test Case: 505 | Input/Output: [(100 -40 37 5) -40]
Test Case: 506 | Input/Output: [(20 -35 96 -82) -82]
Test Case: 507 | Input/Output: [(87 93 3 75) 3]
Test Case: 508 | Input/Output: [(77 97 84 44) 44]
Test Case: 509 | Input/Output: [(81 26 -16 -36) -36]
Test Case: 510 | Input/Output: [(37 25 12 45) 12]
Test Case: 511 | Input/Output: [(56 50 94 -34) -34]
Test Case: 512 | Input/Output: [(17 -64 -53 -47) -64]
Test Case: 513 | Input/Output: [(-95 12 6 78) -95]
Test Case: 514 | Input/Output: [(-49 -82 51 -11) -82]
Test Case: 515 | Input/Output: [(-28 -42 -79 17) -79]
Test Case: 516 | Input/Output: [(-35 91 -17 13) -35]
Test Case: 517 | Input/Output: [(-84 20 22 -16) -84]
Test Case: 518 | Input/Output: [(-80 2 21 -80) -80]
Test Case: 519 | Input/Output: [(-61 7 2 -22) -61]
Test Case: 520 | Input/Output: [(-7 81 31 33) -7]
Test Case: 521 | Input/Output: [(-55 19 55 -80) -80]
Test Case: 522 | Input/Output: [(-52 -44 75 -79) -79]
Test Case: 523 | Input/Output: [(-47 -51 55 11) -51]
Test Case: 524 | Input/Output: [(21 69 -84 -48) -84]
Test Case: 525 | Input/Output: [(-46 63 -97 -26) -97]
Test Case: 526 | Input/Output: [(-17 -8 21 -84) -84]
Test Case: 527 | Input/Output: [(-32 -75 -15 81) -75]
Test Case: 528 | Input/Output: [(82 43 -30 -42) -42]
Test Case: 529 | Input/Output: [(-71 -29 31 78) -71]
Test Case: 530 | Input/Output: [(65 57 -57 64) -57]
Test Case: 531 | Input/Output: [(-67 22 -90 49) -90]
Test Case: 532 | Input/Output: [(86 95 0 60) 0]
Test Case: 533 | Input/Output: [(-52 -76 42 -50) -76]
Test Case: 534 | Input/Output: [(-7 -12 67 53) -12]
Test Case: 535 | Input/Output: [(74 -86 -81 -44) -86]
Test Case: 536 | Input/Output: [(-70 -11 19 81) -70]
Test Case: 537 | Input/Output: [(-31 -39 -96 92) -96]
Test Case: 538 | Input/Output: [(6 66 14 -24) -24]
Test Case: 539 | Input/Output: [(-49 27 92 34) -49]
Test Case: 540 | Input/Output: [(91 39 6 -82) -82]
Test Case: 541 | Input/Output: [(94 1 97 -8) -8]
Test Case: 542 | Input/Output: [(85 100 84 47) 47]
Test Case: 543 | Input/Output: [(-73 52 47 -45) -73]
Test Case: 544 | Input/Output: [(38 -96 14 8) -96]
Test Case: 545 | Input/Output: [(92 0 88 24) 0]
Test Case: 546 | Input/Output: [(-98 -29 57 94) -98]
Test Case: 547 | Input/Output: [(22 45 -86 62) -86]
Test Case: 548 | Input/Output: [(-87 33 42 -100) -100]
Test Case: 549 | Input/Output: [(82 14 53 -48) -48]
Test Case: 550 | Input/Output: [(-88 -10 -94 -33) -94]
Test Case: 551 | Input/Output: [(16 2 -57 -22) -57]
Test Case: 552 | Input/Output: [(-98 96 1 -85) -98]
Test Case: 553 | Input/Output: [(14 5 -86 11) -86]
Test Case: 554 | Input/Output: [(-8 20 -54 75) -54]
Test Case: 555 | Input/Output: [(38 -34 17 -67) -67]
Test Case: 556 | Input/Output: [(-85 -30 39 -52) -85]
Test Case: 557 | Input/Output: [(-81 -14 -56 62) -81]
Test Case: 558 | Input/Output: [(42 83 55 51) 42]
Test Case: 559 | Input/Output: [(73 86 63 25) 25]
Test Case: 560 | Input/Output: [(-24 -78 -25 -9) -78]
Test Case: 561 | Input/Output: [(76 -87 -6 91) -87]
Test Case: 562 | Input/Output: [(-98 -73 -94 52) -98]
Test Case: 563 | Input/Output: [(-19 32 -11 -55) -55]
Test Case: 564 | Input/Output: [(13 10 74 97) 10]
Test Case: 565 | Input/Output: [(60 9 -9 -15) -15]
Test Case: 566 | Input/Output: [(-12 -59 93 -43) -59]
Test Case: 567 | Input/Output: [(94 16 23 -33) -33]
Test Case: 568 | Input/Output: [(-58 -78 -47 15) -78]
Test Case: 569 | Input/Output: [(97 85 -73 63) -73]
Test Case: 570 | Input/Output: [(71 -19 -25 92) -25]
Test Case: 571 | Input/Output: [(62 -94 45 -26) -94]
Test Case: 572 | Input/Output: [(-51 -63 15 -25) -63]
Test Case: 573 | Input/Output: [(25 7 61 76) 7]
Test Case: 574 | Input/Output: [(-17 -94 27 89) -94]
Test Case: 575 | Input/Output: [(-79 -22 5 69) -79]
Test Case: 576 | Input/Output: [(83 -72 -24 -69) -72]
Test Case: 577 | Input/Output: [(39 37 38 -66) -66]
Test Case: 578 | Input/Output: [(57 75 -35 61) -35]
Test Case: 579 | Input/Output: [(36 -22 -38 -73) -73]
Test Case: 580 | Input/Output: [(74 -87 -66 52) -87]
Test Case: 581 | Input/Output: [(-74 -94 -75 -99) -99]
Test Case: 582 | Input/Output: [(-87 6 65 -9) -87]
Test Case: 583 | Input/Output: [(-15 93 -51 -72) -72]
Test Case: 584 | Input/Output: [(75 -93 67 -67) -93]
Test Case: 585 | Input/Output: [(38 13 -22 -63) -63]
Test Case: 586 | Input/Output: [(-19 -66 -35 37) -66]
Test Case: 587 | Input/Output: [(5 48 -84 96) -84]
Test Case: 588 | Input/Output: [(40 -84 87 -76) -84]
Test Case: 589 | Input/Output: [(4 79 -25 -62) -62]
Test Case: 590 | Input/Output: [(-11 36 67 -33) -33]
Test Case: 591 | Input/Output: [(94 -7 72 -61) -61]
Test Case: 592 | Input/Output: [(69 84 2 96) 2]
Test Case: 593 | Input/Output: [(9 -63 -79 -30) -79]
Test Case: 594 | Input/Output: [(-68 -34 -80 41) -80]
Test Case: 595 | Input/Output: [(28 -3 -43 55) -43]
Test Case: 596 | Input/Output: [(-50 93 -42 93) -50]
Test Case: 597 | Input/Output: [(20 65 -29 90) -29]
Test Case: 598 | Input/Output: [(-70 -45 -57 51) -70]
Test Case: 599 | Input/Output: [(71 -31 -67 -80) -80]
Test Case: 600 | Input/Output: [(47 -99 -77 69) -99]
Test Case: 601 | Input/Output: [(-47 -55 -13 -52) -55]
Test Case: 602 | Input/Output: [(28 56 37 76) 28]
Test Case: 603 | Input/Output: [(76 34 43 43) 34]
Test Case: 604 | Input/Output: [(-56 -42 19 6) -56]
Test Case: 605 | Input/Output: [(0 33 -5 -53) -53]
Test Case: 606 | Input/Output: [(-30 -27 9 62) -30]
Test Case: 607 | Input/Output: [(-51 -69 -91 64) -91]
Test Case: 608 | Input/Output: [(27 -62 16 -68) -68]
Test Case: 609 | Input/Output: [(-64 8 -30 69) -64]
Test Case: 610 | Input/Output: [(80 -97 -22 42) -97]
Test Case: 611 | Input/Output: [(-92 44 -83 -8) -92]
Test Case: 612 | Input/Output: [(-27 -42 -10 72) -42]
Test Case: 613 | Input/Output: [(-6 -78 -94 14) -94]
Test Case: 614 | Input/Output: [(-60 10 -7 7) -60]
Test Case: 615 | Input/Output: [(-66 -5 -93 -70) -93]
Test Case: 616 | Input/Output: [(57 32 -28 -63) -63]
Test Case: 617 | Input/Output: [(81 -38 -72 -15) -72]
Test Case: 618 | Input/Output: [(-35 -95 -43 28) -95]
Test Case: 619 | Input/Output: [(-30 85 -78 -91) -91]
Test Case: 620 | Input/Output: [(82 -53 -5 82) -53]
Test Case: 621 | Input/Output: [(25 -79 -62 -82) -82]
Test Case: 622 | Input/Output: [(69 -15 61 -46) -46]
Test Case: 623 | Input/Output: [(87 75 -17 -33) -33]
Test Case: 624 | Input/Output: [(-99 63 4 38) -99]
Test Case: 625 | Input/Output: [(-81 74 -19 19) -81]
Test Case: 626 | Input/Output: [(35 -14 -48 -30) -48]
Test Case: 627 | Input/Output: [(-67 -4 -35 -64) -67]
Test Case: 628 | Input/Output: [(19 -17 -8 42) -17]
Test Case: 629 | Input/Output: [(77 -1 42 -43) -43]
Test Case: 630 | Input/Output: [(5 7 24 98) 5]
Test Case: 631 | Input/Output: [(-15 -19 25 58) -19]
Test Case: 632 | Input/Output: [(-27 -36 4 99) -36]
Test Case: 633 | Input/Output: [(63 -17 47 -23) -23]
Test Case: 634 | Input/Output: [(15 -87 61 -80) -87]
Test Case: 635 | Input/Output: [(-81 -60 -76 34) -81]
Test Case: 636 | Input/Output: [(70 84 61 -37) -37]
Test Case: 637 | Input/Output: [(-71 -38 52 -8) -71]
Test Case: 638 | Input/Output: [(-35 -11 -38 -86) -86]
Test Case: 639 | Input/Output: [(-80 -78 73 49) -80]
Test Case: 640 | Input/Output: [(-29 30 -69 86) -69]
Test Case: 641 | Input/Output: [(89 -76 -14 -8) -76]
Test Case: 642 | Input/Output: [(7 7 -29 39) -29]
Test Case: 643 | Input/Output: [(-38 -65 -36 -24) -65]
Test Case: 644 | Input/Output: [(-11 33 -36 11) -36]
Test Case: 645 | Input/Output: [(-84 69 27 73) -84]
Test Case: 646 | Input/Output: [(67 -39 -75 75) -75]
Test Case: 647 | Input/Output: [(41 -42 92 53) -42]
Test Case: 648 | Input/Output: [(46 -96 -37 -87) -96]
Test Case: 649 | Input/Output: [(45 22 28 -27) -27]
Test Case: 650 | Input/Output: [(-78 18 7 -31) -78]
Test Case: 651 | Input/Output: [(-22 99 4 -70) -70]
Test Case: 652 | Input/Output: [(46 44 47 50) 44]
Test Case: 653 | Input/Output: [(41 42 48 -30) -30]
Test Case: 654 | Input/Output: [(-18 66 -3 -94) -94]
Test Case: 655 | Input/Output: [(99 -52 -38 4) -52]
Test Case: 656 | Input/Output: [(-90 -51 4 -86) -90]
Test Case: 657 | Input/Output: [(95 33 90 -67) -67]
Test Case: 658 | Input/Output: [(100 31 41 82) 31]
Test Case: 659 | Input/Output: [(-27 76 16 8) -27]
Test Case: 660 | Input/Output: [(71 69 -6 44) -6]
Test Case: 661 | Input/Output: [(-73 -59 -76 2) -76]
Test Case: 662 | Input/Output: [(84 26 75 91) 26]
Test Case: 663 | Input/Output: [(-74 -46 81 -83) -83]
Test Case: 664 | Input/Output: [(83 46 -83 79) -83]
Test Case: 665 | Input/Output: [(-94 50 47 -73) -94]
Test Case: 666 | Input/Output: [(-52 -75 -45 -61) -75]
Test Case: 667 | Input/Output: [(33 46 -44 57) -44]
Test Case: 668 | Input/Output: [(80 47 -4 94) -4]
Test Case: 669 | Input/Output: [(-52 -44 -77 -24) -77]
Test Case: 670 | Input/Output: [(44 81 67 4) 4]
Test Case: 671 | Input/Output: [(25 -31 13 -71) -71]
Test Case: 672 | Input/Output: [(-68 -95 -90 -28) -95]
Test Case: 673 | Input/Output: [(-78 45 67 86) -78]
Test Case: 674 | Input/Output: [(-63 -28 24 98) -63]
Test Case: 675 | Input/Output: [(-47 -62 -87 -64) -87]
Test Case: 676 | Input/Output: [(20 -4 58 -58) -58]
Test Case: 677 | Input/Output: [(-46 19 96 89) -46]
Test Case: 678 | Input/Output: [(49 -95 -60 -64) -95]
Test Case: 679 | Input/Output: [(7 -62 83 -61) -62]
Test Case: 680 | Input/Output: [(21 15 26 92) 15]
Test Case: 681 | Input/Output: [(-16 58 88 -41) -41]
Test Case: 682 | Input/Output: [(79 81 60 75) 60]
Test Case: 683 | Input/Output: [(9 43 -31 -95) -95]
Test Case: 684 | Input/Output: [(-100 -17 -93 47) -100]
Test Case: 685 | Input/Output: [(-94 -74 -44 66) -94]
Test Case: 686 | Input/Output: [(67 -2 35 -54) -54]
Test Case: 687 | Input/Output: [(-33 -25 60 69) -33]
Test Case: 688 | Input/Output: [(42 -11 63 68) -11]
Test Case: 689 | Input/Output: [(-70 33 30 -23) -70]
Test Case: 690 | Input/Output: [(59 -44 -30 66) -44]
Test Case: 691 | Input/Output: [(36 -44 34 28) -44]
Test Case: 692 | Input/Output: [(-72 -95 -39 -83) -95]
Test Case: 693 | Input/Output: [(-55 2 38 87) -55]
Test Case: 694 | Input/Output: [(-72 21 73 -24) -72]
Test Case: 695 | Input/Output: [(-80 -33 -7 5) -80]
Test Case: 696 | Input/Output: [(18 -95 -71 62) -95]
Test Case: 697 | Input/Output: [(-92 38 58 26) -92]
Test Case: 698 | Input/Output: [(-14 -82 -99 -12) -99]
Test Case: 699 | Input/Output: [(-73 19 -82 -79) -82]
Test Case: 700 | Input/Output: [(72 19 10 -68) -68]
Test Case: 701 | Input/Output: [(63 67 -59 -60) -60]
Test Case: 702 | Input/Output: [(54 -79 -22 -13) -79]
Test Case: 703 | Input/Output: [(-98 -56 -95 -20) -98]
Test Case: 704 | Input/Output: [(-39 -95 -49 41) -95]
Test Case: 705 | Input/Output: [(-99 58 100 -90) -99]
Test Case: 706 | Input/Output: [(-55 50 -39 -93) -93]
Test Case: 707 | Input/Output: [(-94 3 -71 66) -94]
Test Case: 708 | Input/Output: [(-79 37 -85 68) -85]
Test Case: 709 | Input/Output: [(47 -46 68 -13) -46]
Test Case: 710 | Input/Output: [(13 -87 73 3) -87]
Test Case: 711 | Input/Output: [(-20 69 -99 -31) -99]
Test Case: 712 | Input/Output: [(-16 2 28 -81) -81]
Test Case: 713 | Input/Output: [(36 -16 -5 47) -16]
Test Case: 714 | Input/Output: [(-75 90 39 -51) -75]
Test Case: 715 | Input/Output: [(95 31 94 -68) -68]
Test Case: 716 | Input/Output: [(-94 32 -97 -43) -97]
Test Case: 717 | Input/Output: [(-73 -87 62 -76) -87]
Test Case: 718 | Input/Output: [(14 -71 50 76) -71]
Test Case: 719 | Input/Output: [(25 61 -74 -61) -74]
Test Case: 720 | Input/Output: [(-81 27 76 73) -81]
Test Case: 721 | Input/Output: [(-41 33 90 -47) -47]
Test Case: 722 | Input/Output: [(50 74 52 37) 37]
Test Case: 723 | Input/Output: [(14 47 -53 1) -53]
Test Case: 724 | Input/Output: [(-21 -98 46 27) -98]
Test Case: 725 | Input/Output: [(15 9 -31 6) -31]
Test Case: 726 | Input/Output: [(-64 -51 81 60) -64]
Test Case: 727 | Input/Output: [(-16 4 14 100) -16]
Test Case: 728 | Input/Output: [(-9 -68 70 66) -68]
Test Case: 729 | Input/Output: [(41 64 -63 -34) -63]
Test Case: 730 | Input/Output: [(14 -55 53 87) -55]
Test Case: 731 | Input/Output: [(-40 -66 56 -45) -66]
Test Case: 732 | Input/Output: [(9 -60 -5 -46) -60]
Test Case: 733 | Input/Output: [(41 -62 -99 3) -99]
Test Case: 734 | Input/Output: [(32 71 64 73) 32]
Test Case: 735 | Input/Output: [(-47 -13 36 58) -47]
Test Case: 736 | Input/Output: [(63 84 14 87) 14]
Test Case: 737 | Input/Output: [(-33 -68 28 53) -68]
Test Case: 738 | Input/Output: [(-18 84 76 57) -18]
Test Case: 739 | Input/Output: [(-15 -61 60 -39) -61]
Test Case: 740 | Input/Output: [(-49 -60 77 -25) -60]
Test Case: 741 | Input/Output: [(60 -25 -4 16) -25]
Test Case: 742 | Input/Output: [(96 -87 -68 75) -87]
Test Case: 743 | Input/Output: [(-73 41 75 1) -73]
Test Case: 744 | Input/Output: [(-12 10 -34 9) -34]
Test Case: 745 | Input/Output: [(-4 48 -6 51) -6]
Test Case: 746 | Input/Output: [(-98 -14 -4 22) -98]
Test Case: 747 | Input/Output: [(15 -56 67 -24) -56]
Test Case: 748 | Input/Output: [(-45 -27 -18 20) -45]
Test Case: 749 | Input/Output: [(9 5 1 -12) -12]
Test Case: 750 | Input/Output: [(-9 40 99 59) -9]
Test Case: 751 | Input/Output: [(-64 8 -91 16) -91]
Test Case: 752 | Input/Output: [(55 23 -74 -74) -74]
Test Case: 753 | Input/Output: [(-3 -84 -77 -82) -84]
Test Case: 754 | Input/Output: [(96 27 21 -27) -27]
Test Case: 755 | Input/Output: [(74 4 52 45) 4]
Test Case: 756 | Input/Output: [(-53 -5 -9 -10) -53]
Test Case: 757 | Input/Output: [(-100 -2 81 -21) -100]
Test Case: 758 | Input/Output: [(31 -44 7 -3) -44]
Test Case: 759 | Input/Output: [(-79 76 28 -8) -79]
Test Case: 760 | Input/Output: [(-51 -93 -75 71) -93]
Test Case: 761 | Input/Output: [(-28 -21 89 54) -28]
Test Case: 762 | Input/Output: [(-49 7 19 -24) -49]
Test Case: 763 | Input/Output: [(-77 6 80 73) -77]
Test Case: 764 | Input/Output: [(60 96 -34 -72) -72]
Test Case: 765 | Input/Output: [(-84 -19 -87 54) -87]
Test Case: 766 | Input/Output: [(-58 47 44 -71) -71]
Test Case: 767 | Input/Output: [(73 47 59 -72) -72]
Test Case: 768 | Input/Output: [(1 -79 50 -27) -79]
Test Case: 769 | Input/Output: [(66 76 42 64) 42]
Test Case: 770 | Input/Output: [(-77 -14 -5 41) -77]
Test Case: 771 | Input/Output: [(76 -94 51 26) -94]
Test Case: 772 | Input/Output: [(-95 49 -28 -14) -95]
Test Case: 773 | Input/Output: [(3 49 8 -5) -5]
Test Case: 774 | Input/Output: [(13 66 -88 -63) -88]
Test Case: 775 | Input/Output: [(80 87 -59 100) -59]
Test Case: 776 | Input/Output: [(-81 -68 -21 -72) -81]
Test Case: 777 | Input/Output: [(86 6 -27 2) -27]
Test Case: 778 | Input/Output: [(2 -74 43 -20) -74]
Test Case: 779 | Input/Output: [(46 -2 74 -81) -81]
Test Case: 780 | Input/Output: [(-92 7 40 22) -92]
Test Case: 781 | Input/Output: [(8 82 98 69) 8]
Test Case: 782 | Input/Output: [(-42 -97 58 24) -97]
Test Case: 783 | Input/Output: [(-66 -41 55 75) -66]
Test Case: 784 | Input/Output: [(47 -52 59 87) -52]
Test Case: 785 | Input/Output: [(-72 83 39 29) -72]
Test Case: 786 | Input/Output: [(-42 -76 85 -99) -99]
Test Case: 787 | Input/Output: [(77 -69 65 -89) -89]
Test Case: 788 | Input/Output: [(-15 95 20 95) -15]
Test Case: 789 | Input/Output: [(0 -52 -58 -57) -58]
Test Case: 790 | Input/Output: [(-62 50 -15 39) -62]
Test Case: 791 | Input/Output: [(90 58 79 -56) -56]
Test Case: 792 | Input/Output: [(-49 -52 23 46) -52]
Test Case: 793 | Input/Output: [(-55 -8 75 -20) -55]
Test Case: 794 | Input/Output: [(-39 -17 -36 -56) -56]
Test Case: 795 | Input/Output: [(38 80 5 -51) -51]
Test Case: 796 | Input/Output: [(-92 -41 46 -70) -92]
Test Case: 797 | Input/Output: [(87 5 -73 -40) -73]
Test Case: 798 | Input/Output: [(99 -82 3 -38) -82]
Test Case: 799 | Input/Output: [(77 88 82 42) 42]
Test Case: 800 | Input/Output: [(-97 46 56 -100) -100]
Test Case: 801 | Input/Output: [(57 44 -98 -45) -98]
Test Case: 802 | Input/Output: [(1 -81 30 -55) -81]
Test Case: 803 | Input/Output: [(-58 31 89 64) -58]
Test Case: 804 | Input/Output: [(-11 -6 -80 6) -80]
Test Case: 805 | Input/Output: [(50 -9 96 74) -9]
Test Case: 806 | Input/Output: [(30 -19 -58 -6) -58]
Test Case: 807 | Input/Output: [(38 31 -45 -61) -61]
Test Case: 808 | Input/Output: [(-34 -41 -60 -23) -60]
Test Case: 809 | Input/Output: [(68 100 -72 -81) -81]
Test Case: 810 | Input/Output: [(20 -35 -77 -38) -77]
Test Case: 811 | Input/Output: [(-24 19 -72 38) -72]
Test Case: 812 | Input/Output: [(-34 -11 21 23) -34]
Test Case: 813 | Input/Output: [(35 22 96 -86) -86]
Test Case: 814 | Input/Output: [(-30 -33 -77 -14) -77]
Test Case: 815 | Input/Output: [(-43 -8 -98 -27) -98]
Test Case: 816 | Input/Output: [(37 23 86 94) 23]
Test Case: 817 | Input/Output: [(-5 80 67 81) -5]
Test Case: 818 | Input/Output: [(84 94 -14 40) -14]
Test Case: 819 | Input/Output: [(-38 -9 16 -74) -74]
Test Case: 820 | Input/Output: [(85 -61 -30 -8) -61]
Test Case: 821 | Input/Output: [(32 41 -54 47) -54]
Test Case: 822 | Input/Output: [(-76 -46 -73 -55) -76]
Test Case: 823 | Input/Output: [(32 -37 -4 28) -37]
Test Case: 824 | Input/Output: [(45 98 60 -23) -23]
Test Case: 825 | Input/Output: [(-6 -17 -100 42) -100]
Test Case: 826 | Input/Output: [(-38 -99 -72 -81) -99]
Test Case: 827 | Input/Output: [(1 -14 -38 -12) -38]
Test Case: 828 | Input/Output: [(-64 20 -45 88) -64]
Test Case: 829 | Input/Output: [(90 -32 -15 78) -32]
Test Case: 830 | Input/Output: [(-94 40 -95 77) -95]
Test Case: 831 | Input/Output: [(-17 14 -41 66) -41]
Test Case: 832 | Input/Output: [(56 54 -32 92) -32]
Test Case: 833 | Input/Output: [(57 26 16 56) 16]
Test Case: 834 | Input/Output: [(82 10 -65 -32) -65]
Test Case: 835 | Input/Output: [(33 12 33 -94) -94]
Test Case: 836 | Input/Output: [(-95 40 99 -10) -95]
Test Case: 837 | Input/Output: [(64 43 -65 -97) -97]
Test Case: 838 | Input/Output: [(-22 15 77 39) -22]
Test Case: 839 | Input/Output: [(94 68 39 -58) -58]
Test Case: 840 | Input/Output: [(56 40 68 63) 40]
Test Case: 841 | Input/Output: [(90 97 -62 30) -62]
Test Case: 842 | Input/Output: [(89 13 -95 -37) -95]
Test Case: 843 | Input/Output: [(-81 68 -95 -9) -95]
Test Case: 844 | Input/Output: [(-7 -50 76 45) -50]
Test Case: 845 | Input/Output: [(27 -74 62 -3) -74]
Test Case: 846 | Input/Output: [(74 -99 81 100) -99]
Test Case: 847 | Input/Output: [(-99 -99 12 -5) -99]
Test Case: 848 | Input/Output: [(94 -18 -52 69) -52]
Test Case: 849 | Input/Output: [(-80 40 8 21) -80]
Test Case: 850 | Input/Output: [(-94 11 9 3) -94]
Test Case: 851 | Input/Output: [(54 62 24 44) 24]
Test Case: 852 | Input/Output: [(-7 -32 95 88) -32]
Test Case: 853 | Input/Output: [(-100 -32 -11 34) -100]
Test Case: 854 | Input/Output: [(51 12 -66 90) -66]
Test Case: 855 | Input/Output: [(-67 29 -8 -3) -67]
Test Case: 856 | Input/Output: [(-89 88 0 -53) -89]
Test Case: 857 | Input/Output: [(-45 8 65 -18) -45]
Test Case: 858 | Input/Output: [(-85 -51 60 49) -85]
Test Case: 859 | Input/Output: [(75 -34 24 94) -34]
Test Case: 860 | Input/Output: [(84 -2 6 -78) -78]
Test Case: 861 | Input/Output: [(57 66 24 -21) -21]
Test Case: 862 | Input/Output: [(41 -90 21 50) -90]
Test Case: 863 | Input/Output: [(90 -42 -51 -64) -64]
Test Case: 864 | Input/Output: [(76 -75 36 -41) -75]
Test Case: 865 | Input/Output: [(-51 -83 -12 13) -83]
Test Case: 866 | Input/Output: [(75 -62 46 56) -62]
Test Case: 867 | Input/Output: [(56 -53 -23 23) -53]
Test Case: 868 | Input/Output: [(87 -64 85 -35) -64]
Test Case: 869 | Input/Output: [(-80 18 -73 45) -80]
Test Case: 870 | Input/Output: [(89 -3 -4 8) -4]
Test Case: 871 | Input/Output: [(-65 -62 25 73) -65]
Test Case: 872 | Input/Output: [(6 -86 39 24) -86]
Test Case: 873 | Input/Output: [(5 92 -20 68) -20]
Test Case: 874 | Input/Output: [(32 97 12 -82) -82]
Test Case: 875 | Input/Output: [(-83 96 -99 87) -99]
Test Case: 876 | Input/Output: [(69 19 -86 8) -86]
Test Case: 877 | Input/Output: [(19 24 22 -20) -20]
Test Case: 878 | Input/Output: [(-31 -65 83 -50) -65]
Test Case: 879 | Input/Output: [(57 51 81 96) 51]
Test Case: 880 | Input/Output: [(53 -85 97 -1) -85]
Test Case: 881 | Input/Output: [(54 6 85 -69) -69]
Test Case: 882 | Input/Output: [(86 -42 42 -65) -65]
Test Case: 883 | Input/Output: [(74 40 91 67) 40]
Test Case: 884 | Input/Output: [(-76 -17 -20 -3) -76]
Test Case: 885 | Input/Output: [(66 76 62 -31) -31]
Test Case: 886 | Input/Output: [(-45 -16 58 56) -45]
Test Case: 887 | Input/Output: [(42 -84 66 44) -84]
Test Case: 888 | Input/Output: [(-68 -91 100 87) -91]
Test Case: 889 | Input/Output: [(-92 -72 -35 -38) -92]
Test Case: 890 | Input/Output: [(-67 -28 -82 -9) -82]
Test Case: 891 | Input/Output: [(1 89 -97 -47) -97]
Test Case: 892 | Input/Output: [(100 -2 72 -55) -55]
Test Case: 893 | Input/Output: [(88 -9 92 -90) -90]
Test Case: 894 | Input/Output: [(-64 2 17 32) -64]
Test Case: 895 | Input/Output: [(-30 43 -88 87) -88]
Test Case: 896 | Input/Output: [(31 -41 -25 61) -41]
Test Case: 897 | Input/Output: [(-72 8 -78 8) -78]
Test Case: 898 | Input/Output: [(-97 -54 -7 43) -97]
Test Case: 899 | Input/Output: [(73 -21 94 -80) -80]
Test Case: 900 | Input/Output: [(9 31 -100 88) -100]
Test Case: 901 | Input/Output: [(-4 67 33 -94) -94]
Test Case: 902 | Input/Output: [(-18 -62 -55 44) -62]
Test Case: 903 | Input/Output: [(63 -79 45 5) -79]
Test Case: 904 | Input/Output: [(34 -1 -44 91) -44]
Test Case: 905 | Input/Output: [(-74 -63 -60 -1) -74]
Test Case: 906 | Input/Output: [(-42 -57 -28 77) -57]
Test Case: 907 | Input/Output: [(-24 61 93 57) -24]
Test Case: 908 | Input/Output: [(-83 -69 70 30) -83]
Test Case: 909 | Input/Output: [(-83 -24 18 -47) -83]
Test Case: 910 | Input/Output: [(9 40 -86 -35) -86]
Test Case: 911 | Input/Output: [(-21 6 -32 12) -32]
Test Case: 912 | Input/Output: [(8 -54 2 -64) -64]
Test Case: 913 | Input/Output: [(10 -96 -28 -41) -96]
Test Case: 914 | Input/Output: [(-80 -79 61 -4) -80]
Test Case: 915 | Input/Output: [(-50 27 -87 48) -87]
Test Case: 916 | Input/Output: [(-22 5 -77 90) -77]
Test Case: 917 | Input/Output: [(-49 -44 -12 -58) -58]
Test Case: 918 | Input/Output: [(52 45 10 74) 10]
Test Case: 919 | Input/Output: [(87 -66 12 36) -66]
Test Case: 920 | Input/Output: [(-16 -44 -20 -22) -44]
Test Case: 921 | Input/Output: [(-11 -15 -65 56) -65]
Test Case: 922 | Input/Output: [(-77 -75 -17 18) -77]
Test Case: 923 | Input/Output: [(-46 4 50 41) -46]
Test Case: 924 | Input/Output: [(-54 -18 -76 50) -76]
Test Case: 925 | Input/Output: [(72 -63 -13 35) -63]
Test Case: 926 | Input/Output: [(-5 -24 -6 51) -24]
Test Case: 927 | Input/Output: [(54 -99 -53 77) -99]
Test Case: 928 | Input/Output: [(45 -62 35 47) -62]
Test Case: 929 | Input/Output: [(48 -59 1 -78) -78]
Test Case: 930 | Input/Output: [(41 30 -48 -63) -63]
Test Case: 931 | Input/Output: [(-71 -17 21 -27) -71]
Test Case: 932 | Input/Output: [(0 -83 -38 98) -83]
Test Case: 933 | Input/Output: [(-71 -16 -96 -73) -96]
Test Case: 934 | Input/Output: [(94 46 -71 52) -71]
Test Case: 935 | Input/Output: [(71 -49 61 -46) -49]
Test Case: 936 | Input/Output: [(75 -92 32 28) -92]
Test Case: 937 | Input/Output: [(79 -50 91 12) -50]
Test Case: 938 | Input/Output: [(45 35 -64 -17) -64]
Test Case: 939 | Input/Output: [(52 -67 -77 68) -77]
Test Case: 940 | Input/Output: [(-16 1 -22 -44) -44]
Test Case: 941 | Input/Output: [(32 65 94 -72) -72]
Test Case: 942 | Input/Output: [(22 77 -50 -32) -50]
Test Case: 943 | Input/Output: [(18 -50 -78 88) -78]
Test Case: 944 | Input/Output: [(-15 73 35 53) -15]
Test Case: 945 | Input/Output: [(-16 -98 -22 -92) -98]
Test Case: 946 | Input/Output: [(55 -64 90 47) -64]
Test Case: 947 | Input/Output: [(-14 -86 85 -9) -86]
Test Case: 948 | Input/Output: [(-18 -61 92 -32) -61]
Test Case: 949 | Input/Output: [(20 -5 -16 27) -16]
Test Case: 950 | Input/Output: [(-66 86 83 -52) -66]
Test Case: 951 | Input/Output: [(80 64 -57 32) -57]
Test Case: 952 | Input/Output: [(-95 -5 31 20) -95]
Test Case: 953 | Input/Output: [(82 -45 83 -79) -79]
Test Case: 954 | Input/Output: [(91 -23 79 -98) -98]
Test Case: 955 | Input/Output: [(92 -21 -9 29) -21]
Test Case: 956 | Input/Output: [(-1 24 85 -91) -91]
Test Case: 957 | Input/Output: [(-29 -27 96 56) -29]
Test Case: 958 | Input/Output: [(-43 47 12 -48) -48]
Test Case: 959 | Input/Output: [(46 76 12 78) 12]
Test Case: 960 | Input/Output: [(-51 48 25 -64) -64]
Test Case: 961 | Input/Output: [(75 -67 -71 -18) -71]
Test Case: 962 | Input/Output: [(44 -79 -100 -15) -100]
Test Case: 963 | Input/Output: [(-96 -27 74 82) -96]
Test Case: 964 | Input/Output: [(-21 98 -8 -18) -21]
Test Case: 965 | Input/Output: [(-68 44 -73 -99) -99]
Test Case: 966 | Input/Output: [(-7 90 -50 -76) -76]
Test Case: 967 | Input/Output: [(-54 -52 66 50) -54]
Test Case: 968 | Input/Output: [(60 -96 -93 -17) -96]
Test Case: 969 | Input/Output: [(38 -97 -21 -29) -97]
Test Case: 970 | Input/Output: [(99 -28 -10 58) -28]
Test Case: 971 | Input/Output: [(60 86 -21 78) -21]
Test Case: 972 | Input/Output: [(64 3 -43 44) -43]
Test Case: 973 | Input/Output: [(-33 48 -75 5) -75]
Test Case: 974 | Input/Output: [(22 -42 -80 30) -80]
Test Case: 975 | Input/Output: [(-47 -58 -58 -58) -58]
Test Case: 976 | Input/Output: [(26 -13 -21 -38) -38]
Test Case: 977 | Input/Output: [(64 -24 88 61) -24]
Test Case: 978 | Input/Output: [(80 59 -45 -30) -45]
Test Case: 979 | Input/Output: [(66 -36 84 -51) -51]
Test Case: 980 | Input/Output: [(-61 13 91 52) -61]
Test Case: 981 | Input/Output: [(68 -91 83 -21) -91]
Test Case: 982 | Input/Output: [(-1 -91 -14 -17) -91]
Test Case: 983 | Input/Output: [(-94 52 -37 -29) -94]
Test Case: 984 | Input/Output: [(45 -65 56 -1) -65]
Test Case: 985 | Input/Output: [(-34 79 -30 -98) -98]
Test Case: 986 | Input/Output: [(39 -79 86 45) -79]
Test Case: 987 | Input/Output: [(15 2 -17 96) -17]
Test Case: 988 | Input/Output: [(44 86 33 83) 33]
Test Case: 989 | Input/Output: [(-79 74 -68 -5) -79]
Test Case: 990 | Input/Output: [(93 100 -12 10) -12]
Test Case: 991 | Input/Output: [(24 30 24 -69) -69]
Test Case: 992 | Input/Output: [(99 -50 -14 -29) -50]
Test Case: 993 | Input/Output: [(17 -95 77 54) -95]
Test Case: 994 | Input/Output: [(-40 59 -6 -84) -84]
Test Case: 995 | Input/Output: [(-8 -48 3 15) -48]
Test Case: 996 | Input/Output: [(-28 55 38 82) -28]
Test Case: 997 | Input/Output: [(67 -59 19 27) -59]
Test Case: 998 | Input/Output: [(-61 88 99 -65) -65]
Test Case: 999 | Input/Output: [(78 -48 57 68) -48]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -7 -81 24 -52 -102 -36 88 90 -95 64 26 -91 40 -105 -17 127
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[92 92 92 77] 77] [[62 62 62 -11] -11] [[29 86 29 29] 29] [[-95 -95 -77 -95] -95] [[-51 -51 51 -51] -51] [[43 -2 -2 -2] -2] [[66 -78 66 66] -78] [[14 -57 -57 -57] -57] [[-86 -63 -86 -86] -86] [[-31 -31 2 -31] -31] [(84 84 84 84) 84] [(88 88 88 88) 88] [(32 32 32 32) 32] [(-62 -62 -62 -62) -62] [(100 100 100 100) 100] [(10 5 84 75) 5] [(72 2 90 14) 2] [(10 76 92 23) 10] [(33 95 48 23) 23] [(38 4 16 59) 4] [(57 24 37 68) 24] [(21 70 62 49) 21] [(43 11 91 23) 11] [(28 22 100 30) 22] [(72 4 26 73) 4] [(18 32 24 3) 3] [(50 64 28 98) 28] [(13 38 32 63) 13] [(74 55 35 58) 35] [(27 32 34 84) 27] [(90 26 0 23) 0] [(35 42 33 7) 7] [(3 14 54 91) 3] [(83 68 12 44) 12] [(87 20 89 44) 20] [(-7 75 -76 -3) -76] [(-7 18 -39 -28) -39] [(12 24 -51 22) -51] [(24 52 40 80) 24] [(-65 -2 65 -43) -65] [(82 21 62 -47) -47] [(31 69 13 -58) -58] [(-94 28 58 18) -94] [(80 -7 -68 -93) -93] [(49 -95 83 -88) -95] [(56 76 -8 -39) -39] [(-51 76 -61 60) -61] [(-48 75 5 -90) -90] [(2 84 73 -68) -68] [(87 39 -16 63) -16] [(6 92 -3 28) -3] [(-75 -81 -17 64) -81] [(-6 31 82 -13) -13] [(-41 -32 0 24) -41] [(-38 -77 28 -17) -77] [(56 -6 6 -79) -79] [(88 -71 -83 80) -83] [(-5 -23 -49 100) -49] [(-95 -52 -51 13) -95] [(-60 42 43 -35) -60] [(18 11 28 -84) -84] [(26 48 -54 28) -54] [(17 88 41 -2) -2] [(25 -44 71 -94) -94] [(-7 -91 71 25) -91] [(76 34 33 -10) -10] [(66 -25 43 -82) -82] [(52 -20 -86 72) -86] [(75 12 -46 3) -46] [(-51 -74 -53 42) -74] [(65 -15 -46 -95) -95] [(-91 1 91 -35) -91] [(-4 -94 -71 18) -94] [(-11 -72 82 57) -72] [(-54 -86 -21 85) -86] [(47 0 -60 -8) -60] [(-59 -55 -94 38) -94] [(-80 -21 -86 -10) -86] [(-14 88 81 -59) -59] [(32 45 48 -74) -74] [(-85 -25 -17 92) -85] [(-22 42 -66 -31) -66] [(20 -32 3 -28) -32] [(-57 -39 14 -84) -84] [(3 97 42 41) 3] [(-45 100 23 50) -45] [(-2 55 -31 -20) -31] [(68 7 -55 -24) -55] [(-82 72 -64 55) -82] [(-60 14 7 -40) -60] [(87 -7 26 11) -7] [(-61 1 -72 58) -72] [(29 75 -18 57) -18] [(19 -14 -77 65) -77] [(67 82 16 -40) -40])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 77                  | Program output: 77                 
Correct output: -11                 | Program output: -11                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -51                 | Program output: -51                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: 66                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -31                 | Program output: -31                
Correct output: 84                  | Program output: 84                 
Correct output: 88                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: -62                 | Program output: -62                
Correct output: 100                 | Program output: 100                
Correct output: 5                   | Program output: 75                 
Correct output: 2                   | Program output: 14                 
Correct output: 10                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 59                 
Correct output: 24                  | Program output: 68                 
Correct output: 21                  | Program output: 49                 
Correct output: 11                  | Program output: 23                 
Correct output: 22                  | Program output: 30                 
Correct output: 4                   | Program output: 73                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 98                 
Correct output: 13                  | Program output: 63                 
Correct output: 35                  | Program output: 58                 
Correct output: 27                  | Program output: 84                 
Correct output: 0                   | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 91                 
Correct output: 12                  | Program output: 44                 
Correct output: 20                  | Program output: 44                 
Correct output: -76                 | Program output: -3                 
Correct output: -39                 | Program output: -28                
Correct output: -51                 | Program output: 22                 
Correct output: 24                  | Program output: 80                 
Correct output: -65                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 18                 
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 63                 
Correct output: -3                  | Program output: 28                 
Correct output: -81                 | Program output: 64                 
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: 24                 
Correct output: -77                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: 80                 
Correct output: -49                 | Program output: 100                
Correct output: -95                 | Program output: 13                 
Correct output: -60                 | Program output: -35                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 28                 
Correct output: -2                  | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 72                 
Correct output: -46                 | Program output: 3                  
Correct output: -74                 | Program output: 42                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -35                
Correct output: -94                 | Program output: 18                 
Correct output: -72                 | Program output: 57                 
Correct output: -86                 | Program output: 85                 
Correct output: -60                 | Program output: -8                 
Correct output: -94                 | Program output: 38                 
Correct output: -86                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: 92                 
Correct output: -66                 | Program output: -31                
Correct output: -32                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 41                 
Correct output: -45                 | Program output: 50                 
Correct output: -31                 | Program output: -20                
Correct output: -55                 | Program output: -24                
Correct output: -82                 | Program output: 55                 
Correct output: -60                 | Program output: -40                
Correct output: -7                  | Program output: 11                 
Correct output: -72                 | Program output: 58                 
Correct output: -18                 | Program output: 57                 
Correct output: -77                 | Program output: 65                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Lexicase best program: (in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap boolean_flush print_integer integer_sub integer_lte integer_dec integer_mult integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot)) ())
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Zero cases best program: (in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap boolean_flush print_integer integer_sub integer_lte integer_dec integer_mult integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot)) ())
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 1 1 7 1 6 1 4 1 7)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (4 1 1 7 1 6 1 4 1 7)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Best program: (in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap boolean_flush print_integer integer_sub integer_lte integer_dec integer_mult integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot)) ())
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 75
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.996 0.999 0.999 0.993 0.999 0.994 0.999 0.996 0.999 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.274
Average program size in population (points): 70.651
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 487917
--- Timings ---
Current time: 1559314578201 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.0%
Reproduction:         0.9 seconds, 31.4%
Fitness Testing:      1.8 seconds, 65.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 92                 
Correct output: -11                 | Program output: 62                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -51                 | Program output: -51                
Correct output: -2                  | Program output: 43                 
Correct output: -78                 | Program output: 66                 
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -86                
Correct output: -31                 | Program output: -31                
Correct output: 84                  | Program output: 84                 
Correct output: 88                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: -62                 | Program output: -62                
Correct output: 100                 | Program output: 100                
Correct output: 5                   | Program output: 10                 
Correct output: 2                   | Program output: 72                 
Correct output: 10                  | Program output: 10                 
Correct output: 23                  | Program output: 33                 
Correct output: 4                   | Program output: 38                 
Correct output: 24                  | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 11                  | Program output: 43                 
Correct output: 22                  | Program output: 28                 
Correct output: 4                   | Program output: 72                 
Correct output: 3                   | Program output: 18                 
Correct output: 28                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 74                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 90                 
Correct output: 7                   | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 83                 
Correct output: 20                  | Program output: 87                 
Correct output: -76                 | Program output: -7                 
Correct output: -39                 | Program output: -7                 
Correct output: -51                 | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 82                 
Correct output: -58                 | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 80                 
Correct output: -95                 | Program output: 49                 
Correct output: -39                 | Program output: 56                 
Correct output: -61                 | Program output: -51                
Correct output: -90                 | Program output: -48                
Correct output: -68                 | Program output: 2                  
Correct output: -16                 | Program output: 87                 
Correct output: -3                  | Program output: 6                  
Correct output: -81                 | Program output: -75                
Correct output: -13                 | Program output: -6                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -38                
Correct output: -79                 | Program output: 56                 
Correct output: -83                 | Program output: 88                 
Correct output: -49                 | Program output: -5                 
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: 18                 
Correct output: -54                 | Program output: 26                 
Correct output: -2                  | Program output: 17                 
Correct output: -94                 | Program output: 25                 
Correct output: -91                 | Program output: -7                 
Correct output: -10                 | Program output: 76                 
Correct output: -82                 | Program output: 66                 
Correct output: -86                 | Program output: 52                 
Correct output: -46                 | Program output: 75                 
Correct output: -74                 | Program output: -51                
Correct output: -95                 | Program output: 65                 
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -4                 
Correct output: -72                 | Program output: -11                
Correct output: -86                 | Program output: -54                
Correct output: -60                 | Program output: 47                 
Correct output: -94                 | Program output: -59                
Correct output: -86                 | Program output: -80                
Correct output: -59                 | Program output: -14                
Correct output: -74                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -22                
Correct output: -32                 | Program output: 20                 
Correct output: -84                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: -2                 
Correct output: -55                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -7                  | Program output: 87                 
Correct output: -72                 | Program output: -61                
Correct output: -18                 | Program output: 29                 
Correct output: -77                 | Program output: 19                 
Correct output: -40                 | Program output: 67                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tag_integer_296} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction tag_boolean_715} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 2, :instruction exec_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 2, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank})
Lexicase best program: (tag_integer_296 boolean_swap integer_shove integer_max boolean_frominteger integer_min in1 exec_k_when_autoconstructing (boolean_and) (print_integer boolean_stackdepth) exec_if (boolean_dup exec_yank boolean_empty) (boolean_shove tag_boolean_715) boolean_yankdup boolean_invert_first_then_and boolean_stackdepth exec_if (in4) (exec_dup_items integer_mult boolean_xor in4 integer_swap exec_do*times (boolean_or exec_noop) integer_max exec_flush) integer_flush exec_dup (exec_when (exec_noop)) boolean_pop integer_fromboolean integer_dec exec_while (exec_y_when_autoconstructing (integer_yank)))
Lexicase best errors: [1 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tag_integer_296} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction tag_boolean_715} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 2, :instruction exec_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 2, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank})
Zero cases best program: (tag_integer_296 boolean_swap integer_shove integer_max boolean_frominteger integer_min in1 exec_k_when_autoconstructing (boolean_and) (print_integer boolean_stackdepth) exec_if (boolean_dup exec_yank boolean_empty) (boolean_shove tag_boolean_715) boolean_yankdup boolean_invert_first_then_and boolean_stackdepth exec_if (in4) (exec_dup_items integer_mult boolean_xor in4 integer_swap exec_do*times (boolean_or exec_noop) integer_max exec_flush) integer_flush exec_dup (exec_when (exec_noop)) boolean_pop integer_fromboolean integer_dec exec_while (exec_y_when_autoconstructing (integer_yank)))
Zero cases best errors: [1 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (464 119 3 119 3 464 925 338 119 119)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (464 119 3 119 3 464 925 338 119 119)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_integer_296} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction tag_boolean_715} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank})
Best program: (tag_integer_296 boolean_swap integer_shove integer_max boolean_frominteger integer_min in1 exec_k_when_autoconstructing (boolean_and) (print_integer boolean_stackdepth) exec_if (boolean_dup exec_yank boolean_empty) (boolean_shove tag_boolean_715) boolean_yankdup boolean_invert_first_then_and boolean_stackdepth exec_if (in4) (exec_dup_items integer_mult boolean_xor in4 integer_swap exec_do*times (boolean_or exec_noop) integer_max exec_s_when_autoconstructing () () (integer_flush) exec_dup (boolean_dup_times exec_noop)) boolean_pop integer_fromboolean integer_dec exec_while (exec_y_when_autoconstructing (integer_yank)))
Errors: [1 0 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 56
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.327
Median total errors in population: 7
Error averages by case: (0.536 0.881 0.997 0.881 0.997 0.536 0.075 0.662 0.881 0.881)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.024
Average program size in population (points): 67.385
Average percent parens in population: 0.284
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.526
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1210113
--- Timings ---
Current time: 1559314581331 milliseconds
Total Time:           6.2 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         2.5 seconds, 40.7%
Fitness Testing:      2.8 seconds, 44.4%
Report:               0.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 77                  | Program output: 77                 
Correct output: -11                 | Program output: -11                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -51                 | Program output: -51                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: 66                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -31                 | Program output: -31                
Correct output: 84                  | Program output: 84                 
Correct output: 88                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: -62                 | Program output: -62                
Correct output: 100                 | Program output: 100                
Correct output: 5                   | Program output: 75                 
Correct output: 2                   | Program output: 14                 
Correct output: 10                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 59                 
Correct output: 24                  | Program output: 68                 
Correct output: 21                  | Program output: 49                 
Correct output: 11                  | Program output: 23                 
Correct output: 22                  | Program output: 30                 
Correct output: 4                   | Program output: 73                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 98                 
Correct output: 13                  | Program output: 63                 
Correct output: 35                  | Program output: 58                 
Correct output: 27                  | Program output: 84                 
Correct output: 0                   | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 91                 
Correct output: 12                  | Program output: 44                 
Correct output: 20                  | Program output: 44                 
Correct output: -76                 | Program output: -3                 
Correct output: -39                 | Program output: -28                
Correct output: -51                 | Program output: 22                 
Correct output: 24                  | Program output: 80                 
Correct output: -65                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 18                 
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 63                 
Correct output: -3                  | Program output: 28                 
Correct output: -81                 | Program output: 64                 
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: 24                 
Correct output: -77                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: 80                 
Correct output: -49                 | Program output: 100                
Correct output: -95                 | Program output: 13                 
Correct output: -60                 | Program output: -35                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 28                 
Correct output: -2                  | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 72                 
Correct output: -46                 | Program output: 3                  
Correct output: -74                 | Program output: 42                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -35                
Correct output: -94                 | Program output: 18                 
Correct output: -72                 | Program output: 57                 
Correct output: -86                 | Program output: 85                 
Correct output: -60                 | Program output: -8                 
Correct output: -94                 | Program output: 38                 
Correct output: -86                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: 92                 
Correct output: -66                 | Program output: -31                
Correct output: -32                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 41                 
Correct output: -45                 | Program output: 50                 
Correct output: -31                 | Program output: -20                
Correct output: -55                 | Program output: -24                
Correct output: -82                 | Program output: 55                 
Correct output: -60                 | Program output: -40                
Correct output: -7                  | Program output: 11                 
Correct output: -72                 | Program output: 58                 
Correct output: -18                 | Program output: 57                 
Correct output: -77                 | Program output: 65                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Lexicase best program: (in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap boolean_flush print_integer integer_sub integer_lte integer_dec integer_mult integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot)) ())
Lexicase best errors: [0 0 1 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 75
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Zero cases best program: (in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap boolean_flush print_integer integer_sub integer_lte integer_dec integer_mult integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot)) ())
Zero cases best errors: [0 0 1 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 75
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 226 198 226 226 97 405 198 97 96)
Population mean number of elite cases: 2.00
Count of perfect (error zero) individuals by case: (226 226 198 226 226 97 405 198 97 96)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Best program: (in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap boolean_flush print_integer integer_sub integer_lte integer_dec integer_mult integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot)) ())
Errors: [0 0 1 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 51
Size: 75
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 8.005
Median total errors in population: 8
Error averages by case: (0.774 0.774 0.802 0.774 0.774 0.903 0.595 0.802 0.903 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.759
Average program size in population (points): 70.765
Average percent parens in population: 0.254
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0545
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1806280
--- Timings ---
Current time: 1559314584649 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.5 seconds, 48.1%
Fitness Testing:      3.4 seconds, 36.4%
Report:               1.4 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 77                  | Program output: 77                 
Correct output: -11                 | Program output: -11                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -51                 | Program output: -51                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -31                 | Program output: -31                
Correct output: 84                  | Program output: 84                 
Correct output: 88                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: -62                 | Program output: -62                
Correct output: 100                 | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 24                 
Correct output: 21                  | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 64                 
Correct output: 13                  | Program output: 38                 
Correct output: 35                  | Program output: 55                 
Correct output: 27                  | Program output: 32                 
Correct output: 0                   | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 14                 
Correct output: 12                  | Program output: 44                 
Correct output: 20                  | Program output: 20                 
Correct output: -76                 | Program output: -3                 
Correct output: -39                 | Program output: -28                
Correct output: -51                 | Program output: 22                 
Correct output: 24                  | Program output: 52                 
Correct output: -65                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 18                 
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 39                 
Correct output: -3                  | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -71                
Correct output: -49                 | Program output: -23                
Correct output: -95                 | Program output: -52                
Correct output: -60                 | Program output: -35                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 28                 
Correct output: -2                  | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -10                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -20                
Correct output: -46                 | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -86                 | Program output: -21                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -25                
Correct output: -66                 | Program output: -31                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 41                 
Correct output: -45                 | Program output: 50                 
Correct output: -31                 | Program output: -20                
Correct output: -55                 | Program output: -24                
Correct output: -82                 | Program output: 55                 
Correct output: -60                 | Program output: -40                
Correct output: -7                  | Program output: -7                 
Correct output: -72                 | Program output: 1                  
Correct output: -18                 | Program output: 57                 
Correct output: -77                 | Program output: -14                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Lexicase best program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot)) ())
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.312
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Zero cases best program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot)) ())
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.312
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 917 13 352 356 181 182 183 352 181)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (16 917 13 352 356 181 182 183 352 181)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Best program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot)) ())
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 53
Size: 77
Percent parens: 0.312
--- Population Statistics ---
Average total errors in population: 7.267
Median total errors in population: 6
Error averages by case: (0.984 0.083 0.987 0.648 0.644 0.819 0.818 0.817 0.648 0.819)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.989
Average program size in population (points): 74.022
Average percent parens in population: 0.225
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.92
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2514774
--- Timings ---
Current time: 1559314588298 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.8 seconds, 52.1%
Fitness Testing:      4.2 seconds, 31.8%
Report:               2.0 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -11                 | Program output: -11                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -51                 | Program output: -51                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -31                 | Program output: -31                
Correct output: 84                  | Program output: 84                 
Correct output: 88                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: -62                 | Program output: -62                
Correct output: 100                 | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 24                 
Correct output: 21                  | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 13                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: 24                  | Program output: 40                 
Correct output: -65                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 18                 
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: -16                
Correct output: -3                  | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -52                
Correct output: -60                 | Program output: -35                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -2                  | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -10                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -25                
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 41                 
Correct output: -45                 | Program output: 23                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -64                
Correct output: -60                 | Program output: -40                
Correct output: -7                  | Program output: -7                 
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Lexicase best program: (in3 in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (exec_yankdup boolean_and) exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot))) () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 97
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Zero cases best program: (in3 in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (exec_yankdup boolean_and) exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot))) () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 97
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (656 273 937 660 657 103 103 678 660 657)
Population mean number of elite cases: 5.38
Count of perfect (error zero) individuals by case: (656 273 937 660 657 103 103 678 660 657)
Population mean number of perfect (error zero) cases: 5.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot})
Best program: (in3 in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove print_boolean exec_yankdup boolean_and) (exec_y (exec_yankdup boolean_and) exec_y (boolean_invert_first_then_and) exec_empty)) (exec_do*while (integer_dup exec_dup_items) exec_shove () boolean_swap print_exec () exec_s (in4 exec_s () (boolean_yank boolean_and) (exec_when (print_boolean) exec_dup_times (integer_sub) boolean_flush) boolean_yankdup integer_sub integer_shove exec_stackdepth) () (boolean_rot))) () ())
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 66
Size: 97
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 4.616
Median total errors in population: 3
Error averages by case: (0.344 0.727 0.063 0.34 0.343 0.897 0.897 0.322 0.34 0.343)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.167
Average program size in population (points): 75.152
Average percent parens in population: 0.290
Minimum age in population: 5.0
Maximum age in population: 8.0
Average age in population: 7.00225
Median age in population: 6.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 309
Genome diversity (% unique genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 312
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3521037
--- Timings ---
Current time: 1559314592105 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.9 seconds, 53.1%
Fitness Testing:      5.2 seconds, 30.6%
Report:               2.7 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -11                 | Program output: -11                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -51                 | Program output: -51                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -31                 | Program output: -31                
Correct output: 84                  | Program output: 84                 
Correct output: 88                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: -62                 | Program output: -62                
Correct output: 100                 | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 24                 
Correct output: 21                  | Program output: 21                 
Correct output: 11                  | Program output: 11                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: 24                  | Program output: 24                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: -16                
Correct output: -3                  | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -2                  | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -10                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 3                  
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove})
Lexicase best program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 81
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove})
Zero cases best program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 81
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (890 420 912 915 681 430 668 420 5 674)
Population mean number of elite cases: 6.01
Count of perfect (error zero) individuals by case: (890 420 912 915 681 430 668 420 5 674)
Population mean number of perfect (error zero) cases: 6.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_903} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove})
Best program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 58
Size: 81
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3.985
Median total errors in population: 4
Error averages by case: (0.11 0.58 0.088 0.085 0.319 0.57 0.332 0.58 0.995 0.326)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.639
Average program size in population (points): 82.885
Average percent parens in population: 0.243
Minimum age in population: 8.0
Maximum age in population: 9.875
Average age in population: 9.1058125
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.011
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4410817
--- Timings ---
Current time: 1559314595400 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.0 seconds, 53.7%
Fitness Testing:      6.0 seconds, 29.4%
Report:               3.4 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 5
Successful program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 81


Auto-simplifying with starting size: 81
step: 0
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 500
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 1000
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 1500
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 2000
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 2500
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 3000
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 3500
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 4000
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 4500
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 5000
program: (in3 in2 in4 tag_exec_903 () boolean_invert_first_then_and boolean_dup exec_do*while (boolean_or) integer_swap integer_min in1 boolean_dup exec_do*while (boolean_or) integer_swap integer_min boolean_or integer_swap integer_min print_integer integer_sub integer_lte integer_dec integer_shove integer_shove integer_mod exec_s_when_autoconstructing (exec_eq integer_max exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_shove exec_s_when_autoconstructing (integer_pop) (exec_if (integer_eq) (exec_when ()) integer_lt integer_lt boolean_swap boolean_invert_second_then_and integer_eq boolean_yank boolean_dup_items integer_dup_times in4) (integer_div boolean_xor boolean_invert_first_then_and exec_k (exec_dup_items) (exec_pop (integer_yankdup boolean_rot exec_shove ())))) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 77                  | Program output: 77                 
Correct output: -11                 | Program output: -11                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -51                 | Program output: -51                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -31                 | Program output: -31                
Correct output: 84                  | Program output: 84                 
Correct output: 88                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: -62                 | Program output: -62                
Correct output: 100                 | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 24                 
Correct output: 21                  | Program output: 21                 
Correct output: 11                  | Program output: 11                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: 24                  | Program output: 24                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: -16                
Correct output: -3                  | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -2                  | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -10                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: 3                   | Program output: 3                  
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -60                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -40                 | Program output: -40                
;;******************************
