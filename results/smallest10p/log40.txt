Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[51 51 51 37] 37] [[79 -77 79 79] -77] [[-63 -62 -63 -63] -63] [[90 90 -48 90] -48] [[-52 -52 3 -52] -52] [[87 55 87 87] 55] [[98 98 98 -57] -57] [[56 -48 56 56] -48] [[-53 -53 -57 -53] -57] [[-51 82 -51 -51] -51] [(-13 -13 -13 -13) -13] [(25 25 25 25) 25] [(-20 -20 -20 -20) -20] [(-38 -38 -38 -38) -38] [(-99 -99 -99 -99) -99] [(11 73 80 68) 11] [(41 92 10 21) 10] [(35 100 81 78) 35] [(22 36 2 7) 2] [(63 44 95 4) 4] [(95 42 44 58) 42] [(91 16 75 67) 16] [(37 33 72 33) 33] [(8 94 88 65) 8] [(16 85 70 45) 16] [(6 31 29 61) 6] [(24 78 33 73) 24] [(51 31 50 83) 31] [(36 1 4 98) 1] [(84 36 23 6) 6] [(92 68 30 16) 16] [(51 50 83 75) 50] [(84 53 24 68) 24] [(9 53 71 36) 9] [(87 16 98 50) 16] [(86 -48 28 47) -48] [(-37 52 67 7) -37] [(63 36 -5 -22) -22] [(95 47 -35 -23) -35] [(78 50 -69 70) -69] [(88 -66 -24 -67) -67] [(-98 -71 -42 -71) -98] [(89 -10 38 -98) -98] [(-9 19 91 -84) -84] [(-3 73 -58 33) -58] [(-91 -79 24 -62) -91] [(31 69 6 -1) -1] [(57 49 24 55) 24] [(-5 46 1 47) -5] [(-3 43 -58 -85) -85] [(6 48 -15 -45) -45] [(-13 -13 -51 -55) -55] [(15 -52 7 -61) -61] [(34 73 -7 85) -7] [(-74 -47 -16 -54) -74] [(24 42 69 -72) -72] [(12 89 -84 -64) -84] [(-59 67 15 80) -59] [(-67 -97 -51 27) -97] [(69 -41 6 79) -41] [(64 20 39 -90) -90] [(90 -47 -11 47) -47] [(14 -25 88 59) -25] [(47 94 57 -73) -73] [(-48 -80 24 -32) -80] [(-40 -50 53 60) -50] [(95 78 61 59) 59] [(-98 22 -66 54) -98] [(53 -35 86 27) -35] [(-82 -68 -73 54) -82] [(-92 -62 -10 80) -92] [(-79 4 5 -36) -79] [(55 31 25 -55) -55] [(61 84 60 61) 60] [(-94 -17 -79 22) -94] [(-67 61 -34 97) -67] [(-53 -14 -47 -28) -53] [(-16 39 -58 32) -58] [(-36 42 -96 77) -96] [(75 45 -16 -59) -59] [(-31 54 -6 16) -31] [(-28 -37 75 -53) -53] [(25 52 -67 83) -67] [(93 -50 70 40) -50] [(-4 68 -22 -40) -40] [(76 -87 16 24) -87] [(21 96 18 -1) -1] [(82 -31 90 -81) -81] [(-30 -37 5 10) -37] [(4 -100 -32 12) -100] [(84 -19 58 -93) -93] [(-73 -88 66 65) -88] [(41 -58 2 68) -58] [(30 -33 57 95) -33] [(-50 -75 1 38) -75])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[51 51 51 37] 37]
Train Case:   6 | Input/Output: [[79 -77 79 79] -77]
Train Case:   7 | Input/Output: [[-63 -62 -63 -63] -63]
Train Case:   8 | Input/Output: [[90 90 -48 90] -48]
Train Case:   9 | Input/Output: [[-52 -52 3 -52] -52]
Train Case:  10 | Input/Output: [[87 55 87 87] 55]
Train Case:  11 | Input/Output: [[98 98 98 -57] -57]
Train Case:  12 | Input/Output: [[56 -48 56 56] -48]
Train Case:  13 | Input/Output: [[-53 -53 -57 -53] -57]
Train Case:  14 | Input/Output: [[-51 82 -51 -51] -51]
Train Case:  15 | Input/Output: [(-13 -13 -13 -13) -13]
Train Case:  16 | Input/Output: [(25 25 25 25) 25]
Train Case:  17 | Input/Output: [(-20 -20 -20 -20) -20]
Train Case:  18 | Input/Output: [(-38 -38 -38 -38) -38]
Train Case:  19 | Input/Output: [(-99 -99 -99 -99) -99]
Train Case:  20 | Input/Output: [(11 73 80 68) 11]
Train Case:  21 | Input/Output: [(41 92 10 21) 10]
Train Case:  22 | Input/Output: [(35 100 81 78) 35]
Train Case:  23 | Input/Output: [(22 36 2 7) 2]
Train Case:  24 | Input/Output: [(63 44 95 4) 4]
Train Case:  25 | Input/Output: [(95 42 44 58) 42]
Train Case:  26 | Input/Output: [(91 16 75 67) 16]
Train Case:  27 | Input/Output: [(37 33 72 33) 33]
Train Case:  28 | Input/Output: [(8 94 88 65) 8]
Train Case:  29 | Input/Output: [(16 85 70 45) 16]
Train Case:  30 | Input/Output: [(6 31 29 61) 6]
Train Case:  31 | Input/Output: [(24 78 33 73) 24]
Train Case:  32 | Input/Output: [(51 31 50 83) 31]
Train Case:  33 | Input/Output: [(36 1 4 98) 1]
Train Case:  34 | Input/Output: [(84 36 23 6) 6]
Train Case:  35 | Input/Output: [(92 68 30 16) 16]
Train Case:  36 | Input/Output: [(51 50 83 75) 50]
Train Case:  37 | Input/Output: [(84 53 24 68) 24]
Train Case:  38 | Input/Output: [(9 53 71 36) 9]
Train Case:  39 | Input/Output: [(87 16 98 50) 16]
Train Case:  40 | Input/Output: [(86 -48 28 47) -48]
Train Case:  41 | Input/Output: [(-37 52 67 7) -37]
Train Case:  42 | Input/Output: [(63 36 -5 -22) -22]
Train Case:  43 | Input/Output: [(95 47 -35 -23) -35]
Train Case:  44 | Input/Output: [(78 50 -69 70) -69]
Train Case:  45 | Input/Output: [(88 -66 -24 -67) -67]
Train Case:  46 | Input/Output: [(-98 -71 -42 -71) -98]
Train Case:  47 | Input/Output: [(89 -10 38 -98) -98]
Train Case:  48 | Input/Output: [(-9 19 91 -84) -84]
Train Case:  49 | Input/Output: [(-3 73 -58 33) -58]
Train Case:  50 | Input/Output: [(-91 -79 24 -62) -91]
Train Case:  51 | Input/Output: [(31 69 6 -1) -1]
Train Case:  52 | Input/Output: [(57 49 24 55) 24]
Train Case:  53 | Input/Output: [(-5 46 1 47) -5]
Train Case:  54 | Input/Output: [(-3 43 -58 -85) -85]
Train Case:  55 | Input/Output: [(6 48 -15 -45) -45]
Train Case:  56 | Input/Output: [(-13 -13 -51 -55) -55]
Train Case:  57 | Input/Output: [(15 -52 7 -61) -61]
Train Case:  58 | Input/Output: [(34 73 -7 85) -7]
Train Case:  59 | Input/Output: [(-74 -47 -16 -54) -74]
Train Case:  60 | Input/Output: [(24 42 69 -72) -72]
Train Case:  61 | Input/Output: [(12 89 -84 -64) -84]
Train Case:  62 | Input/Output: [(-59 67 15 80) -59]
Train Case:  63 | Input/Output: [(-67 -97 -51 27) -97]
Train Case:  64 | Input/Output: [(69 -41 6 79) -41]
Train Case:  65 | Input/Output: [(64 20 39 -90) -90]
Train Case:  66 | Input/Output: [(90 -47 -11 47) -47]
Train Case:  67 | Input/Output: [(14 -25 88 59) -25]
Train Case:  68 | Input/Output: [(47 94 57 -73) -73]
Train Case:  69 | Input/Output: [(-48 -80 24 -32) -80]
Train Case:  70 | Input/Output: [(-40 -50 53 60) -50]
Train Case:  71 | Input/Output: [(95 78 61 59) 59]
Train Case:  72 | Input/Output: [(-98 22 -66 54) -98]
Train Case:  73 | Input/Output: [(53 -35 86 27) -35]
Train Case:  74 | Input/Output: [(-82 -68 -73 54) -82]
Train Case:  75 | Input/Output: [(-92 -62 -10 80) -92]
Train Case:  76 | Input/Output: [(-79 4 5 -36) -79]
Train Case:  77 | Input/Output: [(55 31 25 -55) -55]
Train Case:  78 | Input/Output: [(61 84 60 61) 60]
Train Case:  79 | Input/Output: [(-94 -17 -79 22) -94]
Train Case:  80 | Input/Output: [(-67 61 -34 97) -67]
Train Case:  81 | Input/Output: [(-53 -14 -47 -28) -53]
Train Case:  82 | Input/Output: [(-16 39 -58 32) -58]
Train Case:  83 | Input/Output: [(-36 42 -96 77) -96]
Train Case:  84 | Input/Output: [(75 45 -16 -59) -59]
Train Case:  85 | Input/Output: [(-31 54 -6 16) -31]
Train Case:  86 | Input/Output: [(-28 -37 75 -53) -53]
Train Case:  87 | Input/Output: [(25 52 -67 83) -67]
Train Case:  88 | Input/Output: [(93 -50 70 40) -50]
Train Case:  89 | Input/Output: [(-4 68 -22 -40) -40]
Train Case:  90 | Input/Output: [(76 -87 16 24) -87]
Train Case:  91 | Input/Output: [(21 96 18 -1) -1]
Train Case:  92 | Input/Output: [(82 -31 90 -81) -81]
Train Case:  93 | Input/Output: [(-30 -37 5 10) -37]
Train Case:  94 | Input/Output: [(4 -100 -32 12) -100]
Train Case:  95 | Input/Output: [(84 -19 58 -93) -93]
Train Case:  96 | Input/Output: [(-73 -88 66 65) -88]
Train Case:  97 | Input/Output: [(41 -58 2 68) -58]
Train Case:  98 | Input/Output: [(30 -33 57 95) -33]
Train Case:  99 | Input/Output: [(-50 -75 1 38) -75]
Test Case:   0 | Input/Output: [[-6 -6 -8 -6] -8]
Test Case:   1 | Input/Output: [[-61 68 68 68] -61]
Test Case:   2 | Input/Output: [[-77 -77 47 -77] -77]
Test Case:   3 | Input/Output: [[-36 -74 -36 -36] -74]
Test Case:   4 | Input/Output: [[-42 -42 -42 -78] -78]
Test Case:   5 | Input/Output: [[-43 -43 -43 -2] -43]
Test Case:   6 | Input/Output: [[-27 -27 -27 -18] -27]
Test Case:   7 | Input/Output: [[31 31 31 -99] -99]
Test Case:   8 | Input/Output: [[-47 -47 -47 73] -47]
Test Case:   9 | Input/Output: [[-51 -17 -51 -51] -51]
Test Case:  10 | Input/Output: [[1 1 1 -9] -9]
Test Case:  11 | Input/Output: [[29 29 29 77] 29]
Test Case:  12 | Input/Output: [[-44 52 -44 -44] -44]
Test Case:  13 | Input/Output: [[-34 52 -34 -34] -34]
Test Case:  14 | Input/Output: [[3 -67 -67 -67] -67]
Test Case:  15 | Input/Output: [[-72 -72 88 -72] -72]
Test Case:  16 | Input/Output: [[81 -12 81 81] -12]
Test Case:  17 | Input/Output: [[-64 41 -64 -64] -64]
Test Case:  18 | Input/Output: [[47 47 53 47] 47]
Test Case:  19 | Input/Output: [[-61 -77 -77 -77] -77]
Test Case:  20 | Input/Output: [[37 43 37 37] 37]
Test Case:  21 | Input/Output: [[63 63 63 77] 63]
Test Case:  22 | Input/Output: [[-74 -74 -74 -24] -74]
Test Case:  23 | Input/Output: [[-13 -13 -13 4] -13]
Test Case:  24 | Input/Output: [[37 3 3 3] 3]
Test Case:  25 | Input/Output: [[64 88 88 88] 64]
Test Case:  26 | Input/Output: [[45 45 45 -12] -12]
Test Case:  27 | Input/Output: [[-49 54 -49 -49] -49]
Test Case:  28 | Input/Output: [[27 27 27 65] 27]
Test Case:  29 | Input/Output: [[-37 69 -37 -37] -37]
Test Case:  30 | Input/Output: [[-42 90 90 90] -42]
Test Case:  31 | Input/Output: [[62 62 62 19] 19]
Test Case:  32 | Input/Output: [[-74 -4 -74 -74] -74]
Test Case:  33 | Input/Output: [[29 -19 29 29] -19]
Test Case:  34 | Input/Output: [[-77 -67 -77 -77] -77]
Test Case:  35 | Input/Output: [[21 21 40 21] 21]
Test Case:  36 | Input/Output: [[-15 -15 -15 -67] -67]
Test Case:  37 | Input/Output: [[-82 -86 -82 -82] -86]
Test Case:  38 | Input/Output: [[14 14 14 0] 0]
Test Case:  39 | Input/Output: [[59 59 59 -50] -50]
Test Case:  40 | Input/Output: [[-34 81 81 81] -34]
Test Case:  41 | Input/Output: [[-78 94 -78 -78] -78]
Test Case:  42 | Input/Output: [[-68 -68 15 -68] -68]
Test Case:  43 | Input/Output: [[-25 -44 -44 -44] -44]
Test Case:  44 | Input/Output: [[-28 -28 -3 -28] -28]
Test Case:  45 | Input/Output: [[81 81 81 51] 51]
Test Case:  46 | Input/Output: [[48 0 48 48] 0]
Test Case:  47 | Input/Output: [[-90 -90 -90 -80] -90]
Test Case:  48 | Input/Output: [[-69 -69 -69 -85] -85]
Test Case:  49 | Input/Output: [[1 1 97 1] 1]
Test Case:  50 | Input/Output: [[-14 -14 -14 -30] -30]
Test Case:  51 | Input/Output: [[40 40 -59 40] -59]
Test Case:  52 | Input/Output: [[12 20 20 20] 12]
Test Case:  53 | Input/Output: [[-40 -40 -40 98] -40]
Test Case:  54 | Input/Output: [[15 15 12 15] 12]
Test Case:  55 | Input/Output: [[-83 -83 -83 -11] -83]
Test Case:  56 | Input/Output: [[57 0 0 0] 0]
Test Case:  57 | Input/Output: [[35 35 1 35] 1]
Test Case:  58 | Input/Output: [[-43 -49 -49 -49] -49]
Test Case:  59 | Input/Output: [[-55 -55 31 -55] -55]
Test Case:  60 | Input/Output: [[8 8 8 62] 8]
Test Case:  61 | Input/Output: [[-13 28 28 28] -13]
Test Case:  62 | Input/Output: [[-60 -60 -53 -60] -60]
Test Case:  63 | Input/Output: [[-5 -1 -1 -1] -5]
Test Case:  64 | Input/Output: [[-61 -61 92 -61] -61]
Test Case:  65 | Input/Output: [[97 97 4 97] 4]
Test Case:  66 | Input/Output: [[-67 -67 -67 -35] -67]
Test Case:  67 | Input/Output: [[-45 -1 -1 -1] -45]
Test Case:  68 | Input/Output: [[64 64 64 -74] -74]
Test Case:  69 | Input/Output: [[-94 -40 -40 -40] -94]
Test Case:  70 | Input/Output: [[-10 -10 -10 6] -10]
Test Case:  71 | Input/Output: [[-43 -43 -43 -96] -96]
Test Case:  72 | Input/Output: [[8 8 8 23] 8]
Test Case:  73 | Input/Output: [[-15 -69 -69 -69] -69]
Test Case:  74 | Input/Output: [[84 84 84 22] 22]
Test Case:  75 | Input/Output: [[34 34 34 -74] -74]
Test Case:  76 | Input/Output: [[-83 47 47 47] -83]
Test Case:  77 | Input/Output: [[-93 -93 -93 -70] -93]
Test Case:  78 | Input/Output: [[-71 -71 -71 -71] -71]
Test Case:  79 | Input/Output: [[82 -27 82 82] -27]
Test Case:  80 | Input/Output: [[-75 96 -75 -75] -75]
Test Case:  81 | Input/Output: [[-96 53 53 53] -96]
Test Case:  82 | Input/Output: [[46 46 45 46] 45]
Test Case:  83 | Input/Output: [[87 87 87 97] 87]
Test Case:  84 | Input/Output: [[77 -48 -48 -48] -48]
Test Case:  85 | Input/Output: [[-63 -96 -63 -63] -96]
Test Case:  86 | Input/Output: [[-31 28 -31 -31] -31]
Test Case:  87 | Input/Output: [[-34 -60 -60 -60] -60]
Test Case:  88 | Input/Output: [[-60 -60 -60 83] -60]
Test Case:  89 | Input/Output: [[-62 -62 -37 -62] -62]
Test Case:  90 | Input/Output: [[19 6 6 6] 6]
Test Case:  91 | Input/Output: [[-7 0 -7 -7] -7]
Test Case:  92 | Input/Output: [[-7 -7 -7 -74] -74]
Test Case:  93 | Input/Output: [[-83 85 -83 -83] -83]
Test Case:  94 | Input/Output: [[-3 -3 87 -3] -3]
Test Case:  95 | Input/Output: [[39 -33 39 39] -33]
Test Case:  96 | Input/Output: [[-48 -44 -48 -48] -48]
Test Case:  97 | Input/Output: [[86 86 13 86] 13]
Test Case:  98 | Input/Output: [[91 -53 -53 -53] -53]
Test Case:  99 | Input/Output: [[72 72 72 -45] -45]
Test Case: 100 | Input/Output: [(19 19 19 19) 19]
Test Case: 101 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 102 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 103 | Input/Output: [(63 63 63 63) 63]
Test Case: 104 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 105 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 106 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 107 | Input/Output: [(53 53 53 53) 53]
Test Case: 108 | Input/Output: [(15 15 15 15) 15]
Test Case: 109 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 110 | Input/Output: [(22 22 22 22) 22]
Test Case: 111 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 112 | Input/Output: [(64 64 64 64) 64]
Test Case: 113 | Input/Output: [(44 44 44 44) 44]
Test Case: 114 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 115 | Input/Output: [(35 35 35 35) 35]
Test Case: 116 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 117 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 118 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 119 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 120 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 121 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 122 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 123 | Input/Output: [(32 32 32 32) 32]
Test Case: 124 | Input/Output: [(74 74 74 74) 74]
Test Case: 125 | Input/Output: [(38 38 38 38) 38]
Test Case: 126 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 127 | Input/Output: [(28 28 28 28) 28]
Test Case: 128 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 129 | Input/Output: [(98 98 98 98) 98]
Test Case: 130 | Input/Output: [(88 88 88 88) 88]
Test Case: 131 | Input/Output: [(11 11 11 11) 11]
Test Case: 132 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 133 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 134 | Input/Output: [(56 56 56 56) 56]
Test Case: 135 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 136 | Input/Output: [(8 8 8 8) 8]
Test Case: 137 | Input/Output: [(8 8 8 8) 8]
Test Case: 138 | Input/Output: [(42 42 42 42) 42]
Test Case: 139 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 140 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 141 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 142 | Input/Output: [(29 29 29 29) 29]
Test Case: 143 | Input/Output: [(34 34 34 34) 34]
Test Case: 144 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 145 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 146 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 147 | Input/Output: [(64 64 64 64) 64]
Test Case: 148 | Input/Output: [(90 90 90 90) 90]
Test Case: 149 | Input/Output: [(25 25 25 25) 25]
Test Case: 150 | Input/Output: [(20 20 20 20) 20]
Test Case: 151 | Input/Output: [(41 41 41 41) 41]
Test Case: 152 | Input/Output: [(63 63 63 63) 63]
Test Case: 153 | Input/Output: [(45 45 45 45) 45]
Test Case: 154 | Input/Output: [(63 63 63 63) 63]
Test Case: 155 | Input/Output: [(15 15 15 15) 15]
Test Case: 156 | Input/Output: [(26 26 26 26) 26]
Test Case: 157 | Input/Output: [(87 87 87 87) 87]
Test Case: 158 | Input/Output: [(31 31 31 31) 31]
Test Case: 159 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 160 | Input/Output: [(37 37 37 37) 37]
Test Case: 161 | Input/Output: [(20 20 20 20) 20]
Test Case: 162 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 163 | Input/Output: [(26 26 26 26) 26]
Test Case: 164 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 165 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 166 | Input/Output: [(88 88 88 88) 88]
Test Case: 167 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 168 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 169 | Input/Output: [(19 19 19 19) 19]
Test Case: 170 | Input/Output: [(90 90 90 90) 90]
Test Case: 171 | Input/Output: [(9 9 9 9) 9]
Test Case: 172 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 173 | Input/Output: [(85 85 85 85) 85]
Test Case: 174 | Input/Output: [(13 13 13 13) 13]
Test Case: 175 | Input/Output: [(44 44 44 44) 44]
Test Case: 176 | Input/Output: [(8 8 8 8) 8]
Test Case: 177 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 178 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 179 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 180 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 181 | Input/Output: [(2 2 2 2) 2]
Test Case: 182 | Input/Output: [(100 100 100 100) 100]
Test Case: 183 | Input/Output: [(56 56 56 56) 56]
Test Case: 184 | Input/Output: [(37 37 37 37) 37]
Test Case: 185 | Input/Output: [(22 22 22 22) 22]
Test Case: 186 | Input/Output: [(57 57 57 57) 57]
Test Case: 187 | Input/Output: [(39 39 39 39) 39]
Test Case: 188 | Input/Output: [(34 34 34 34) 34]
Test Case: 189 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 190 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 191 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 192 | Input/Output: [(40 40 40 40) 40]
Test Case: 193 | Input/Output: [(25 25 25 25) 25]
Test Case: 194 | Input/Output: [(85 85 85 85) 85]
Test Case: 195 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 196 | Input/Output: [(27 27 27 27) 27]
Test Case: 197 | Input/Output: [(80 80 80 80) 80]
Test Case: 198 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 199 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 200 | Input/Output: [(9 64 89 38) 9]
Test Case: 201 | Input/Output: [(27 88 31 91) 27]
Test Case: 202 | Input/Output: [(76 44 34 27) 27]
Test Case: 203 | Input/Output: [(90 8 48 68) 8]
Test Case: 204 | Input/Output: [(55 95 65 94) 55]
Test Case: 205 | Input/Output: [(4 64 63 55) 4]
Test Case: 206 | Input/Output: [(67 7 71 56) 7]
Test Case: 207 | Input/Output: [(39 72 88 87) 39]
Test Case: 208 | Input/Output: [(8 38 64 100) 8]
Test Case: 209 | Input/Output: [(23 27 16 39) 16]
Test Case: 210 | Input/Output: [(67 98 94 89) 67]
Test Case: 211 | Input/Output: [(0 73 99 64) 0]
Test Case: 212 | Input/Output: [(24 98 26 75) 24]
Test Case: 213 | Input/Output: [(95 94 73 42) 42]
Test Case: 214 | Input/Output: [(89 9 73 39) 9]
Test Case: 215 | Input/Output: [(19 14 74 33) 14]
Test Case: 216 | Input/Output: [(2 40 7 13) 2]
Test Case: 217 | Input/Output: [(54 61 61 39) 39]
Test Case: 218 | Input/Output: [(46 19 60 9) 9]
Test Case: 219 | Input/Output: [(9 28 55 4) 4]
Test Case: 220 | Input/Output: [(26 81 74 86) 26]
Test Case: 221 | Input/Output: [(19 28 35 60) 19]
Test Case: 222 | Input/Output: [(54 17 16 16) 16]
Test Case: 223 | Input/Output: [(10 35 59 47) 10]
Test Case: 224 | Input/Output: [(9 2 42 9) 2]
Test Case: 225 | Input/Output: [(93 46 77 13) 13]
Test Case: 226 | Input/Output: [(35 4 27 38) 4]
Test Case: 227 | Input/Output: [(84 99 29 94) 29]
Test Case: 228 | Input/Output: [(50 55 44 6) 6]
Test Case: 229 | Input/Output: [(23 52 67 21) 21]
Test Case: 230 | Input/Output: [(21 28 64 72) 21]
Test Case: 231 | Input/Output: [(88 68 75 37) 37]
Test Case: 232 | Input/Output: [(8 23 22 30) 8]
Test Case: 233 | Input/Output: [(47 64 83 35) 35]
Test Case: 234 | Input/Output: [(82 43 65 22) 22]
Test Case: 235 | Input/Output: [(4 27 14 20) 4]
Test Case: 236 | Input/Output: [(95 39 62 53) 39]
Test Case: 237 | Input/Output: [(87 86 38 89) 38]
Test Case: 238 | Input/Output: [(32 12 76 42) 12]
Test Case: 239 | Input/Output: [(66 97 12 41) 12]
Test Case: 240 | Input/Output: [(88 81 51 70) 51]
Test Case: 241 | Input/Output: [(8 63 33 14) 8]
Test Case: 242 | Input/Output: [(18 16 18 98) 16]
Test Case: 243 | Input/Output: [(0 89 91 23) 0]
Test Case: 244 | Input/Output: [(12 55 32 97) 12]
Test Case: 245 | Input/Output: [(60 18 3 15) 3]
Test Case: 246 | Input/Output: [(29 21 22 27) 21]
Test Case: 247 | Input/Output: [(83 64 69 33) 33]
Test Case: 248 | Input/Output: [(99 19 32 18) 18]
Test Case: 249 | Input/Output: [(12 94 57 59) 12]
Test Case: 250 | Input/Output: [(21 74 76 8) 8]
Test Case: 251 | Input/Output: [(7 90 62 12) 7]
Test Case: 252 | Input/Output: [(63 25 65 35) 25]
Test Case: 253 | Input/Output: [(6 89 6 83) 6]
Test Case: 254 | Input/Output: [(49 56 57 43) 43]
Test Case: 255 | Input/Output: [(7 83 18 74) 7]
Test Case: 256 | Input/Output: [(23 20 36 69) 20]
Test Case: 257 | Input/Output: [(66 77 26 57) 26]
Test Case: 258 | Input/Output: [(32 94 47 23) 23]
Test Case: 259 | Input/Output: [(50 77 55 58) 50]
Test Case: 260 | Input/Output: [(2 48 70 70) 2]
Test Case: 261 | Input/Output: [(15 6 80 77) 6]
Test Case: 262 | Input/Output: [(93 5 80 74) 5]
Test Case: 263 | Input/Output: [(82 98 94 71) 71]
Test Case: 264 | Input/Output: [(56 47 63 99) 47]
Test Case: 265 | Input/Output: [(1 48 54 38) 1]
Test Case: 266 | Input/Output: [(75 38 100 85) 38]
Test Case: 267 | Input/Output: [(21 86 96 18) 18]
Test Case: 268 | Input/Output: [(37 5 45 79) 5]
Test Case: 269 | Input/Output: [(72 29 30 34) 29]
Test Case: 270 | Input/Output: [(40 67 55 1) 1]
Test Case: 271 | Input/Output: [(47 54 79 8) 8]
Test Case: 272 | Input/Output: [(19 62 52 60) 19]
Test Case: 273 | Input/Output: [(20 26 6 25) 6]
Test Case: 274 | Input/Output: [(14 72 93 34) 14]
Test Case: 275 | Input/Output: [(59 58 30 13) 13]
Test Case: 276 | Input/Output: [(71 98 33 48) 33]
Test Case: 277 | Input/Output: [(63 51 9 90) 9]
Test Case: 278 | Input/Output: [(23 41 20 63) 20]
Test Case: 279 | Input/Output: [(84 49 9 34) 9]
Test Case: 280 | Input/Output: [(19 71 18 65) 18]
Test Case: 281 | Input/Output: [(44 100 37 3) 3]
Test Case: 282 | Input/Output: [(42 74 61 37) 37]
Test Case: 283 | Input/Output: [(47 91 39 66) 39]
Test Case: 284 | Input/Output: [(43 43 59 97) 43]
Test Case: 285 | Input/Output: [(76 7 6 27) 6]
Test Case: 286 | Input/Output: [(57 88 84 54) 54]
Test Case: 287 | Input/Output: [(0 82 28 5) 0]
Test Case: 288 | Input/Output: [(12 51 35 49) 12]
Test Case: 289 | Input/Output: [(79 57 45 57) 45]
Test Case: 290 | Input/Output: [(78 80 9 48) 9]
Test Case: 291 | Input/Output: [(74 63 9 81) 9]
Test Case: 292 | Input/Output: [(5 24 100 97) 5]
Test Case: 293 | Input/Output: [(4 89 65 36) 4]
Test Case: 294 | Input/Output: [(29 52 96 100) 29]
Test Case: 295 | Input/Output: [(94 49 56 21) 21]
Test Case: 296 | Input/Output: [(23 9 0 4) 0]
Test Case: 297 | Input/Output: [(84 24 41 92) 24]
Test Case: 298 | Input/Output: [(54 68 54 5) 5]
Test Case: 299 | Input/Output: [(41 24 51 39) 24]
Test Case: 300 | Input/Output: [(57 37 7 87) 7]
Test Case: 301 | Input/Output: [(22 12 29 21) 12]
Test Case: 302 | Input/Output: [(42 13 68 6) 6]
Test Case: 303 | Input/Output: [(13 64 9 34) 9]
Test Case: 304 | Input/Output: [(6 68 1 90) 1]
Test Case: 305 | Input/Output: [(78 93 3 22) 3]
Test Case: 306 | Input/Output: [(87 16 27 35) 16]
Test Case: 307 | Input/Output: [(40 40 37 15) 15]
Test Case: 308 | Input/Output: [(82 27 64 86) 27]
Test Case: 309 | Input/Output: [(65 53 93 44) 44]
Test Case: 310 | Input/Output: [(36 14 31 60) 14]
Test Case: 311 | Input/Output: [(66 63 85 58) 58]
Test Case: 312 | Input/Output: [(34 99 69 96) 34]
Test Case: 313 | Input/Output: [(65 64 94 73) 64]
Test Case: 314 | Input/Output: [(73 3 58 85) 3]
Test Case: 315 | Input/Output: [(95 47 20 61) 20]
Test Case: 316 | Input/Output: [(45 95 55 1) 1]
Test Case: 317 | Input/Output: [(87 68 31 71) 31]
Test Case: 318 | Input/Output: [(51 100 70 10) 10]
Test Case: 319 | Input/Output: [(16 41 15 20) 15]
Test Case: 320 | Input/Output: [(56 2 62 97) 2]
Test Case: 321 | Input/Output: [(17 32 98 51) 17]
Test Case: 322 | Input/Output: [(11 49 41 34) 11]
Test Case: 323 | Input/Output: [(10 26 21 30) 10]
Test Case: 324 | Input/Output: [(99 17 85 43) 17]
Test Case: 325 | Input/Output: [(23 72 73 18) 18]
Test Case: 326 | Input/Output: [(34 18 17 5) 5]
Test Case: 327 | Input/Output: [(76 26 13 25) 13]
Test Case: 328 | Input/Output: [(8 94 20 29) 8]
Test Case: 329 | Input/Output: [(76 86 57 48) 48]
Test Case: 330 | Input/Output: [(2 53 76 29) 2]
Test Case: 331 | Input/Output: [(60 94 86 2) 2]
Test Case: 332 | Input/Output: [(27 31 5 83) 5]
Test Case: 333 | Input/Output: [(23 79 36 33) 23]
Test Case: 334 | Input/Output: [(29 58 4 94) 4]
Test Case: 335 | Input/Output: [(88 50 63 53) 50]
Test Case: 336 | Input/Output: [(31 74 100 26) 26]
Test Case: 337 | Input/Output: [(68 42 69 20) 20]
Test Case: 338 | Input/Output: [(1 7 75 66) 1]
Test Case: 339 | Input/Output: [(96 33 32 48) 32]
Test Case: 340 | Input/Output: [(99 96 51 36) 36]
Test Case: 341 | Input/Output: [(4 63 74 56) 4]
Test Case: 342 | Input/Output: [(97 60 20 66) 20]
Test Case: 343 | Input/Output: [(20 71 77 81) 20]
Test Case: 344 | Input/Output: [(44 78 67 85) 44]
Test Case: 345 | Input/Output: [(94 13 39 47) 13]
Test Case: 346 | Input/Output: [(13 82 69 35) 13]
Test Case: 347 | Input/Output: [(3 26 12 87) 3]
Test Case: 348 | Input/Output: [(47 70 20 47) 20]
Test Case: 349 | Input/Output: [(96 80 74 24) 24]
Test Case: 350 | Input/Output: [(59 33 3 87) 3]
Test Case: 351 | Input/Output: [(11 47 98 85) 11]
Test Case: 352 | Input/Output: [(94 13 71 46) 13]
Test Case: 353 | Input/Output: [(94 12 66 37) 12]
Test Case: 354 | Input/Output: [(5 16 12 74) 5]
Test Case: 355 | Input/Output: [(20 14 99 14) 14]
Test Case: 356 | Input/Output: [(90 33 0 27) 0]
Test Case: 357 | Input/Output: [(14 73 82 67) 14]
Test Case: 358 | Input/Output: [(13 56 69 50) 13]
Test Case: 359 | Input/Output: [(99 63 20 48) 20]
Test Case: 360 | Input/Output: [(30 70 23 6) 6]
Test Case: 361 | Input/Output: [(33 26 97 32) 26]
Test Case: 362 | Input/Output: [(98 97 40 52) 40]
Test Case: 363 | Input/Output: [(39 4 97 34) 4]
Test Case: 364 | Input/Output: [(72 0 43 31) 0]
Test Case: 365 | Input/Output: [(2 63 12 85) 2]
Test Case: 366 | Input/Output: [(50 45 49 38) 38]
Test Case: 367 | Input/Output: [(38 53 43 10) 10]
Test Case: 368 | Input/Output: [(48 37 30 77) 30]
Test Case: 369 | Input/Output: [(81 98 33 84) 33]
Test Case: 370 | Input/Output: [(1 41 35 95) 1]
Test Case: 371 | Input/Output: [(29 59 63 47) 29]
Test Case: 372 | Input/Output: [(17 23 27 74) 17]
Test Case: 373 | Input/Output: [(47 23 5 31) 5]
Test Case: 374 | Input/Output: [(82 100 81 12) 12]
Test Case: 375 | Input/Output: [(51 64 74 58) 51]
Test Case: 376 | Input/Output: [(29 1 52 57) 1]
Test Case: 377 | Input/Output: [(58 46 82 69) 46]
Test Case: 378 | Input/Output: [(32 0 86 43) 0]
Test Case: 379 | Input/Output: [(0 33 67 9) 0]
Test Case: 380 | Input/Output: [(68 12 42 20) 12]
Test Case: 381 | Input/Output: [(73 70 71 37) 37]
Test Case: 382 | Input/Output: [(62 73 91 100) 62]
Test Case: 383 | Input/Output: [(55 80 45 89) 45]
Test Case: 384 | Input/Output: [(29 43 15 40) 15]
Test Case: 385 | Input/Output: [(0 79 22 67) 0]
Test Case: 386 | Input/Output: [(68 67 23 26) 23]
Test Case: 387 | Input/Output: [(81 8 33 3) 3]
Test Case: 388 | Input/Output: [(64 28 34 38) 28]
Test Case: 389 | Input/Output: [(16 30 3 73) 3]
Test Case: 390 | Input/Output: [(47 74 95 62) 47]
Test Case: 391 | Input/Output: [(88 38 73 10) 10]
Test Case: 392 | Input/Output: [(44 65 86 88) 44]
Test Case: 393 | Input/Output: [(75 60 37 42) 37]
Test Case: 394 | Input/Output: [(23 34 58 48) 23]
Test Case: 395 | Input/Output: [(76 69 61 51) 51]
Test Case: 396 | Input/Output: [(24 68 79 1) 1]
Test Case: 397 | Input/Output: [(52 0 52 12) 0]
Test Case: 398 | Input/Output: [(93 62 67 61) 61]
Test Case: 399 | Input/Output: [(8 41 71 24) 8]
Test Case: 400 | Input/Output: [(-76 24 68 75) -76]
Test Case: 401 | Input/Output: [(-62 -80 -33 75) -80]
Test Case: 402 | Input/Output: [(100 -55 -67 44) -67]
Test Case: 403 | Input/Output: [(45 -53 4 -2) -53]
Test Case: 404 | Input/Output: [(-2 -40 17 59) -40]
Test Case: 405 | Input/Output: [(-5 -6 95 -50) -50]
Test Case: 406 | Input/Output: [(52 64 62 -73) -73]
Test Case: 407 | Input/Output: [(-17 -67 95 -29) -67]
Test Case: 408 | Input/Output: [(67 7 26 -22) -22]
Test Case: 409 | Input/Output: [(45 -25 81 -97) -97]
Test Case: 410 | Input/Output: [(1 -85 66 39) -85]
Test Case: 411 | Input/Output: [(46 -49 -80 -81) -81]
Test Case: 412 | Input/Output: [(36 76 49 24) 24]
Test Case: 413 | Input/Output: [(-25 97 -93 79) -93]
Test Case: 414 | Input/Output: [(-70 34 2 -17) -70]
Test Case: 415 | Input/Output: [(38 -23 82 -16) -23]
Test Case: 416 | Input/Output: [(60 86 64 -61) -61]
Test Case: 417 | Input/Output: [(-1 -33 64 64) -33]
Test Case: 418 | Input/Output: [(-61 51 -62 61) -62]
Test Case: 419 | Input/Output: [(11 89 23 47) 11]
Test Case: 420 | Input/Output: [(-83 -32 -100 72) -100]
Test Case: 421 | Input/Output: [(-33 53 -10 21) -33]
Test Case: 422 | Input/Output: [(-26 24 25 42) -26]
Test Case: 423 | Input/Output: [(-75 -35 -5 -22) -75]
Test Case: 424 | Input/Output: [(-14 43 20 -76) -76]
Test Case: 425 | Input/Output: [(96 80 -62 97) -62]
Test Case: 426 | Input/Output: [(-23 97 -85 31) -85]
Test Case: 427 | Input/Output: [(84 -97 -97 32) -97]
Test Case: 428 | Input/Output: [(-83 -51 -66 -18) -83]
Test Case: 429 | Input/Output: [(49 -46 38 -82) -82]
Test Case: 430 | Input/Output: [(93 -79 99 -3) -79]
Test Case: 431 | Input/Output: [(-30 -100 -96 -22) -100]
Test Case: 432 | Input/Output: [(-50 -62 68 54) -62]
Test Case: 433 | Input/Output: [(92 70 8 -24) -24]
Test Case: 434 | Input/Output: [(-19 -7 30 43) -19]
Test Case: 435 | Input/Output: [(14 -45 71 -57) -57]
Test Case: 436 | Input/Output: [(75 -63 -25 -20) -63]
Test Case: 437 | Input/Output: [(-13 24 45 63) -13]
Test Case: 438 | Input/Output: [(-20 38 -14 -60) -60]
Test Case: 439 | Input/Output: [(7 -33 60 -54) -54]
Test Case: 440 | Input/Output: [(6 15 -33 -12) -33]
Test Case: 441 | Input/Output: [(-82 48 -90 41) -90]
Test Case: 442 | Input/Output: [(-76 28 16 74) -76]
Test Case: 443 | Input/Output: [(44 52 -69 26) -69]
Test Case: 444 | Input/Output: [(-8 16 -85 42) -85]
Test Case: 445 | Input/Output: [(-92 51 70 77) -92]
Test Case: 446 | Input/Output: [(59 98 35 -48) -48]
Test Case: 447 | Input/Output: [(-8 81 -52 -99) -99]
Test Case: 448 | Input/Output: [(25 -7 52 96) -7]
Test Case: 449 | Input/Output: [(-7 53 22 -21) -21]
Test Case: 450 | Input/Output: [(39 14 67 76) 14]
Test Case: 451 | Input/Output: [(93 53 100 -27) -27]
Test Case: 452 | Input/Output: [(-56 33 3 15) -56]
Test Case: 453 | Input/Output: [(56 18 76 41) 18]
Test Case: 454 | Input/Output: [(50 44 -85 -7) -85]
Test Case: 455 | Input/Output: [(-40 35 21 -89) -89]
Test Case: 456 | Input/Output: [(40 -72 19 40) -72]
Test Case: 457 | Input/Output: [(-95 5 70 -98) -98]
Test Case: 458 | Input/Output: [(31 -94 -61 -56) -94]
Test Case: 459 | Input/Output: [(76 -42 67 -71) -71]
Test Case: 460 | Input/Output: [(40 -40 -91 22) -91]
Test Case: 461 | Input/Output: [(90 52 -31 -33) -33]
Test Case: 462 | Input/Output: [(40 -75 71 -99) -99]
Test Case: 463 | Input/Output: [(-13 -8 -87 9) -87]
Test Case: 464 | Input/Output: [(-55 45 26 -71) -71]
Test Case: 465 | Input/Output: [(-65 -93 -79 -70) -93]
Test Case: 466 | Input/Output: [(-64 46 -67 78) -67]
Test Case: 467 | Input/Output: [(-98 -68 36 18) -98]
Test Case: 468 | Input/Output: [(78 -53 -7 71) -53]
Test Case: 469 | Input/Output: [(15 -64 19 63) -64]
Test Case: 470 | Input/Output: [(66 75 -27 99) -27]
Test Case: 471 | Input/Output: [(-70 35 -72 99) -72]
Test Case: 472 | Input/Output: [(71 0 -79 44) -79]
Test Case: 473 | Input/Output: [(-22 42 41 -51) -51]
Test Case: 474 | Input/Output: [(97 -28 -97 -86) -97]
Test Case: 475 | Input/Output: [(83 69 -26 58) -26]
Test Case: 476 | Input/Output: [(12 100 -49 -17) -49]
Test Case: 477 | Input/Output: [(-68 70 -14 -32) -68]
Test Case: 478 | Input/Output: [(56 17 -51 -10) -51]
Test Case: 479 | Input/Output: [(12 -12 70 -67) -67]
Test Case: 480 | Input/Output: [(-65 5 8 -63) -65]
Test Case: 481 | Input/Output: [(-6 80 84 99) -6]
Test Case: 482 | Input/Output: [(-69 -67 36 88) -69]
Test Case: 483 | Input/Output: [(-36 86 94 -15) -36]
Test Case: 484 | Input/Output: [(87 -68 -50 -8) -68]
Test Case: 485 | Input/Output: [(-23 100 -67 78) -67]
Test Case: 486 | Input/Output: [(-36 14 -20 -85) -85]
Test Case: 487 | Input/Output: [(-98 49 -4 57) -98]
Test Case: 488 | Input/Output: [(-93 -6 -28 -34) -93]
Test Case: 489 | Input/Output: [(46 -5 25 -24) -24]
Test Case: 490 | Input/Output: [(34 -19 66 -26) -26]
Test Case: 491 | Input/Output: [(-62 -15 83 -72) -72]
Test Case: 492 | Input/Output: [(-18 -4 -14 2) -18]
Test Case: 493 | Input/Output: [(-82 -11 49 -18) -82]
Test Case: 494 | Input/Output: [(-58 -49 11 -82) -82]
Test Case: 495 | Input/Output: [(43 17 18 83) 17]
Test Case: 496 | Input/Output: [(71 63 15 -35) -35]
Test Case: 497 | Input/Output: [(-40 -52 22 -98) -98]
Test Case: 498 | Input/Output: [(42 74 -77 52) -77]
Test Case: 499 | Input/Output: [(39 -51 -43 93) -51]
Test Case: 500 | Input/Output: [(38 -34 0 62) -34]
Test Case: 501 | Input/Output: [(95 4 55 -11) -11]
Test Case: 502 | Input/Output: [(48 -53 -49 67) -53]
Test Case: 503 | Input/Output: [(14 72 26 -94) -94]
Test Case: 504 | Input/Output: [(-23 -96 -45 -8) -96]
Test Case: 505 | Input/Output: [(29 -51 -8 0) -51]
Test Case: 506 | Input/Output: [(-68 9 -63 -75) -75]
Test Case: 507 | Input/Output: [(1 -10 -21 -9) -21]
Test Case: 508 | Input/Output: [(39 29 81 26) 26]
Test Case: 509 | Input/Output: [(-76 77 -51 62) -76]
Test Case: 510 | Input/Output: [(-42 -83 -9 10) -83]
Test Case: 511 | Input/Output: [(-46 34 -6 28) -46]
Test Case: 512 | Input/Output: [(91 66 -74 -29) -74]
Test Case: 513 | Input/Output: [(-67 -56 16 15) -67]
Test Case: 514 | Input/Output: [(-28 22 52 -58) -58]
Test Case: 515 | Input/Output: [(-57 16 -1 -40) -57]
Test Case: 516 | Input/Output: [(33 -12 29 -75) -75]
Test Case: 517 | Input/Output: [(-3 -33 96 67) -33]
Test Case: 518 | Input/Output: [(-90 60 67 56) -90]
Test Case: 519 | Input/Output: [(-100 -5 37 69) -100]
Test Case: 520 | Input/Output: [(40 23 -4 68) -4]
Test Case: 521 | Input/Output: [(84 -22 15 35) -22]
Test Case: 522 | Input/Output: [(38 27 12 29) 12]
Test Case: 523 | Input/Output: [(-26 -28 -21 -78) -78]
Test Case: 524 | Input/Output: [(69 -70 -73 96) -73]
Test Case: 525 | Input/Output: [(-4 33 49 76) -4]
Test Case: 526 | Input/Output: [(-85 84 81 4) -85]
Test Case: 527 | Input/Output: [(52 94 -21 -2) -21]
Test Case: 528 | Input/Output: [(60 -41 60 92) -41]
Test Case: 529 | Input/Output: [(27 -82 78 -89) -89]
Test Case: 530 | Input/Output: [(49 -94 59 -98) -98]
Test Case: 531 | Input/Output: [(20 94 41 95) 20]
Test Case: 532 | Input/Output: [(34 70 60 -92) -92]
Test Case: 533 | Input/Output: [(-35 4 -23 25) -35]
Test Case: 534 | Input/Output: [(42 56 -66 39) -66]
Test Case: 535 | Input/Output: [(61 7 26 -83) -83]
Test Case: 536 | Input/Output: [(-4 -65 -93 67) -93]
Test Case: 537 | Input/Output: [(-6 47 -48 61) -48]
Test Case: 538 | Input/Output: [(51 48 -67 -48) -67]
Test Case: 539 | Input/Output: [(-14 32 58 18) -14]
Test Case: 540 | Input/Output: [(-44 17 36 47) -44]
Test Case: 541 | Input/Output: [(-100 73 -33 -24) -100]
Test Case: 542 | Input/Output: [(-29 -18 -96 10) -96]
Test Case: 543 | Input/Output: [(96 22 55 31) 22]
Test Case: 544 | Input/Output: [(-10 68 68 -40) -40]
Test Case: 545 | Input/Output: [(-71 -55 -62 48) -71]
Test Case: 546 | Input/Output: [(-84 -15 -72 43) -84]
Test Case: 547 | Input/Output: [(99 -69 -36 80) -69]
Test Case: 548 | Input/Output: [(-47 -8 -21 -77) -77]
Test Case: 549 | Input/Output: [(98 49 -11 31) -11]
Test Case: 550 | Input/Output: [(-75 11 62 -52) -75]
Test Case: 551 | Input/Output: [(-65 -21 88 1) -65]
Test Case: 552 | Input/Output: [(-93 1 -90 62) -93]
Test Case: 553 | Input/Output: [(-37 89 -51 -81) -81]
Test Case: 554 | Input/Output: [(-59 48 93 -54) -59]
Test Case: 555 | Input/Output: [(-93 61 43 26) -93]
Test Case: 556 | Input/Output: [(-21 23 22 63) -21]
Test Case: 557 | Input/Output: [(-34 14 -30 -92) -92]
Test Case: 558 | Input/Output: [(88 75 56 22) 22]
Test Case: 559 | Input/Output: [(44 -28 85 -69) -69]
Test Case: 560 | Input/Output: [(51 11 -25 55) -25]
Test Case: 561 | Input/Output: [(76 -28 19 -91) -91]
Test Case: 562 | Input/Output: [(-92 2 -84 11) -92]
Test Case: 563 | Input/Output: [(-92 96 40 51) -92]
Test Case: 564 | Input/Output: [(77 -97 63 -82) -97]
Test Case: 565 | Input/Output: [(-43 33 -60 -87) -87]
Test Case: 566 | Input/Output: [(-23 -95 89 31) -95]
Test Case: 567 | Input/Output: [(-16 -36 37 -26) -36]
Test Case: 568 | Input/Output: [(53 -34 -40 -47) -47]
Test Case: 569 | Input/Output: [(100 -33 64 -55) -55]
Test Case: 570 | Input/Output: [(-72 -78 -61 66) -78]
Test Case: 571 | Input/Output: [(-78 50 -29 24) -78]
Test Case: 572 | Input/Output: [(-5 -52 -7 61) -52]
Test Case: 573 | Input/Output: [(-88 73 -45 78) -88]
Test Case: 574 | Input/Output: [(-37 35 34 -97) -97]
Test Case: 575 | Input/Output: [(41 52 14 63) 14]
Test Case: 576 | Input/Output: [(-63 38 -32 37) -63]
Test Case: 577 | Input/Output: [(-42 -41 -72 -27) -72]
Test Case: 578 | Input/Output: [(38 84 64 53) 38]
Test Case: 579 | Input/Output: [(-59 64 15 -48) -59]
Test Case: 580 | Input/Output: [(-40 93 13 -54) -54]
Test Case: 581 | Input/Output: [(-32 -44 73 21) -44]
Test Case: 582 | Input/Output: [(28 84 -72 -16) -72]
Test Case: 583 | Input/Output: [(-18 -73 91 27) -73]
Test Case: 584 | Input/Output: [(-37 -94 -74 17) -94]
Test Case: 585 | Input/Output: [(61 54 47 25) 25]
Test Case: 586 | Input/Output: [(-29 75 -92 -1) -92]
Test Case: 587 | Input/Output: [(73 -68 31 3) -68]
Test Case: 588 | Input/Output: [(-22 -47 -50 -88) -88]
Test Case: 589 | Input/Output: [(-2 -99 -42 -92) -99]
Test Case: 590 | Input/Output: [(77 25 -1 -54) -54]
Test Case: 591 | Input/Output: [(79 -44 47 64) -44]
Test Case: 592 | Input/Output: [(100 60 -20 31) -20]
Test Case: 593 | Input/Output: [(-39 -51 44 -69) -69]
Test Case: 594 | Input/Output: [(12 -48 94 -61) -61]
Test Case: 595 | Input/Output: [(38 33 4 -74) -74]
Test Case: 596 | Input/Output: [(-66 -53 -42 16) -66]
Test Case: 597 | Input/Output: [(-20 29 -88 -10) -88]
Test Case: 598 | Input/Output: [(33 76 -72 26) -72]
Test Case: 599 | Input/Output: [(42 -40 -65 95) -65]
Test Case: 600 | Input/Output: [(8 56 29 46) 8]
Test Case: 601 | Input/Output: [(76 -29 80 47) -29]
Test Case: 602 | Input/Output: [(16 -37 -45 5) -45]
Test Case: 603 | Input/Output: [(-61 -84 96 19) -84]
Test Case: 604 | Input/Output: [(-96 -61 77 64) -96]
Test Case: 605 | Input/Output: [(72 -90 29 -92) -92]
Test Case: 606 | Input/Output: [(29 79 -94 -92) -94]
Test Case: 607 | Input/Output: [(17 10 -99 0) -99]
Test Case: 608 | Input/Output: [(8 78 41 -37) -37]
Test Case: 609 | Input/Output: [(60 -49 31 -82) -82]
Test Case: 610 | Input/Output: [(76 78 -58 42) -58]
Test Case: 611 | Input/Output: [(-71 14 12 -58) -71]
Test Case: 612 | Input/Output: [(28 20 98 48) 20]
Test Case: 613 | Input/Output: [(24 78 60 -19) -19]
Test Case: 614 | Input/Output: [(-2 69 9 13) -2]
Test Case: 615 | Input/Output: [(-35 48 87 -52) -52]
Test Case: 616 | Input/Output: [(-51 -61 -31 1) -61]
Test Case: 617 | Input/Output: [(-98 -88 -97 28) -98]
Test Case: 618 | Input/Output: [(-63 7 13 -77) -77]
Test Case: 619 | Input/Output: [(-45 64 22 -32) -45]
Test Case: 620 | Input/Output: [(93 89 69 98) 69]
Test Case: 621 | Input/Output: [(-91 -62 -50 94) -91]
Test Case: 622 | Input/Output: [(-54 -99 -13 100) -99]
Test Case: 623 | Input/Output: [(52 -34 80 99) -34]
Test Case: 624 | Input/Output: [(83 -99 -38 63) -99]
Test Case: 625 | Input/Output: [(39 -75 54 -12) -75]
Test Case: 626 | Input/Output: [(81 91 -43 0) -43]
Test Case: 627 | Input/Output: [(15 -55 49 -67) -67]
Test Case: 628 | Input/Output: [(99 0 -90 79) -90]
Test Case: 629 | Input/Output: [(83 24 58 99) 24]
Test Case: 630 | Input/Output: [(-73 9 -71 -13) -73]
Test Case: 631 | Input/Output: [(86 -19 -31 -29) -31]
Test Case: 632 | Input/Output: [(-81 -76 -16 -8) -81]
Test Case: 633 | Input/Output: [(-81 -61 -46 -66) -81]
Test Case: 634 | Input/Output: [(3 -83 24 6) -83]
Test Case: 635 | Input/Output: [(95 98 -16 -23) -23]
Test Case: 636 | Input/Output: [(-2 76 -73 -13) -73]
Test Case: 637 | Input/Output: [(-89 -92 -94 2) -94]
Test Case: 638 | Input/Output: [(2 -28 69 37) -28]
Test Case: 639 | Input/Output: [(-52 -12 -67 -83) -83]
Test Case: 640 | Input/Output: [(-23 -17 36 95) -23]
Test Case: 641 | Input/Output: [(11 21 87 92) 11]
Test Case: 642 | Input/Output: [(7 -38 -63 95) -63]
Test Case: 643 | Input/Output: [(-49 96 61 -74) -74]
Test Case: 644 | Input/Output: [(15 91 -2 86) -2]
Test Case: 645 | Input/Output: [(59 -15 2 -24) -24]
Test Case: 646 | Input/Output: [(-57 77 84 -41) -57]
Test Case: 647 | Input/Output: [(-91 38 -67 6) -91]
Test Case: 648 | Input/Output: [(75 37 17 -41) -41]
Test Case: 649 | Input/Output: [(58 4 -99 -24) -99]
Test Case: 650 | Input/Output: [(15 -81 96 -70) -81]
Test Case: 651 | Input/Output: [(13 49 -11 97) -11]
Test Case: 652 | Input/Output: [(-58 34 -56 -21) -58]
Test Case: 653 | Input/Output: [(30 -61 -47 29) -61]
Test Case: 654 | Input/Output: [(54 -87 -57 -21) -87]
Test Case: 655 | Input/Output: [(-71 -28 -10 55) -71]
Test Case: 656 | Input/Output: [(88 21 26 26) 21]
Test Case: 657 | Input/Output: [(-92 46 8 35) -92]
Test Case: 658 | Input/Output: [(98 4 27 37) 4]
Test Case: 659 | Input/Output: [(-17 24 90 -2) -17]
Test Case: 660 | Input/Output: [(83 -75 -44 -34) -75]
Test Case: 661 | Input/Output: [(94 -2 -16 -29) -29]
Test Case: 662 | Input/Output: [(-17 63 -75 -51) -75]
Test Case: 663 | Input/Output: [(4 -35 -45 40) -45]
Test Case: 664 | Input/Output: [(-17 -49 -89 86) -89]
Test Case: 665 | Input/Output: [(-88 -17 75 62) -88]
Test Case: 666 | Input/Output: [(-1 -94 77 17) -94]
Test Case: 667 | Input/Output: [(47 17 59 -91) -91]
Test Case: 668 | Input/Output: [(46 -87 -12 22) -87]
Test Case: 669 | Input/Output: [(44 49 70 1) 1]
Test Case: 670 | Input/Output: [(-44 -83 -40 99) -83]
Test Case: 671 | Input/Output: [(-61 -83 15 -89) -89]
Test Case: 672 | Input/Output: [(62 29 42 -71) -71]
Test Case: 673 | Input/Output: [(-87 85 -3 42) -87]
Test Case: 674 | Input/Output: [(72 31 43 -86) -86]
Test Case: 675 | Input/Output: [(6 -5 81 43) -5]
Test Case: 676 | Input/Output: [(-43 10 75 -85) -85]
Test Case: 677 | Input/Output: [(69 73 83 0) 0]
Test Case: 678 | Input/Output: [(-43 99 39 -63) -63]
Test Case: 679 | Input/Output: [(-89 21 -82 47) -89]
Test Case: 680 | Input/Output: [(47 -96 -67 70) -96]
Test Case: 681 | Input/Output: [(35 57 95 -51) -51]
Test Case: 682 | Input/Output: [(15 -12 -18 1) -18]
Test Case: 683 | Input/Output: [(79 -47 -35 -95) -95]
Test Case: 684 | Input/Output: [(-44 -16 -47 8) -47]
Test Case: 685 | Input/Output: [(77 62 -84 -59) -84]
Test Case: 686 | Input/Output: [(88 -42 28 29) -42]
Test Case: 687 | Input/Output: [(-16 -40 44 79) -40]
Test Case: 688 | Input/Output: [(-71 66 -49 -37) -71]
Test Case: 689 | Input/Output: [(59 52 -53 50) -53]
Test Case: 690 | Input/Output: [(-65 -33 -81 27) -81]
Test Case: 691 | Input/Output: [(-20 19 -95 94) -95]
Test Case: 692 | Input/Output: [(58 -88 -47 -48) -88]
Test Case: 693 | Input/Output: [(1 100 45 -99) -99]
Test Case: 694 | Input/Output: [(-87 -95 -63 -41) -95]
Test Case: 695 | Input/Output: [(100 93 1 -70) -70]
Test Case: 696 | Input/Output: [(-37 -43 72 -34) -43]
Test Case: 697 | Input/Output: [(71 -36 69 77) -36]
Test Case: 698 | Input/Output: [(36 -67 44 -48) -67]
Test Case: 699 | Input/Output: [(-36 94 -59 -92) -92]
Test Case: 700 | Input/Output: [(-57 -81 1 -68) -81]
Test Case: 701 | Input/Output: [(-33 75 41 97) -33]
Test Case: 702 | Input/Output: [(-52 -27 -90 -11) -90]
Test Case: 703 | Input/Output: [(9 -61 -100 56) -100]
Test Case: 704 | Input/Output: [(63 -43 99 -22) -43]
Test Case: 705 | Input/Output: [(-45 -5 -21 21) -45]
Test Case: 706 | Input/Output: [(12 40 -89 -83) -89]
Test Case: 707 | Input/Output: [(29 -56 -17 89) -56]
Test Case: 708 | Input/Output: [(78 -66 83 29) -66]
Test Case: 709 | Input/Output: [(-50 61 37 83) -50]
Test Case: 710 | Input/Output: [(15 -77 -24 99) -77]
Test Case: 711 | Input/Output: [(70 4 -72 -20) -72]
Test Case: 712 | Input/Output: [(40 -5 -58 15) -58]
Test Case: 713 | Input/Output: [(3 5 35 -38) -38]
Test Case: 714 | Input/Output: [(-98 -12 -53 30) -98]
Test Case: 715 | Input/Output: [(-8 43 -18 33) -18]
Test Case: 716 | Input/Output: [(6 -1 9 75) -1]
Test Case: 717 | Input/Output: [(77 42 63 66) 42]
Test Case: 718 | Input/Output: [(9 -77 76 -65) -77]
Test Case: 719 | Input/Output: [(69 -45 -22 -38) -45]
Test Case: 720 | Input/Output: [(63 -4 59 5) -4]
Test Case: 721 | Input/Output: [(86 53 40 44) 40]
Test Case: 722 | Input/Output: [(3 43 26 -92) -92]
Test Case: 723 | Input/Output: [(68 21 -54 -5) -54]
Test Case: 724 | Input/Output: [(70 -32 -42 -17) -42]
Test Case: 725 | Input/Output: [(55 -65 41 31) -65]
Test Case: 726 | Input/Output: [(73 -83 88 -72) -83]
Test Case: 727 | Input/Output: [(95 31 -58 -7) -58]
Test Case: 728 | Input/Output: [(65 4 -24 -87) -87]
Test Case: 729 | Input/Output: [(-27 -65 -13 -25) -65]
Test Case: 730 | Input/Output: [(-61 -84 52 20) -84]
Test Case: 731 | Input/Output: [(-46 92 -13 -3) -46]
Test Case: 732 | Input/Output: [(74 -51 -49 69) -51]
Test Case: 733 | Input/Output: [(-67 12 10 -83) -83]
Test Case: 734 | Input/Output: [(3 73 43 90) 3]
Test Case: 735 | Input/Output: [(73 19 45 66) 19]
Test Case: 736 | Input/Output: [(94 -94 -68 64) -94]
Test Case: 737 | Input/Output: [(-71 32 47 -58) -71]
Test Case: 738 | Input/Output: [(11 68 76 40) 11]
Test Case: 739 | Input/Output: [(19 56 -71 4) -71]
Test Case: 740 | Input/Output: [(-72 57 70 69) -72]
Test Case: 741 | Input/Output: [(-15 -8 61 39) -15]
Test Case: 742 | Input/Output: [(-50 3 40 -8) -50]
Test Case: 743 | Input/Output: [(-38 60 34 -13) -38]
Test Case: 744 | Input/Output: [(-80 -48 82 -6) -80]
Test Case: 745 | Input/Output: [(-68 34 -51 -39) -68]
Test Case: 746 | Input/Output: [(-67 -4 59 24) -67]
Test Case: 747 | Input/Output: [(-58 91 -100 48) -100]
Test Case: 748 | Input/Output: [(46 -71 75 -78) -78]
Test Case: 749 | Input/Output: [(42 -84 -66 -31) -84]
Test Case: 750 | Input/Output: [(81 -96 -93 66) -96]
Test Case: 751 | Input/Output: [(-96 50 4 99) -96]
Test Case: 752 | Input/Output: [(-85 57 0 -2) -85]
Test Case: 753 | Input/Output: [(4 -18 -68 -11) -68]
Test Case: 754 | Input/Output: [(70 91 89 -47) -47]
Test Case: 755 | Input/Output: [(79 70 -11 -67) -67]
Test Case: 756 | Input/Output: [(-30 -62 -6 16) -62]
Test Case: 757 | Input/Output: [(41 -34 0 41) -34]
Test Case: 758 | Input/Output: [(40 -47 -78 30) -78]
Test Case: 759 | Input/Output: [(-60 99 40 7) -60]
Test Case: 760 | Input/Output: [(-71 -23 61 -35) -71]
Test Case: 761 | Input/Output: [(79 -67 -57 47) -67]
Test Case: 762 | Input/Output: [(-37 -10 75 21) -37]
Test Case: 763 | Input/Output: [(74 -66 63 20) -66]
Test Case: 764 | Input/Output: [(31 28 98 -20) -20]
Test Case: 765 | Input/Output: [(-4 53 53 -57) -57]
Test Case: 766 | Input/Output: [(75 -3 63 85) -3]
Test Case: 767 | Input/Output: [(100 63 31 97) 31]
Test Case: 768 | Input/Output: [(72 55 10 92) 10]
Test Case: 769 | Input/Output: [(-62 13 39 -35) -62]
Test Case: 770 | Input/Output: [(89 -17 48 -29) -29]
Test Case: 771 | Input/Output: [(92 -52 13 -26) -52]
Test Case: 772 | Input/Output: [(8 60 -40 -30) -40]
Test Case: 773 | Input/Output: [(-95 51 -45 -62) -95]
Test Case: 774 | Input/Output: [(52 -69 -38 36) -69]
Test Case: 775 | Input/Output: [(98 -100 -7 -56) -100]
Test Case: 776 | Input/Output: [(-3 66 -50 11) -50]
Test Case: 777 | Input/Output: [(2 30 -88 -78) -88]
Test Case: 778 | Input/Output: [(-23 -2 -80 53) -80]
Test Case: 779 | Input/Output: [(72 -98 62 38) -98]
Test Case: 780 | Input/Output: [(70 69 0 88) 0]
Test Case: 781 | Input/Output: [(-82 -93 -30 -1) -93]
Test Case: 782 | Input/Output: [(-87 20 86 53) -87]
Test Case: 783 | Input/Output: [(-15 -58 -92 98) -92]
Test Case: 784 | Input/Output: [(-63 20 41 -62) -63]
Test Case: 785 | Input/Output: [(96 44 -71 18) -71]
Test Case: 786 | Input/Output: [(98 -16 32 -63) -63]
Test Case: 787 | Input/Output: [(74 12 99 -72) -72]
Test Case: 788 | Input/Output: [(-72 -78 56 -45) -78]
Test Case: 789 | Input/Output: [(61 8 -83 -94) -94]
Test Case: 790 | Input/Output: [(-13 57 13 87) -13]
Test Case: 791 | Input/Output: [(61 -89 62 59) -89]
Test Case: 792 | Input/Output: [(-38 -68 79 -78) -78]
Test Case: 793 | Input/Output: [(-69 -47 35 89) -69]
Test Case: 794 | Input/Output: [(76 95 38 75) 38]
Test Case: 795 | Input/Output: [(33 48 -80 -65) -80]
Test Case: 796 | Input/Output: [(-19 -53 24 55) -53]
Test Case: 797 | Input/Output: [(93 -25 -73 -42) -73]
Test Case: 798 | Input/Output: [(-57 1 52 -87) -87]
Test Case: 799 | Input/Output: [(47 -90 -45 -19) -90]
Test Case: 800 | Input/Output: [(-16 3 -21 -54) -54]
Test Case: 801 | Input/Output: [(15 -77 30 -33) -77]
Test Case: 802 | Input/Output: [(10 78 22 13) 10]
Test Case: 803 | Input/Output: [(-58 -74 -18 23) -74]
Test Case: 804 | Input/Output: [(6 80 68 -11) -11]
Test Case: 805 | Input/Output: [(4 19 77 -79) -79]
Test Case: 806 | Input/Output: [(-93 -93 -96 -38) -96]
Test Case: 807 | Input/Output: [(26 -65 86 -50) -65]
Test Case: 808 | Input/Output: [(-93 65 -82 -27) -93]
Test Case: 809 | Input/Output: [(1 35 91 -94) -94]
Test Case: 810 | Input/Output: [(100 11 16 -32) -32]
Test Case: 811 | Input/Output: [(21 -77 -16 -8) -77]
Test Case: 812 | Input/Output: [(81 75 -16 -93) -93]
Test Case: 813 | Input/Output: [(-68 47 -28 86) -68]
Test Case: 814 | Input/Output: [(-10 -62 -56 -40) -62]
Test Case: 815 | Input/Output: [(-16 -32 23 81) -32]
Test Case: 816 | Input/Output: [(-87 -9 22 -72) -87]
Test Case: 817 | Input/Output: [(69 81 -72 -71) -72]
Test Case: 818 | Input/Output: [(28 16 21 -97) -97]
Test Case: 819 | Input/Output: [(-38 22 -87 77) -87]
Test Case: 820 | Input/Output: [(-31 19 76 -91) -91]
Test Case: 821 | Input/Output: [(-55 49 -32 -79) -79]
Test Case: 822 | Input/Output: [(75 63 -98 89) -98]
Test Case: 823 | Input/Output: [(-16 50 -16 -30) -30]
Test Case: 824 | Input/Output: [(-87 -35 9 -21) -87]
Test Case: 825 | Input/Output: [(-7 74 81 64) -7]
Test Case: 826 | Input/Output: [(88 45 29 87) 29]
Test Case: 827 | Input/Output: [(42 69 55 43) 42]
Test Case: 828 | Input/Output: [(56 94 -84 79) -84]
Test Case: 829 | Input/Output: [(74 36 -82 67) -82]
Test Case: 830 | Input/Output: [(63 -31 19 20) -31]
Test Case: 831 | Input/Output: [(91 65 -38 -96) -96]
Test Case: 832 | Input/Output: [(4 -98 -100 -27) -100]
Test Case: 833 | Input/Output: [(-79 -6 -82 -57) -82]
Test Case: 834 | Input/Output: [(-64 -6 83 58) -64]
Test Case: 835 | Input/Output: [(15 -82 34 97) -82]
Test Case: 836 | Input/Output: [(0 -20 -74 91) -74]
Test Case: 837 | Input/Output: [(-27 -6 -58 -67) -67]
Test Case: 838 | Input/Output: [(90 -29 -45 -66) -66]
Test Case: 839 | Input/Output: [(88 58 -18 -47) -47]
Test Case: 840 | Input/Output: [(77 -36 -72 -5) -72]
Test Case: 841 | Input/Output: [(-82 -14 77 -74) -82]
Test Case: 842 | Input/Output: [(77 -41 74 -33) -41]
Test Case: 843 | Input/Output: [(-64 3 29 70) -64]
Test Case: 844 | Input/Output: [(-19 -14 35 77) -19]
Test Case: 845 | Input/Output: [(-38 -16 -38 17) -38]
Test Case: 846 | Input/Output: [(-14 -37 15 31) -37]
Test Case: 847 | Input/Output: [(-75 25 -35 -87) -87]
Test Case: 848 | Input/Output: [(-18 -68 99 -95) -95]
Test Case: 849 | Input/Output: [(-45 -23 93 -66) -66]
Test Case: 850 | Input/Output: [(69 -14 -90 -72) -90]
Test Case: 851 | Input/Output: [(53 25 -30 64) -30]
Test Case: 852 | Input/Output: [(-76 -84 -68 -14) -84]
Test Case: 853 | Input/Output: [(-18 -69 97 32) -69]
Test Case: 854 | Input/Output: [(91 -92 70 -38) -92]
Test Case: 855 | Input/Output: [(21 45 76 -8) -8]
Test Case: 856 | Input/Output: [(25 94 7 -60) -60]
Test Case: 857 | Input/Output: [(-45 46 57 83) -45]
Test Case: 858 | Input/Output: [(16 -92 70 -29) -92]
Test Case: 859 | Input/Output: [(-73 -65 55 -16) -73]
Test Case: 860 | Input/Output: [(-78 -36 -51 -96) -96]
Test Case: 861 | Input/Output: [(-37 -25 96 -45) -45]
Test Case: 862 | Input/Output: [(-44 -64 -76 -74) -76]
Test Case: 863 | Input/Output: [(41 11 -25 -74) -74]
Test Case: 864 | Input/Output: [(-38 20 12 -83) -83]
Test Case: 865 | Input/Output: [(90 75 85 86) 75]
Test Case: 866 | Input/Output: [(52 -62 -32 50) -62]
Test Case: 867 | Input/Output: [(82 0 98 -35) -35]
Test Case: 868 | Input/Output: [(62 -34 11 -31) -34]
Test Case: 869 | Input/Output: [(30 100 -85 -94) -94]
Test Case: 870 | Input/Output: [(30 92 44 -36) -36]
Test Case: 871 | Input/Output: [(38 -64 99 -64) -64]
Test Case: 872 | Input/Output: [(20 -74 -51 14) -74]
Test Case: 873 | Input/Output: [(33 14 -6 -95) -95]
Test Case: 874 | Input/Output: [(75 -71 61 -7) -71]
Test Case: 875 | Input/Output: [(-68 35 84 -57) -68]
Test Case: 876 | Input/Output: [(29 47 -41 -21) -41]
Test Case: 877 | Input/Output: [(33 -3 -16 88) -16]
Test Case: 878 | Input/Output: [(65 36 -6 9) -6]
Test Case: 879 | Input/Output: [(11 45 -40 30) -40]
Test Case: 880 | Input/Output: [(-89 77 53 26) -89]
Test Case: 881 | Input/Output: [(58 83 -37 13) -37]
Test Case: 882 | Input/Output: [(-27 73 -57 50) -57]
Test Case: 883 | Input/Output: [(94 25 -12 33) -12]
Test Case: 884 | Input/Output: [(88 16 -24 4) -24]
Test Case: 885 | Input/Output: [(70 -64 -11 -32) -64]
Test Case: 886 | Input/Output: [(19 -94 -62 -43) -94]
Test Case: 887 | Input/Output: [(65 86 -47 -85) -85]
Test Case: 888 | Input/Output: [(51 4 74 44) 4]
Test Case: 889 | Input/Output: [(-10 -25 69 -3) -25]
Test Case: 890 | Input/Output: [(33 -11 -47 -81) -81]
Test Case: 891 | Input/Output: [(24 -28 28 -24) -28]
Test Case: 892 | Input/Output: [(-65 -94 -2 -28) -94]
Test Case: 893 | Input/Output: [(-47 28 -100 53) -100]
Test Case: 894 | Input/Output: [(-72 -89 -41 50) -89]
Test Case: 895 | Input/Output: [(11 -22 -29 91) -29]
Test Case: 896 | Input/Output: [(19 12 -2 80) -2]
Test Case: 897 | Input/Output: [(-32 76 23 -15) -32]
Test Case: 898 | Input/Output: [(-32 -1 7 52) -32]
Test Case: 899 | Input/Output: [(-55 79 -2 33) -55]
Test Case: 900 | Input/Output: [(-6 95 -61 -92) -92]
Test Case: 901 | Input/Output: [(-11 -8 -47 20) -47]
Test Case: 902 | Input/Output: [(52 65 62 36) 36]
Test Case: 903 | Input/Output: [(-98 35 -15 8) -98]
Test Case: 904 | Input/Output: [(89 -3 -76 -32) -76]
Test Case: 905 | Input/Output: [(17 -89 -30 -72) -89]
Test Case: 906 | Input/Output: [(-54 27 90 -37) -54]
Test Case: 907 | Input/Output: [(26 -98 57 40) -98]
Test Case: 908 | Input/Output: [(57 30 5 -14) -14]
Test Case: 909 | Input/Output: [(30 -7 98 68) -7]
Test Case: 910 | Input/Output: [(-52 -47 37 -41) -52]
Test Case: 911 | Input/Output: [(-76 -86 -65 7) -86]
Test Case: 912 | Input/Output: [(99 15 -94 86) -94]
Test Case: 913 | Input/Output: [(21 -93 32 74) -93]
Test Case: 914 | Input/Output: [(76 55 -45 -51) -51]
Test Case: 915 | Input/Output: [(-31 -38 -58 76) -58]
Test Case: 916 | Input/Output: [(44 34 0 28) 0]
Test Case: 917 | Input/Output: [(67 67 -63 2) -63]
Test Case: 918 | Input/Output: [(70 -48 -78 98) -78]
Test Case: 919 | Input/Output: [(-39 -45 -10 52) -45]
Test Case: 920 | Input/Output: [(-30 28 -11 46) -30]
Test Case: 921 | Input/Output: [(-21 65 69 -55) -55]
Test Case: 922 | Input/Output: [(-24 35 26 30) -24]
Test Case: 923 | Input/Output: [(15 -33 -92 -100) -100]
Test Case: 924 | Input/Output: [(-29 -34 88 -67) -67]
Test Case: 925 | Input/Output: [(-22 27 70 -92) -92]
Test Case: 926 | Input/Output: [(13 -47 -55 89) -55]
Test Case: 927 | Input/Output: [(-63 -59 -61 68) -63]
Test Case: 928 | Input/Output: [(69 1 -5 -75) -75]
Test Case: 929 | Input/Output: [(-76 12 0 -47) -76]
Test Case: 930 | Input/Output: [(89 84 -53 41) -53]
Test Case: 931 | Input/Output: [(-61 -97 -98 5) -98]
Test Case: 932 | Input/Output: [(-97 82 -50 -21) -97]
Test Case: 933 | Input/Output: [(39 -22 77 55) -22]
Test Case: 934 | Input/Output: [(-55 -4 -21 -65) -65]
Test Case: 935 | Input/Output: [(-29 -68 11 3) -68]
Test Case: 936 | Input/Output: [(-14 90 83 -20) -20]
Test Case: 937 | Input/Output: [(34 -12 15 -42) -42]
Test Case: 938 | Input/Output: [(-35 20 92 14) -35]
Test Case: 939 | Input/Output: [(-54 42 56 97) -54]
Test Case: 940 | Input/Output: [(-64 14 -68 41) -68]
Test Case: 941 | Input/Output: [(87 -72 54 -67) -72]
Test Case: 942 | Input/Output: [(-8 45 -76 -60) -76]
Test Case: 943 | Input/Output: [(42 -43 41 78) -43]
Test Case: 944 | Input/Output: [(-45 100 9 -71) -71]
Test Case: 945 | Input/Output: [(-44 64 62 67) -44]
Test Case: 946 | Input/Output: [(-37 86 -50 65) -50]
Test Case: 947 | Input/Output: [(-80 -50 35 38) -80]
Test Case: 948 | Input/Output: [(-30 94 -37 -85) -85]
Test Case: 949 | Input/Output: [(-96 29 -100 83) -100]
Test Case: 950 | Input/Output: [(-96 -83 -49 -68) -96]
Test Case: 951 | Input/Output: [(4 -83 64 -51) -83]
Test Case: 952 | Input/Output: [(-72 -35 10 -59) -72]
Test Case: 953 | Input/Output: [(49 -3 37 15) -3]
Test Case: 954 | Input/Output: [(-65 27 69 -33) -65]
Test Case: 955 | Input/Output: [(-67 26 -90 57) -90]
Test Case: 956 | Input/Output: [(-94 -15 -3 43) -94]
Test Case: 957 | Input/Output: [(46 16 -43 34) -43]
Test Case: 958 | Input/Output: [(-40 68 -36 69) -40]
Test Case: 959 | Input/Output: [(-35 -73 -96 10) -96]
Test Case: 960 | Input/Output: [(49 -86 79 -71) -86]
Test Case: 961 | Input/Output: [(-27 11 -100 82) -100]
Test Case: 962 | Input/Output: [(69 -61 -57 11) -61]
Test Case: 963 | Input/Output: [(35 48 -97 -85) -97]
Test Case: 964 | Input/Output: [(-19 82 79 -56) -56]
Test Case: 965 | Input/Output: [(55 64 -2 53) -2]
Test Case: 966 | Input/Output: [(-24 18 -83 29) -83]
Test Case: 967 | Input/Output: [(-47 -21 72 6) -47]
Test Case: 968 | Input/Output: [(5 87 7 57) 5]
Test Case: 969 | Input/Output: [(82 59 -76 61) -76]
Test Case: 970 | Input/Output: [(19 -32 -65 -47) -65]
Test Case: 971 | Input/Output: [(-22 -18 53 -50) -50]
Test Case: 972 | Input/Output: [(49 20 91 14) 14]
Test Case: 973 | Input/Output: [(-87 85 18 60) -87]
Test Case: 974 | Input/Output: [(-94 -45 35 -17) -94]
Test Case: 975 | Input/Output: [(-21 11 -4 66) -21]
Test Case: 976 | Input/Output: [(83 26 -67 -78) -78]
Test Case: 977 | Input/Output: [(88 -33 -48 -31) -48]
Test Case: 978 | Input/Output: [(72 -100 -64 -29) -100]
Test Case: 979 | Input/Output: [(-31 97 95 59) -31]
Test Case: 980 | Input/Output: [(89 -3 47 99) -3]
Test Case: 981 | Input/Output: [(-41 -89 47 -73) -89]
Test Case: 982 | Input/Output: [(87 -36 50 -80) -80]
Test Case: 983 | Input/Output: [(-22 -68 65 82) -68]
Test Case: 984 | Input/Output: [(32 -100 -3 -58) -100]
Test Case: 985 | Input/Output: [(-52 -59 51 73) -59]
Test Case: 986 | Input/Output: [(-64 52 30 84) -64]
Test Case: 987 | Input/Output: [(25 -97 0 -14) -97]
Test Case: 988 | Input/Output: [(28 0 -79 18) -79]
Test Case: 989 | Input/Output: [(48 72 22 -19) -19]
Test Case: 990 | Input/Output: [(97 -88 23 -55) -88]
Test Case: 991 | Input/Output: [(-30 -62 39 -89) -89]
Test Case: 992 | Input/Output: [(89 -19 75 -61) -61]
Test Case: 993 | Input/Output: [(-22 77 -55 20) -55]
Test Case: 994 | Input/Output: [(75 -85 -1 -69) -85]
Test Case: 995 | Input/Output: [(-1 58 -32 63) -32]
Test Case: 996 | Input/Output: [(19 -77 -52 10) -77]
Test Case: 997 | Input/Output: [(-99 -96 86 46) -99]
Test Case: 998 | Input/Output: [(-70 -53 34 -5) -70]
Test Case: 999 | Input/Output: [(31 -72 12 34) -72]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -96 -128 -6 -10 65 -85 -39 -115 -26 2 90 17 118 -87 72 -121
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[51 51 51 37] 37] [[79 -77 79 79] -77] [[-63 -62 -63 -63] -63] [[90 90 -48 90] -48] [[-52 -52 3 -52] -52] [[87 55 87 87] 55] [[98 98 98 -57] -57] [[56 -48 56 56] -48] [[-53 -53 -57 -53] -57] [[-51 82 -51 -51] -51] [(-13 -13 -13 -13) -13] [(25 25 25 25) 25] [(-20 -20 -20 -20) -20] [(-38 -38 -38 -38) -38] [(-99 -99 -99 -99) -99] [(11 73 80 68) 11] [(41 92 10 21) 10] [(35 100 81 78) 35] [(22 36 2 7) 2] [(63 44 95 4) 4] [(95 42 44 58) 42] [(91 16 75 67) 16] [(37 33 72 33) 33] [(8 94 88 65) 8] [(16 85 70 45) 16] [(6 31 29 61) 6] [(24 78 33 73) 24] [(51 31 50 83) 31] [(36 1 4 98) 1] [(84 36 23 6) 6] [(92 68 30 16) 16] [(51 50 83 75) 50] [(84 53 24 68) 24] [(9 53 71 36) 9] [(87 16 98 50) 16] [(86 -48 28 47) -48] [(-37 52 67 7) -37] [(63 36 -5 -22) -22] [(95 47 -35 -23) -35] [(78 50 -69 70) -69] [(88 -66 -24 -67) -67] [(-98 -71 -42 -71) -98] [(89 -10 38 -98) -98] [(-9 19 91 -84) -84] [(-3 73 -58 33) -58] [(-91 -79 24 -62) -91] [(31 69 6 -1) -1] [(57 49 24 55) 24] [(-5 46 1 47) -5] [(-3 43 -58 -85) -85] [(6 48 -15 -45) -45] [(-13 -13 -51 -55) -55] [(15 -52 7 -61) -61] [(34 73 -7 85) -7] [(-74 -47 -16 -54) -74] [(24 42 69 -72) -72] [(12 89 -84 -64) -84] [(-59 67 15 80) -59] [(-67 -97 -51 27) -97] [(69 -41 6 79) -41] [(64 20 39 -90) -90] [(90 -47 -11 47) -47] [(14 -25 88 59) -25] [(47 94 57 -73) -73] [(-48 -80 24 -32) -80] [(-40 -50 53 60) -50] [(95 78 61 59) 59] [(-98 22 -66 54) -98] [(53 -35 86 27) -35] [(-82 -68 -73 54) -82] [(-92 -62 -10 80) -92] [(-79 4 5 -36) -79] [(55 31 25 -55) -55] [(61 84 60 61) 60] [(-94 -17 -79 22) -94] [(-67 61 -34 97) -67] [(-53 -14 -47 -28) -53] [(-16 39 -58 32) -58] [(-36 42 -96 77) -96] [(75 45 -16 -59) -59] [(-31 54 -6 16) -31] [(-28 -37 75 -53) -53] [(25 52 -67 83) -67] [(93 -50 70 40) -50] [(-4 68 -22 -40) -40] [(76 -87 16 24) -87] [(21 96 18 -1) -1] [(82 -31 90 -81) -81] [(-30 -37 5 10) -37] [(4 -100 -32 12) -100] [(84 -19 58 -93) -93] [(-73 -88 66 65) -88] [(41 -58 2 68) -58] [(30 -33 57 95) -33] [(-50 -75 1 38) -75])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: 79                 
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: 56                 
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 41                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 22                 
Correct output: 4                   | Program output: 63                 
Correct output: 42                  | Program output: 95                 
Correct output: 16                  | Program output: 91                 
Correct output: 33                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 51                 
Correct output: 1                   | Program output: 36                 
Correct output: 6                   | Program output: 84                 
Correct output: 16                  | Program output: 92                 
Correct output: 50                  | Program output: 51                 
Correct output: 24                  | Program output: 84                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 87                 
Correct output: -48                 | Program output: 86                 
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: 63                 
Correct output: -35                 | Program output: 95                 
Correct output: -69                 | Program output: 78                 
Correct output: -67                 | Program output: 88                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 89                 
Correct output: -84                 | Program output: -9                 
Correct output: -58                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 31                 
Correct output: 24                  | Program output: 57                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -3                 
Correct output: -45                 | Program output: 6                  
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: 15                 
Correct output: -7                  | Program output: 34                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: 24                 
Correct output: -84                 | Program output: 12                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -67                
Correct output: -41                 | Program output: 69                 
Correct output: -90                 | Program output: 64                 
Correct output: -47                 | Program output: 90                 
Correct output: -25                 | Program output: 14                 
Correct output: -73                 | Program output: 47                 
Correct output: -80                 | Program output: -48                
Correct output: -50                 | Program output: -40                
Correct output: 59                  | Program output: 95                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 53                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 55                 
Correct output: 60                  | Program output: 61                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -16                
Correct output: -96                 | Program output: -36                
Correct output: -59                 | Program output: 75                 
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -28                
Correct output: -67                 | Program output: 25                 
Correct output: -50                 | Program output: 93                 
Correct output: -40                 | Program output: -4                 
Correct output: -87                 | Program output: 76                 
Correct output: -1                  | Program output: 21                 
Correct output: -81                 | Program output: 82                 
Correct output: -37                 | Program output: -30                
Correct output: -100                | Program output: 4                  
Correct output: -93                 | Program output: 84                 
Correct output: -88                 | Program output: -73                
Correct output: -58                 | Program output: 41                 
Correct output: -33                 | Program output: 30                 
Correct output: -75                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction tag_boolean_358} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_flush} {:close 0, :instruction tagged_658} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_eq} {:close 0, :instruction -87} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_47} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_swap})
Lexicase best program: (in1 tag_boolean_358 print_integer boolean_frominteger boolean_xor exec_yank boolean_frominteger boolean_flush tagged_658 boolean_empty exec_s (exec_empty boolean_stackdepth in3 exec_yankdup exec_k_when_autoconstructing (integer_empty) (boolean_dup_items) print_integer boolean_dup) (exec_s_when_autoconstructing (integer_rot integer_add) () (exec_y_when_autoconstructing (integer_dec integer_gt integer_inc) integer_inc integer_empty exec_shove () exec_swap (exec_do*count (exec_s (integer_add) (exec_rot (exec_noop) (print_integer boolean_stackdepth exec_k (integer_max exec_stackdepth boolean_eq) (-87 boolean_flush) integer_gt exec_y (integer_min exec_s_when_autoconstructing () (integer_flush exec_eq boolean_flush exec_k_when_autoconstructing (integer_yankdup boolean_frominteger) (boolean_invert_first_then_and boolean_or integer_gte) boolean_flush in2 exec_when (boolean_yankdup tag_integer_47 integer_shove integer_yank exec_do*range (boolean_not) boolean_swap)) ())) ()) ())) ())) ())
Lexicase best errors: [1 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction tag_boolean_358} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_flush} {:close 0, :instruction tagged_658} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_eq} {:close 0, :instruction -87} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_47} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_swap})
Zero cases best program: (in1 tag_boolean_358 print_integer boolean_frominteger boolean_xor exec_yank boolean_frominteger boolean_flush tagged_658 boolean_empty exec_s (exec_empty boolean_stackdepth in3 exec_yankdup exec_k_when_autoconstructing (integer_empty) (boolean_dup_items) print_integer boolean_dup) (exec_s_when_autoconstructing (integer_rot integer_add) () (exec_y_when_autoconstructing (integer_dec integer_gt integer_inc) integer_inc integer_empty exec_shove () exec_swap (exec_do*count (exec_s (integer_add) (exec_rot (exec_noop) (print_integer boolean_stackdepth exec_k (integer_max exec_stackdepth boolean_eq) (-87 boolean_flush) integer_gt exec_y (integer_min exec_s_when_autoconstructing () (integer_flush exec_eq boolean_flush exec_k_when_autoconstructing (integer_yankdup boolean_frominteger) (boolean_invert_first_then_and boolean_or integer_gte) boolean_flush in2 exec_when (boolean_yankdup tag_integer_47 integer_shove integer_yank exec_do*range (boolean_not) boolean_swap)) ())) ()) ())) ())) ())
Zero cases best errors: [1 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 2 2 24 6 4 2 4 2 10)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (4 2 2 24 6 4 2 4 2 10)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_683} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 21} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte})
Best program: (exec_s () (exec_dup_items exec_when (in1 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_xor boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) (exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div) boolean_invert_first_then_and exec_pop (boolean_swap in4 boolean_not integer_add integer_shove exec_pop (tagged_683 boolean_frominteger 21 exec_do*while (boolean_not) integer_dup boolean_flush exec_y_when_autoconstructing (integer_fromboolean) integer_max integer_add integer_max integer_stackdepth in4) integer_pop exec_empty) in2) in2 exec_dup_items integer_lte) ())) ())
Errors: [1 0 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 91
Size: 115
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 9.94
Median total errors in population: 10
Error averages by case: (0.996 0.998 0.998 0.976 0.994 0.996 0.998 0.996 0.998 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.587
Average program size in population (points): 72.198
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 502940
--- Timings ---
Current time: 1559314426690 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 30.9%
Fitness Testing:      1.6 seconds, 65.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -62                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 55                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: 82                 
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 73                 
Correct output: 10                  | Program output: 92                 
Correct output: 35                  | Program output: 100                
Correct output: 2                   | Program output: 36                 
Correct output: 4                   | Program output: 44                 
Correct output: 42                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 94                 
Correct output: 16                  | Program output: 85                 
Correct output: 6                   | Program output: 31                 
Correct output: 24                  | Program output: 78                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 36                 
Correct output: 16                  | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 53                 
Correct output: 9                   | Program output: 53                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: 52                 
Correct output: -22                 | Program output: 36                 
Correct output: -35                 | Program output: 47                 
Correct output: -69                 | Program output: 50                 
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: 19                 
Correct output: -58                 | Program output: 73                 
Correct output: -91                 | Program output: -79                
Correct output: -1                  | Program output: 69                 
Correct output: 24                  | Program output: 49                 
Correct output: -5                  | Program output: 46                 
Correct output: -85                 | Program output: 43                 
Correct output: -45                 | Program output: 48                 
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: 73                 
Correct output: -74                 | Program output: -47                
Correct output: -72                 | Program output: 42                 
Correct output: -84                 | Program output: 89                 
Correct output: -59                 | Program output: 67                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 94                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 78                 
Correct output: -98                 | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -68                
Correct output: -92                 | Program output: -62                
Correct output: -79                 | Program output: 4                  
Correct output: -55                 | Program output: 31                 
Correct output: 60                  | Program output: 84                 
Correct output: -94                 | Program output: -17                
Correct output: -67                 | Program output: 61                 
Correct output: -53                 | Program output: -14                
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: 42                 
Correct output: -59                 | Program output: 45                 
Correct output: -31                 | Program output: 54                 
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: 52                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 96                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 1, :instruction integer_empty})
Lexicase best program: (exec_eq integer_flush exec_empty integer_add integer_eq boolean_shove boolean_swap exec_pop (in1 integer_swap) integer_stackdepth boolean_invert_second_then_and boolean_xor integer_mult boolean_dup_items boolean_invert_first_then_and exec_swap (boolean_invert_second_then_and exec_y_when_autoconstructing (exec_dup (exec_s (integer_add integer_yank) (print_integer boolean_shove in2) (boolean_eq integer_gt exec_if (exec_k (integer_empty) ()) ())))) ())
Lexicase best errors: [1 0 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 1, :instruction integer_empty})
Zero cases best program: (exec_eq integer_flush exec_empty integer_add integer_eq boolean_shove boolean_swap exec_pop (in1 integer_swap) integer_stackdepth boolean_invert_second_then_and boolean_xor integer_mult boolean_dup_items boolean_invert_first_then_and exec_swap (boolean_invert_second_then_and exec_y_when_autoconstructing (exec_dup (exec_s (integer_add integer_yank) (print_integer boolean_shove in2) (boolean_eq integer_gt exec_if (exec_k (integer_empty) ()) ())))) ())
Zero cases best errors: [1 0 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 755 120 341 406 1000 1000 120 341 1000)
Population mean number of elite cases: 6.08
Count of perfect (error zero) individuals by case: (0 755 120 341 406 0 0 120 341 0)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_378} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_344} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_925} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*while})
Best program: (exec_while (integer_yankdup exec_stackdepth exec_empty) integer_lt integer_stackdepth boolean_xor integer_rot in2 print_integer integer_pop print_boolean boolean_shove print_boolean boolean_invert_second_then_and exec_dup_times () boolean_xor tag_exec_378 (boolean_not integer_mult integer_fromboolean) integer_yank integer_dup_times integer_gt exec_noop exec_swap () (boolean_xor integer_lt exec_dup_times (boolean_eq) exec_flush integer_min boolean_dup_items exec_stackdepth exec_dup_items boolean_dup_times exec_s (boolean_shove print_newline tagged_344 exec_do*range (integer_add exec_dup_items) integer_swap print_integer) (boolean_rot tagged_925 integer_gte in1 integer_mult integer_dup_items exec_when () boolean_invert_second_then_and integer_mult exec_when (exec_eq exec_stackdepth) exec_y (exec_noop integer_mult) integer_empty) (exec_empty integer_sub boolean_swap boolean_and) exec_y (integer_sub exec_do*while ())))
Errors: [1 0 1 0 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 68
Size: 84
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 7.917
Median total errors in population: 8
Error averages by case: (1.0 0.245 0.88 0.659 0.594 1.0 1.0 0.88 0.659 1.0)
Error minima by case: (1 0 0 0 0 1 1 0 0 1)
Average genome size in population (length): 60.291
Average program size in population (points): 80.646
Average percent parens in population: 0.258
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.491
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1340698
--- Timings ---
Current time: 1559314429703 milliseconds
Total Time:           6.3 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.4 seconds, 38.4%
Fitness Testing:      2.7 seconds, 43.3%
Report:               1.0 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -62                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 55                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: 82                 
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 73                 
Correct output: 10                  | Program output: 92                 
Correct output: 35                  | Program output: 100                
Correct output: 2                   | Program output: 36                 
Correct output: 4                   | Program output: 44                 
Correct output: 42                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 94                 
Correct output: 16                  | Program output: 85                 
Correct output: 6                   | Program output: 31                 
Correct output: 24                  | Program output: 78                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 36                 
Correct output: 16                  | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 53                 
Correct output: 9                   | Program output: 53                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: 52                 
Correct output: -22                 | Program output: 36                 
Correct output: -35                 | Program output: 47                 
Correct output: -69                 | Program output: 50                 
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: 19                 
Correct output: -58                 | Program output: 73                 
Correct output: -91                 | Program output: -79                
Correct output: -1                  | Program output: 69                 
Correct output: 24                  | Program output: 49                 
Correct output: -5                  | Program output: 46                 
Correct output: -85                 | Program output: 43                 
Correct output: -45                 | Program output: 48                 
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: 73                 
Correct output: -74                 | Program output: -47                
Correct output: -72                 | Program output: 42                 
Correct output: -84                 | Program output: 89                 
Correct output: -59                 | Program output: 67                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 94                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 78                 
Correct output: -98                 | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -68                
Correct output: -92                 | Program output: -62                
Correct output: -79                 | Program output: 4                  
Correct output: -55                 | Program output: 31                 
Correct output: 60                  | Program output: 84                 
Correct output: -94                 | Program output: -17                
Correct output: -67                 | Program output: 61                 
Correct output: -53                 | Program output: -14                
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: 42                 
Correct output: -59                 | Program output: 45                 
Correct output: -31                 | Program output: 54                 
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: 52                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 96                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_378} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_344} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_925} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*while})
Lexicase best program: (exec_while (integer_yankdup exec_stackdepth exec_empty) integer_lt integer_stackdepth boolean_xor integer_rot in2 print_integer integer_pop print_boolean boolean_shove print_boolean boolean_invert_second_then_and exec_dup_times () boolean_xor tag_exec_378 (boolean_not integer_mult integer_fromboolean) integer_yank integer_dup_times integer_gt exec_noop exec_swap () (boolean_xor integer_lt exec_dup_times (boolean_eq) exec_flush integer_min boolean_dup_items exec_stackdepth exec_dup_items boolean_dup_times exec_s (boolean_shove print_newline tagged_344 exec_do*range (integer_add exec_dup_items) integer_swap print_integer) (boolean_rot tagged_925 integer_gte in1 integer_mult integer_dup_items exec_when () boolean_invert_second_then_and integer_mult exec_when (exec_eq exec_stackdepth) exec_y (exec_noop integer_mult) integer_empty) (exec_empty integer_sub boolean_swap boolean_and) exec_y (integer_sub exec_do*while ())))
Lexicase best errors: [0 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_378} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_344} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_925} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*while})
Zero cases best program: (exec_while (integer_yankdup exec_stackdepth exec_empty) integer_lt integer_stackdepth boolean_xor integer_rot in2 print_integer integer_pop print_boolean boolean_shove print_boolean boolean_invert_second_then_and exec_dup_times () boolean_xor tag_exec_378 (boolean_not integer_mult integer_fromboolean) integer_yank integer_dup_times integer_gt exec_noop exec_swap () (boolean_xor integer_lt exec_dup_times (boolean_eq) exec_flush integer_min boolean_dup_items exec_stackdepth exec_dup_items boolean_dup_times exec_s (boolean_shove print_newline tagged_344 exec_do*range (integer_add exec_dup_items) integer_swap print_integer) (boolean_rot tagged_925 integer_gte in1 integer_mult integer_dup_items exec_when () boolean_invert_second_then_and integer_mult exec_when (exec_eq exec_stackdepth) exec_y (exec_noop integer_mult) integer_empty) (exec_empty integer_sub boolean_swap boolean_and) exec_y (integer_sub exec_do*while ())))
Zero cases best errors: [0 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (389 389 389 389 475 187 293 182 187 389)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (389 389 389 389 475 187 293 182 187 389)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_378} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_344} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_925} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*while})
Best program: (exec_while (integer_yankdup exec_stackdepth exec_empty) integer_lt integer_stackdepth boolean_xor integer_rot in2 print_integer integer_pop print_boolean boolean_shove print_boolean boolean_invert_second_then_and exec_dup_times () boolean_xor tag_exec_378 (boolean_not integer_mult integer_fromboolean) integer_yank integer_dup_times integer_gt exec_noop exec_swap () (boolean_xor integer_lt exec_dup_times (boolean_eq)) exec_flush integer_min boolean_dup_items exec_stackdepth exec_dup_items boolean_dup_times exec_s (boolean_shove print_newline tagged_344 exec_do*range (integer_add exec_dup_items) integer_swap print_integer) (boolean_rot tagged_925 integer_gte in1 integer_mult integer_dup_items exec_when () boolean_invert_second_then_and integer_mult exec_when (exec_eq exec_stackdepth) exec_y (exec_noop integer_mult)) (integer_empty exec_empty integer_sub boolean_swap boolean_and) exec_y (integer_sub exec_do*while ()))
Errors: [0 0 0 0 1 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 68
Size: 84
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.731
Median total errors in population: 6
Error averages by case: (0.611 0.611 0.611 0.611 0.525 0.813 0.707 0.818 0.813 0.611)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.657
Average program size in population (points): 66.794
Average percent parens in population: 0.260
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.962
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1985862
--- Timings ---
Current time: 1559314432602 milliseconds
Total Time:           9.2 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.4 seconds, 47.5%
Fitness Testing:      3.4 seconds, 36.9%
Report:               1.3 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -62                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 41                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 22                 
Correct output: 4                   | Program output: 63                 
Correct output: 42                  | Program output: 95                 
Correct output: 16                  | Program output: 91                 
Correct output: 33                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 51                 
Correct output: 1                   | Program output: 36                 
Correct output: 6                   | Program output: 84                 
Correct output: 16                  | Program output: 92                 
Correct output: 50                  | Program output: 51                 
Correct output: 24                  | Program output: 84                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 87                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: 63                 
Correct output: -35                 | Program output: 95                 
Correct output: -69                 | Program output: 78                 
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: -9                 
Correct output: -58                 | Program output: -3                 
Correct output: -91                 | Program output: -79                
Correct output: -1                  | Program output: 31                 
Correct output: 24                  | Program output: 57                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -3                 
Correct output: -45                 | Program output: 6                  
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: 34                 
Correct output: -74                 | Program output: -47                
Correct output: -72                 | Program output: 24                 
Correct output: -84                 | Program output: 12                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 64                 
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 95                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -68                
Correct output: -92                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 55                 
Correct output: 60                  | Program output: 61                 
Correct output: -94                 | Program output: -17                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -14                
Correct output: -58                 | Program output: -16                
Correct output: -96                 | Program output: -36                
Correct output: -59                 | Program output: 75                 
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: 25                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 21                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (exec_s () (exec_dup_items exec_when (in1 in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) (exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div))) ())) ())
Lexicase best errors: [0 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 84
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (exec_s () (exec_dup_items exec_when (in1 in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) (exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div))) ())) ())
Zero cases best errors: [0 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 84
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (434 242 1000 212 434 1000 1000 212 212 433)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (434 242 0 212 434 0 0 212 212 433)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (exec_s () (exec_dup_items exec_when (in1 in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) (exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div))) ())) ())
Errors: [0 0 1 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 64
Size: 84
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.821
Median total errors in population: 7
Error averages by case: (0.566 0.758 1.0 0.788 0.566 1.0 1.0 0.788 0.788 0.567)
Error minima by case: (0 0 1 0 0 1 1 0 0 0)
Average genome size in population (length): 53.29
Average program size in population (points): 70.483
Average percent parens in population: 0.246
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.524
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2760215
--- Timings ---
Current time: 1559314436131 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.4 seconds, 52.3%
Fitness Testing:      4.1 seconds, 33.9%
Report:               1.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: 79                 
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: 56                 
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 95                 
Correct output: 42                  | Program output: 44                 
Correct output: 16                  | Program output: 75                 
Correct output: 33                  | Program output: 72                 
Correct output: 8                   | Program output: 8888               
Correct output: 16                  | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 24                  | Program output: 33                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 4                  
Correct output: 6                   | Program output: 23                 
Correct output: 16                  | Program output: 30                 
Correct output: 50                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 71                 
Correct output: 16                  | Program output: 98                 
Correct output: -48                 | Program output: 86                 
Correct output: -37                 | Program output: 67                 
Correct output: -22                 | Program output: -5                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 88                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 89                 
Correct output: -84                 | Program output: 91                 
Correct output: -58                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: -5                  | Program output: 1                  
Correct output: -85                 | Program output: -58                
Correct output: -45                 | Program output: -15                
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: 15                 
Correct output: -7                  | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: 69                 
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: 15                 
Correct output: -97                 | Program output: -67                
Correct output: -41                 | Program output: 69                 
Correct output: -90                 | Program output: 39                 
Correct output: -47                 | Program output: 90                 
Correct output: -25                 | Program output: 14                 
Correct output: -73                 | Program output: 57                 
Correct output: -80                 | Program output: -48                
Correct output: -50                 | Program output: -40                
Correct output: 59                  | Program output: 61                 
Correct output: -98                 | Program output: -66                
Correct output: -35                 | Program output: 53                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: 5                  
Correct output: -55                 | Program output: 25                 
Correct output: 60                  | Program output: 60                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -34                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -16                
Correct output: -31                 | Program output: -6                 
Correct output: -53                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 93                 
Correct output: -40                 | Program output: -22                
Correct output: -87                 | Program output: 76                 
Correct output: -1                  | Program output: 18                 
Correct output: -81                 | Program output: 82                 
Correct output: -37                 | Program output: -30                
Correct output: -100                | Program output: 4                  
Correct output: -93                 | Program output: 84                 
Correct output: -88                 | Program output: -73                
Correct output: -58                 | Program output: 41                 
Correct output: -33                 | Program output: 30                 
Correct output: -75                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1})
Lexicase best program: (in3 integer_lte exec_when (in1 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_empty boolean_stackdepth in3 exec_yankdup exec_k_when_autoconstructing (integer_empty) (boolean_dup_items) print_integer boolean_dup) exec_s_when_autoconstructing (integer_rot integer_add) () (exec_y_when_autoconstructing (integer_dec integer_gt integer_inc) integer_inc integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1)))
Lexicase best errors: [1 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 66
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1})
Zero cases best program: (in3 integer_lte exec_when (in1 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_empty boolean_stackdepth in3 exec_yankdup exec_k_when_autoconstructing (integer_empty) (boolean_dup_items) print_integer boolean_dup) exec_s_when_autoconstructing (integer_rot integer_add) () (exec_y_when_autoconstructing (integer_dec integer_gt integer_inc) integer_inc integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1)))
Zero cases best errors: [1 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 66
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (507 511 923 399 399 403 512 505 399 400)
Population mean number of elite cases: 4.96
Count of perfect (error zero) individuals by case: (507 511 923 399 399 403 512 505 399 400)
Population mean number of perfect (error zero) cases: 4.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1})
Best program: (in3 integer_lte exec_when (in1 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_xor boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1)) ())) ()))
Errors: [1 1 0 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 71
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 5.042
Median total errors in population: 5
Error averages by case: (0.493 0.489 0.077 0.601 0.601 0.597 0.488 0.495 0.601 0.6)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.976
Average program size in population (points): 78.243
Average percent parens in population: 0.233
Minimum age in population: 4.75
Maximum age in population: 7.625
Average age in population: 6.2845
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4015258
--- Timings ---
Current time: 1559314440088 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.5 seconds, 52.5%
Fitness Testing:      5.3 seconds, 32.4%
Report:               2.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 580
Test mean error for best: 0.58000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 95                 
Correct output: 42                  | Program output: 44                 
Correct output: 16                  | Program output: 7516               
Correct output: 33                  | Program output: 72                 
Correct output: 8                   | Program output: 88                 
Correct output: 16                  | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 24                  | Program output: 33                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 36                 
Correct output: 6                   | Program output: 23                 
Correct output: 16                  | Program output: 30                 
Correct output: 50                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 71                 
Correct output: 16                  | Program output: 9816               
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: 67                 
Correct output: -22                 | Program output: -5                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: 9119               
Correct output: -58                 | Program output: -58                
Correct output: -91                 | Program output: -79                
Correct output: -1                  | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: -5                  | Program output: 1                  
Correct output: -85                 | Program output: -58                
Correct output: -45                 | Program output: -15                
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: -7                 
Correct output: -74                 | Program output: -47                
Correct output: -72                 | Program output: 69                 
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 3920               
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 57                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 61                 
Correct output: -98                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -68                
Correct output: -92                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 25                 
Correct output: 60                  | Program output: 60                 
Correct output: -94                 | Program output: -17                
Correct output: -67                 | Program output: -34                
Correct output: -53                 | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -16                
Correct output: -31                 | Program output: -6                 
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 18                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (in3 integer_lte exec_when (in1 in2 exec_dup_items exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ()))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (in3 integer_lte exec_when (in1 in2 exec_dup_items exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ()))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 923 5 459 1 931 555 366 553 2)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (361 923 5 459 1 931 555 366 553 2)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (in3 integer_lte exec_when (in1 in2 exec_dup_items exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ()))
Errors: [0 0 1 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 68
Size: 86
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 5.844
Median total errors in population: 6
Error averages by case: (0.639 0.077 0.995 0.541 0.999 0.069 0.445 0.634 0.447 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.497
Average program size in population (points): 75.388
Average percent parens in population: 0.224
Minimum age in population: 5.75
Maximum age in population: 9.3125
Average age in population: 7.9318125
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5193597
--- Timings ---
Current time: 1559314443764 milliseconds
Total Time:          19.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.4 seconds, 52.5%
Fitness Testing:      6.3 seconds, 31.6%
Report:               3.1 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 580
Test mean error for best: 0.58000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 95                 
Correct output: 42                  | Program output: 44                 
Correct output: 16                  | Program output: 7516               
Correct output: 33                  | Program output: 72                 
Correct output: 8                   | Program output: 88                 
Correct output: 16                  | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 24                  | Program output: 33                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 36                 
Correct output: 6                   | Program output: 23                 
Correct output: 16                  | Program output: 30                 
Correct output: 50                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 71                 
Correct output: 16                  | Program output: 9816               
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: 67                 
Correct output: -22                 | Program output: -5                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: 9119               
Correct output: -58                 | Program output: -58                
Correct output: -91                 | Program output: -79                
Correct output: -1                  | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: -5                  | Program output: 1                  
Correct output: -85                 | Program output: -58                
Correct output: -45                 | Program output: -15                
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: -7                 
Correct output: -74                 | Program output: -47                
Correct output: -72                 | Program output: 69                 
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 3920               
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 57                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 61                 
Correct output: -98                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -68                
Correct output: -92                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 25                 
Correct output: 60                  | Program output: 60                 
Correct output: -94                 | Program output: -17                
Correct output: -67                 | Program output: -34                
Correct output: -53                 | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -16                
Correct output: -31                 | Program output: -6                 
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 18                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1})
Lexicase best program: (in3 integer_lte exec_when (in1 in2 exec_dup_items exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_xor boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop exec_do*count (integer_gt boolean_xor tagged_537 boolean_empty exec_rot (exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1)) () ())) ())) ())))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 73
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1})
Zero cases best program: (in3 integer_lte exec_when (in1 in2 exec_dup_items exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_xor boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop exec_do*count (integer_gt boolean_xor tagged_537 boolean_empty exec_rot (exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1)) () ())) ())) ())))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 73
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 746 561 459 4 5 140 268 904 564)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (137 746 561 459 4 5 140 268 904 564)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (in3 integer_lte exec_when (in1 in2 exec_dup_items exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ()))
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 68
Size: 86
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 6.212
Median total errors in population: 6
Error averages by case: (0.863 0.254 0.439 0.541 0.996 0.995 0.86 0.732 0.096 0.436)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.528
Average program size in population (points): 73.921
Average percent parens in population: 0.239
Minimum age in population: 6.75
Maximum age in population: 10.9375
Average age in population: 8.83534375
Median age in population: 8.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.006
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6285641
--- Timings ---
Current time: 1559314447432 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.4 seconds, 52.7%
Fitness Testing:      7.3 seconds, 30.8%
Report:               3.8 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -62                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: -57                
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 68                 
Correct output: 10                  | Program output: 21                 
Correct output: 35                  | Program output: 78                 
Correct output: 2                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 42                  | Program output: 58                 
Correct output: 16                  | Program output: 67                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 65                 
Correct output: 16                  | Program output: 45                 
Correct output: 6                   | Program output: 61                 
Correct output: 24                  | Program output: 73                 
Correct output: 31                  | Program output: 83                 
Correct output: 1                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 16                  | Program output: 16                 
Correct output: 50                  | Program output: 75                 
Correct output: 24                  | Program output: 68                 
Correct output: 9                   | Program output: 36                 
Correct output: 16                  | Program output: 50                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: 7                  
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: -23                
Correct output: -69                 | Program output: 70                 
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: -84                
Correct output: -58                 | Program output: 33                 
Correct output: -91                 | Program output: -79                
Correct output: -1                  | Program output: -1                 
Correct output: 24                  | Program output: 55                 
Correct output: -5                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: 85                 
Correct output: -74                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -64                
Correct output: -59                 | Program output: 80                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 59                 
Correct output: -98                 | Program output: 54                 
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -68                
Correct output: -92                 | Program output: -62                
Correct output: -79                 | Program output: -36                
Correct output: -55                 | Program output: -55                
Correct output: 60                  | Program output: 61                 
Correct output: -94                 | Program output: -17                
Correct output: -67                 | Program output: 97                 
Correct output: -53                 | Program output: -14                
Correct output: -58                 | Program output: 32                 
Correct output: -96                 | Program output: 77                 
Correct output: -59                 | Program output: -59                
Correct output: -31                 | Program output: 16                 
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: -1                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (exec_s () (exec_dup_items exec_when (in4 in2 in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ())) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (exec_s () (exec_dup_items exec_when (in4 in2 in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ())) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 559 21 190 559 189 558 559 313 378)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (190 559 21 190 559 189 558 559 313 378)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (exec_s () (exec_dup_items exec_when (in4 in2 in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) (exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div))) ()))) ())
Errors: [0 0 1 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 58
Size: 78
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.484
Median total errors in population: 6
Error averages by case: (0.81 0.441 0.979 0.81 0.441 0.811 0.442 0.441 0.687 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.535
Average program size in population (points): 69.943
Average percent parens in population: 0.240
Minimum age in population: 8.625
Maximum age in population: 12.5
Average age in population: 10.013859375
Median age in population: 10.140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7341445
--- Timings ---
Current time: 1559314451030 milliseconds
Total Time:          27.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.3 seconds, 52.8%
Fitness Testing:      8.2 seconds, 30.3%
Report:               4.5 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -62                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 55                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 73                 
Correct output: 10                  | Program output: 41                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 22                 
Correct output: 4                   | Program output: 44                 
Correct output: 42                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 66                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 84                 
Correct output: 16                  | Program output: 92                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 9                   | Program output: 53                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: 52                 
Correct output: -22                 | Program output: 63                 
Correct output: -35                 | Program output: 95                 
Correct output: -69                 | Program output: 78                 
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: 19                 
Correct output: -58                 | Program output: -3                 
Correct output: -91                 | Program output: -79                
Correct output: -1                  | Program output: 31                 
Correct output: 24                  | Program output: 57                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -3                 
Correct output: -45                 | Program output: 6                  
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: 34                 
Correct output: -74                 | Program output: -47                
Correct output: -72                 | Program output: 42                 
Correct output: -84                 | Program output: 12                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 95                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -68                
Correct output: -92                 | Program output: -62                
Correct output: -79                 | Program output: 4                  
Correct output: -55                 | Program output: 5555               
Correct output: 60                  | Program output: 61                 
Correct output: -94                 | Program output: -17                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -14                
Correct output: -58                 | Program output: -16                
Correct output: -96                 | Program output: -36                
Correct output: -59                 | Program output: 75                 
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: 25                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 21                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (in3 in2 exec_k_when_autoconstructing (integer_lte exec_when (in1 in2 exec_dup_items exec_when () in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537) (boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth)) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div) ())) ())
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (in3 in2 exec_k_when_autoconstructing (integer_lte exec_when (in1 in2 exec_dup_items exec_when () in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537) (boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth)) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div) ())) ())
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 50 151 511 513 719 146 905 716 49)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (182 50 151 511 513 719 146 905 716 49)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (in3 in2 exec_k_when_autoconstructing (integer_lte exec_when (in1 in2 exec_dup_items exec_when () in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537) (boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth)) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div) ())) ())
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 70
Size: 90
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.058
Median total errors in population: 5
Error averages by case: (0.818 0.95 0.849 0.489 0.487 0.281 0.854 0.095 0.284 0.951)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.207
Average program size in population (points): 81.351
Average percent parens in population: 0.236
Minimum age in population: 9.625
Maximum age in population: 13.3515625
Average age in population: 11.261640625
Median age in population: 11.21875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8546960
--- Timings ---
Current time: 1559314454796 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.3 seconds, 52.8%
Fitness Testing:      9.3 seconds, 30.1%
Report:               5.2 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 95                 
Correct output: 42                  | Program output: 44                 
Correct output: 16                  | Program output: 75                 
Correct output: 33                  | Program output: 72                 
Correct output: 8                   | Program output: 88                 
Correct output: 16                  | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 24                  | Program output: 33                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 36                 
Correct output: 6                   | Program output: 23                 
Correct output: 16                  | Program output: 30                 
Correct output: 50                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 71                 
Correct output: 16                  | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: 67                 
Correct output: -22                 | Program output: -5                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: 91                 
Correct output: -58                 | Program output: -58                
Correct output: -91                 | Program output: -79                
Correct output: -1                  | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: -5                  | Program output: 1                  
Correct output: -85                 | Program output: -58                
Correct output: -45                 | Program output: -15                
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: -7                 
Correct output: -74                 | Program output: -47                
Correct output: -72                 | Program output: 69                 
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 57                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 61                 
Correct output: -98                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -68                
Correct output: -92                 | Program output: -62                
Correct output: -79                 | Program output: 5                  
Correct output: -55                 | Program output: 25                 
Correct output: 60                  | Program output: 60                 
Correct output: -94                 | Program output: -17                
Correct output: -67                 | Program output: -34                
Correct output: -53                 | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -16                
Correct output: -31                 | Program output: -6                 
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 18                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (boolean_dup integer_lte in3 integer_lte exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop boolean_xor integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth)) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ()))
Lexicase best errors: [1 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (boolean_dup integer_lte in3 integer_lte exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop boolean_xor integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth)) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ()))
Zero cases best errors: [1 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 701 8 701 8 1000 555 207 207 710)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (207 701 8 701 8 0 555 207 207 710)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (in3 integer_lte integer_lt integer_lte exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt integer_mult integer_pop integer_yank) (exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) integer_pop boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ()))
Errors: [1 0 0 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 64
Size: 80
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.696
Median total errors in population: 6
Error averages by case: (0.793 0.299 0.992 0.299 0.992 1.0 0.445 0.793 0.793 0.29)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 65.608
Average program size in population (points): 85.571
Average percent parens in population: 0.234
Minimum age in population: 10.671875
Maximum age in population: 14.62109375
Average age in population: 12.7259609375
Median age in population: 12.72265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9778896
--- Timings ---
Current time: 1559314458351 milliseconds
Total Time:          34.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.3 seconds, 52.8%
Fitness Testing:     10.4 seconds, 29.9%
Report:               5.9 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -62                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 41                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 22                 
Correct output: 4                   | Program output: 63                 
Correct output: 42                  | Program output: 95                 
Correct output: 16                  | Program output: 91                 
Correct output: 33                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 51                 
Correct output: 1                   | Program output: 36                 
Correct output: 6                   | Program output: 84                 
Correct output: 16                  | Program output: 92                 
Correct output: 50                  | Program output: 51                 
Correct output: 24                  | Program output: 84                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 87                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: 63                 
Correct output: -35                 | Program output: 95                 
Correct output: -69                 | Program output: 78                 
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: -9                 
Correct output: -58                 | Program output: -3                 
Correct output: -91                 | Program output: -79                
Correct output: -1                  | Program output: 31                 
Correct output: 24                  | Program output: 57                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -3                 
Correct output: -45                 | Program output: 6                  
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: 34                 
Correct output: -74                 | Program output: -47                
Correct output: -72                 | Program output: 24                 
Correct output: -84                 | Program output: 12                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 64                 
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 95                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -68                
Correct output: -92                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 55                 
Correct output: 60                  | Program output: 61                 
Correct output: -94                 | Program output: -17                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -14                
Correct output: -58                 | Program output: -16                
Correct output: -96                 | Program output: -36                
Correct output: -59                 | Program output: 75                 
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: 25                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 21                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (in3 boolean_dup_items in3 integer_lte exec_when (in3 exec_k_when_autoconstructing (integer_lte exec_when (in1 in2 exec_dup_items exec_when () in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537) (boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth)) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div) ())) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (in3 boolean_dup_items in3 integer_lte exec_when (in3 exec_k_when_autoconstructing (integer_lte exec_when (in1 in2 exec_dup_items exec_when () in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537) (boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth)) integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div) ())) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (585 387 498 385 596 933 7 492 882 11)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (585 387 498 385 596 933 7 492 882 11)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (exec_when (in1) in2 in2 integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (integer_pop) (in3 in1 exec_stackdepth) integer_eq) (exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ())) ())) ()) ()))
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 83
Size: 109
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 5.224
Median total errors in population: 6
Error averages by case: (0.415 0.613 0.502 0.615 0.404 0.067 0.993 0.508 0.118 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.919
Average program size in population (points): 87.132
Average percent parens in population: 0.232
Minimum age in population: 12.1875
Maximum age in population: 15.84375
Average age in population: 14.273033203125
Median age in population: 14.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.009
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 10997556
--- Timings ---
Current time: 1559314462443 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.6 seconds, 53.4%
Fitness Testing:     11.5 seconds, 29.8%
Report:               6.4 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 483
Test mean error for best: 0.48300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 55                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 1173               
Correct output: 10                  | Program output: 41                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 22                 
Correct output: 4                   | Program output: 44                 
Correct output: 42                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 88                 
Correct output: 16                  | Program output: 1616               
Correct output: 6                   | Program output: 66                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 36                 
Correct output: 16                  | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 53                 
Correct output: 9                   | Program output: 953                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: 36                 
Correct output: -35                 | Program output: 47                 
Correct output: -69                 | Program output: 50                 
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: -9                 
Correct output: -58                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -3                 
Correct output: -45                 | Program output: 66                 
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52-52             
Correct output: -7                  | Program output: 34                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: 24                 
Correct output: -84                 | Program output: 1212               
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25-25             
Correct output: -73                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 78                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 31                 
Correct output: 60                  | Program output: 61                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -16                
Correct output: -96                 | Program output: -36                
Correct output: -59                 | Program output: 45                 
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: 25                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 21                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (exec_s () (integer_lte exec_when (in1 boolean_invert_second_then_and exec_dup_items exec_when (in1) in2 integer_min integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)))) ())) ())
Lexicase best errors: [0 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 93
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (exec_s () (integer_lte exec_when (in1 boolean_invert_second_then_and exec_dup_items exec_when (in1) in2 integer_min integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)))) ())) ())
Zero cases best errors: [0 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 93
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (378 2 69 5 378 66 718 59 807 93)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (378 2 69 5 378 66 718 59 807 93)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (exec_s () (integer_lte exec_when (in1 boolean_invert_second_then_and exec_dup_items exec_when (in1) in2 integer_min integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)))) ())) ())
Errors: [0 1 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 71
Size: 93
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 7.425
Median total errors in population: 8
Error averages by case: (0.622 0.998 0.931 0.995 0.622 0.934 0.282 0.941 0.193 0.907)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.841
Average program size in population (points): 83.655
Average percent parens in population: 0.237
Minimum age in population: 14.044921875
Maximum age in population: 17.4951171875
Average age in population: 15.79554296875
Median age in population: 15.79736328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 12098853
--- Timings ---
Current time: 1559314466177 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.5 seconds, 53.4%
Fitness Testing:     12.5 seconds, 29.5%
Report:               7.1 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 493
Test mean error for best: 0.49300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 55                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 1173               
Correct output: 10                  | Program output: 41                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2222               
Correct output: 4                   | Program output: 44                 
Correct output: 42                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 88                 
Correct output: 16                  | Program output: 1616               
Correct output: 6                   | Program output: 66                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 36                 
Correct output: 16                  | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 53                 
Correct output: 9                   | Program output: 953                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: 36                 
Correct output: -35                 | Program output: 47                 
Correct output: -69                 | Program output: 50                 
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: -9                 
Correct output: -58                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -3                 
Correct output: -45                 | Program output: 66                 
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52-52             
Correct output: -7                  | Program output: 34                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: 24                 
Correct output: -84                 | Program output: 1212               
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25-25             
Correct output: -73                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 78                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 31                 
Correct output: 60                  | Program output: 61                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -16                
Correct output: -96                 | Program output: -36                
Correct output: -59                 | Program output: 45                 
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: 25                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 2121               
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (exec_s () (integer_lte exec_when (in1 boolean_invert_second_then_and exec_dup_items exec_when (in1) in2 integer_min integer_yankdup print_integer print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)))) ())) ())
Lexicase best errors: [1 0 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (exec_s () (integer_lte exec_when (in1 boolean_invert_second_then_and exec_dup_items exec_when (in1) in2 integer_min integer_yankdup print_integer print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)))) ())) ())
Zero cases best errors: [1 0 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 620 198 86 87 766 555 594 87 136)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (86 620 198 86 87 766 555 594 87 136)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (exec_s () (integer_lte exec_when (in1 boolean_invert_second_then_and exec_dup_items exec_when (in1) in2 integer_min integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) print_integer boolean_and integer_gt print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)))) ())) ())
Errors: [1 0 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 75
Size: 97
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.785
Median total errors in population: 6
Error averages by case: (0.914 0.38 0.802 0.914 0.913 0.234 0.445 0.406 0.913 0.864)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.883
Average program size in population (points): 84.05
Average percent parens in population: 0.244
Minimum age in population: 15.54296875
Maximum age in population: 18.85302734375
Average age in population: 17.90373095703125
Median age in population: 17.666015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 213
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 13224340
--- Timings ---
Current time: 1559314469862 milliseconds
Total Time:          45.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.4 seconds, 53.2%
Fitness Testing:     13.5 seconds, 29.3%
Report:               7.9 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: 90                 
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 55                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 41                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 22                 
Correct output: 4                   | Program output: 44                 
Correct output: 42                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 66                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 36                 
Correct output: 16                  | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 53                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: 36                 
Correct output: -35                 | Program output: 47                 
Correct output: -69                 | Program output: 50                 
Correct output: -67                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -10                
Correct output: -84                 | Program output: -9                 
Correct output: -58                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -3                 
Correct output: -45                 | Program output: 66                 
Correct output: -55                 | Program output: -13                
Correct output: -61                 | Program output: -52                
Correct output: -7                  | Program output: 34                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: 24                 
Correct output: -84                 | Program output: 12                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: 59                  | Program output: 78                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 31                 
Correct output: 60                  | Program output: 61                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -16                
Correct output: -96                 | Program output: -36                
Correct output: -59                 | Program output: 45                 
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -37                
Correct output: -67                 | Program output: 25                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -1                  | Program output: 21                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100-100           
Correct output: -93                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (exec_s () (integer_lte exec_when (in1 boolean_invert_second_then_and exec_dup_items exec_when (in1) in2 integer_min integer_yankdup print_integer exec_stackdepth exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) (exec_yankdup boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) exec_y_when_autoconstructing (boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_add integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)))) ())))
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 92
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (exec_s () (integer_lte exec_when (in1 boolean_invert_second_then_and exec_dup_items exec_when (in1) in2 integer_min integer_yankdup print_integer exec_stackdepth exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) (exec_yankdup boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items) exec_y_when_autoconstructing (boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_add integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)))) ())))
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 92
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 450 450 384 301 252 438 113 215 917)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (364 450 450 384 301 252 438 113 215 917)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (exec_s () (integer_lte exec_when (in1 boolean_invert_second_then_and exec_dup_items exec_when (in1 in2 integer_min integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 integer_dup_items integer_mod integer_eq exec_dup_items)) print_integer boolean_and integer_gt exec_do*range (boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times exec_if (exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth integer_eq) (exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))) ())) ())
Errors: [1 0 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 71
Size: 93
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 6.116
Median total errors in population: 7
Error averages by case: (0.636 0.55 0.55 0.616 0.699 0.748 0.562 0.887 0.785 0.083)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.541
Average program size in population (points): 77.141
Average percent parens in population: 0.243
Minimum age in population: 16.54296875
Maximum age in population: 20.759521484375
Average age in population: 19.3045126953125
Median age in population: 19.28076171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14198490
--- Timings ---
Current time: 1559314473478 milliseconds
Total Time:          49.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.3 seconds, 53.2%
Fitness Testing:     14.4 seconds, 29.0%
Report:               8.7 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 51                 
Correct output: -77                 | Program output: 79                 
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: 98                 
Correct output: -48                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 63                 
Correct output: 42                  | Program output: 44                 
Correct output: 16                  | Program output: 75                 
Correct output: 33                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 4                  
Correct output: 6                   | Program output: 23                 
Correct output: 16                  | Program output: 30                 
Correct output: 50                  | Program output: 51                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 87                 
Correct output: -48                 | Program output: 28                 
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: -5                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 38                 
Correct output: -84                 | Program output: -9                 
Correct output: -58                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -58                
Correct output: -45                 | Program output: -15                
Correct output: -55                 | Program output: -51                
Correct output: -61                 | Program output: 7                  
Correct output: -7                  | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -67                
Correct output: -41                 | Program output: 6                  
Correct output: -90                 | Program output: 39                 
Correct output: -47                 | Program output: -11                
Correct output: -25                 | Program output: 14                 
Correct output: -73                 | Program output: 47                 
Correct output: -80                 | Program output: -48                
Correct output: -50                 | Program output: -40                
Correct output: 59                  | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 53                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 25                 
Correct output: 60                  | Program output: 60                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -16                
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 70                 
Correct output: -40                 | Program output: -22                
Correct output: -87                 | Program output: 16                 
Correct output: -1                  | Program output: 18                 
Correct output: -81                 | Program output: 82                 
Correct output: -37                 | Program output: -30                
Correct output: -100                | Program output: -32                
Correct output: -93                 | Program output: 58                 
Correct output: -88                 | Program output: -73                
Correct output: -58                 | Program output: 2                  
Correct output: -33                 | Program output: 30                 
Correct output: -75                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Lexicase best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq boolean_and boolean_dup_times integer_dup integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 exec_k_when_autoconstructing (integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380 exec_do*count (boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ())
Lexicase best errors: [0 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 89
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div})
Zero cases best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq boolean_and boolean_dup_times integer_dup integer_swap) exec_eq) exec_flush boolean_dup_items tag_boolean_466 exec_k_when_autoconstructing (integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (integer_dup boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380 exec_do*count (boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte) integer_div)) ())
Zero cases best errors: [0 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 89
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (365 366 366 417 519 429 520 107 365 421)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (365 366 366 417 519 429 520 107 365 421)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap})
Best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min integer_yankdup print_integer exec_if (exec_yank) (integer_lt boolean_or integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_min integer_swap) exec_if () (exec_flush boolean_dup_items tag_boolean_466 boolean_yank integer_mod integer_dec exec_dup_items) print_integer boolean_and integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap () ())))) ())
Errors: [0 1 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.125
Median total errors in population: 5
Error averages by case: (0.635 0.634 0.634 0.583 0.481 0.571 0.48 0.893 0.635 0.579)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.606
Average program size in population (points): 82.649
Average percent parens in population: 0.244
Minimum age in population: 18.35302734375
Maximum age in population: 22.666015625
Average age in population: 20.85437475585938
Median age in population: 20.8798828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 15281843
--- Timings ---
Current time: 1559314476672 milliseconds
Total Time:          53.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.3 seconds, 53.1%
Fitness Testing:     15.3 seconds, 28.8%
Report:               9.5 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: 79                 
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: -57                
Correct output: -48                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 42                  | Program output: 44                 
Correct output: 16                  | Program output: 67                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 16                  | Program output: 16                 
Correct output: 50                  | Program output: 51                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 50                 
Correct output: -48                 | Program output: 28                 
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -58                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: 24                  | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -67                
Correct output: -41                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: -11                
Correct output: -25                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: -48                
Correct output: -50                 | Program output: -40                
Correct output: 59                  | Program output: 59                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 27                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: 60                  | Program output: 60                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -53                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 40                 
Correct output: -40                 | Program output: -40                
Correct output: -87                 | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -30                
Correct output: -100                | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -73                
Correct output: -58                 | Program output: 2                  
Correct output: -33                 | Program output: 30                 
Correct output: -75                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380})
Lexicase best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items exec_eq) exec_flush boolean_dup_items tag_boolean_466 exec_k_when_autoconstructing (integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (boolean_empty boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380) ()) ()))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 84
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380})
Zero cases best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items exec_eq) exec_flush boolean_dup_items tag_boolean_466 exec_k_when_autoconstructing (integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (boolean_empty boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380) ()) ()))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 84
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (421 48 493 124 487 562 438 929 703 213)
Population mean number of elite cases: 4.42
Count of perfect (error zero) individuals by case: (421 48 493 124 487 562 438 929 703 213)
Population mean number of perfect (error zero) cases: 4.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380})
Best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items exec_eq) exec_flush boolean_dup_items tag_boolean_466 exec_k_when_autoconstructing (integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (boolean_empty boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380) ()) ()))) ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 84
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.582
Median total errors in population: 5
Error averages by case: (0.579 0.952 0.507 0.876 0.513 0.438 0.562 0.071 0.297 0.787)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.322
Average program size in population (points): 78.891
Average percent parens in population: 0.237
Minimum age in population: 20.5400390625
Maximum age in population: 24.26318359375
Average age in population: 22.33070928955078
Median age in population: 22.3857421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 16279570
--- Timings ---
Current time: 1559314480154 milliseconds
Total Time:          56.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.2 seconds, 53.6%
Fitness Testing:     16.2 seconds, 28.8%
Report:               9.8 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: 79                 
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: -57                
Correct output: -48                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 42                  | Program output: 44                 
Correct output: 16                  | Program output: 67                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 16                  | Program output: 16                 
Correct output: 50                  | Program output: 51                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 50                 
Correct output: -48                 | Program output: 28                 
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -58                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: 24                  | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -67                
Correct output: -41                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: -11                
Correct output: -25                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: -48                
Correct output: -50                 | Program output: -40                
Correct output: 59                  | Program output: 59                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 27                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: 60                  | Program output: 60                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -53                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 40                 
Correct output: -40                 | Program output: -40                
Correct output: -87                 | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -30                
Correct output: -100                | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -73                
Correct output: -58                 | Program output: 2                  
Correct output: -33                 | Program output: 30                 
Correct output: -75                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380})
Lexicase best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items exec_eq) exec_flush boolean_dup_items tag_boolean_466 exec_k_when_autoconstructing (integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (boolean_empty boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380) ()) ()))) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 84
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380})
Zero cases best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items exec_eq) exec_flush boolean_dup_items tag_boolean_466 exec_k_when_autoconstructing (integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (boolean_empty boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380) ()) ()))) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 84
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (954 897 225 659 658 694 897 692 880 692)
Population mean number of elite cases: 7.25
Count of perfect (error zero) individuals by case: (954 897 225 659 658 694 897 692 880 692)
Population mean number of perfect (error zero) cases: 7.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380})
Best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items exec_eq) exec_flush boolean_dup_items tag_boolean_466 exec_k_when_autoconstructing (integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (boolean_empty boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380) ()) ()))) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 84
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 2.752
Median total errors in population: 1
Error averages by case: (0.046 0.103 0.775 0.341 0.342 0.306 0.103 0.308 0.12 0.308)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.58
Average program size in population (points): 85.342
Average percent parens in population: 0.220
Minimum age in population: 22.78057861328125
Maximum age in population: 25.12164306640625
Average age in population: 23.68932540893555
Median age in population: 23.8798828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 279
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.01
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 17605532
--- Timings ---
Current time: 1559314483892 milliseconds
Total Time:          60.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.1 seconds, 53.5%
Fitness Testing:     17.3 seconds, 28.9%
Report:              10.5 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 205
Test mean error for best: 0.20500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: 79                 
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: -57                
Correct output: -48                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 42                  | Program output: 44                 
Correct output: 16                  | Program output: 67                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 16                  | Program output: 16                 
Correct output: 50                  | Program output: 51                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 50                 
Correct output: -48                 | Program output: 28                 
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -58                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: 24                  | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -67                
Correct output: -41                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: -11                
Correct output: -25                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: -48                
Correct output: -50                 | Program output: -40                
Correct output: 59                  | Program output: 59                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 27                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: 60                  | Program output: 60                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -53                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 40                 
Correct output: -40                 | Program output: -40                
Correct output: -87                 | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -30                
Correct output: -100                | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -73                
Correct output: -58                 | Program output: 2                  
Correct output: -33                 | Program output: 30                 
Correct output: -75                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380})
Lexicase best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (boolean_empty boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380) ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 72
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_380})
Zero cases best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_lt boolean_or integer_eq exec_dup (integer_dup_items integer_gt exec_do*range (integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times integer_pop exec_stackdepth) (exec_swap (integer_rot) (boolean_empty boolean_pop integer_inc integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) boolean_not) integer_pop) in3 in1 exec_stackdepth) integer_eq) exec_eq boolean_stackdepth tag_boolean_380) ()) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 72
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (933 783 934 929 929 934 935 779 782 933)
Population mean number of elite cases: 8.87
Count of perfect (error zero) individuals by case: (933 783 934 929 929 934 935 779 782 933)
Population mean number of perfect (error zero) cases: 8.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_537} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_515} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div})
Best program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 70
Size: 90
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 1.129
Median total errors in population: 0
Error averages by case: (0.067 0.217 0.066 0.071 0.071 0.066 0.065 0.221 0.218 0.067)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.885
Average program size in population (points): 84.86
Average percent parens in population: 0.223
Minimum age in population: 23.8798828125
Maximum age in population: 26.72390747070312
Average age in population: 25.10981140136719
Median age in population: 25.16122436523438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 18888007
--- Timings ---
Current time: 1559314487639 milliseconds
Total Time:          63.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.0 seconds, 53.4%
Fitness Testing:     18.4 seconds, 28.9%
Report:              11.2 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 90


Auto-simplifying with starting size: 90
step: 0
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 500
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 1000
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 1500
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 2000
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 2500
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 3000
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 3500
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 4000
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 4500
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 5000
program: (in3 boolean_swap exec_k_when_autoconstructing (integer_lte exec_when (in1 integer_min exec_when (in4 integer_min exec_k_when_autoconstructing (integer_yankdup print_integer exec_if (integer_eq exec_dup (exec_yank) integer_dup_items integer_lte integer_swap) (exec_eq) exec_flush boolean_dup_items tag_boolean_556 integer_dup_items integer_mod integer_eq exec_dup_items) (print_integer boolean_and integer_gt integer_dup_items boolean_invert_second_then_and integer_stackdepth integer_empty exec_swap (integer_fromboolean boolean_dup_items boolean_dup_times boolean_and exec_stackdepth) (exec_swap (integer_rot) (integer_flush boolean_pop integer_swap integer_gt boolean_xor tagged_537 boolean_empty boolean_pop exec_y (integer_mult integer_pop boolean_empty boolean_pop exec_y (integer_mult integer_pop integer_yank) exec_s_when_autoconstructing () (in1 exec_stackdepth) (integer_eq) exec_eq boolean_stackdepth tag_boolean_515 exec_do*count (integer_gte integer_div)))))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 205
Test mean error for best: 0.20500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: 79                 
Correct output: -63                 | Program output: -63                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: 55                  | Program output: 87                 
Correct output: -57                 | Program output: -57                
Correct output: -48                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: 25                  | Program output: 25                 
Correct output: -20                 | Program output: -20                
Correct output: -38                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 42                  | Program output: 44                 
Correct output: 16                  | Program output: 67                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 16                  | Program output: 16                 
Correct output: 50                  | Program output: 51                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 50                 
Correct output: -48                 | Program output: 28                 
Correct output: -37                 | Program output: -37                
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -58                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: 24                  | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -67                
Correct output: -41                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: -11                
Correct output: -25                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -80                 | Program output: -48                
Correct output: -50                 | Program output: -40                
Correct output: 59                  | Program output: 59                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 27                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: 60                  | Program output: 60                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -31                 | Program output: -31                
Correct output: -53                 | Program output: -53                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 40                 
Correct output: -40                 | Program output: -40                
Correct output: -87                 | Program output: 16                 
Correct output: -1                  | Program output: -1                 
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -30                
Correct output: -100                | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -73                
Correct output: -58                 | Program output: 2                  
Correct output: -33                 | Program output: 30                 
Correct output: -75                 | Program output: -50                
;;******************************
